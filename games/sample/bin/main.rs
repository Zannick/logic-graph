//! AUTOGENERATED FOR sample - MODIFICATIONS WILL BE LOST

use analyzer::access::*;
use analyzer::cli::*;
use analyzer::solutions::SolutionSuffix;
use analyzer::world::World;
use analyzer::CommonHasher;
use clap::Parser;
use libsample::observe::ObservationMatcher;
use libsample::settings;
use log4rs;
use std::collections::HashSet;
use std::path::PathBuf;

fn main() -> Result<(), std::io::Error> {
    let args = Cli::parse();
    log4rs::init_file(
        args.logconfig().unwrap_or(&PathBuf::from("settings/log4rs.yml")),
        Default::default()
    ).unwrap();
    let (world, context, routes) =
        settings::load_settings(args.settings_file());
    if let Err(items) = can_win_just_items(world.as_ref(), &context) {
        panic!("Available items not enough to complete ruleset {}: missing {:?}",
               world.ruleset(), items);
    }
    run::<_, _, ObservationMatcher<SolutionSuffix<_>, HashSet<SolutionSuffix<_>, CommonHasher>>>(world.as_ref(), context, routes, &args)
}
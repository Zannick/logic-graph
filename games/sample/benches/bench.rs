//! AUTOGENERATED FOR sample - MODIFICATIONS WILL BE LOST

#![allow(unused)]

use analyzer::access::*;
use analyzer::cli::read_from_file;
use analyzer::context::*;
use analyzer::estimates::ContextScorer;
use analyzer::greedy::*;
use analyzer::matchertrie::MatcherTrie;
use analyzer::observer::record_observations;
use analyzer::route::route_from_string;
use analyzer::solutions::{Solution, SolutionSuffix};
use analyzer::world::World as _;
use analyzer::CommonHasher;
use criterion::{black_box, criterion_group, criterion_main, BatchSize, Criterion};
use enum_map::EnumMap;
use libsample::context::Context;
use libsample::graph::{RuleVictory, World};
use libsample::items::Item;
use libsample::observe::ObservationMatcher;
use rustc_hash::FxHashSet;
use std::collections::HashSet;
use std::path::PathBuf;
use std::sync::Arc;

pub fn criterion_benchmark(c: &mut Criterion) {
    let mut world = World::new();
    world.condense_graph();
    world.update_skippable_locations();
    let mut ctx = Context::default();
    c.bench_function("can_win_from_scratch", |b| {
        b.iter(|| can_win(&*world, &ctx, u32::MAX))
    });

    let ctx = ContextWrapper::new(Context::default());
    c.bench_function("greedy search", |b| {
        b.iter(|| greedy_search(&*world, &ctx, u32::MAX, 2))
    });

    let mut dir = PathBuf::from(file!());
    dir.pop();
    dir.pop();
    dir.push("routes");
    let mut routes = Vec::new();
    for entry in std::fs::read_dir(dir).unwrap() {
        let path = entry.unwrap().path();
        let ext = path.extension().and_then(|s| s.to_str());
        if matches!(ext, Some("txt")) {
            routes.push(read_from_file(&path));
        }
    }

    if !routes.is_empty() {
        let shortest_paths = ContextScorer::shortest_paths_tree_only(&*world, ctx.get());
        c.bench_function("load routes", |b| {
            b.iter(|| {
                for rstr in &routes {
                    route_from_string(&*world, ctx.get(), rstr, &shortest_paths).unwrap();
                }
            })
        });
    }

    if let Ok(win) = greedy_search(&*world, &ctx, u32::MAX, 2) {
        let sol = Arc::new(Solution {
            elapsed: win.elapsed(),
            history: win.recent_history().to_vec(),
        });
        c.bench_function("trie insert greedy search", |b| {
            b.iter_batched_ref(
                || {
                    MatcherTrie::<
                        ObservationMatcher<_, FxHashSet<SolutionSuffix<Context>>>,
                        _,
                    >::default()
                },
                |trie| record_observations(ctx.get(), &*world, sol.clone(), 1, trie),
                BatchSize::SmallInput,
            );
        });
        c.bench_function("replay solution", |b| {
            b.iter(|| {
                let mut c2 = ctx.clone();
                for step in &sol.history {
                    c2.assert_and_replay(&*world, *step);
                }
            });
        });
    }
}

criterion_group! {
    name = benches;
    config = Criterion::default().sample_size(250);
    targets = criterion_benchmark
}
criterion_main!(benches);

//! AUTOGENERATED FOR sample - MODIFICATIONS WILL BE LOST

#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::{Context, data, enums, flags};
use crate::graph::{self, *};
use crate::items::Item;
use crate::movements;
use crate::prices::Currency;
use crate::rules;
use analyzer::matchertrie::*;
use analyzer::observer::*;
use analyzer::solutions::{Solution, SolutionSuffix};
use std::hash::Hash;
use std::sync::{Arc, Mutex};

#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub enum OneObservation {
    Position(SpotId),
    Tod(enums::Tod),
    RupeesExact(i32),
    RupeesEq(i32, bool),
    RupeesGe(i32, bool),
    RupeesLe(i32, bool),
    RupeesRange(i32, i32, bool),
    // items
    GoldSkulltulaTokenExact(i8),
    GoldSkulltulaTokenEq(i8, bool),
    GoldSkulltulaTokenGe(i8, bool),
    GoldSkulltulaTokenLe(i8, bool),
    GoldSkulltulaTokenRange(i8, i8, bool),
    ProgressiveWalletExact(i8),
    ProgressiveWalletEq(i8, bool),
    ProgressiveWalletGe(i8, bool),
    ProgressiveWalletLe(i8, bool),
    ProgressiveWalletRange(i8, i8, bool),
    TriforcePieceExact(i16),
    TriforcePieceEq(i16, bool),
    TriforcePieceGe(i16, bool),
    TriforcePieceLe(i16, bool),
    TriforcePieceRange(i16, i16, bool),
    // bitflags
    CBits1{ mask: flags::ContextBits1, result: flags::ContextBits1 },
    CBits2{ mask: flags::ContextBits2, result: flags::ContextBits2 },
}

impl OneObservation {
    pub fn matches(&self, ctx: &Context) -> bool {
        match *self {
            OneObservation::Position(v) => ctx.position == v,
            OneObservation::Tod(v) => ctx.tod == v,
            OneObservation::RupeesExact(v) => ctx.rupees == v,
            OneObservation::RupeesEq(v, res) => (ctx.rupees == v) == res,
            OneObservation::RupeesGe(v, res) => (ctx.rupees >= v) == res,
            OneObservation::RupeesLe(v, res) => (ctx.rupees <= v) == res,
            OneObservation::RupeesRange(lo, hi, res) => (ctx.rupees >= lo && ctx.rupees <= hi) == res,
            OneObservation::GoldSkulltulaTokenExact(v) => ctx.gold_skulltula_token == v,
            OneObservation::GoldSkulltulaTokenEq(v, res) => (ctx.gold_skulltula_token == v) == res,
            OneObservation::GoldSkulltulaTokenGe(v, res) => (ctx.gold_skulltula_token >= v) == res,
            OneObservation::GoldSkulltulaTokenLe(v, res) => (ctx.gold_skulltula_token <= v) == res,
            OneObservation::GoldSkulltulaTokenRange(lo, hi, res) => (ctx.gold_skulltula_token >= lo && ctx.gold_skulltula_token <= hi) == res,
            OneObservation::ProgressiveWalletExact(v) => ctx.progressive_wallet == v,
            OneObservation::ProgressiveWalletEq(v, res) => (ctx.progressive_wallet == v) == res,
            OneObservation::ProgressiveWalletGe(v, res) => (ctx.progressive_wallet >= v) == res,
            OneObservation::ProgressiveWalletLe(v, res) => (ctx.progressive_wallet <= v) == res,
            OneObservation::ProgressiveWalletRange(lo, hi, res) => (ctx.progressive_wallet >= lo && ctx.progressive_wallet <= hi) == res,
            OneObservation::TriforcePieceExact(v) => ctx.triforce_piece == v,
            OneObservation::TriforcePieceEq(v, res) => (ctx.triforce_piece == v) == res,
            OneObservation::TriforcePieceGe(v, res) => (ctx.triforce_piece >= v) == res,
            OneObservation::TriforcePieceLe(v, res) => (ctx.triforce_piece <= v) == res,
            OneObservation::TriforcePieceRange(lo, hi, res) => (ctx.triforce_piece >= lo && ctx.triforce_piece <= hi) == res,
            OneObservation::CBits1{ mask, result } => (ctx.cbits1 & mask) == result,
            OneObservation::CBits2{ mask, result } => (ctx.cbits2 & mask) == result,
        }
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq)]
enum ObservationType {
    Visit(LocationId),
    ObservePosition,
    ClearPosition,
    ObserveChild,
    ClearChild,
    ObserveTod,
    ClearTod,
    ObserveRupees(IntegerObservation<i32>),
    ShiftRupees(i32),
    ClearRupees,
    ObserveDekuTreeCompassRoomCtxTorch,
    ClearDekuTreeCompassRoomCtxTorch,
    ObserveBiggoronSword,
    ClearBiggoronSword,
    ObserveBombs,
    ClearBombs,
    ObserveBoomerang,
    ClearBoomerang,
    ObserveBow,
    ClearBow,
    ObserveBuyDekuNut10,
    ClearBuyDekuNut10,
    ObserveBuyDekuNut5,
    ClearBuyDekuNut5,
    ObserveBuyDekuShield,
    ClearBuyDekuShield,
    ObserveBuyDekuStick1,
    ClearBuyDekuStick1,
    ObserveDefeatGanon,
    ClearDefeatGanon,
    ObserveDefeatGohma,
    ClearDefeatGohma,
    ObserveDekuBackRoomWall,
    ClearDekuBackRoomWall,
    ObserveDekuBackRoomWeb,
    ClearDekuBackRoomWeb,
    ObserveDekuBasementBlock,
    ClearDekuBasementBlock,
    ObserveDekuBasementScrubs,
    ClearDekuBasementScrubs,
    ObserveDekuBasementSwitch,
    ClearDekuBasementSwitch,
    ObserveDekuBasementWeb,
    ClearDekuBasementWeb,
    ObserveDekuLobbyWeb,
    ClearDekuLobbyWeb,
    ObserveDekuNutDrop,
    ClearDekuNutDrop,
    ObserveDekuShieldDrop,
    ClearDekuShieldDrop,
    ObserveDekuSlingshotScrub,
    ClearDekuSlingshotScrub,
    ObserveDekuStickDrop,
    ClearDekuStickDrop,
    ObserveGoldSkulltulaToken(IntegerObservation<i8>),
    ShiftGoldSkulltulaToken(i8),
    ClearGoldSkulltulaToken,
    ObserveHylianShield,
    ClearHylianShield,
    ObserveKokiriEmerald,
    ClearKokiriEmerald,
    ObserveKokiriSword,
    ClearKokiriSword,
    ObserveMagicMeter,
    ClearMagicMeter,
    ObserveOcarina,
    ClearOcarina,
    ObserveProgressiveWallet(IntegerObservation<i8>),
    ShiftProgressiveWallet(i8),
    ClearProgressiveWallet,
    ObserveShowedMido,
    ClearShowedMido,
    ObserveSlingshot,
    ClearSlingshot,
    ObserveTriforcePiece(IntegerObservation<i16>),
    ShiftTriforcePiece(i16),
    ClearTriforcePiece,
    ObserveVictory,
    ClearVictory,
}


#[derive(Debug, Default)]
pub struct FullObservation {
    // context vars: observed or not. Ints get comparisons as well but they are observed-as-true comparisons,
    // or otherwise partitioned as exact

    position: bool,
    tod: bool,
    rupees: IntegerObservation<i32>,
    // items
    gold_skulltula_token: IntegerObservation<i8>,
    progressive_wallet: IntegerObservation<i8>,
    triforce_piece: IntegerObservation<i16>,
    // bitflags: optionally a mask
    cbits1: flags::ContextBits1,
    cbits2: flags::ContextBits2,
    stack: Vec<ObservationType>,
    pub strict: bool,
}

impl Observer for FullObservation {
    type Ctx = Context;

    fn from_victory_state(won: &Context, world: &World) -> Self {
        let mut full_obs = Self::default();
        full_obs.position = true;
        match world.rule_victory {
            RuleVictory::Default => {
                rules::observe_access___victory_invoke_objective(won, world, &mut full_obs);
            }
        }
        full_obs
    }

    fn observe_visited(&mut self, loc_id: LocationId) {
        self.stack.push(ObservationType::Visit(loc_id));
    }

    fn observe_item(&mut self, item: Item) {
        match item {
            Item::Biggoron_Sword => self.clear_biggoron_sword(),
            Item::Bombs => self.clear_bombs(),
            Item::Boomerang => self.clear_boomerang(),
            Item::Bow => self.clear_bow(),
            Item::Buy_Deku_Nut_10 => self.clear_buy_deku_nut_10(),
            Item::Buy_Deku_Nut_5 => self.clear_buy_deku_nut_5(),
            Item::Buy_Deku_Shield => self.clear_buy_deku_shield(),
            Item::Buy_Deku_Stick_1 => self.clear_buy_deku_stick_1(),
            Item::Defeat_Ganon => self.clear_defeat_ganon(),
            Item::Defeat_Gohma => self.clear_defeat_gohma(),
            Item::Deku_Back_Room_Wall => self.clear_deku_back_room_wall(),
            Item::Deku_Back_Room_Web => self.clear_deku_back_room_web(),
            Item::Deku_Basement_Block => self.clear_deku_basement_block(),
            Item::Deku_Basement_Scrubs => self.clear_deku_basement_scrubs(),
            Item::Deku_Basement_Switch => self.clear_deku_basement_switch(),
            Item::Deku_Basement_Web => self.clear_deku_basement_web(),
            Item::Deku_Lobby_Web => self.clear_deku_lobby_web(),
            Item::Deku_Nut_Drop => self.clear_deku_nut_drop(),
            Item::Deku_Shield_Drop => self.clear_deku_shield_drop(),
            Item::Deku_Slingshot_Scrub => self.clear_deku_slingshot_scrub(),
            Item::Deku_Stick_Drop => self.clear_deku_stick_drop(),
            Item::Gold_Skulltula_Token => self.observe_shift_gold_skulltula_token(1),
            Item::Hylian_Shield => self.clear_hylian_shield(),
            Item::Kokiri_Emerald => self.clear_kokiri_emerald(),
            Item::Kokiri_Sword => self.clear_kokiri_sword(),
            Item::Magic_Meter => self.clear_magic_meter(),
            Item::Ocarina => self.clear_ocarina(),
            Item::Progressive_Wallet => self.observe_shift_progressive_wallet(1),
            Item::Showed_Mido => self.clear_showed_mido(),
            Item::Slingshot => self.clear_slingshot(),
            Item::Triforce_Piece => self.observe_shift_triforce_piece(1),
            Item::Victory => self.clear_victory(),
            _ => (),
        }
    }

    fn apply_observations(&mut self) {
        while let Some(obs) = self.stack.pop() {
            match obs {
                ObservationType::Visit(loc_id) => self.apply_visit(loc_id),
                ObservationType::ObservePosition => self.apply_observe_position(),
                ObservationType::ClearPosition => self.apply_clear_position(),
                ObservationType::ObserveChild => self.apply_observe_child(),
                ObservationType::ClearChild => self.apply_clear_child(),
                ObservationType::ObserveTod => self.apply_observe_tod(),
                ObservationType::ClearTod => self.apply_clear_tod(),
                ObservationType::ObserveRupees(iobs) => self.apply_observe_rupees(iobs),
                ObservationType::ShiftRupees(diff) => self.apply_shift_rupees(diff),
                ObservationType::ClearRupees => self.apply_clear_rupees(),
                ObservationType::ObserveDekuTreeCompassRoomCtxTorch => self.apply_observe_deku_tree__compass_room__ctx__torch(),
                ObservationType::ClearDekuTreeCompassRoomCtxTorch => self.apply_clear_deku_tree__compass_room__ctx__torch(),
                ObservationType::ObserveBiggoronSword => self.apply_observe_biggoron_sword(),
                ObservationType::ClearBiggoronSword => self.apply_clear_biggoron_sword(),
                ObservationType::ObserveBombs => self.apply_observe_bombs(),
                ObservationType::ClearBombs => self.apply_clear_bombs(),
                ObservationType::ObserveBoomerang => self.apply_observe_boomerang(),
                ObservationType::ClearBoomerang => self.apply_clear_boomerang(),
                ObservationType::ObserveBow => self.apply_observe_bow(),
                ObservationType::ClearBow => self.apply_clear_bow(),
                ObservationType::ObserveBuyDekuNut10 => self.apply_observe_buy_deku_nut_10(),
                ObservationType::ClearBuyDekuNut10 => self.apply_clear_buy_deku_nut_10(),
                ObservationType::ObserveBuyDekuNut5 => self.apply_observe_buy_deku_nut_5(),
                ObservationType::ClearBuyDekuNut5 => self.apply_clear_buy_deku_nut_5(),
                ObservationType::ObserveBuyDekuShield => self.apply_observe_buy_deku_shield(),
                ObservationType::ClearBuyDekuShield => self.apply_clear_buy_deku_shield(),
                ObservationType::ObserveBuyDekuStick1 => self.apply_observe_buy_deku_stick_1(),
                ObservationType::ClearBuyDekuStick1 => self.apply_clear_buy_deku_stick_1(),
                ObservationType::ObserveDefeatGanon => self.apply_observe_defeat_ganon(),
                ObservationType::ClearDefeatGanon => self.apply_clear_defeat_ganon(),
                ObservationType::ObserveDefeatGohma => self.apply_observe_defeat_gohma(),
                ObservationType::ClearDefeatGohma => self.apply_clear_defeat_gohma(),
                ObservationType::ObserveDekuBackRoomWall => self.apply_observe_deku_back_room_wall(),
                ObservationType::ClearDekuBackRoomWall => self.apply_clear_deku_back_room_wall(),
                ObservationType::ObserveDekuBackRoomWeb => self.apply_observe_deku_back_room_web(),
                ObservationType::ClearDekuBackRoomWeb => self.apply_clear_deku_back_room_web(),
                ObservationType::ObserveDekuBasementBlock => self.apply_observe_deku_basement_block(),
                ObservationType::ClearDekuBasementBlock => self.apply_clear_deku_basement_block(),
                ObservationType::ObserveDekuBasementScrubs => self.apply_observe_deku_basement_scrubs(),
                ObservationType::ClearDekuBasementScrubs => self.apply_clear_deku_basement_scrubs(),
                ObservationType::ObserveDekuBasementSwitch => self.apply_observe_deku_basement_switch(),
                ObservationType::ClearDekuBasementSwitch => self.apply_clear_deku_basement_switch(),
                ObservationType::ObserveDekuBasementWeb => self.apply_observe_deku_basement_web(),
                ObservationType::ClearDekuBasementWeb => self.apply_clear_deku_basement_web(),
                ObservationType::ObserveDekuLobbyWeb => self.apply_observe_deku_lobby_web(),
                ObservationType::ClearDekuLobbyWeb => self.apply_clear_deku_lobby_web(),
                ObservationType::ObserveDekuNutDrop => self.apply_observe_deku_nut_drop(),
                ObservationType::ClearDekuNutDrop => self.apply_clear_deku_nut_drop(),
                ObservationType::ObserveDekuShieldDrop => self.apply_observe_deku_shield_drop(),
                ObservationType::ClearDekuShieldDrop => self.apply_clear_deku_shield_drop(),
                ObservationType::ObserveDekuSlingshotScrub => self.apply_observe_deku_slingshot_scrub(),
                ObservationType::ClearDekuSlingshotScrub => self.apply_clear_deku_slingshot_scrub(),
                ObservationType::ObserveDekuStickDrop => self.apply_observe_deku_stick_drop(),
                ObservationType::ClearDekuStickDrop => self.apply_clear_deku_stick_drop(),
                ObservationType::ObserveGoldSkulltulaToken(iobs) => self.apply_observe_gold_skulltula_token(iobs),
                ObservationType::ShiftGoldSkulltulaToken(iobs) => self.apply_shift_gold_skulltula_token(iobs),
                ObservationType::ClearGoldSkulltulaToken => self.apply_clear_gold_skulltula_token(),
                ObservationType::ObserveHylianShield => self.apply_observe_hylian_shield(),
                ObservationType::ClearHylianShield => self.apply_clear_hylian_shield(),
                ObservationType::ObserveKokiriEmerald => self.apply_observe_kokiri_emerald(),
                ObservationType::ClearKokiriEmerald => self.apply_clear_kokiri_emerald(),
                ObservationType::ObserveKokiriSword => self.apply_observe_kokiri_sword(),
                ObservationType::ClearKokiriSword => self.apply_clear_kokiri_sword(),
                ObservationType::ObserveMagicMeter => self.apply_observe_magic_meter(),
                ObservationType::ClearMagicMeter => self.apply_clear_magic_meter(),
                ObservationType::ObserveOcarina => self.apply_observe_ocarina(),
                ObservationType::ClearOcarina => self.apply_clear_ocarina(),
                ObservationType::ObserveProgressiveWallet(iobs) => self.apply_observe_progressive_wallet(iobs),
                ObservationType::ShiftProgressiveWallet(iobs) => self.apply_shift_progressive_wallet(iobs),
                ObservationType::ClearProgressiveWallet => self.apply_clear_progressive_wallet(),
                ObservationType::ObserveShowedMido => self.apply_observe_showed_mido(),
                ObservationType::ClearShowedMido => self.apply_clear_showed_mido(),
                ObservationType::ObserveSlingshot => self.apply_observe_slingshot(),
                ObservationType::ClearSlingshot => self.apply_clear_slingshot(),
                ObservationType::ObserveTriforcePiece(iobs) => self.apply_observe_triforce_piece(iobs),
                ObservationType::ShiftTriforcePiece(iobs) => self.apply_shift_triforce_piece(iobs),
                ObservationType::ClearTriforcePiece => self.apply_clear_triforce_piece(),
                ObservationType::ObserveVictory => self.apply_observe_victory(),
                ObservationType::ClearVictory => self.apply_clear_victory(),
            }
        }
    }

    fn to_vec(&self, ctx: &Context) -> Vec<OneObservation> {
        let mut vec = Vec::with_capacity(self.fields_observed());
            if self.position {
                vec.push(OneObservation::Position(ctx.position));
            }
            if self.tod {
                vec.push(OneObservation::Tod(ctx.tod));
            }
            match self.rupees {
                IntegerObservation::Unknown => (),
                IntegerObservation::Exact => vec.push(OneObservation::RupeesExact(ctx.rupees)),
                IntegerObservation::Eq(i) => vec.push(OneObservation::RupeesEq(i, ctx.rupees == i)),
                IntegerObservation::Ge(i) => vec.push(OneObservation::RupeesGe(i, ctx.rupees >= i)),
                IntegerObservation::Le(i) => vec.push(OneObservation::RupeesLe(i, ctx.rupees <= i)),
                IntegerObservation::Range(lo, hi) => vec.push(OneObservation::RupeesRange(lo, hi, ctx.rupees >= lo && ctx.rupees <= hi)),
            }
            match self.gold_skulltula_token {
                IntegerObservation::Unknown => (),
                IntegerObservation::Exact => vec.push(OneObservation::GoldSkulltulaTokenExact(ctx.gold_skulltula_token)),
                IntegerObservation::Eq(i) => vec.push(OneObservation::GoldSkulltulaTokenEq(i, ctx.gold_skulltula_token == i)),
                IntegerObservation::Ge(i) => vec.push(OneObservation::GoldSkulltulaTokenGe(i, ctx.gold_skulltula_token >= i)),
                IntegerObservation::Le(i) => vec.push(OneObservation::GoldSkulltulaTokenLe(i, ctx.gold_skulltula_token <= i)),
                IntegerObservation::Range(lo, hi) => vec.push(OneObservation::GoldSkulltulaTokenRange(lo, hi, ctx.gold_skulltula_token >= lo && ctx.gold_skulltula_token <= hi)),
            }
            match self.progressive_wallet {
                IntegerObservation::Unknown => (),
                IntegerObservation::Exact => vec.push(OneObservation::ProgressiveWalletExact(ctx.progressive_wallet)),
                IntegerObservation::Eq(i) => vec.push(OneObservation::ProgressiveWalletEq(i, ctx.progressive_wallet == i)),
                IntegerObservation::Ge(i) => vec.push(OneObservation::ProgressiveWalletGe(i, ctx.progressive_wallet >= i)),
                IntegerObservation::Le(i) => vec.push(OneObservation::ProgressiveWalletLe(i, ctx.progressive_wallet <= i)),
                IntegerObservation::Range(lo, hi) => vec.push(OneObservation::ProgressiveWalletRange(lo, hi, ctx.progressive_wallet >= lo && ctx.progressive_wallet <= hi)),
            }
            match self.triforce_piece {
                IntegerObservation::Unknown => (),
                IntegerObservation::Exact => vec.push(OneObservation::TriforcePieceExact(ctx.triforce_piece)),
                IntegerObservation::Eq(i) => vec.push(OneObservation::TriforcePieceEq(i, ctx.triforce_piece == i)),
                IntegerObservation::Ge(i) => vec.push(OneObservation::TriforcePieceGe(i, ctx.triforce_piece >= i)),
                IntegerObservation::Le(i) => vec.push(OneObservation::TriforcePieceLe(i, ctx.triforce_piece <= i)),
                IntegerObservation::Range(lo, hi) => vec.push(OneObservation::TriforcePieceRange(lo, hi, ctx.triforce_piece >= lo && ctx.triforce_piece <= hi)),
            }
            if !self.cbits1.is_empty() {
                vec.push(OneObservation::CBits1{ mask: self.cbits1, result: self.cbits1 & ctx.cbits1 });
            }
            if !self.cbits2.is_empty() {
                vec.push(OneObservation::CBits2{ mask: self.cbits2, result: self.cbits2 & ctx.cbits2 });
            }
        vec
    }
}

impl FullObservation {
    fn fields_observed(&self) -> usize {
        let mut fields = 0;
        if self.position { fields += 1; }
        if self.tod { fields += 1; }
        if self.rupees != IntegerObservation::Unknown { fields += 1; }
        if self.gold_skulltula_token != IntegerObservation::Unknown { fields += 1; }
        if self.progressive_wallet != IntegerObservation::Unknown { fields += 1; }
        if self.triforce_piece != IntegerObservation::Unknown { fields += 1; }
        if !self.cbits1.is_empty() { fields += 1; }
        if !self.cbits2.is_empty() { fields += 1; }
        fields
    }

    pub fn observe_has_item(&mut self, item: Item) {
        match item {
            Item::Biggoron_Sword => self.observe_biggoron_sword(),
            Item::Bombs => self.observe_bombs(),
            Item::Boomerang => self.observe_boomerang(),
            Item::Bow => self.observe_bow(),
            Item::Buy_Deku_Nut_10 => self.observe_buy_deku_nut_10(),
            Item::Buy_Deku_Nut_5 => self.observe_buy_deku_nut_5(),
            Item::Buy_Deku_Shield => self.observe_buy_deku_shield(),
            Item::Buy_Deku_Stick_1 => self.observe_buy_deku_stick_1(),
            Item::Defeat_Ganon => self.observe_defeat_ganon(),
            Item::Defeat_Gohma => self.observe_defeat_gohma(),
            Item::Deku_Back_Room_Wall => self.observe_deku_back_room_wall(),
            Item::Deku_Back_Room_Web => self.observe_deku_back_room_web(),
            Item::Deku_Basement_Block => self.observe_deku_basement_block(),
            Item::Deku_Basement_Scrubs => self.observe_deku_basement_scrubs(),
            Item::Deku_Basement_Switch => self.observe_deku_basement_switch(),
            Item::Deku_Basement_Web => self.observe_deku_basement_web(),
            Item::Deku_Lobby_Web => self.observe_deku_lobby_web(),
            Item::Deku_Nut_Drop => self.observe_deku_nut_drop(),
            Item::Deku_Shield_Drop => self.observe_deku_shield_drop(),
            Item::Deku_Slingshot_Scrub => self.observe_deku_slingshot_scrub(),
            Item::Deku_Stick_Drop => self.observe_deku_stick_drop(),
            Item::Gold_Skulltula_Token => self.observe_gold_skulltula_token(IntegerObservation::Ge(1)),
            Item::Hylian_Shield => self.observe_hylian_shield(),
            Item::Kokiri_Emerald => self.observe_kokiri_emerald(),
            Item::Kokiri_Sword => self.observe_kokiri_sword(),
            Item::Magic_Meter => self.observe_magic_meter(),
            Item::Ocarina => self.observe_ocarina(),
            Item::Progressive_Wallet => self.observe_progressive_wallet(IntegerObservation::Ge(1)),
            Item::Showed_Mido => self.observe_showed_mido(),
            Item::Slingshot => self.observe_slingshot(),
            Item::Triforce_Piece => self.observe_triforce_piece(IntegerObservation::Ge(1)),
            Item::Victory => self.observe_victory(),
            _ => (),
        }
    }

    pub fn observe_position(&mut self) {
        self.stack.push(ObservationType::ObservePosition);
    }
    pub fn clear_position(&mut self) {
        self.stack.push(ObservationType::ClearPosition);
    }
    pub fn observe_child(&mut self) {
        self.stack.push(ObservationType::ObserveChild);
    }
    pub fn clear_child(&mut self) {
        self.stack.push(ObservationType::ClearChild);
    }
    pub fn observe_tod(&mut self) {
        self.stack.push(ObservationType::ObserveTod);
    }
    pub fn clear_tod(&mut self) {
        self.stack.push(ObservationType::ClearTod);
    }
    pub fn observe_rupees(&mut self, obs: IntegerObservation<i32>) {
        self.stack.push(ObservationType::ObserveRupees(if self.strict { IntegerObservation::Exact } else { obs }));
    }
    pub fn observe_shift_rupees(&mut self, diff: i32) {
        self.stack.push(ObservationType::ShiftRupees(diff));
    }
    pub fn clear_rupees(&mut self) {
        self.stack.push(ObservationType::ClearRupees);
    }
    pub fn observe_deku_tree__compass_room__ctx__torch(&mut self) {
        self.stack.push(ObservationType::ObserveDekuTreeCompassRoomCtxTorch);
    }
    pub fn clear_deku_tree__compass_room__ctx__torch(&mut self) {
        self.stack.push(ObservationType::ClearDekuTreeCompassRoomCtxTorch);
    }
    pub fn observe_biggoron_sword(&mut self) {
        self.stack.push(ObservationType::ObserveBiggoronSword);
    }
    pub fn clear_biggoron_sword(&mut self) {
        self.stack.push(ObservationType::ClearBiggoronSword);
    }
    pub fn observe_bombs(&mut self) {
        self.stack.push(ObservationType::ObserveBombs);
    }
    pub fn clear_bombs(&mut self) {
        self.stack.push(ObservationType::ClearBombs);
    }
    pub fn observe_boomerang(&mut self) {
        self.stack.push(ObservationType::ObserveBoomerang);
    }
    pub fn clear_boomerang(&mut self) {
        self.stack.push(ObservationType::ClearBoomerang);
    }
    pub fn observe_bow(&mut self) {
        self.stack.push(ObservationType::ObserveBow);
    }
    pub fn clear_bow(&mut self) {
        self.stack.push(ObservationType::ClearBow);
    }
    pub fn observe_buy_deku_nut_10(&mut self) {
        self.stack.push(ObservationType::ObserveBuyDekuNut10);
    }
    pub fn clear_buy_deku_nut_10(&mut self) {
        self.stack.push(ObservationType::ClearBuyDekuNut10);
    }
    pub fn observe_buy_deku_nut_5(&mut self) {
        self.stack.push(ObservationType::ObserveBuyDekuNut5);
    }
    pub fn clear_buy_deku_nut_5(&mut self) {
        self.stack.push(ObservationType::ClearBuyDekuNut5);
    }
    pub fn observe_buy_deku_shield(&mut self) {
        self.stack.push(ObservationType::ObserveBuyDekuShield);
    }
    pub fn clear_buy_deku_shield(&mut self) {
        self.stack.push(ObservationType::ClearBuyDekuShield);
    }
    pub fn observe_buy_deku_stick_1(&mut self) {
        self.stack.push(ObservationType::ObserveBuyDekuStick1);
    }
    pub fn clear_buy_deku_stick_1(&mut self) {
        self.stack.push(ObservationType::ClearBuyDekuStick1);
    }
    pub fn observe_defeat_ganon(&mut self) {
        self.stack.push(ObservationType::ObserveDefeatGanon);
    }
    pub fn clear_defeat_ganon(&mut self) {
        self.stack.push(ObservationType::ClearDefeatGanon);
    }
    pub fn observe_defeat_gohma(&mut self) {
        self.stack.push(ObservationType::ObserveDefeatGohma);
    }
    pub fn clear_defeat_gohma(&mut self) {
        self.stack.push(ObservationType::ClearDefeatGohma);
    }
    pub fn observe_deku_back_room_wall(&mut self) {
        self.stack.push(ObservationType::ObserveDekuBackRoomWall);
    }
    pub fn clear_deku_back_room_wall(&mut self) {
        self.stack.push(ObservationType::ClearDekuBackRoomWall);
    }
    pub fn observe_deku_back_room_web(&mut self) {
        self.stack.push(ObservationType::ObserveDekuBackRoomWeb);
    }
    pub fn clear_deku_back_room_web(&mut self) {
        self.stack.push(ObservationType::ClearDekuBackRoomWeb);
    }
    pub fn observe_deku_basement_block(&mut self) {
        self.stack.push(ObservationType::ObserveDekuBasementBlock);
    }
    pub fn clear_deku_basement_block(&mut self) {
        self.stack.push(ObservationType::ClearDekuBasementBlock);
    }
    pub fn observe_deku_basement_scrubs(&mut self) {
        self.stack.push(ObservationType::ObserveDekuBasementScrubs);
    }
    pub fn clear_deku_basement_scrubs(&mut self) {
        self.stack.push(ObservationType::ClearDekuBasementScrubs);
    }
    pub fn observe_deku_basement_switch(&mut self) {
        self.stack.push(ObservationType::ObserveDekuBasementSwitch);
    }
    pub fn clear_deku_basement_switch(&mut self) {
        self.stack.push(ObservationType::ClearDekuBasementSwitch);
    }
    pub fn observe_deku_basement_web(&mut self) {
        self.stack.push(ObservationType::ObserveDekuBasementWeb);
    }
    pub fn clear_deku_basement_web(&mut self) {
        self.stack.push(ObservationType::ClearDekuBasementWeb);
    }
    pub fn observe_deku_lobby_web(&mut self) {
        self.stack.push(ObservationType::ObserveDekuLobbyWeb);
    }
    pub fn clear_deku_lobby_web(&mut self) {
        self.stack.push(ObservationType::ClearDekuLobbyWeb);
    }
    pub fn observe_deku_nut_drop(&mut self) {
        self.stack.push(ObservationType::ObserveDekuNutDrop);
    }
    pub fn clear_deku_nut_drop(&mut self) {
        self.stack.push(ObservationType::ClearDekuNutDrop);
    }
    pub fn observe_deku_shield_drop(&mut self) {
        self.stack.push(ObservationType::ObserveDekuShieldDrop);
    }
    pub fn clear_deku_shield_drop(&mut self) {
        self.stack.push(ObservationType::ClearDekuShieldDrop);
    }
    pub fn observe_deku_slingshot_scrub(&mut self) {
        self.stack.push(ObservationType::ObserveDekuSlingshotScrub);
    }
    pub fn clear_deku_slingshot_scrub(&mut self) {
        self.stack.push(ObservationType::ClearDekuSlingshotScrub);
    }
    pub fn observe_deku_stick_drop(&mut self) {
        self.stack.push(ObservationType::ObserveDekuStickDrop);
    }
    pub fn clear_deku_stick_drop(&mut self) {
        self.stack.push(ObservationType::ClearDekuStickDrop);
    }
    pub fn observe_gold_skulltula_token(&mut self, obs: IntegerObservation<i8>) {
        self.stack.push(ObservationType::ObserveGoldSkulltulaToken(if self.strict { IntegerObservation::Exact } else { obs }));
    }
    pub fn observe_shift_gold_skulltula_token(&mut self, diff: i8) {
        self.stack.push(ObservationType::ShiftGoldSkulltulaToken(diff));
    }
    pub fn clear_gold_skulltula_token(&mut self) {
        self.stack.push(ObservationType::ClearGoldSkulltulaToken);
    }
    pub fn observe_hylian_shield(&mut self) {
        self.stack.push(ObservationType::ObserveHylianShield);
    }
    pub fn clear_hylian_shield(&mut self) {
        self.stack.push(ObservationType::ClearHylianShield);
    }
    pub fn observe_kokiri_emerald(&mut self) {
        self.stack.push(ObservationType::ObserveKokiriEmerald);
    }
    pub fn clear_kokiri_emerald(&mut self) {
        self.stack.push(ObservationType::ClearKokiriEmerald);
    }
    pub fn observe_kokiri_sword(&mut self) {
        self.stack.push(ObservationType::ObserveKokiriSword);
    }
    pub fn clear_kokiri_sword(&mut self) {
        self.stack.push(ObservationType::ClearKokiriSword);
    }
    pub fn observe_magic_meter(&mut self) {
        self.stack.push(ObservationType::ObserveMagicMeter);
    }
    pub fn clear_magic_meter(&mut self) {
        self.stack.push(ObservationType::ClearMagicMeter);
    }
    pub fn observe_ocarina(&mut self) {
        self.stack.push(ObservationType::ObserveOcarina);
    }
    pub fn clear_ocarina(&mut self) {
        self.stack.push(ObservationType::ClearOcarina);
    }
    pub fn observe_progressive_wallet(&mut self, obs: IntegerObservation<i8>) {
        self.stack.push(ObservationType::ObserveProgressiveWallet(if self.strict { IntegerObservation::Exact } else { obs }));
    }
    pub fn observe_shift_progressive_wallet(&mut self, diff: i8) {
        self.stack.push(ObservationType::ShiftProgressiveWallet(diff));
    }
    pub fn clear_progressive_wallet(&mut self) {
        self.stack.push(ObservationType::ClearProgressiveWallet);
    }
    pub fn observe_showed_mido(&mut self) {
        self.stack.push(ObservationType::ObserveShowedMido);
    }
    pub fn clear_showed_mido(&mut self) {
        self.stack.push(ObservationType::ClearShowedMido);
    }
    pub fn observe_slingshot(&mut self) {
        self.stack.push(ObservationType::ObserveSlingshot);
    }
    pub fn clear_slingshot(&mut self) {
        self.stack.push(ObservationType::ClearSlingshot);
    }
    pub fn observe_triforce_piece(&mut self, obs: IntegerObservation<i16>) {
        self.stack.push(ObservationType::ObserveTriforcePiece(if self.strict { IntegerObservation::Exact } else { obs }));
    }
    pub fn observe_shift_triforce_piece(&mut self, diff: i16) {
        self.stack.push(ObservationType::ShiftTriforcePiece(diff));
    }
    pub fn clear_triforce_piece(&mut self) {
        self.stack.push(ObservationType::ClearTriforcePiece);
    }
    pub fn observe_victory(&mut self) {
        self.stack.push(ObservationType::ObserveVictory);
    }
    pub fn clear_victory(&mut self) {
        self.stack.push(ObservationType::ClearVictory);
    }
    fn apply_visit(&mut self, loc_id: LocationId) {
        match loc_id {
            LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Sticks => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_STICKS);
            }
            LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Nuts => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_NUTS);
            }
            LocationId::Deku_Tree__Lobby__Center__Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEKU_LOBBY_WEB);
            }
            LocationId::Deku_Tree__Floor_2__Vines__Map_Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__FLOOR_2__VINES__MAP_CHEST);
            }
            LocationId::Deku_Tree__Scrub_Room__Entry__Scrub => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SCRUB_ROOM__ENTRY__SCRUB);
            }
            LocationId::Deku_Tree__Slingshot_Room__Slingshot__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SLINGSHOT_ROOM__SLINGSHOT__CHEST);
            }
            LocationId::Deku_Tree__Slingshot_Upper__Ledge__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SLINGSHOT_UPPER__LEDGE__CHEST);
            }
            LocationId::Deku_Tree__Floor_3__Door__Break_Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEKU_LOBBY_WEB);
            }
            LocationId::Deku_Tree__Compass_Room__Entry__Burn_Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEKU_LOBBY_WEB);
            }
            LocationId::Deku_Tree__Compass_Room__Compass__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__COMPASS__CHEST);
            }
            LocationId::Deku_Tree__Compass_Room__Ledge__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__CHEST);
            }
            LocationId::Deku_Tree__Compass_Room__Ledge__GS => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__GS);
            }
            LocationId::Deku_Tree__Basement_1__Center__Vines_GS => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CENTER__VINES_GS);
            }
            LocationId::Deku_Tree__Basement_1__Corner__Switch => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__SWITCH);
            }
            LocationId::Deku_Tree__Basement_1__Corner__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__CHEST);
            }
            LocationId::Deku_Tree__Basement_1__Corner__Gate_GS => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__GATE_GS);
            }
            LocationId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEKU_BASEMENT_WEB);
            }
            LocationId::Deku_Tree__Back_Room__Northwest__Burn_Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BURN_WEB);
            }
            LocationId::Deku_Tree__Back_Room__Northwest__Break_Wall => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BREAK_WALL);
            }
            LocationId::Deku_Tree__Skull_Room__Entry__GS => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SKULL_ROOM__ENTRY__GS);
            }
            LocationId::Deku_Tree__Basement_Ledge__Block__Push_Block => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_LEDGE__BLOCK__PUSH_BLOCK);
            }
            LocationId::Deku_Tree__Basement_Ledge__Web__Burn_Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEKU_BASEMENT_WEB);
            }
            LocationId::Deku_Tree__Basement_2__Boss_Door__Scrubs => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_2__BOSS_DOOR__SCRUBS);
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEFEAT_GOHMA);
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Quick_Kill => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEFEAT_GOHMA);
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Heart => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__GOHMA_HEART);
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Blue_Warp => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__BLUE_WARP);
            }
            LocationId::KF__Kokiri_Village__Training_Center__Victory => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__KOKIRI_VILLAGE__TRAINING_CENTER__VICTORY);
            }
            LocationId::KF__Kokiri_Village__Midos_Guardpost__Show_Mido => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__KOKIRI_VILLAGE__MIDOS_GUARDPOST__SHOW_MIDO);
            }
            LocationId::KF__Boulder_Maze__Reward__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__BOULDER_MAZE__REWARD__CHEST);
            }
            LocationId::KF__Baba_Corridor__Deku_Babas__Sticks => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__STICKS);
            }
            LocationId::KF__Baba_Corridor__Deku_Babas__Nuts => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__NUTS);
            }
            LocationId::KF__Outside_Deku_Tree__Left__Gossip_Stone => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__OUTSIDE_DEKU_TREE__LEFT__GOSSIP_STONE);
            }
            LocationId::KF__Outside_Deku_Tree__Right__Gossip_Stone => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__OUTSIDE_DEKU_TREE__RIGHT__GOSSIP_STONE);
            }
            LocationId::KF__Midos_House__Entry__Top_Left_Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_LEFT_CHEST);
            }
            LocationId::KF__Midos_House__Entry__Top_Right_Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_RIGHT_CHEST);
            }
            LocationId::KF__Midos_House__Entry__Bottom_Left_Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_LEFT_CHEST);
            }
            LocationId::KF__Midos_House__Entry__Bottom_Right_Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_RIGHT_CHEST);
            }
            LocationId::KF__Shop__Entry__Blue_Rupee => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__BLUE_RUPEE);
            }
            LocationId::KF__Shop__Entry__Item_1 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_1);
            }
            LocationId::KF__Shop__Entry__Item_2 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_2);
            }
            LocationId::KF__Shop__Entry__Item_3 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_3);
            }
            LocationId::KF__Shop__Entry__Item_4 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_4);
            }
            LocationId::KF__Shop__Entry__Item_5 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_5);
            }
            LocationId::KF__Shop__Entry__Item_6 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_6);
            }
            LocationId::KF__Shop__Entry__Item_7 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_7);
            }
            LocationId::KF__Shop__Entry__Item_8 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_8);
            }
            LocationId::Kak__Spider_House__Entry__Skulls_10 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KAK__SPIDER_HOUSE__ENTRY__SKULLS_10);
            }
        }
    }

    fn apply_observe_position(&mut self) {
        self.position = true;
    }
    fn apply_clear_position(&mut self) {
        self.position = false;
    }
    fn apply_observe_child(&mut self) {
        self.cbits1.insert(flags::ContextBits1::CHILD);
    }
    fn apply_clear_child(&mut self) {
        self.cbits1.remove(flags::ContextBits1::CHILD);
    }
    fn apply_observe_tod(&mut self) {
        self.tod = true;
    }
    fn apply_clear_tod(&mut self) {
        self.tod = false;
    }
    fn apply_observe_rupees(&mut self, obs: IntegerObservation<i32>) {
        self.rupees = self.rupees.combine(obs);
    }
    fn apply_shift_rupees(&mut self, diff: i32) {
        self.rupees = self.rupees.shift(-diff);
    }
    fn apply_clear_rupees(&mut self) {
        self.rupees = IntegerObservation::Unknown;
    }
    fn apply_observe_deku_tree__compass_room__ctx__torch(&mut self) {
        self.cbits1.insert(flags::ContextBits1::DEKU_TREE__COMPASS_ROOM__CTX__TORCH);
    }
    fn apply_clear_deku_tree__compass_room__ctx__torch(&mut self) {
        self.cbits1.remove(flags::ContextBits1::DEKU_TREE__COMPASS_ROOM__CTX__TORCH);
    }
    fn apply_observe_biggoron_sword(&mut self) {
        self.cbits1.insert(flags::ContextBits1::BIGGORON_SWORD);
    }
    fn apply_clear_biggoron_sword(&mut self) {
        self.cbits1.remove(flags::ContextBits1::BIGGORON_SWORD);
    }
    fn apply_observe_bombs(&mut self) {
        self.cbits1.insert(flags::ContextBits1::BOMBS);
    }
    fn apply_clear_bombs(&mut self) {
        self.cbits1.remove(flags::ContextBits1::BOMBS);
    }
    fn apply_observe_boomerang(&mut self) {
        self.cbits1.insert(flags::ContextBits1::BOOMERANG);
    }
    fn apply_clear_boomerang(&mut self) {
        self.cbits1.remove(flags::ContextBits1::BOOMERANG);
    }
    fn apply_observe_bow(&mut self) {
        self.cbits1.insert(flags::ContextBits1::BOW);
    }
    fn apply_clear_bow(&mut self) {
        self.cbits1.remove(flags::ContextBits1::BOW);
    }
    fn apply_observe_buy_deku_nut_10(&mut self) {
        self.cbits1.insert(flags::ContextBits1::BUY_DEKU_NUT_10);
    }
    fn apply_clear_buy_deku_nut_10(&mut self) {
        self.cbits1.remove(flags::ContextBits1::BUY_DEKU_NUT_10);
    }
    fn apply_observe_buy_deku_nut_5(&mut self) {
        self.cbits1.insert(flags::ContextBits1::BUY_DEKU_NUT_5);
    }
    fn apply_clear_buy_deku_nut_5(&mut self) {
        self.cbits1.remove(flags::ContextBits1::BUY_DEKU_NUT_5);
    }
    fn apply_observe_buy_deku_shield(&mut self) {
        self.cbits1.insert(flags::ContextBits1::BUY_DEKU_SHIELD);
    }
    fn apply_clear_buy_deku_shield(&mut self) {
        self.cbits1.remove(flags::ContextBits1::BUY_DEKU_SHIELD);
    }
    fn apply_observe_buy_deku_stick_1(&mut self) {
        self.cbits1.insert(flags::ContextBits1::BUY_DEKU_STICK_1);
    }
    fn apply_clear_buy_deku_stick_1(&mut self) {
        self.cbits1.remove(flags::ContextBits1::BUY_DEKU_STICK_1);
    }
    fn apply_observe_defeat_ganon(&mut self) {
        self.cbits1.insert(flags::ContextBits1::DEFEAT_GANON);
    }
    fn apply_clear_defeat_ganon(&mut self) {
        self.cbits1.remove(flags::ContextBits1::DEFEAT_GANON);
    }
    fn apply_observe_defeat_gohma(&mut self) {
        self.cbits1.insert(flags::ContextBits1::DEFEAT_GOHMA);
    }
    fn apply_clear_defeat_gohma(&mut self) {
        self.cbits1.remove(flags::ContextBits1::DEFEAT_GOHMA);
    }
    fn apply_observe_deku_back_room_wall(&mut self) {
        self.cbits1.insert(flags::ContextBits1::DEKU_BACK_ROOM_WALL);
    }
    fn apply_clear_deku_back_room_wall(&mut self) {
        self.cbits1.remove(flags::ContextBits1::DEKU_BACK_ROOM_WALL);
    }
    fn apply_observe_deku_back_room_web(&mut self) {
        self.cbits1.insert(flags::ContextBits1::DEKU_BACK_ROOM_WEB);
    }
    fn apply_clear_deku_back_room_web(&mut self) {
        self.cbits1.remove(flags::ContextBits1::DEKU_BACK_ROOM_WEB);
    }
    fn apply_observe_deku_basement_block(&mut self) {
        self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_BLOCK);
    }
    fn apply_clear_deku_basement_block(&mut self) {
        self.cbits1.remove(flags::ContextBits1::DEKU_BASEMENT_BLOCK);
    }
    fn apply_observe_deku_basement_scrubs(&mut self) {
        self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_SCRUBS);
    }
    fn apply_clear_deku_basement_scrubs(&mut self) {
        self.cbits1.remove(flags::ContextBits1::DEKU_BASEMENT_SCRUBS);
    }
    fn apply_observe_deku_basement_switch(&mut self) {
        self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_SWITCH);
    }
    fn apply_clear_deku_basement_switch(&mut self) {
        self.cbits1.remove(flags::ContextBits1::DEKU_BASEMENT_SWITCH);
    }
    fn apply_observe_deku_basement_web(&mut self) {
        self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_WEB);
    }
    fn apply_clear_deku_basement_web(&mut self) {
        self.cbits1.remove(flags::ContextBits1::DEKU_BASEMENT_WEB);
    }
    fn apply_observe_deku_lobby_web(&mut self) {
        self.cbits1.insert(flags::ContextBits1::DEKU_LOBBY_WEB);
    }
    fn apply_clear_deku_lobby_web(&mut self) {
        self.cbits1.remove(flags::ContextBits1::DEKU_LOBBY_WEB);
    }
    fn apply_observe_deku_nut_drop(&mut self) {
        self.cbits1.insert(flags::ContextBits1::DEKU_NUT_DROP);
    }
    fn apply_clear_deku_nut_drop(&mut self) {
        self.cbits1.remove(flags::ContextBits1::DEKU_NUT_DROP);
    }
    fn apply_observe_deku_shield_drop(&mut self) {
        self.cbits1.insert(flags::ContextBits1::DEKU_SHIELD_DROP);
    }
    fn apply_clear_deku_shield_drop(&mut self) {
        self.cbits1.remove(flags::ContextBits1::DEKU_SHIELD_DROP);
    }
    fn apply_observe_deku_slingshot_scrub(&mut self) {
        self.cbits1.insert(flags::ContextBits1::DEKU_SLINGSHOT_SCRUB);
    }
    fn apply_clear_deku_slingshot_scrub(&mut self) {
        self.cbits1.remove(flags::ContextBits1::DEKU_SLINGSHOT_SCRUB);
    }
    fn apply_observe_deku_stick_drop(&mut self) {
        self.cbits1.insert(flags::ContextBits1::DEKU_STICK_DROP);
    }
    fn apply_clear_deku_stick_drop(&mut self) {
        self.cbits1.remove(flags::ContextBits1::DEKU_STICK_DROP);
    }
    fn apply_observe_gold_skulltula_token(&mut self, obs: IntegerObservation<i8>) {
        self.gold_skulltula_token = self.gold_skulltula_token.combine(obs);
    }
    fn apply_shift_gold_skulltula_token(&mut self, diff: i8) {
        self.gold_skulltula_token = self.gold_skulltula_token.shift(-diff);
    }
    fn apply_clear_gold_skulltula_token(&mut self) {
        self.gold_skulltula_token = IntegerObservation::Unknown;
    }
    fn apply_observe_hylian_shield(&mut self) {
        self.cbits1.insert(flags::ContextBits1::HYLIAN_SHIELD);
    }
    fn apply_clear_hylian_shield(&mut self) {
        self.cbits1.remove(flags::ContextBits1::HYLIAN_SHIELD);
    }
    fn apply_observe_kokiri_emerald(&mut self) {
        self.cbits1.insert(flags::ContextBits1::KOKIRI_EMERALD);
    }
    fn apply_clear_kokiri_emerald(&mut self) {
        self.cbits1.remove(flags::ContextBits1::KOKIRI_EMERALD);
    }
    fn apply_observe_kokiri_sword(&mut self) {
        self.cbits1.insert(flags::ContextBits1::KOKIRI_SWORD);
    }
    fn apply_clear_kokiri_sword(&mut self) {
        self.cbits1.remove(flags::ContextBits1::KOKIRI_SWORD);
    }
    fn apply_observe_magic_meter(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAGIC_METER);
    }
    fn apply_clear_magic_meter(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAGIC_METER);
    }
    fn apply_observe_ocarina(&mut self) {
        self.cbits1.insert(flags::ContextBits1::OCARINA);
    }
    fn apply_clear_ocarina(&mut self) {
        self.cbits1.remove(flags::ContextBits1::OCARINA);
    }
    fn apply_observe_progressive_wallet(&mut self, obs: IntegerObservation<i8>) {
        self.progressive_wallet = self.progressive_wallet.combine(obs);
    }
    fn apply_shift_progressive_wallet(&mut self, diff: i8) {
        self.progressive_wallet = self.progressive_wallet.shift(-diff);
    }
    fn apply_clear_progressive_wallet(&mut self) {
        self.progressive_wallet = IntegerObservation::Unknown;
    }
    fn apply_observe_showed_mido(&mut self) {
        self.cbits1.insert(flags::ContextBits1::SHOWED_MIDO);
    }
    fn apply_clear_showed_mido(&mut self) {
        self.cbits1.remove(flags::ContextBits1::SHOWED_MIDO);
    }
    fn apply_observe_slingshot(&mut self) {
        self.cbits1.insert(flags::ContextBits1::SLINGSHOT);
    }
    fn apply_clear_slingshot(&mut self) {
        self.cbits1.remove(flags::ContextBits1::SLINGSHOT);
    }
    fn apply_observe_triforce_piece(&mut self, obs: IntegerObservation<i16>) {
        self.triforce_piece = self.triforce_piece.combine(obs);
    }
    fn apply_shift_triforce_piece(&mut self, diff: i16) {
        self.triforce_piece = self.triforce_piece.shift(-diff);
    }
    fn apply_clear_triforce_piece(&mut self) {
        self.triforce_piece = IntegerObservation::Unknown;
    }
    fn apply_observe_victory(&mut self) {
        self.cbits1.insert(flags::ContextBits1::VICTORY);
    }
    fn apply_clear_victory(&mut self) {
        self.cbits1.remove(flags::ContextBits1::VICTORY);
    }
}

#[derive(Debug)]
pub enum ObservationMatcher<Value: Clone + Eq + Hash> {
    PositionLookup(LookupMatcher<Node<Self, Value>, SpotId, Value>),
    TodLookup(LookupMatcher<Node<Self, Value>, enums::Tod, Value>),
    RupeesLookup(LookupMatcher<Node<Self, Value>, i32, Value>),
    RupeesEq {
        eq: i32,
        matcher: BooleanMatcher<Node<Self, Value>, Value>,
    },
    RupeesGe {
        lo: i32,
        matcher: BooleanMatcher<Node<Self, Value>, Value>,
    },
    RupeesLe {
        hi: i32,
        matcher: BooleanMatcher<Node<Self, Value>, Value>,
    },
    RupeesRange {
        lo: i32,
        hi: i32,
        matcher: BooleanMatcher<Node<Self, Value>, Value>,
    },
    // items
    GoldSkulltulaTokenLookup(LookupMatcher<Node<Self, Value>, i8, Value>),
    GoldSkulltulaTokenEq {
        eq: i8,
        matcher: BooleanMatcher<Node<Self, Value>, Value>,
    },
    GoldSkulltulaTokenGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self, Value>, Value>,
    },
    GoldSkulltulaTokenLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self, Value>, Value>,
    },
    GoldSkulltulaTokenRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self, Value>, Value>,
    },
    ProgressiveWalletLookup(LookupMatcher<Node<Self, Value>, i8, Value>),
    ProgressiveWalletEq {
        eq: i8,
        matcher: BooleanMatcher<Node<Self, Value>, Value>,
    },
    ProgressiveWalletGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self, Value>, Value>,
    },
    ProgressiveWalletLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self, Value>, Value>,
    },
    ProgressiveWalletRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self, Value>, Value>,
    },
    TriforcePieceLookup(LookupMatcher<Node<Self, Value>, i16, Value>),
    TriforcePieceEq {
        eq: i16,
        matcher: BooleanMatcher<Node<Self, Value>, Value>,
    },
    TriforcePieceGe {
        lo: i16,
        matcher: BooleanMatcher<Node<Self, Value>, Value>,
    },
    TriforcePieceLe {
        hi: i16,
        matcher: BooleanMatcher<Node<Self, Value>, Value>,
    },
    TriforcePieceRange {
        lo: i16,
        hi: i16,
        matcher: BooleanMatcher<Node<Self, Value>, Value>,
    },
    // bitflags
    LookupCBits1 {
        mask: flags::ContextBits1,
        matcher: LookupMatcher<Node<Self, Value>, flags::ContextBits1, Value>,
    },
    LookupCBits2 {
        mask: flags::ContextBits2,
        matcher: LookupMatcher<Node<Self, Value>, flags::ContextBits2, Value>,
    },
}

impl<Value: Clone + Eq + Hash> Default for ObservationMatcher<Value> {
    fn default() -> Self {
        Self::PositionLookup(LookupMatcher::new())
    }
}

impl<Value: Clone + Eq + Hash> MatcherDispatch<Value> for ObservationMatcher<Value> {
    type Node = Node<Self, Value>;
    type Struct = Context;
    fn new(obs: &OneObservation) -> (Arc<Mutex<Node<Self, Value>>>, Self) {
        match obs {
            &OneObservation::Position(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::PositionLookup(m))
            }
            &OneObservation::Tod(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::TodLookup(m))
            }
            &OneObservation::RupeesExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::RupeesLookup(m))
            }
            &OneObservation::RupeesEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::RupeesEq { eq, matcher })
            }
            &OneObservation::RupeesGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::RupeesGe { lo, matcher })
            }
            &OneObservation::RupeesLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::RupeesLe { hi, matcher })
            }
            &OneObservation::RupeesRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::RupeesRange { lo, hi, matcher })
            }
            &OneObservation::GoldSkulltulaTokenExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::GoldSkulltulaTokenLookup(m))
            }
            &OneObservation::GoldSkulltulaTokenEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::GoldSkulltulaTokenEq { eq, matcher })
            }
            &OneObservation::GoldSkulltulaTokenGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::GoldSkulltulaTokenGe { lo, matcher })
            }
            &OneObservation::GoldSkulltulaTokenLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::GoldSkulltulaTokenLe { hi, matcher })
            }
            &OneObservation::GoldSkulltulaTokenRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::GoldSkulltulaTokenRange { lo, hi, matcher })
            }
            &OneObservation::ProgressiveWalletExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::ProgressiveWalletLookup(m))
            }
            &OneObservation::ProgressiveWalletEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::ProgressiveWalletEq { eq, matcher })
            }
            &OneObservation::ProgressiveWalletGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::ProgressiveWalletGe { lo, matcher })
            }
            &OneObservation::ProgressiveWalletLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::ProgressiveWalletLe { hi, matcher })
            }
            &OneObservation::ProgressiveWalletRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::ProgressiveWalletRange { lo, hi, matcher })
            }
            &OneObservation::TriforcePieceExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::TriforcePieceLookup(m))
            }
            &OneObservation::TriforcePieceEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::TriforcePieceEq { eq, matcher })
            }
            &OneObservation::TriforcePieceGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::TriforcePieceGe { lo, matcher })
            }
            &OneObservation::TriforcePieceLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::TriforcePieceLe { hi, matcher })
            }
            &OneObservation::TriforcePieceRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::TriforcePieceRange { lo, hi, matcher })
            }
            &OneObservation::CBits1{ mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits1 { mask, matcher })
            }
            &OneObservation::CBits2{ mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits2 { mask, matcher })
            }
        }
    }

    fn clear(&mut self) {
        match self {
            Self::PositionLookup(m) => m.clear(),
            Self::TodLookup(m) => m.clear(),
            Self::RupeesLookup(m) => m.clear(),
            Self::RupeesEq { matcher, .. } => matcher.clear(),
            Self::RupeesGe { matcher, .. } => matcher.clear(),
            Self::RupeesLe { matcher, .. } => matcher.clear(),
            Self::RupeesRange { matcher, .. } => matcher.clear(),
            Self::GoldSkulltulaTokenLookup(m) => m.clear(),
            Self::GoldSkulltulaTokenEq { matcher, .. } => matcher.clear(),
            Self::GoldSkulltulaTokenGe { matcher, .. } => matcher.clear(),
            Self::GoldSkulltulaTokenLe { matcher, .. } => matcher.clear(),
            Self::GoldSkulltulaTokenRange { matcher, .. } => matcher.clear(),
            Self::ProgressiveWalletLookup(m) => m.clear(),
            Self::ProgressiveWalletEq { matcher, .. } => matcher.clear(),
            Self::ProgressiveWalletGe { matcher, .. } => matcher.clear(),
            Self::ProgressiveWalletLe { matcher, .. } => matcher.clear(),
            Self::ProgressiveWalletRange { matcher, .. } => matcher.clear(),
            Self::TriforcePieceLookup(m) => m.clear(),
            Self::TriforcePieceEq { matcher, .. } => matcher.clear(),
            Self::TriforcePieceGe { matcher, .. } => matcher.clear(),
            Self::TriforcePieceLe { matcher, .. } => matcher.clear(),
            Self::TriforcePieceRange { matcher, .. } => matcher.clear(),
            Self::LookupCBits1 { matcher, .. } => matcher.clear(),
            Self::LookupCBits2 { matcher, .. } => matcher.clear(),
        }
    }

    fn lookup(&self, val: &Context) -> (Option<Arc<Mutex<Node<Self, Value>>>>, Vec<Value>) {
        match self {
            Self::PositionLookup(m) => m.lookup(val.position),
            Self::TodLookup(m) => m.lookup(val.tod),
            Self::RupeesLookup(m) => m.lookup(val.rupees),
            Self::RupeesEq { eq, matcher } => matcher.lookup(val.rupees == *eq),
            Self::RupeesGe { lo, matcher } => matcher.lookup(val.rupees >= *lo),
            Self::RupeesLe { hi, matcher } => matcher.lookup(val.rupees <= *hi),
            Self::RupeesRange { lo, hi, matcher } => matcher.lookup(val.rupees >= *lo && val.rupees <= *hi),
            Self::GoldSkulltulaTokenLookup(m) => m.lookup(val.gold_skulltula_token),
            Self::GoldSkulltulaTokenEq { eq, matcher } => matcher.lookup(val.gold_skulltula_token == *eq),
            Self::GoldSkulltulaTokenGe { lo, matcher } => matcher.lookup(val.gold_skulltula_token >= *lo),
            Self::GoldSkulltulaTokenLe { hi, matcher } => matcher.lookup(val.gold_skulltula_token <= *hi),
            Self::GoldSkulltulaTokenRange { lo, hi, matcher } => matcher.lookup(val.gold_skulltula_token >= *lo && val.gold_skulltula_token <= *hi),
            Self::ProgressiveWalletLookup(m) => m.lookup(val.progressive_wallet),
            Self::ProgressiveWalletEq { eq, matcher } => matcher.lookup(val.progressive_wallet == *eq),
            Self::ProgressiveWalletGe { lo, matcher } => matcher.lookup(val.progressive_wallet >= *lo),
            Self::ProgressiveWalletLe { hi, matcher } => matcher.lookup(val.progressive_wallet <= *hi),
            Self::ProgressiveWalletRange { lo, hi, matcher } => matcher.lookup(val.progressive_wallet >= *lo && val.progressive_wallet <= *hi),
            Self::TriforcePieceLookup(m) => m.lookup(val.triforce_piece),
            Self::TriforcePieceEq { eq, matcher } => matcher.lookup(val.triforce_piece == *eq),
            Self::TriforcePieceGe { lo, matcher } => matcher.lookup(val.triforce_piece >= *lo),
            Self::TriforcePieceLe { hi, matcher } => matcher.lookup(val.triforce_piece <= *hi),
            Self::TriforcePieceRange { lo, hi, matcher } => matcher.lookup(val.triforce_piece >= *lo && val.triforce_piece <= *hi),
            Self::LookupCBits1 { mask, matcher } => matcher.lookup(val.cbits1 & *mask),
            Self::LookupCBits2 { mask, matcher } => matcher.lookup(val.cbits2 & *mask),
        }
    }

    fn insert(&mut self, obs: &OneObservation) -> Option<Arc<Mutex<Node<Self, Value>>>> {
        match (self, obs) {
            (Self::PositionLookup(m), OneObservation::Position(v)) => Some(m.insert(*v)),
            (Self::TodLookup(m), OneObservation::Tod(v)) => Some(m.insert(*v)),
            (Self::RupeesLookup(m), OneObservation::RupeesExact(v)) => Some(m.insert(*v)),
            (Self::RupeesEq { eq, matcher }, OneObservation::RupeesEq(eq2, v)) if eq2 == eq => Some(matcher.insert(*v)),
            (Self::RupeesGe { lo, matcher }, OneObservation::RupeesGe(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::RupeesLe { hi, matcher }, OneObservation::RupeesLe(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::RupeesRange { lo, hi, matcher }, OneObservation::RupeesRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
            (Self::GoldSkulltulaTokenLookup(m), OneObservation::GoldSkulltulaTokenExact(v)) => Some(m.insert(*v)),
            (Self::GoldSkulltulaTokenEq { eq, matcher }, OneObservation::GoldSkulltulaTokenEq(eq2, v)) if eq2 == eq => Some(matcher.insert(*v)),
            (Self::GoldSkulltulaTokenGe { lo, matcher }, OneObservation::GoldSkulltulaTokenGe(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::GoldSkulltulaTokenLe { hi, matcher }, OneObservation::GoldSkulltulaTokenLe(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::GoldSkulltulaTokenRange { lo, hi, matcher }, OneObservation::GoldSkulltulaTokenRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
            (Self::ProgressiveWalletLookup(m), OneObservation::ProgressiveWalletExact(v)) => Some(m.insert(*v)),
            (Self::ProgressiveWalletEq { eq, matcher }, OneObservation::ProgressiveWalletEq(eq2, v)) if eq2 == eq => Some(matcher.insert(*v)),
            (Self::ProgressiveWalletGe { lo, matcher }, OneObservation::ProgressiveWalletGe(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::ProgressiveWalletLe { hi, matcher }, OneObservation::ProgressiveWalletLe(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::ProgressiveWalletRange { lo, hi, matcher }, OneObservation::ProgressiveWalletRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
            (Self::TriforcePieceLookup(m), OneObservation::TriforcePieceExact(v)) => Some(m.insert(*v)),
            (Self::TriforcePieceEq { eq, matcher }, OneObservation::TriforcePieceEq(eq2, v)) if eq2 == eq => Some(matcher.insert(*v)),
            (Self::TriforcePieceGe { lo, matcher }, OneObservation::TriforcePieceGe(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::TriforcePieceLe { hi, matcher }, OneObservation::TriforcePieceLe(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::TriforcePieceRange { lo, hi, matcher }, OneObservation::TriforcePieceRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
            (Self::LookupCBits1 { mask, matcher }, OneObservation::CBits1 { mask: mask2, result }) if mask == mask2 => Some(matcher.insert(*result)),
            (Self::LookupCBits2 { mask, matcher }, OneObservation::CBits2 { mask: mask2, result }) if mask == mask2 => Some(matcher.insert(*result)),
            _ => None,
        }
    }

    fn add_value(&mut self, obs: &OneObservation, value: Value) {
        match (self, obs) {
            (Self::PositionLookup(m), OneObservation::Position(v)) => m.add_value(*v, value),
            (Self::TodLookup(m), OneObservation::Tod(v)) => m.add_value(*v, value),
            (Self::RupeesLookup(m), OneObservation::RupeesExact(v)) => m.add_value(*v, value),
            (Self::RupeesEq { eq, matcher }, OneObservation::RupeesEq(eq2, v)) if eq2 == eq => matcher.add_value(*v, value),
            (Self::RupeesGe { lo, matcher }, OneObservation::RupeesGe(lo2, v)) if lo2 == lo => matcher.add_value(*v, value),
            (Self::RupeesLe { hi, matcher }, OneObservation::RupeesLe(hi2, v)) if hi2 == hi => matcher.add_value(*v, value),
            (Self::RupeesRange { lo, hi, matcher }, OneObservation::RupeesRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value(*v, value),
            (Self::GoldSkulltulaTokenLookup(m), OneObservation::GoldSkulltulaTokenExact(v)) => m.add_value(*v, value),
            (Self::GoldSkulltulaTokenEq { eq, matcher }, OneObservation::GoldSkulltulaTokenEq(eq2, v)) if eq2 == eq => matcher.add_value(*v, value),
            (Self::GoldSkulltulaTokenGe { lo, matcher }, OneObservation::GoldSkulltulaTokenGe(lo2, v)) if lo2 == lo => matcher.add_value(*v, value),
            (Self::GoldSkulltulaTokenLe { hi, matcher }, OneObservation::GoldSkulltulaTokenLe(hi2, v)) if hi2 == hi => matcher.add_value(*v, value),
            (Self::GoldSkulltulaTokenRange { lo, hi, matcher }, OneObservation::GoldSkulltulaTokenRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value(*v, value),
            (Self::ProgressiveWalletLookup(m), OneObservation::ProgressiveWalletExact(v)) => m.add_value(*v, value),
            (Self::ProgressiveWalletEq { eq, matcher }, OneObservation::ProgressiveWalletEq(eq2, v)) if eq2 == eq => matcher.add_value(*v, value),
            (Self::ProgressiveWalletGe { lo, matcher }, OneObservation::ProgressiveWalletGe(lo2, v)) if lo2 == lo => matcher.add_value(*v, value),
            (Self::ProgressiveWalletLe { hi, matcher }, OneObservation::ProgressiveWalletLe(hi2, v)) if hi2 == hi => matcher.add_value(*v, value),
            (Self::ProgressiveWalletRange { lo, hi, matcher }, OneObservation::ProgressiveWalletRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value(*v, value),
            (Self::TriforcePieceLookup(m), OneObservation::TriforcePieceExact(v)) => m.add_value(*v, value),
            (Self::TriforcePieceEq { eq, matcher }, OneObservation::TriforcePieceEq(eq2, v)) if eq2 == eq => matcher.add_value(*v, value),
            (Self::TriforcePieceGe { lo, matcher }, OneObservation::TriforcePieceGe(lo2, v)) if lo2 == lo => matcher.add_value(*v, value),
            (Self::TriforcePieceLe { hi, matcher }, OneObservation::TriforcePieceLe(hi2, v)) if hi2 == hi => matcher.add_value(*v, value),
            (Self::TriforcePieceRange { lo, hi, matcher }, OneObservation::TriforcePieceRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value(*v, value),
            (Self::LookupCBits1 { mask, matcher }, OneObservation::CBits1 { mask: mask2, result }) if mask == mask2 => matcher.add_value(*result, value),
            (Self::LookupCBits2 { mask, matcher }, OneObservation::CBits2 { mask: mask2, result }) if mask == mask2 => matcher.add_value(*result, value),
            _ => (),
        }
    }
    fn add_value_if_all(&mut self, obs: &OneObservation, value: Value, test: impl FnMut(&Value) -> bool) {
        match (self, obs) {
            (Self::PositionLookup(m), OneObservation::Position(v)) => m.add_value_if_all(*v, value, test),
            (Self::TodLookup(m), OneObservation::Tod(v)) => m.add_value_if_all(*v, value, test),
            (Self::RupeesLookup(m), OneObservation::RupeesExact(v)) => m.add_value_if_all(*v, value, test),
            (Self::RupeesEq { eq, matcher }, OneObservation::RupeesEq(eq2, v)) if eq2 == eq => matcher.add_value_if_all(*v, value, test),
            (Self::RupeesGe { lo, matcher }, OneObservation::RupeesGe(lo2, v)) if lo2 == lo => matcher.add_value_if_all(*v, value, test),
            (Self::RupeesLe { hi, matcher }, OneObservation::RupeesLe(hi2, v)) if hi2 == hi => matcher.add_value_if_all(*v, value, test),
            (Self::RupeesRange { lo, hi, matcher }, OneObservation::RupeesRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value_if_all(*v, value, test),
            (Self::GoldSkulltulaTokenLookup(m), OneObservation::GoldSkulltulaTokenExact(v)) => m.add_value_if_all(*v, value, test),
            (Self::GoldSkulltulaTokenEq { eq, matcher }, OneObservation::GoldSkulltulaTokenEq(eq2, v)) if eq2 == eq => matcher.add_value_if_all(*v, value, test),
            (Self::GoldSkulltulaTokenGe { lo, matcher }, OneObservation::GoldSkulltulaTokenGe(lo2, v)) if lo2 == lo => matcher.add_value_if_all(*v, value, test),
            (Self::GoldSkulltulaTokenLe { hi, matcher }, OneObservation::GoldSkulltulaTokenLe(hi2, v)) if hi2 == hi => matcher.add_value_if_all(*v, value, test),
            (Self::GoldSkulltulaTokenRange { lo, hi, matcher }, OneObservation::GoldSkulltulaTokenRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value_if_all(*v, value, test),
            (Self::ProgressiveWalletLookup(m), OneObservation::ProgressiveWalletExact(v)) => m.add_value_if_all(*v, value, test),
            (Self::ProgressiveWalletEq { eq, matcher }, OneObservation::ProgressiveWalletEq(eq2, v)) if eq2 == eq => matcher.add_value_if_all(*v, value, test),
            (Self::ProgressiveWalletGe { lo, matcher }, OneObservation::ProgressiveWalletGe(lo2, v)) if lo2 == lo => matcher.add_value_if_all(*v, value, test),
            (Self::ProgressiveWalletLe { hi, matcher }, OneObservation::ProgressiveWalletLe(hi2, v)) if hi2 == hi => matcher.add_value_if_all(*v, value, test),
            (Self::ProgressiveWalletRange { lo, hi, matcher }, OneObservation::ProgressiveWalletRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value_if_all(*v, value, test),
            (Self::TriforcePieceLookup(m), OneObservation::TriforcePieceExact(v)) => m.add_value_if_all(*v, value, test),
            (Self::TriforcePieceEq { eq, matcher }, OneObservation::TriforcePieceEq(eq2, v)) if eq2 == eq => matcher.add_value_if_all(*v, value, test),
            (Self::TriforcePieceGe { lo, matcher }, OneObservation::TriforcePieceGe(lo2, v)) if lo2 == lo => matcher.add_value_if_all(*v, value, test),
            (Self::TriforcePieceLe { hi, matcher }, OneObservation::TriforcePieceLe(hi2, v)) if hi2 == hi => matcher.add_value_if_all(*v, value, test),
            (Self::TriforcePieceRange { lo, hi, matcher }, OneObservation::TriforcePieceRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value_if_all(*v, value, test),
            (Self::LookupCBits1 { mask, matcher }, OneObservation::CBits1 { mask: mask2, result }) if mask == mask2 => matcher.add_value_if_all(*result, value, test),
            (Self::LookupCBits2 { mask, matcher }, OneObservation::CBits2 { mask: mask2, result }) if mask == mask2 => matcher.add_value_if_all(*result, value, test),
            _ => (),
        }
    }

    fn nodes(&self) -> Vec<Arc<Mutex<Node<Self, Value>>>> {
        match self {
            Self::PositionLookup(m) => m.nodes(),
            Self::TodLookup(m) => m.nodes(),
            Self::RupeesLookup(m) => m.nodes(),
            Self::RupeesEq { matcher, .. } => matcher.nodes(),
            Self::RupeesGe { matcher, .. } => matcher.nodes(),
            Self::RupeesLe { matcher, .. } => matcher.nodes(),
            Self::RupeesRange { matcher, .. } => matcher.nodes(),
            Self::GoldSkulltulaTokenLookup(m) => m.nodes(),
            Self::GoldSkulltulaTokenEq { matcher, .. } => matcher.nodes(),
            Self::GoldSkulltulaTokenGe { matcher, .. } => matcher.nodes(),
            Self::GoldSkulltulaTokenLe { matcher, .. } => matcher.nodes(),
            Self::GoldSkulltulaTokenRange { matcher, .. } => matcher.nodes(),
            Self::ProgressiveWalletLookup(m) => m.nodes(),
            Self::ProgressiveWalletEq { matcher, .. } => matcher.nodes(),
            Self::ProgressiveWalletGe { matcher, .. } => matcher.nodes(),
            Self::ProgressiveWalletLe { matcher, .. } => matcher.nodes(),
            Self::ProgressiveWalletRange { matcher, .. } => matcher.nodes(),
            Self::TriforcePieceLookup(m) => m.nodes(),
            Self::TriforcePieceEq { matcher, .. } => matcher.nodes(),
            Self::TriforcePieceGe { matcher, .. } => matcher.nodes(),
            Self::TriforcePieceLe { matcher, .. } => matcher.nodes(),
            Self::TriforcePieceRange { matcher, .. } => matcher.nodes(),
            Self::LookupCBits1 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits2 { matcher, .. } => matcher.nodes(),
        }
    }

    fn num_values(&self) -> usize {
        match self {
            Self::PositionLookup(m) => m.num_values(),
            Self::TodLookup(m) => m.num_values(),
            Self::RupeesLookup(m) => m.num_values(),
            Self::RupeesEq { matcher, .. } => matcher.num_values(),
            Self::RupeesGe { matcher, .. } => matcher.num_values(),
            Self::RupeesLe { matcher, .. } => matcher.num_values(),
            Self::RupeesRange { matcher, .. } => matcher.num_values(),
            Self::GoldSkulltulaTokenLookup(m) => m.num_values(),
            Self::GoldSkulltulaTokenEq { matcher, .. } => matcher.num_values(),
            Self::GoldSkulltulaTokenGe { matcher, .. } => matcher.num_values(),
            Self::GoldSkulltulaTokenLe { matcher, .. } => matcher.num_values(),
            Self::GoldSkulltulaTokenRange { matcher, .. } => matcher.num_values(),
            Self::ProgressiveWalletLookup(m) => m.num_values(),
            Self::ProgressiveWalletEq { matcher, .. } => matcher.num_values(),
            Self::ProgressiveWalletGe { matcher, .. } => matcher.num_values(),
            Self::ProgressiveWalletLe { matcher, .. } => matcher.num_values(),
            Self::ProgressiveWalletRange { matcher, .. } => matcher.num_values(),
            Self::TriforcePieceLookup(m) => m.num_values(),
            Self::TriforcePieceEq { matcher, .. } => matcher.num_values(),
            Self::TriforcePieceGe { matcher, .. } => matcher.num_values(),
            Self::TriforcePieceLe { matcher, .. } => matcher.num_values(),
            Self::TriforcePieceRange { matcher, .. } => matcher.num_values(),
            Self::LookupCBits1 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits2 { matcher, .. } => matcher.num_values(),
        }
    }
}
//! AUTOGENERATED FOR sample - MODIFICATIONS WILL BE LOST

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::*;
use crate::graph_enums::*;
use crate::items::*;
use crate::movements;
use crate::prices::Currency;
use crate::rules;
use analyzer::condense::{condense_graph, CondensedEdge};
use analyzer::context::Ctx;
use analyzer::world;
use enum_map::{enum_map, Enum, EnumMap};
use lazy_static::lazy_static;
use rustc_hash::FxHashMap;
use std::ops::Range;
use std::option::Option;

pub fn get_area(spot: SpotId) -> AreaId {
    match spot {
        SpotId::None => panic!("Spot not valid"),
        SpotId::Deku_Tree__Lobby__Entry
        | SpotId::Deku_Tree__Lobby__Center
        | SpotId::Deku_Tree__Lobby__Vines => AreaId::Deku_Tree__Lobby,
        SpotId::Deku_Tree__Floor_2__Lower
        | SpotId::Deku_Tree__Floor_2__Vines
        | SpotId::Deku_Tree__Floor_2__Slingshot_Door => AreaId::Deku_Tree__Floor_2,
        SpotId::Deku_Tree__Scrub_Room__Entry | SpotId::Deku_Tree__Scrub_Room__Rear => {
            AreaId::Deku_Tree__Scrub_Room
        }
        SpotId::Deku_Tree__Slingshot_Room__Entry | SpotId::Deku_Tree__Slingshot_Room__Slingshot => {
            AreaId::Deku_Tree__Slingshot_Room
        }
        SpotId::Deku_Tree__Slingshot_Upper__Ledge => AreaId::Deku_Tree__Slingshot_Upper,
        SpotId::Deku_Tree__Floor_3__Climb | SpotId::Deku_Tree__Floor_3__Door => {
            AreaId::Deku_Tree__Floor_3
        }
        SpotId::Deku_Tree__Compass_Room__Entry
        | SpotId::Deku_Tree__Compass_Room__Compass
        | SpotId::Deku_Tree__Compass_Room__Ledge => AreaId::Deku_Tree__Compass_Room,
        SpotId::Deku_Tree__Basement_1__Center
        | SpotId::Deku_Tree__Basement_1__Corner
        | SpotId::Deku_Tree__Basement_1__South_Door => AreaId::Deku_Tree__Basement_1,
        SpotId::Deku_Tree__Back_Room__South
        | SpotId::Deku_Tree__Back_Room__Northwest
        | SpotId::Deku_Tree__Back_Room__East => AreaId::Deku_Tree__Back_Room,
        SpotId::Deku_Tree__Skull_Room__Entry => AreaId::Deku_Tree__Skull_Room,
        SpotId::Deku_Tree__Basement_Ledge__Block | SpotId::Deku_Tree__Basement_Ledge__Web => {
            AreaId::Deku_Tree__Basement_Ledge
        }
        SpotId::Deku_Tree__Basement_2__Pool | SpotId::Deku_Tree__Basement_2__Boss_Door => {
            AreaId::Deku_Tree__Basement_2
        }
        SpotId::Deku_Tree__Boss_Room__Entry | SpotId::Deku_Tree__Boss_Room__Arena => {
            AreaId::Deku_Tree__Boss_Room
        }
        SpotId::KF__Links_House__Start_Point | SpotId::KF__Links_House__Entry => {
            AreaId::KF__Links_House
        }
        SpotId::KF__Kokiri_Village__Links_Porch
        | SpotId::KF__Kokiri_Village__Midos_Porch
        | SpotId::KF__Kokiri_Village__Know_it_all_Porch
        | SpotId::KF__Kokiri_Village__Training_Center
        | SpotId::KF__Kokiri_Village__Shop_Porch
        | SpotId::KF__Kokiri_Village__Sarias_Porch
        | SpotId::KF__Kokiri_Village__Midos_Guardpost => AreaId::KF__Kokiri_Village,
        SpotId::KF__Boulder_Maze__Entry | SpotId::KF__Boulder_Maze__Reward => {
            AreaId::KF__Boulder_Maze
        }
        SpotId::KF__Baba_Corridor__Village_Side
        | SpotId::KF__Baba_Corridor__Deku_Babas
        | SpotId::KF__Baba_Corridor__Tree_Side => AreaId::KF__Baba_Corridor,
        SpotId::KF__Outside_Deku_Tree__Entry
        | SpotId::KF__Outside_Deku_Tree__Left
        | SpotId::KF__Outside_Deku_Tree__Right
        | SpotId::KF__Outside_Deku_Tree__Mouth => AreaId::KF__Outside_Deku_Tree,
        SpotId::KF__Midos_House__Entry => AreaId::KF__Midos_House,
        SpotId::KF__Know_it_all_House__Entry => AreaId::KF__Know_it_all_House,
        SpotId::KF__Shop__Entry => AreaId::KF__Shop,
        SpotId::Kak__Spider_House__Entry => AreaId::Kak__Spider_House,
    }
}
pub fn get_region(spot: SpotId) -> RegionId {
    match spot {
        SpotId::None => panic!("Spot not valid"),
        SpotId::Deku_Tree__Lobby__Entry
        | SpotId::Deku_Tree__Lobby__Center
        | SpotId::Deku_Tree__Lobby__Vines => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Floor_2__Lower
        | SpotId::Deku_Tree__Floor_2__Vines
        | SpotId::Deku_Tree__Floor_2__Slingshot_Door => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Scrub_Room__Entry | SpotId::Deku_Tree__Scrub_Room__Rear => {
            RegionId::Deku_Tree
        }
        SpotId::Deku_Tree__Slingshot_Room__Entry | SpotId::Deku_Tree__Slingshot_Room__Slingshot => {
            RegionId::Deku_Tree
        }
        SpotId::Deku_Tree__Slingshot_Upper__Ledge => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Floor_3__Climb | SpotId::Deku_Tree__Floor_3__Door => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Compass_Room__Entry
        | SpotId::Deku_Tree__Compass_Room__Compass
        | SpotId::Deku_Tree__Compass_Room__Ledge => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Basement_1__Center
        | SpotId::Deku_Tree__Basement_1__Corner
        | SpotId::Deku_Tree__Basement_1__South_Door => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Back_Room__South
        | SpotId::Deku_Tree__Back_Room__Northwest
        | SpotId::Deku_Tree__Back_Room__East => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Skull_Room__Entry => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Basement_Ledge__Block | SpotId::Deku_Tree__Basement_Ledge__Web => {
            RegionId::Deku_Tree
        }
        SpotId::Deku_Tree__Basement_2__Pool | SpotId::Deku_Tree__Basement_2__Boss_Door => {
            RegionId::Deku_Tree
        }
        SpotId::Deku_Tree__Boss_Room__Entry | SpotId::Deku_Tree__Boss_Room__Arena => {
            RegionId::Deku_Tree
        }
        SpotId::KF__Links_House__Start_Point | SpotId::KF__Links_House__Entry => RegionId::KF,
        SpotId::KF__Kokiri_Village__Links_Porch
        | SpotId::KF__Kokiri_Village__Midos_Porch
        | SpotId::KF__Kokiri_Village__Know_it_all_Porch
        | SpotId::KF__Kokiri_Village__Training_Center
        | SpotId::KF__Kokiri_Village__Shop_Porch
        | SpotId::KF__Kokiri_Village__Sarias_Porch
        | SpotId::KF__Kokiri_Village__Midos_Guardpost => RegionId::KF,
        SpotId::KF__Boulder_Maze__Entry | SpotId::KF__Boulder_Maze__Reward => RegionId::KF,
        SpotId::KF__Baba_Corridor__Village_Side
        | SpotId::KF__Baba_Corridor__Deku_Babas
        | SpotId::KF__Baba_Corridor__Tree_Side => RegionId::KF,
        SpotId::KF__Outside_Deku_Tree__Entry
        | SpotId::KF__Outside_Deku_Tree__Left
        | SpotId::KF__Outside_Deku_Tree__Right
        | SpotId::KF__Outside_Deku_Tree__Mouth => RegionId::KF,
        SpotId::KF__Midos_House__Entry => RegionId::KF,
        SpotId::KF__Know_it_all_House__Entry => RegionId::KF,
        SpotId::KF__Shop__Entry => RegionId::KF,
        SpotId::Kak__Spider_House__Entry => RegionId::Kak,
    }
}

#[derive(Copy, Clone, Debug)]
pub struct Location {
    id: LocationId,
    item: Item,
    canonical: CanonId,
    time: u32,
    exit_id: Option<ExitId>,
    price: Currency,
}

impl world::Accessible for Location {
    type Context = Context;
    type Currency = Currency;

    fn can_access(&self, ctx: &Context, world: &World) -> bool {
        ctx.can_afford(&self.price) && match self.id {
            LocationId::Deku_Tree__Back_Room__Northwest__Break_Wall => rules::access_deku_back_room_web_and_can_blast_or_smash(&ctx, world),
            LocationId::Deku_Tree__Back_Room__Northwest__Burn_Web => rules::access_has_fire_source_with_torch_or_can_use__bow(&ctx, world),
            LocationId::Deku_Tree__Basement_1__Center__Vines_GS => rules::access_is_adult_or_sticks_or_kokiri_sword(&ctx, world),
            LocationId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web => rules::access_deku_basement_block_and_is_child_and_sticks(&ctx, world),
            LocationId::Deku_Tree__Basement_1__Corner__Chest => rules::access_deku_basement_switch(&ctx, world),
            LocationId::Deku_Tree__Basement_1__Corner__Gate_GS => rules::access_is_adult_or_can_child_attack(&ctx, world),
            LocationId::Deku_Tree__Basement_1__Corner__Switch => true,
            LocationId::Deku_Tree__Basement_2__Boss_Door__Scrubs => rules::access_has_shield(&ctx, world),
            LocationId::Deku_Tree__Basement_Ledge__Block__Push_Block => true,
            LocationId::Deku_Tree__Basement_Ledge__Web__Burn_Web => rules::access_has_fire_source(&ctx, world),
            LocationId::Deku_Tree__Boss_Room__Arena__Blue_Warp => rules::access_defeat_gohma(&ctx, world),
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma => rules::access___nuts_or_can_use__slingshot_and_can_jumpslash(&ctx, world),
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Heart => rules::access_defeat_gohma(&ctx, world),
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Quick_Kill => rules::access_nuts_and_has_shield_and_if___is_child____sticks__else____biggoron_sword_(&ctx, world),
            LocationId::Deku_Tree__Compass_Room__Compass__Chest => true,
            LocationId::Deku_Tree__Compass_Room__Entry__Burn_Web => rules::access_is_child_and_sticks_and_nuts(&ctx, world),
            LocationId::Deku_Tree__Compass_Room__Ledge__Chest => true,
            LocationId::Deku_Tree__Compass_Room__Ledge__GS => rules::access_is_adult_or_can_child_attack(&ctx, world),
            LocationId::Deku_Tree__Floor_2__Vines__Map_Chest => true,
            LocationId::Deku_Tree__Floor_3__Door__Break_Web => rules::access_is_adult_or_can_child_attack_or_nuts(&ctx, world),
            LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Nuts => rules::access_is_adult_or_slingshot_or_sticks_or_kokiri_sword(&ctx, world),
            LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Sticks => rules::access_is_adult_or_kokiri_sword_or_boomerang(&ctx, world),
            LocationId::Deku_Tree__Lobby__Center__Web => rules::access_false(&ctx, world),
            LocationId::Deku_Tree__Scrub_Room__Entry__Scrub => rules::access_has_shield(&ctx, world),
            LocationId::Deku_Tree__Skull_Room__Entry__GS => rules::access_can_use__boomerang_or_can_use__hookshot(&ctx, world),
            LocationId::Deku_Tree__Slingshot_Room__Slingshot__Chest => true,
            LocationId::Deku_Tree__Slingshot_Upper__Ledge__Chest => true,
            LocationId::Kak__Spider_House__Entry__Skulls_10 => rules::access_gold_skulltula_token__10(&ctx, world),
            LocationId::KF__Baba_Corridor__Deku_Babas__Nuts => rules::access_is_adult(&ctx, world),
            LocationId::KF__Baba_Corridor__Deku_Babas__Sticks => rules::access_is_adult_or_kokiri_sword_or_boomerang(&ctx, world),
            LocationId::KF__Boulder_Maze__Reward__Chest => true,
            LocationId::KF__Kokiri_Village__Midos_Guardpost__Show_Mido => rules::access_is_child_and_kokiri_sword_and_deku_shield(&ctx, world),
            LocationId::KF__Kokiri_Village__Training_Center__Victory => rules::access_objective(&ctx, world),
            LocationId::KF__Midos_House__Entry__Bottom_Left_Chest => true,
            LocationId::KF__Midos_House__Entry__Bottom_Right_Chest => true,
            LocationId::KF__Midos_House__Entry__Top_Left_Chest => true,
            LocationId::KF__Midos_House__Entry__Top_Right_Chest => true,
            LocationId::KF__Outside_Deku_Tree__Left__Gossip_Stone => true,
            LocationId::KF__Outside_Deku_Tree__Right__Gossip_Stone => true,
            LocationId::KF__Shop__Entry__Blue_Rupee => true,
            LocationId::KF__Shop__Entry__Item_1 => true,
            LocationId::KF__Shop__Entry__Item_2 => true,
            LocationId::KF__Shop__Entry__Item_3 => true,
            LocationId::KF__Shop__Entry__Item_4 => true,
            LocationId::KF__Shop__Entry__Item_5 => true,
            LocationId::KF__Shop__Entry__Item_6 => true,
            LocationId::KF__Shop__Entry__Item_7 => true,
            LocationId::KF__Shop__Entry__Item_8 => true,
        }
    }
    fn base_time(&self) -> u32 {
        self.time
    }
    fn time(&self, ctx: &Context, world: &World) -> u32 {
        self.time
            + match self.id {
                _ => 0,
            }
    }
    fn price(&self) -> &Currency {
        &self.price
    }

    fn explain_rule(
        &self,
        ctx: &Self::Context,
        world: &World,
        edict: &mut FxHashMap<&'static str, String>,
    ) -> (bool, Vec<&'static str>) {
        match self.id {
            LocationId::Deku_Tree__Back_Room__Northwest__Break_Wall => rules::explain_deku_back_room_web_and_can_blast_or_smash(ctx, world, edict),
            LocationId::Deku_Tree__Back_Room__Northwest__Burn_Web => rules::explain_has_fire_source_with_torch_or_can_use__bow(ctx, world, edict),
            LocationId::Deku_Tree__Basement_1__Center__Vines_GS => rules::explain_is_adult_or_sticks_or_kokiri_sword(ctx, world, edict),
            LocationId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web => rules::explain_deku_basement_block_and_is_child_and_sticks(ctx, world, edict),
            LocationId::Deku_Tree__Basement_1__Corner__Chest => rules::explain_deku_basement_switch(ctx, world, edict),
            LocationId::Deku_Tree__Basement_1__Corner__Gate_GS => rules::explain_is_adult_or_can_child_attack(ctx, world, edict),
            LocationId::Deku_Tree__Basement_2__Boss_Door__Scrubs => rules::explain_has_shield(ctx, world, edict),
            LocationId::Deku_Tree__Basement_Ledge__Web__Burn_Web => rules::explain_has_fire_source(ctx, world, edict),
            LocationId::Deku_Tree__Boss_Room__Arena__Blue_Warp => rules::explain_defeat_gohma(ctx, world, edict),
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma => rules::explain___nuts_or_can_use__slingshot_and_can_jumpslash(ctx, world, edict),
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Heart => rules::explain_defeat_gohma(ctx, world, edict),
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Quick_Kill => rules::explain_nuts_and_has_shield_and_if___is_child____sticks__else____biggoron_sword_(ctx, world, edict),
            LocationId::Deku_Tree__Compass_Room__Entry__Burn_Web => rules::explain_is_child_and_sticks_and_nuts(ctx, world, edict),
            LocationId::Deku_Tree__Compass_Room__Ledge__GS => rules::explain_is_adult_or_can_child_attack(ctx, world, edict),
            LocationId::Deku_Tree__Floor_3__Door__Break_Web => rules::explain_is_adult_or_can_child_attack_or_nuts(ctx, world, edict),
            LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Nuts => rules::explain_is_adult_or_slingshot_or_sticks_or_kokiri_sword(ctx, world, edict),
            LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Sticks => rules::explain_is_adult_or_kokiri_sword_or_boomerang(ctx, world, edict),
            LocationId::Deku_Tree__Lobby__Center__Web => rules::explain_false(ctx, world, edict),
            LocationId::Deku_Tree__Scrub_Room__Entry__Scrub => rules::explain_has_shield(ctx, world, edict),
            LocationId::Deku_Tree__Skull_Room__Entry__GS => rules::explain_can_use__boomerang_or_can_use__hookshot(ctx, world, edict),
            LocationId::Kak__Spider_House__Entry__Skulls_10 => rules::explain_gold_skulltula_token__10(ctx, world, edict),
            LocationId::KF__Baba_Corridor__Deku_Babas__Nuts => rules::explain_is_adult(ctx, world, edict),
            LocationId::KF__Baba_Corridor__Deku_Babas__Sticks => rules::explain_is_adult_or_kokiri_sword_or_boomerang(ctx, world, edict),
            LocationId::KF__Kokiri_Village__Midos_Guardpost__Show_Mido => rules::explain_is_child_and_kokiri_sword_and_deku_shield(ctx, world, edict),
            LocationId::KF__Kokiri_Village__Training_Center__Victory => rules::explain_objective(ctx, world, edict),
            _ => (true, vec![])
        }
    }
}

impl world::Location for Location {
    type LocId = LocationId;
    type CanonId = CanonId;
    type ExitId = ExitId;

    fn id(&self) -> LocationId {
        self.id
    }
    fn item(&self) -> Item {
        self.item
    }
    fn canon_id(&self) -> CanonId {
        self.canonical
    }
    fn exit_id(&self) -> &Option<ExitId> {
        &self.exit_id
    }
}

#[derive(Copy, Clone, Debug)]
pub struct Exit {
    id: ExitId,
    time: u32,
    dest: SpotId,
    price: Currency,
    loc_id: Option<LocationId>,
}

impl world::Accessible for Exit {
    type Context = Context;
    type Currency = Currency;
    fn can_access(&self, ctx: &Context, world: &World) -> bool {
        ctx.can_afford(&self.price)
            && match self.id {
                ExitId::Deku_Tree__Back_Room__East__ex__Basement_Ledge__Web_1 => {
                    rules::access_is_child(&ctx, world)
                }
                ExitId::Deku_Tree__Back_Room__Northwest__ex__Skull_Room__Entry_1 => {
                    rules::access_deku_back_room_web_and_deku_back_room_wall(&ctx, world)
                }
                ExitId::Deku_Tree__Basement_1__Center__ex__Lobby__Center_1 => true,
                ExitId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web => {
                    rules::access_deku_basement_block_and_is_child_and_sticks(&ctx, world)
                }
                ExitId::Deku_Tree__Basement_1__Corner__ex__Basement_Ledge__Block_1 => {
                    rules::access_is_adult_or_deku_basement_block(&ctx, world)
                }
                ExitId::Deku_Tree__Basement_1__South_Door__ex__Back_Room__South_1 => true,
                ExitId::Deku_Tree__Basement_2__Boss_Door__ex__Boss_Room__Entry_1 => {
                    rules::access_deku_basement_scrubs(&ctx, world)
                }
                ExitId::Deku_Tree__Basement_2__Pool__ex__Basement_Ledge__Web_1 => true,
                ExitId::Deku_Tree__Basement_Ledge__Block__ex__Basement_1__Corner_1 => true,
                ExitId::Deku_Tree__Basement_Ledge__Web__ex__Basement_2__Pool_1 => {
                    rules::access_deku_basement_web(&ctx, world)
                }
                ExitId::Deku_Tree__Boss_Room__Arena__Blue_Warp => {
                    rules::access_defeat_gohma(&ctx, world)
                }
                ExitId::Deku_Tree__Compass_Room__Entry__Burn_Web => {
                    rules::access_is_child_and_sticks_and_nuts(&ctx, world)
                }
                ExitId::Deku_Tree__Compass_Room__Entry__ex__Floor_3__Door_1 => {
                    rules::access_deku_tree__compass_room__entry__ex__floor_3__door_1__req(
                        &ctx, world,
                    )
                }
                ExitId::Deku_Tree__Floor_2__Lower__ex__Lobby__Center_1 => true,
                ExitId::Deku_Tree__Floor_2__Lower__ex__Lobby__Vines_1 => true,
                ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Lobby__Center_1 => true,
                ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Lobby__Entry_1 => true,
                ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Scrub_Room__Entry_1 => true,
                ExitId::Deku_Tree__Floor_2__Vines__ex__Floor_3__Climb_1 => true,
                ExitId::Deku_Tree__Floor_2__Vines__ex__Floor_3__Climb_2 => {
                    rules::access_can_use__slingshot(&ctx, world)
                }
                ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Center_1 => true,
                ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Entry_1 => true,
                ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Vines_1 => true,
                ExitId::Deku_Tree__Floor_3__Door__Break_Web => {
                    rules::access_is_adult_or_can_child_attack_or_nuts(&ctx, world)
                }
                ExitId::Deku_Tree__Floor_3__Door__ex__Compass_Room__Entry_1 => true,
                ExitId::Deku_Tree__Floor_3__Door__ex__Lobby__Center_1 => {
                    rules::access_is_adult_or_can_child_attack_or_nuts(&ctx, world)
                }
                ExitId::Deku_Tree__Lobby__Center__ex__Basement_1__Center_1 => {
                    rules::access_deku_lobby_web(&ctx, world)
                }
                ExitId::Deku_Tree__Lobby__Center__ex__Basement_Ledge__Block_1 => {
                    rules::access_deku_lobby_web_and_logic_deku_b1_skip(&ctx, world)
                }
                ExitId::Deku_Tree__Lobby__Vines__ex__Floor_2__Lower_1 => true,
                ExitId::Deku_Tree__Scrub_Room__Entry__ex__Floor_2__Slingshot_Door_1 => true,
                ExitId::Deku_Tree__Scrub_Room__Rear__ex__Slingshot_Room__Entry_1 => {
                    rules::access_deku_slingshot_scrub(&ctx, world)
                }
                ExitId::Deku_Tree__Skull_Room__Entry__ex__Back_Room__Northwest_1 => true,
                ExitId::Deku_Tree__Slingshot_Room__Entry__ex__Scrub_Room__Rear_1 => true,
                ExitId::Deku_Tree__Slingshot_Room__Slingshot__ex__Slingshot_Upper__Ledge_1 => true,
                ExitId::Deku_Tree__Slingshot_Upper__Ledge__ex__Slingshot_Room__Slingshot_1 => true,
                ExitId::Kak__Spider_House__Entry__ex__KF__Kokiri_Village__Sarias_Porch_1 => true,
                ExitId::KF__Baba_Corridor__Tree_Side__ex__Outside_Deku_Tree__Entry_1 => true,
                ExitId::KF__Baba_Corridor__Village_Side__ex__Kokiri_Village__Midos_Guardpost_1 => {
                    true
                }
                ExitId::KF__Boulder_Maze__Entry__ex__Kokiri_Village__Training_Center_1 => {
                    rules::access_is_child(&ctx, world)
                }
                ExitId::KF__Know_it_all_House__Entry__ex__Kokiri_Village__Know_it_all_Porch_1 => {
                    true
                }
                ExitId::KF__Kokiri_Village__Know_it_all_Porch__ex__Know_it_all_House__Entry_1 => {
                    true
                }
                ExitId::KF__Kokiri_Village__Links_Porch__ex__Links_House__Entry_1 => true,
                ExitId::KF__Kokiri_Village__Midos_Guardpost__ex__Baba_Corridor__Village_Side_1 => {
                    rules::access_is_adult_or_showed_mido(&ctx, world)
                }
                ExitId::KF__Kokiri_Village__Midos_Porch__ex__Midos_House__Entry_1 => true,
                ExitId::KF__Kokiri_Village__Sarias_Porch__ex__Kak__Spider_House__Entry_1 => true,
                ExitId::KF__Kokiri_Village__Shop_Porch__ex__Shop__Entry_1 => true,
                ExitId::KF__Kokiri_Village__Training_Center__ex__Boulder_Maze__Entry_1 => {
                    rules::access_is_child(&ctx, world)
                }
                ExitId::KF__Links_House__Entry__ex__Kokiri_Village__Links_Porch_1 => true,
                ExitId::KF__Midos_House__Entry__ex__Kokiri_Village__Midos_Porch_1 => true,
                ExitId::KF__Outside_Deku_Tree__Entry__ex__Baba_Corridor__Tree_Side_1 => true,
                ExitId::KF__Outside_Deku_Tree__Mouth__ex__Deku_Tree__Lobby__Entry_1 => true,
                ExitId::KF__Shop__Entry__ex__Kokiri_Village__Shop_Porch_1 => true,
            }
    }
    fn base_time(&self) -> u32 {
        self.time
    }
    fn time(&self, ctx: &Context, world: &World) -> u32 {
        self.time
            + match self.id {
                _ => 0,
            }
    }
    fn price(&self) -> &Currency {
        &self.price
    }

    fn explain_rule(
        &self,
        ctx: &Self::Context,
        world: &World,
        edict: &mut FxHashMap<&'static str, String>,
    ) -> (bool, Vec<&'static str>) {
        match self.id {
            ExitId::Deku_Tree__Back_Room__East__ex__Basement_Ledge__Web_1 => {
                rules::explain_is_child(ctx, world, edict)
            }
            ExitId::Deku_Tree__Back_Room__Northwest__ex__Skull_Room__Entry_1 => {
                rules::explain_deku_back_room_web_and_deku_back_room_wall(ctx, world, edict)
            }
            ExitId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web => {
                rules::explain_deku_basement_block_and_is_child_and_sticks(ctx, world, edict)
            }
            ExitId::Deku_Tree__Basement_1__Corner__ex__Basement_Ledge__Block_1 => {
                rules::explain_is_adult_or_deku_basement_block(ctx, world, edict)
            }
            ExitId::Deku_Tree__Basement_2__Boss_Door__ex__Boss_Room__Entry_1 => {
                rules::explain_deku_basement_scrubs(ctx, world, edict)
            }
            ExitId::Deku_Tree__Basement_Ledge__Web__ex__Basement_2__Pool_1 => {
                rules::explain_deku_basement_web(ctx, world, edict)
            }
            ExitId::Deku_Tree__Boss_Room__Arena__Blue_Warp => {
                rules::explain_defeat_gohma(ctx, world, edict)
            }
            ExitId::Deku_Tree__Compass_Room__Entry__Burn_Web => {
                rules::explain_is_child_and_sticks_and_nuts(ctx, world, edict)
            }
            ExitId::Deku_Tree__Compass_Room__Entry__ex__Floor_3__Door_1 => {
                rules::explain_deku_tree__compass_room__entry__ex__floor_3__door_1__req(
                    ctx, world, edict,
                )
            }
            ExitId::Deku_Tree__Floor_2__Vines__ex__Floor_3__Climb_2 => {
                rules::explain_can_use__slingshot(ctx, world, edict)
            }
            ExitId::Deku_Tree__Floor_3__Door__Break_Web => {
                rules::explain_is_adult_or_can_child_attack_or_nuts(ctx, world, edict)
            }
            ExitId::Deku_Tree__Floor_3__Door__ex__Lobby__Center_1 => {
                rules::explain_is_adult_or_can_child_attack_or_nuts(ctx, world, edict)
            }
            ExitId::Deku_Tree__Lobby__Center__ex__Basement_1__Center_1 => {
                rules::explain_deku_lobby_web(ctx, world, edict)
            }
            ExitId::Deku_Tree__Lobby__Center__ex__Basement_Ledge__Block_1 => {
                rules::explain_deku_lobby_web_and_logic_deku_b1_skip(ctx, world, edict)
            }
            ExitId::Deku_Tree__Scrub_Room__Rear__ex__Slingshot_Room__Entry_1 => {
                rules::explain_deku_slingshot_scrub(ctx, world, edict)
            }
            ExitId::KF__Boulder_Maze__Entry__ex__Kokiri_Village__Training_Center_1 => {
                rules::explain_is_child(ctx, world, edict)
            }
            ExitId::KF__Kokiri_Village__Midos_Guardpost__ex__Baba_Corridor__Village_Side_1 => {
                rules::explain_is_adult_or_showed_mido(ctx, world, edict)
            }
            ExitId::KF__Kokiri_Village__Training_Center__ex__Boulder_Maze__Entry_1 => {
                rules::explain_is_child(ctx, world, edict)
            }
            _ => (true, vec![]),
        }
    }
}

impl world::Exit for Exit {
    type ExitId = ExitId;
    type SpotId = SpotId;
    type LocId = LocationId;

    fn id(&self) -> ExitId {
        self.id
    }
    fn dest(&self) -> SpotId {
        self.dest
    }
    fn connect(&mut self, dest: SpotId) {
        self.dest = dest;
    }
    fn loc_id(&self) -> &Option<LocationId> {
        &self.loc_id
    }

    fn always(id: ExitId) -> bool {
        match id {
            ExitId::Deku_Tree__Basement_1__Center__ex__Lobby__Center_1 => true,
            ExitId::Deku_Tree__Basement_1__South_Door__ex__Back_Room__South_1 => true,
            ExitId::Deku_Tree__Basement_2__Pool__ex__Basement_Ledge__Web_1 => true,
            ExitId::Deku_Tree__Basement_Ledge__Block__ex__Basement_1__Corner_1 => true,
            ExitId::Deku_Tree__Floor_2__Lower__ex__Lobby__Center_1 => true,
            ExitId::Deku_Tree__Floor_2__Lower__ex__Lobby__Vines_1 => true,
            ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Lobby__Center_1 => true,
            ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Lobby__Entry_1 => true,
            ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Scrub_Room__Entry_1 => true,
            ExitId::Deku_Tree__Floor_2__Vines__ex__Floor_3__Climb_1 => true,
            ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Center_1 => true,
            ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Entry_1 => true,
            ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Vines_1 => true,
            ExitId::Deku_Tree__Floor_3__Door__ex__Compass_Room__Entry_1 => true,
            ExitId::Deku_Tree__Lobby__Vines__ex__Floor_2__Lower_1 => true,
            ExitId::Deku_Tree__Scrub_Room__Entry__ex__Floor_2__Slingshot_Door_1 => true,
            ExitId::Deku_Tree__Skull_Room__Entry__ex__Back_Room__Northwest_1 => true,
            ExitId::Deku_Tree__Slingshot_Room__Entry__ex__Scrub_Room__Rear_1 => true,
            ExitId::Deku_Tree__Slingshot_Room__Slingshot__ex__Slingshot_Upper__Ledge_1 => true,
            ExitId::Deku_Tree__Slingshot_Upper__Ledge__ex__Slingshot_Room__Slingshot_1 => true,
            ExitId::Kak__Spider_House__Entry__ex__KF__Kokiri_Village__Sarias_Porch_1 => true,
            ExitId::KF__Baba_Corridor__Tree_Side__ex__Outside_Deku_Tree__Entry_1 => true,
            ExitId::KF__Baba_Corridor__Village_Side__ex__Kokiri_Village__Midos_Guardpost_1 => true,
            ExitId::KF__Know_it_all_House__Entry__ex__Kokiri_Village__Know_it_all_Porch_1 => true,
            ExitId::KF__Kokiri_Village__Know_it_all_Porch__ex__Know_it_all_House__Entry_1 => true,
            ExitId::KF__Kokiri_Village__Links_Porch__ex__Links_House__Entry_1 => true,
            ExitId::KF__Kokiri_Village__Midos_Porch__ex__Midos_House__Entry_1 => true,
            ExitId::KF__Kokiri_Village__Sarias_Porch__ex__Kak__Spider_House__Entry_1 => true,
            ExitId::KF__Kokiri_Village__Shop_Porch__ex__Shop__Entry_1 => true,
            ExitId::KF__Links_House__Entry__ex__Kokiri_Village__Links_Porch_1 => true,
            ExitId::KF__Midos_House__Entry__ex__Kokiri_Village__Midos_Porch_1 => true,
            ExitId::KF__Outside_Deku_Tree__Entry__ex__Baba_Corridor__Tree_Side_1 => true,
            ExitId::KF__Outside_Deku_Tree__Mouth__ex__Deku_Tree__Lobby__Entry_1 => true,
            ExitId::KF__Shop__Entry__ex__Kokiri_Village__Shop_Porch_1 => true,
            _ => false,
        }
    }
}

#[derive(Copy, Clone, Debug)]
pub struct Action {
    id: ActionId,
    time: u32,
    price: Currency,
}

impl world::Accessible for Action {
    type Context = Context;
    type Currency = Currency;
    fn can_access(&self, ctx: &Context, world: &World) -> bool {
        ctx.can_afford(&self.price)
            && match self.id {
                ActionId::Deku_Tree__Compass_Room__Entry__Light_Torch => {
                    rules::access_deku_tree__compass_room__entry__light_torch__req(&ctx, world)
                }
                ActionId::Global__Change_Time => true,
                ActionId::KF__Kokiri_Village__Midos_Porch__Gather_Rupees => true,
                ActionId::KF__Kokiri_Village__Sarias_Porch__Save => true,
            }
    }
    fn base_time(&self) -> u32 {
        self.time
    }
    fn time(&self, ctx: &Context, world: &World) -> u32 {
        self.time
            + match self.id {
                _ => 0,
            }
    }
    fn price(&self) -> &Currency {
        &self.price
    }

    fn explain_rule(
        &self,
        ctx: &Self::Context,
        world: &World,
        edict: &mut FxHashMap<&'static str, String>,
    ) -> (bool, Vec<&'static str>) {
        match self.id {
            ActionId::Deku_Tree__Compass_Room__Entry__Light_Torch => {
                rules::explain_deku_tree__compass_room__entry__light_torch__req(ctx, world, edict)
            }
            _ => (true, vec![]),
        }
    }
}
impl world::Action for Action {
    type ActionId = ActionId;
    type SpotId = SpotId;
    fn id(&self) -> ActionId {
        self.id
    }
    fn perform(&self, ctx: &mut Context, world: &World) {
        match self.id {
            ActionId::Global__Change_Time => {
                rules::action_tod_set_match_tod____day_setgt_night_night_setgt_day___setgt_day_(
                    ctx, world,
                )
            }
            ActionId::Deku_Tree__Compass_Room__Entry__Light_Torch => {
                rules::action_deku_tree__compass_room__entry__light_torch__do(ctx, world)
            }
            ActionId::KF__Kokiri_Village__Midos_Porch__Gather_Rupees => {
                rules::action_rupees_set_max__rupees_add_20_wallet_max(ctx, world)
            }
            ActionId::KF__Kokiri_Village__Sarias_Porch__Save => {
                rules::action_save_set_position(ctx, world)
            }
        };
        let dest = self.dest(ctx, world);
        if dest != SpotId::None {
            ctx.set_position(dest, world);
        }
        match self.id {
            _ => (),
        };
    }
    fn dest(&self, ctx: &Context, world: &World) -> SpotId {
        match self.id {
            _ => SpotId::None,
        }
    }
}

#[derive(Copy, Clone, Debug)]
pub struct Warp {
    id: WarpId,
    dest: SpotId,
    time: u32,
    price: Currency,
}
impl world::Accessible for Warp {
    type Context = Context;
    type Currency = Currency;

    fn can_access(&self, ctx: &Context, world: &World) -> bool {
        ctx.can_afford(&self.price)
            && match self.id {
                WarpId::Minuet => rules::access_can_play__minuet_of_forest(ctx, world),
                WarpId::Save => true,
            }
    }
    fn base_time(&self) -> u32 {
        self.time
    }
    fn time(&self, ctx: &Context, world: &World) -> u32 {
        self.time
            + match self.id {
                _ => 0,
            }
    }
    fn price(&self) -> &Currency {
        &self.price
    }

    fn explain_rule(
        &self,
        ctx: &Self::Context,
        world: &World,
        edict: &mut FxHashMap<&'static str, String>,
    ) -> (bool, Vec<&'static str>) {
        match self.id {
            WarpId::Minuet => rules::explain_can_play__minuet_of_forest(ctx, world, edict),
            _ => (true, vec![]),
        }
    }
}
impl world::Warp for Warp {
    type WarpId = WarpId;
    type SpotId = SpotId;

    fn id(&self) -> WarpId {
        self.id
    }
    fn dest(&self, ctx: &Context, world: &World) -> SpotId {
        if self.dest == SpotId::None {
            match self.id {
                WarpId::Minuet => SpotId::KF__Kokiri_Village__Shop_Porch,
                WarpId::Save => data::save(ctx.position()),
            }
        } else {
            self.dest
        }
    }
    fn connect(&mut self, dest: SpotId) {
        self.dest = dest;
    }
    fn prewarp(&self, ctx: &mut Context, world: &World) {
        match self.id {
            _ => (),
        }
    }
    fn postwarp(&self, ctx: &mut Context, world: &World) {
        match self.id {
            _ => (),
        }
    }
    fn should_reload(&self) -> bool {
        match self.id {
            WarpId::Minuet => false,
            WarpId::Save => false,
        }
    }
}

#[derive(Clone, Debug, Default)]
pub struct Spot {
    pub id: SpotId,
    pub locations: Range<usize>,
    pub exits: Range<usize>,
    pub actions: Range<usize>,
}

static RAW_SPOTS: [SpotId; 52] = [
    SpotId::None,
    SpotId::Deku_Tree__Back_Room__East,
    SpotId::Deku_Tree__Back_Room__Northwest,
    SpotId::Deku_Tree__Back_Room__South,
    SpotId::Deku_Tree__Basement_1__Center,
    SpotId::Deku_Tree__Basement_1__Corner,
    SpotId::Deku_Tree__Basement_1__South_Door,
    SpotId::Deku_Tree__Basement_2__Boss_Door,
    SpotId::Deku_Tree__Basement_2__Pool,
    SpotId::Deku_Tree__Basement_Ledge__Block,
    SpotId::Deku_Tree__Basement_Ledge__Web,
    SpotId::Deku_Tree__Boss_Room__Arena,
    SpotId::Deku_Tree__Boss_Room__Entry,
    SpotId::Deku_Tree__Compass_Room__Compass,
    SpotId::Deku_Tree__Compass_Room__Entry,
    SpotId::Deku_Tree__Compass_Room__Ledge,
    SpotId::Deku_Tree__Floor_2__Lower,
    SpotId::Deku_Tree__Floor_2__Slingshot_Door,
    SpotId::Deku_Tree__Floor_2__Vines,
    SpotId::Deku_Tree__Floor_3__Climb,
    SpotId::Deku_Tree__Floor_3__Door,
    SpotId::Deku_Tree__Lobby__Center,
    SpotId::Deku_Tree__Lobby__Entry,
    SpotId::Deku_Tree__Lobby__Vines,
    SpotId::Deku_Tree__Scrub_Room__Entry,
    SpotId::Deku_Tree__Scrub_Room__Rear,
    SpotId::Deku_Tree__Skull_Room__Entry,
    SpotId::Deku_Tree__Slingshot_Room__Entry,
    SpotId::Deku_Tree__Slingshot_Room__Slingshot,
    SpotId::Deku_Tree__Slingshot_Upper__Ledge,
    SpotId::Kak__Spider_House__Entry,
    SpotId::KF__Baba_Corridor__Deku_Babas,
    SpotId::KF__Baba_Corridor__Tree_Side,
    SpotId::KF__Baba_Corridor__Village_Side,
    SpotId::KF__Boulder_Maze__Entry,
    SpotId::KF__Boulder_Maze__Reward,
    SpotId::KF__Know_it_all_House__Entry,
    SpotId::KF__Kokiri_Village__Know_it_all_Porch,
    SpotId::KF__Kokiri_Village__Links_Porch,
    SpotId::KF__Kokiri_Village__Midos_Guardpost,
    SpotId::KF__Kokiri_Village__Midos_Porch,
    SpotId::KF__Kokiri_Village__Sarias_Porch,
    SpotId::KF__Kokiri_Village__Shop_Porch,
    SpotId::KF__Kokiri_Village__Training_Center,
    SpotId::KF__Links_House__Entry,
    SpotId::KF__Links_House__Start_Point,
    SpotId::KF__Midos_House__Entry,
    SpotId::KF__Outside_Deku_Tree__Entry,
    SpotId::KF__Outside_Deku_Tree__Left,
    SpotId::KF__Outside_Deku_Tree__Mouth,
    SpotId::KF__Outside_Deku_Tree__Right,
    SpotId::KF__Shop__Entry,
];

lazy_static! {
    // Using get_area, we can get the nearby spots by indexing into the spot lists
    static ref RAW_AREA_SPOT_RANGES: EnumMap<AreaId, Range<usize>> = enum_map! {
        AreaId::Deku_Tree__Back_Room => Range {
            start: SpotId::Deku_Tree__Back_Room__East.into_usize(),
            end: SpotId::Deku_Tree__Back_Room__South.into_usize() + 1,
        },
        AreaId::Deku_Tree__Basement_1 => Range {
            start: SpotId::Deku_Tree__Basement_1__Center.into_usize(),
            end: SpotId::Deku_Tree__Basement_1__South_Door.into_usize() + 1,
        },
        AreaId::Deku_Tree__Basement_2 => Range {
            start: SpotId::Deku_Tree__Basement_2__Boss_Door.into_usize(),
            end: SpotId::Deku_Tree__Basement_2__Pool.into_usize() + 1,
        },
        AreaId::Deku_Tree__Basement_Ledge => Range {
            start: SpotId::Deku_Tree__Basement_Ledge__Block.into_usize(),
            end: SpotId::Deku_Tree__Basement_Ledge__Web.into_usize() + 1,
        },
        AreaId::Deku_Tree__Boss_Room => Range {
            start: SpotId::Deku_Tree__Boss_Room__Arena.into_usize(),
            end: SpotId::Deku_Tree__Boss_Room__Entry.into_usize() + 1,
        },
        AreaId::Deku_Tree__Compass_Room => Range {
            start: SpotId::Deku_Tree__Compass_Room__Compass.into_usize(),
            end: SpotId::Deku_Tree__Compass_Room__Ledge.into_usize() + 1,
        },
        AreaId::Deku_Tree__Floor_2 => Range {
            start: SpotId::Deku_Tree__Floor_2__Lower.into_usize(),
            end: SpotId::Deku_Tree__Floor_2__Vines.into_usize() + 1,
        },
        AreaId::Deku_Tree__Floor_3 => Range {
            start: SpotId::Deku_Tree__Floor_3__Climb.into_usize(),
            end: SpotId::Deku_Tree__Floor_3__Door.into_usize() + 1,
        },
        AreaId::Deku_Tree__Lobby => Range {
            start: SpotId::Deku_Tree__Lobby__Center.into_usize(),
            end: SpotId::Deku_Tree__Lobby__Vines.into_usize() + 1,
        },
        AreaId::Deku_Tree__Scrub_Room => Range {
            start: SpotId::Deku_Tree__Scrub_Room__Entry.into_usize(),
            end: SpotId::Deku_Tree__Scrub_Room__Rear.into_usize() + 1,
        },
        AreaId::Deku_Tree__Skull_Room => Range {
            start: SpotId::Deku_Tree__Skull_Room__Entry.into_usize(),
            end: SpotId::Deku_Tree__Skull_Room__Entry.into_usize() + 1,
        },
        AreaId::Deku_Tree__Slingshot_Room => Range {
            start: SpotId::Deku_Tree__Slingshot_Room__Entry.into_usize(),
            end: SpotId::Deku_Tree__Slingshot_Room__Slingshot.into_usize() + 1,
        },
        AreaId::Deku_Tree__Slingshot_Upper => Range {
            start: SpotId::Deku_Tree__Slingshot_Upper__Ledge.into_usize(),
            end: SpotId::Deku_Tree__Slingshot_Upper__Ledge.into_usize() + 1,
        },
        AreaId::KF__Baba_Corridor => Range {
            start: SpotId::KF__Baba_Corridor__Deku_Babas.into_usize(),
            end: SpotId::KF__Baba_Corridor__Village_Side.into_usize() + 1,
        },
        AreaId::KF__Boulder_Maze => Range {
            start: SpotId::KF__Boulder_Maze__Entry.into_usize(),
            end: SpotId::KF__Boulder_Maze__Reward.into_usize() + 1,
        },
        AreaId::KF__Know_it_all_House => Range {
            start: SpotId::KF__Know_it_all_House__Entry.into_usize(),
            end: SpotId::KF__Know_it_all_House__Entry.into_usize() + 1,
        },
        AreaId::KF__Kokiri_Village => Range {
            start: SpotId::KF__Kokiri_Village__Know_it_all_Porch.into_usize(),
            end: SpotId::KF__Kokiri_Village__Training_Center.into_usize() + 1,
        },
        AreaId::KF__Links_House => Range {
            start: SpotId::KF__Links_House__Entry.into_usize(),
            end: SpotId::KF__Links_House__Start_Point.into_usize() + 1,
        },
        AreaId::KF__Midos_House => Range {
            start: SpotId::KF__Midos_House__Entry.into_usize(),
            end: SpotId::KF__Midos_House__Entry.into_usize() + 1,
        },
        AreaId::KF__Outside_Deku_Tree => Range {
            start: SpotId::KF__Outside_Deku_Tree__Entry.into_usize(),
            end: SpotId::KF__Outside_Deku_Tree__Right.into_usize() + 1,
        },
        AreaId::KF__Shop => Range {
            start: SpotId::KF__Shop__Entry.into_usize(),
            end: SpotId::KF__Shop__Entry.into_usize() + 1,
        },
        AreaId::Kak__Spider_House => Range {
            start: SpotId::Kak__Spider_House__Entry.into_usize(),
            end: SpotId::Kak__Spider_House__Entry.into_usize() + 1,
        },
    };
}

#[derive(Clone, Debug)]
pub struct World {
    pub rule_victory: RuleVictory,
    pub rule_objective: RuleObjective,
    // These are arrays that group the items together by their parent.
    // Using EnumMap for this ONLY WORKS if the keys are properly ordered to group
    // nearby things together.
    // For entrance rando, we would need to have a layer of indirection:
    // list_index: EnumMap<EnumType, usize>,
    // list: EnumArray<ObjType>,
    locations: EnumMap<LocationId, Location>,
    exits: EnumMap<ExitId, Exit>,
    actions: EnumMap<ActionId, Action>,
    warps: EnumMap<WarpId, Warp>,
    // Index ranges for slices into the above arrays
    spots: EnumMap<SpotId, Spot>,
    global_actions: Range<usize>,
    min_warp_time: u32,
    // Condensed edges
    condensed: Option<EnumMap<SpotId, Vec<CondensedEdge<Context, SpotId, ExitId>>>>,
}

impl world::World for World {
    type Location = Location;
    type Exit = Exit;
    type Action = Action;
    type Warp = Warp;
    const NUM_LOCATIONS: u32 = 48;

    fn ruleset(&self) -> String {
        format!(
            "[$victory: {}, $objective: {}]",
            self.rule_victory, self.rule_objective,
        )
    }

    fn get_location(&self, id: LocationId) -> &Location {
        &self.locations[id]
    }
    fn get_spot_locations(&self, spot_id: SpotId) -> &[Location] {
        let r = &self.spots[spot_id].locations;
        &self.locations.as_slice()[r.start..r.end]
    }
    fn get_exit(&self, id: ExitId) -> &Exit {
        &self.exits[id]
    }
    fn get_spot_exits(&self, spot_id: SpotId) -> &[Exit] {
        let r = &self.spots[spot_id].exits;
        &self.exits.as_slice()[r.start..r.end]
    }
    fn get_action(&self, id: ActionId) -> &Action {
        &self.actions[id]
    }
    fn get_spot_actions(&self, spot_id: SpotId) -> &[Action] {
        let r = &self.spots[spot_id].actions;
        &self.actions.as_slice()[r.start..r.end]
    }
    fn get_global_actions(&self) -> &[Action] {
        &self.actions.as_slice()[self.global_actions.start..self.global_actions.end]
    }
    fn get_warp(&self, id: WarpId) -> &Warp {
        &self.warps[id]
    }

    fn get_canon_locations(&self, loc_id: LocationId) -> Vec<LocationId> {
        let loc = self.get_location(loc_id);
        match world::Location::canon_id(loc) {
            CanonId::None => vec![],
            CanonId::Deku_Lobby_Web => vec![
                LocationId::Deku_Tree__Lobby__Center__Web,
                LocationId::Deku_Tree__Floor_3__Door__Break_Web,
                LocationId::Deku_Tree__Compass_Room__Entry__Burn_Web,
            ],
            CanonId::Deku_Basement_Web => vec![
                LocationId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web,
                LocationId::Deku_Tree__Basement_Ledge__Web__Burn_Web,
            ],
            CanonId::Defeat_Gohma => vec![
                LocationId::Deku_Tree__Boss_Room__Arena__Gohma,
                LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Quick_Kill,
            ],
        }
    }

    // Hardcoded locations. To support a randomizer, this would be better as a cache.
    fn get_item_locations(&self, item: Item) -> Vec<LocationId> {
        match item {
            Item::Deku_Stick_Drop => vec![
                LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Sticks,
                LocationId::KF__Baba_Corridor__Deku_Babas__Sticks,
            ],
            Item::Deku_Nut_Drop => vec![
                LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Nuts,
                LocationId::KF__Baba_Corridor__Deku_Babas__Nuts,
            ],
            Item::Deku_Lobby_Web => vec![
                LocationId::Deku_Tree__Lobby__Center__Web,
                LocationId::Deku_Tree__Floor_3__Door__Break_Web,
                LocationId::Deku_Tree__Compass_Room__Entry__Burn_Web,
            ],
            Item::Map_Deku_Tree => vec![LocationId::Deku_Tree__Floor_2__Vines__Map_Chest],
            Item::Deku_Slingshot_Scrub => vec![LocationId::Deku_Tree__Scrub_Room__Entry__Scrub],
            Item::Slingshot => vec![LocationId::Deku_Tree__Slingshot_Room__Slingshot__Chest],
            Item::Recovery_Heart => vec![
                LocationId::Deku_Tree__Slingshot_Upper__Ledge__Chest,
                LocationId::Deku_Tree__Compass_Room__Ledge__Chest,
                LocationId::Deku_Tree__Basement_1__Corner__Chest,
                LocationId::KF__Midos_House__Entry__Bottom_Right_Chest,
            ],
            Item::Compass_Deku_Tree => vec![LocationId::Deku_Tree__Compass_Room__Compass__Chest],
            Item::Gold_Skulltula_Token => vec![
                LocationId::Deku_Tree__Compass_Room__Ledge__GS,
                LocationId::Deku_Tree__Basement_1__Center__Vines_GS,
                LocationId::Deku_Tree__Basement_1__Corner__Gate_GS,
                LocationId::Deku_Tree__Skull_Room__Entry__GS,
            ],
            Item::Deku_Basement_Switch => vec![LocationId::Deku_Tree__Basement_1__Corner__Switch],
            Item::Deku_Basement_Web => vec![
                LocationId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web,
                LocationId::Deku_Tree__Basement_Ledge__Web__Burn_Web,
            ],
            Item::Deku_Back_Room_Web => vec![LocationId::Deku_Tree__Back_Room__Northwest__Burn_Web],
            Item::Deku_Back_Room_Wall => {
                vec![LocationId::Deku_Tree__Back_Room__Northwest__Break_Wall]
            }
            Item::Deku_Basement_Block => {
                vec![LocationId::Deku_Tree__Basement_Ledge__Block__Push_Block]
            }
            Item::Deku_Basement_Scrubs => {
                vec![LocationId::Deku_Tree__Basement_2__Boss_Door__Scrubs]
            }
            Item::Defeat_Gohma => vec![
                LocationId::Deku_Tree__Boss_Room__Arena__Gohma,
                LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Quick_Kill,
            ],
            Item::Heart_Container => vec![LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Heart],
            Item::Kokiri_Emerald => vec![LocationId::Deku_Tree__Boss_Room__Arena__Blue_Warp],
            Item::Victory => vec![LocationId::KF__Kokiri_Village__Training_Center__Victory],
            Item::Showed_Mido => vec![LocationId::KF__Kokiri_Village__Midos_Guardpost__Show_Mido],
            Item::Kokiri_Sword => vec![LocationId::KF__Boulder_Maze__Reward__Chest],
            Item::Gossip_Stone_Deku_Left => {
                vec![LocationId::KF__Outside_Deku_Tree__Left__Gossip_Stone]
            }
            Item::Gossip_Stone_Deku_Right => {
                vec![LocationId::KF__Outside_Deku_Tree__Right__Gossip_Stone]
            }
            Item::Rupees_5 => vec![
                LocationId::KF__Midos_House__Entry__Top_Left_Chest,
                LocationId::KF__Shop__Entry__Blue_Rupee,
            ],
            Item::Rupees_50 => vec![LocationId::KF__Midos_House__Entry__Top_Right_Chest],
            Item::Rupee_1 => vec![LocationId::KF__Midos_House__Entry__Bottom_Left_Chest],
            Item::Buy_Deku_Shield => vec![LocationId::KF__Shop__Entry__Item_1],
            Item::Buy_Deku_Nut_5 => vec![LocationId::KF__Shop__Entry__Item_2],
            Item::Buy_Deku_Nut_10 => vec![LocationId::KF__Shop__Entry__Item_3],
            Item::Buy_Deku_Stick_1 => vec![LocationId::KF__Shop__Entry__Item_4],
            Item::Buy_Deku_Seeds_30 => vec![LocationId::KF__Shop__Entry__Item_5],
            Item::Buy_Arrows_10 => vec![LocationId::KF__Shop__Entry__Item_6],
            Item::Buy_Arrows_30 => vec![LocationId::KF__Shop__Entry__Item_7],
            Item::Buy_Heart => vec![LocationId::KF__Shop__Entry__Item_8],
            Item::Arrows_10 => vec![LocationId::Kak__Spider_House__Entry__Skulls_10],
            _ => Vec::new(),
        }
    }

    fn same_region(sp1: SpotId, sp2: SpotId) -> bool {
        get_region(sp1) == get_region(sp2)
    }
    fn same_area(sp1: SpotId, sp2: SpotId) -> bool {
        get_area(sp1) == get_area(sp2)
    }
    fn get_area_spots(&self, spot_id: SpotId) -> &[SpotId] {
        if spot_id == SpotId::None {
            &RAW_SPOTS[0..0]
        } else {
            let area_id = get_area(spot_id);
            let r = &RAW_AREA_SPOT_RANGES[area_id];
            &RAW_SPOTS[r.start..r.end]
        }
    }
    fn get_warps(&self) -> &[Warp] {
        &self.warps.as_slice()
    }

    fn get_all_locations(&self) -> &[Location] {
        &self.locations.as_slice()
    }

    fn get_location_spot(&self, loc_id: LocationId) -> SpotId {
        match loc_id {
            LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Nuts
            | LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Sticks
            | LocationId::Deku_Tree__Lobby__Center__Web => SpotId::Deku_Tree__Lobby__Center,
            LocationId::Deku_Tree__Floor_2__Vines__Map_Chest => SpotId::Deku_Tree__Floor_2__Vines,
            LocationId::Deku_Tree__Scrub_Room__Entry__Scrub => SpotId::Deku_Tree__Scrub_Room__Entry,
            LocationId::Deku_Tree__Slingshot_Room__Slingshot__Chest => {
                SpotId::Deku_Tree__Slingshot_Room__Slingshot
            }
            LocationId::Deku_Tree__Slingshot_Upper__Ledge__Chest => {
                SpotId::Deku_Tree__Slingshot_Upper__Ledge
            }
            LocationId::Deku_Tree__Floor_3__Door__Break_Web => SpotId::Deku_Tree__Floor_3__Door,
            LocationId::Deku_Tree__Compass_Room__Entry__Burn_Web => {
                SpotId::Deku_Tree__Compass_Room__Entry
            }
            LocationId::Deku_Tree__Compass_Room__Compass__Chest => {
                SpotId::Deku_Tree__Compass_Room__Compass
            }
            LocationId::Deku_Tree__Compass_Room__Ledge__Chest
            | LocationId::Deku_Tree__Compass_Room__Ledge__GS => {
                SpotId::Deku_Tree__Compass_Room__Ledge
            }
            LocationId::Deku_Tree__Basement_1__Center__Vines_GS => {
                SpotId::Deku_Tree__Basement_1__Center
            }
            LocationId::Deku_Tree__Basement_1__Corner__Chest
            | LocationId::Deku_Tree__Basement_1__Corner__Gate_GS
            | LocationId::Deku_Tree__Basement_1__Corner__Switch => {
                SpotId::Deku_Tree__Basement_1__Corner
            }
            LocationId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web => {
                SpotId::Deku_Tree__Basement_1__Corner
            }
            LocationId::Deku_Tree__Back_Room__Northwest__Break_Wall
            | LocationId::Deku_Tree__Back_Room__Northwest__Burn_Web => {
                SpotId::Deku_Tree__Back_Room__Northwest
            }
            LocationId::Deku_Tree__Skull_Room__Entry__GS => SpotId::Deku_Tree__Skull_Room__Entry,
            LocationId::Deku_Tree__Basement_Ledge__Block__Push_Block => {
                SpotId::Deku_Tree__Basement_Ledge__Block
            }
            LocationId::Deku_Tree__Basement_Ledge__Web__Burn_Web => {
                SpotId::Deku_Tree__Basement_Ledge__Web
            }
            LocationId::Deku_Tree__Basement_2__Boss_Door__Scrubs => {
                SpotId::Deku_Tree__Basement_2__Boss_Door
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma
            | LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Heart
            | LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Quick_Kill => {
                SpotId::Deku_Tree__Boss_Room__Arena
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Blue_Warp => {
                SpotId::Deku_Tree__Boss_Room__Arena
            }
            LocationId::KF__Kokiri_Village__Training_Center__Victory => {
                SpotId::KF__Kokiri_Village__Training_Center
            }
            LocationId::KF__Kokiri_Village__Midos_Guardpost__Show_Mido => {
                SpotId::KF__Kokiri_Village__Midos_Guardpost
            }
            LocationId::KF__Boulder_Maze__Reward__Chest => SpotId::KF__Boulder_Maze__Reward,
            LocationId::KF__Baba_Corridor__Deku_Babas__Nuts
            | LocationId::KF__Baba_Corridor__Deku_Babas__Sticks => {
                SpotId::KF__Baba_Corridor__Deku_Babas
            }
            LocationId::KF__Outside_Deku_Tree__Left__Gossip_Stone => {
                SpotId::KF__Outside_Deku_Tree__Left
            }
            LocationId::KF__Outside_Deku_Tree__Right__Gossip_Stone => {
                SpotId::KF__Outside_Deku_Tree__Right
            }
            LocationId::KF__Midos_House__Entry__Bottom_Left_Chest
            | LocationId::KF__Midos_House__Entry__Bottom_Right_Chest
            | LocationId::KF__Midos_House__Entry__Top_Left_Chest
            | LocationId::KF__Midos_House__Entry__Top_Right_Chest => SpotId::KF__Midos_House__Entry,
            LocationId::KF__Shop__Entry__Blue_Rupee
            | LocationId::KF__Shop__Entry__Item_1
            | LocationId::KF__Shop__Entry__Item_2
            | LocationId::KF__Shop__Entry__Item_3
            | LocationId::KF__Shop__Entry__Item_4
            | LocationId::KF__Shop__Entry__Item_5
            | LocationId::KF__Shop__Entry__Item_6
            | LocationId::KF__Shop__Entry__Item_7
            | LocationId::KF__Shop__Entry__Item_8 => SpotId::KF__Shop__Entry,
            LocationId::Kak__Spider_House__Entry__Skulls_10 => SpotId::Kak__Spider_House__Entry,
        }
    }

    fn get_action_spot(&self, act_id: ActionId) -> SpotId {
        match act_id {
            ActionId::Deku_Tree__Compass_Room__Entry__Light_Torch => {
                SpotId::Deku_Tree__Compass_Room__Entry
            }
            ActionId::KF__Kokiri_Village__Midos_Porch__Gather_Rupees => {
                SpotId::KF__Kokiri_Village__Midos_Porch
            }
            ActionId::KF__Kokiri_Village__Sarias_Porch__Save => {
                SpotId::KF__Kokiri_Village__Sarias_Porch
            }
            _ => SpotId::None,
        }
    }

    fn get_exit_spot(&self, exit_id: ExitId) -> SpotId {
        match exit_id {
            ExitId::Deku_Tree__Lobby__Center__ex__Basement_1__Center_1
            | ExitId::Deku_Tree__Lobby__Center__ex__Basement_Ledge__Block_1 => {
                SpotId::Deku_Tree__Lobby__Center
            }
            ExitId::Deku_Tree__Lobby__Vines__ex__Floor_2__Lower_1 => {
                SpotId::Deku_Tree__Lobby__Vines
            }
            ExitId::Deku_Tree__Floor_2__Lower__ex__Lobby__Vines_1
            | ExitId::Deku_Tree__Floor_2__Lower__ex__Lobby__Center_1 => {
                SpotId::Deku_Tree__Floor_2__Lower
            }
            ExitId::Deku_Tree__Floor_2__Vines__ex__Floor_3__Climb_1
            | ExitId::Deku_Tree__Floor_2__Vines__ex__Floor_3__Climb_2
            | ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Vines_1
            | ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Entry_1
            | ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Center_1 => {
                SpotId::Deku_Tree__Floor_2__Vines
            }
            ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Scrub_Room__Entry_1
            | ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Lobby__Entry_1
            | ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Lobby__Center_1 => {
                SpotId::Deku_Tree__Floor_2__Slingshot_Door
            }
            ExitId::Deku_Tree__Scrub_Room__Entry__ex__Floor_2__Slingshot_Door_1 => {
                SpotId::Deku_Tree__Scrub_Room__Entry
            }
            ExitId::Deku_Tree__Scrub_Room__Rear__ex__Slingshot_Room__Entry_1 => {
                SpotId::Deku_Tree__Scrub_Room__Rear
            }
            ExitId::Deku_Tree__Slingshot_Room__Entry__ex__Scrub_Room__Rear_1 => {
                SpotId::Deku_Tree__Slingshot_Room__Entry
            }
            ExitId::Deku_Tree__Slingshot_Room__Slingshot__ex__Slingshot_Upper__Ledge_1 => {
                SpotId::Deku_Tree__Slingshot_Room__Slingshot
            }
            ExitId::Deku_Tree__Slingshot_Upper__Ledge__ex__Slingshot_Room__Slingshot_1 => {
                SpotId::Deku_Tree__Slingshot_Upper__Ledge
            }
            ExitId::Deku_Tree__Floor_3__Door__ex__Compass_Room__Entry_1
            | ExitId::Deku_Tree__Floor_3__Door__ex__Lobby__Center_1 => {
                SpotId::Deku_Tree__Floor_3__Door
            }
            ExitId::Deku_Tree__Floor_3__Door__Break_Web => SpotId::Deku_Tree__Floor_3__Door,
            ExitId::Deku_Tree__Compass_Room__Entry__ex__Floor_3__Door_1 => {
                SpotId::Deku_Tree__Compass_Room__Entry
            }
            ExitId::Deku_Tree__Compass_Room__Entry__Burn_Web => {
                SpotId::Deku_Tree__Compass_Room__Entry
            }
            ExitId::Deku_Tree__Basement_1__Center__ex__Lobby__Center_1 => {
                SpotId::Deku_Tree__Basement_1__Center
            }
            ExitId::Deku_Tree__Basement_1__Corner__ex__Basement_Ledge__Block_1 => {
                SpotId::Deku_Tree__Basement_1__Corner
            }
            ExitId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web => {
                SpotId::Deku_Tree__Basement_1__Corner
            }
            ExitId::Deku_Tree__Basement_1__South_Door__ex__Back_Room__South_1 => {
                SpotId::Deku_Tree__Basement_1__South_Door
            }
            ExitId::Deku_Tree__Back_Room__Northwest__ex__Skull_Room__Entry_1 => {
                SpotId::Deku_Tree__Back_Room__Northwest
            }
            ExitId::Deku_Tree__Back_Room__East__ex__Basement_Ledge__Web_1 => {
                SpotId::Deku_Tree__Back_Room__East
            }
            ExitId::Deku_Tree__Skull_Room__Entry__ex__Back_Room__Northwest_1 => {
                SpotId::Deku_Tree__Skull_Room__Entry
            }
            ExitId::Deku_Tree__Basement_Ledge__Block__ex__Basement_1__Corner_1 => {
                SpotId::Deku_Tree__Basement_Ledge__Block
            }
            ExitId::Deku_Tree__Basement_Ledge__Web__ex__Basement_2__Pool_1 => {
                SpotId::Deku_Tree__Basement_Ledge__Web
            }
            ExitId::Deku_Tree__Basement_2__Pool__ex__Basement_Ledge__Web_1 => {
                SpotId::Deku_Tree__Basement_2__Pool
            }
            ExitId::Deku_Tree__Basement_2__Boss_Door__ex__Boss_Room__Entry_1 => {
                SpotId::Deku_Tree__Basement_2__Boss_Door
            }
            ExitId::Deku_Tree__Boss_Room__Arena__Blue_Warp => SpotId::Deku_Tree__Boss_Room__Arena,
            ExitId::KF__Links_House__Entry__ex__Kokiri_Village__Links_Porch_1 => {
                SpotId::KF__Links_House__Entry
            }
            ExitId::KF__Kokiri_Village__Links_Porch__ex__Links_House__Entry_1 => {
                SpotId::KF__Kokiri_Village__Links_Porch
            }
            ExitId::KF__Kokiri_Village__Midos_Porch__ex__Midos_House__Entry_1 => {
                SpotId::KF__Kokiri_Village__Midos_Porch
            }
            ExitId::KF__Kokiri_Village__Know_it_all_Porch__ex__Know_it_all_House__Entry_1 => {
                SpotId::KF__Kokiri_Village__Know_it_all_Porch
            }
            ExitId::KF__Kokiri_Village__Training_Center__ex__Boulder_Maze__Entry_1 => {
                SpotId::KF__Kokiri_Village__Training_Center
            }
            ExitId::KF__Kokiri_Village__Shop_Porch__ex__Shop__Entry_1 => {
                SpotId::KF__Kokiri_Village__Shop_Porch
            }
            ExitId::KF__Kokiri_Village__Sarias_Porch__ex__Kak__Spider_House__Entry_1 => {
                SpotId::KF__Kokiri_Village__Sarias_Porch
            }
            ExitId::KF__Kokiri_Village__Midos_Guardpost__ex__Baba_Corridor__Village_Side_1 => {
                SpotId::KF__Kokiri_Village__Midos_Guardpost
            }
            ExitId::KF__Boulder_Maze__Entry__ex__Kokiri_Village__Training_Center_1 => {
                SpotId::KF__Boulder_Maze__Entry
            }
            ExitId::KF__Baba_Corridor__Village_Side__ex__Kokiri_Village__Midos_Guardpost_1 => {
                SpotId::KF__Baba_Corridor__Village_Side
            }
            ExitId::KF__Baba_Corridor__Tree_Side__ex__Outside_Deku_Tree__Entry_1 => {
                SpotId::KF__Baba_Corridor__Tree_Side
            }
            ExitId::KF__Outside_Deku_Tree__Entry__ex__Baba_Corridor__Tree_Side_1 => {
                SpotId::KF__Outside_Deku_Tree__Entry
            }
            ExitId::KF__Outside_Deku_Tree__Mouth__ex__Deku_Tree__Lobby__Entry_1 => {
                SpotId::KF__Outside_Deku_Tree__Mouth
            }
            ExitId::KF__Midos_House__Entry__ex__Kokiri_Village__Midos_Porch_1 => {
                SpotId::KF__Midos_House__Entry
            }
            ExitId::KF__Know_it_all_House__Entry__ex__Kokiri_Village__Know_it_all_Porch_1 => {
                SpotId::KF__Know_it_all_House__Entry
            }
            ExitId::KF__Shop__Entry__ex__Kokiri_Village__Shop_Porch_1 => SpotId::KF__Shop__Entry,
            ExitId::Kak__Spider_House__Entry__ex__KF__Kokiri_Village__Sarias_Porch_1 => {
                SpotId::Kak__Spider_House__Entry
            }
            _ => SpotId::None,
        }
    }

    fn get_all_spots(&self) -> &[SpotId] {
        RAW_SPOTS.as_slice()
    }

    fn skip_unused_items(&self, ctx: &mut Context) {
        for (id, loc) in &self.locations {
            if unused_item(world::Location::item(loc))
                || self.unused_by_rules(world::Location::item(loc))
            {
                ctx.skip(id);
            }
        }
    }

    fn won(&self, ctx: &Context) -> bool {
        crate::rule__victory!(ctx, self)
    }

    fn items_needed(&self, ctx: &Context) -> Vec<(Item, i16)> {
        let mut map = analyzer::new_hashmap();

        match self.rule_victory {
            RuleVictory::Default => {
                if !ctx.has(Item::Victory) {
                    map.insert(Item::Victory, 1);
                }
                match self.rule_objective {
                    RuleObjective::Gohma => {
                        if !ctx.has(Item::Deku_Lobby_Web) {
                            if !map.contains_key(&Item::Deku_Lobby_Web) {
                                map.insert(Item::Deku_Lobby_Web, 1);
                            }
                        }
                        if !ctx.has(Item::Kokiri_Emerald) {
                            if !map.contains_key(&Item::Kokiri_Emerald) {
                                map.insert(Item::Kokiri_Emerald, 1);
                            }
                        }
                    }
                    RuleObjective::Ganon => {
                        if !ctx.has(Item::Defeat_Ganon) {
                            if !map.contains_key(&Item::Defeat_Ganon) {
                                map.insert(Item::Defeat_Ganon, 1);
                            }
                        }
                    }
                    RuleObjective::TriforceHunt => {
                        if ctx.count(Item::Triforce_Piece) < 1024 {
                            if let Some(val) = map.get_mut(&Item::Triforce_Piece) {
                                *val = std::cmp::max(*val, 1024 - ctx.count(Item::Triforce_Piece));
                            } else {
                                map.insert(
                                    Item::Triforce_Piece,
                                    1024 - ctx.count(Item::Triforce_Piece),
                                );
                            }
                        }
                    }
                }
            }
        }

        map.drain().collect()
    }

    fn required_items(&self) -> Vec<(Item, i16)> {
        let mut map = analyzer::new_hashmap();

        match self.rule_victory {
            RuleVictory::Default => {
                map.insert(Item::Victory, 1);
                match self.rule_objective {
                    RuleObjective::Gohma => {
                        if !map.contains_key(&Item::Deku_Lobby_Web) {
                            map.insert(Item::Deku_Lobby_Web, 1);
                        }
                        if !map.contains_key(&Item::Kokiri_Emerald) {
                            map.insert(Item::Kokiri_Emerald, 1);
                        }
                    }
                    RuleObjective::Ganon => {
                        if !map.contains_key(&Item::Defeat_Ganon) {
                            map.insert(Item::Defeat_Ganon, 1);
                        }
                    }
                    RuleObjective::TriforceHunt => {
                        if let Some(val) = map.get_mut(&Item::Triforce_Piece) {
                            *val = std::cmp::max(*val, 1024);
                        } else {
                            map.insert(Item::Triforce_Piece, 1024);
                        }
                    }
                }
            }
        }

        map.drain().collect()
    }

    fn base_edges(&self) -> Vec<(SpotId, SpotId, u32)> {
        movements::base_edges()
    }

    fn are_spots_connected(&self, sp1: SpotId, sp2: SpotId) -> bool {
        movements::are_spots_connected(sp1, sp2)
    }

    fn free_movement(sp1: SpotId, sp2: SpotId) -> Option<u32> {
        movements::free_movement(sp1, sp2)
    }

    fn best_movements(
        sp1: SpotId,
        sp2: SpotId,
    ) -> (Option<u32>, Vec<(movements::MovementState, u32)>) {
        movements::best_movements(sp1, sp2)
    }

    fn min_warp_time(&self) -> u32 {
        self.min_warp_time
    }

    fn spot_of_interest(&self, sp: SpotId) -> bool {
        match sp {
            SpotId::Deku_Tree__Back_Room__East
            | SpotId::Deku_Tree__Back_Room__Northwest
            | SpotId::Deku_Tree__Basement_1__Center
            | SpotId::Deku_Tree__Basement_1__Corner
            | SpotId::Deku_Tree__Basement_1__South_Door
            | SpotId::Deku_Tree__Basement_2__Boss_Door
            | SpotId::Deku_Tree__Basement_2__Pool
            | SpotId::Deku_Tree__Basement_Ledge__Block
            | SpotId::Deku_Tree__Basement_Ledge__Web
            | SpotId::Deku_Tree__Boss_Room__Arena
            | SpotId::Deku_Tree__Compass_Room__Compass
            | SpotId::Deku_Tree__Compass_Room__Entry
            | SpotId::Deku_Tree__Compass_Room__Ledge
            | SpotId::Deku_Tree__Floor_2__Lower
            | SpotId::Deku_Tree__Floor_2__Slingshot_Door
            | SpotId::Deku_Tree__Floor_2__Vines
            | SpotId::Deku_Tree__Floor_3__Door
            | SpotId::Deku_Tree__Lobby__Center
            | SpotId::Deku_Tree__Lobby__Vines
            | SpotId::Deku_Tree__Scrub_Room__Entry
            | SpotId::Deku_Tree__Scrub_Room__Rear
            | SpotId::Deku_Tree__Skull_Room__Entry
            | SpotId::Deku_Tree__Slingshot_Room__Entry
            | SpotId::Deku_Tree__Slingshot_Room__Slingshot
            | SpotId::Deku_Tree__Slingshot_Upper__Ledge
            | SpotId::Kak__Spider_House__Entry
            | SpotId::KF__Baba_Corridor__Deku_Babas
            | SpotId::KF__Baba_Corridor__Tree_Side
            | SpotId::KF__Baba_Corridor__Village_Side
            | SpotId::KF__Boulder_Maze__Entry
            | SpotId::KF__Boulder_Maze__Reward
            | SpotId::KF__Know_it_all_House__Entry
            | SpotId::KF__Kokiri_Village__Know_it_all_Porch
            | SpotId::KF__Kokiri_Village__Links_Porch
            | SpotId::KF__Kokiri_Village__Midos_Guardpost
            | SpotId::KF__Kokiri_Village__Midos_Porch
            | SpotId::KF__Kokiri_Village__Sarias_Porch
            | SpotId::KF__Kokiri_Village__Shop_Porch
            | SpotId::KF__Kokiri_Village__Training_Center
            | SpotId::KF__Links_House__Entry
            | SpotId::KF__Midos_House__Entry
            | SpotId::KF__Outside_Deku_Tree__Entry
            | SpotId::KF__Outside_Deku_Tree__Left
            | SpotId::KF__Outside_Deku_Tree__Mouth
            | SpotId::KF__Outside_Deku_Tree__Right
            | SpotId::KF__Shop__Entry => true,
            _ => false,
        }
    }

    fn condense_graph(&mut self) {
        let mut emap = EnumMap::default();
        emap.extend(condense_graph(self));
        self.condensed = Some(emap);
    }

    fn get_condensed_edges_from(
        &self,
        spot_id: SpotId,
    ) -> &[CondensedEdge<Context, SpotId, ExitId>] {
        &self
            .condensed
            .as_ref()
            .expect("Graph must be condensed first!")[spot_id]
    }
}

impl Default for World {
    fn default() -> World {
        World::new()
    }
}

impl World {
    pub fn new() -> World {
        World {
            rule_victory: RuleVictory::default(),
            rule_objective: RuleObjective::default(),
            locations: build_locations(),
            exits: build_exits(),
            actions: build_actions(),
            warps: build_warps(),
            spots: build_spots(),
            global_actions: Range {
                start: ActionId::Global__Change_Time.into_usize(),
                end: ActionId::Global__Change_Time.into_usize() + 1,
            },
            min_warp_time: 0,
            condensed: None,
        }
    }

    fn unused_by_rules(&self, item: Item) -> bool {
        match self.rule_victory {
            RuleVictory::Default => match self.rule_objective {
                RuleObjective::Gohma => {
                    matches!(
                        item,
                        Item::Arrows_10
                            | Item::Blue_Fire_Arrows
                            | Item::Buy_Arrows_10
                            | Item::Buy_Arrows_30
                            | Item::Buy_Deku_Seeds_30
                            | Item::Buy_Heart
                            | Item::Compass_Deku_Tree
                            | Item::Defeat_Ganon
                            | Item::Dins_Fire
                            | Item::Farores_Wind
                            | Item::Fire_Arrows
                            | Item::Goron_Tunic
                            | Item::Gossip_Stone_Deku_Left
                            | Item::Gossip_Stone_Deku_Right
                            | Item::Heart_Container
                            | Item::Hookshot
                            | Item::Hover_Boots
                            | Item::Iron_Boots
                            | Item::Lens_of_Truth
                            | Item::Light_Arrows
                            | Item::Map_Deku_Tree
                            | Item::Megaton_Hammer
                            | Item::Minuet_of_Forest
                            | Item::Mirror_Shield
                            | Item::Nayrus_Love
                            | Item::Progressive_Wallet
                            | Item::Recovery_Heart
                            | Item::Triforce_Piece
                            | Item::Zora_Tunic
                    )
                }
                RuleObjective::Ganon => {
                    matches!(
                        item,
                        Item::Arrows_10
                            | Item::Blue_Fire_Arrows
                            | Item::Buy_Arrows_10
                            | Item::Buy_Arrows_30
                            | Item::Buy_Deku_Seeds_30
                            | Item::Buy_Heart
                            | Item::Compass_Deku_Tree
                            | Item::Dins_Fire
                            | Item::Farores_Wind
                            | Item::Fire_Arrows
                            | Item::Goron_Tunic
                            | Item::Gossip_Stone_Deku_Left
                            | Item::Gossip_Stone_Deku_Right
                            | Item::Heart_Container
                            | Item::Hookshot
                            | Item::Hover_Boots
                            | Item::Iron_Boots
                            | Item::Kokiri_Emerald
                            | Item::Lens_of_Truth
                            | Item::Light_Arrows
                            | Item::Map_Deku_Tree
                            | Item::Megaton_Hammer
                            | Item::Minuet_of_Forest
                            | Item::Mirror_Shield
                            | Item::Nayrus_Love
                            | Item::Progressive_Wallet
                            | Item::Recovery_Heart
                            | Item::Triforce_Piece
                            | Item::Zora_Tunic
                    )
                }
                RuleObjective::TriforceHunt => {
                    matches!(
                        item,
                        Item::Arrows_10
                            | Item::Blue_Fire_Arrows
                            | Item::Buy_Arrows_10
                            | Item::Buy_Arrows_30
                            | Item::Buy_Deku_Seeds_30
                            | Item::Buy_Heart
                            | Item::Compass_Deku_Tree
                            | Item::Defeat_Ganon
                            | Item::Dins_Fire
                            | Item::Farores_Wind
                            | Item::Fire_Arrows
                            | Item::Goron_Tunic
                            | Item::Gossip_Stone_Deku_Left
                            | Item::Gossip_Stone_Deku_Right
                            | Item::Heart_Container
                            | Item::Hookshot
                            | Item::Hover_Boots
                            | Item::Iron_Boots
                            | Item::Kokiri_Emerald
                            | Item::Lens_of_Truth
                            | Item::Light_Arrows
                            | Item::Map_Deku_Tree
                            | Item::Megaton_Hammer
                            | Item::Minuet_of_Forest
                            | Item::Mirror_Shield
                            | Item::Nayrus_Love
                            | Item::Progressive_Wallet
                            | Item::Recovery_Heart
                            | Item::Zora_Tunic
                    )
                }
            },
        }
    }
}

pub fn build_locations() -> EnumMap<LocationId, Location> {
    enum_map! {
        LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Sticks => Location {
            id: LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Sticks,
            canonical: CanonId::None,
            item: Item::Deku_Stick_Drop,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Nuts => Location {
            id: LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Nuts,
            canonical: CanonId::None,
            item: Item::Deku_Nut_Drop,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Lobby__Center__Web => Location {
            id: LocationId::Deku_Tree__Lobby__Center__Web,
            canonical: CanonId::Deku_Lobby_Web,
            item: Item::Deku_Lobby_Web,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Floor_2__Vines__Map_Chest => Location {
            id: LocationId::Deku_Tree__Floor_2__Vines__Map_Chest,
            canonical: CanonId::None,
            item: Item::Map_Deku_Tree,
            price: Currency::Free,
            time: 3000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Scrub_Room__Entry__Scrub => Location {
            id: LocationId::Deku_Tree__Scrub_Room__Entry__Scrub,
            canonical: CanonId::None,
            item: Item::Deku_Slingshot_Scrub,
            price: Currency::Free,
            time: 2000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Slingshot_Room__Slingshot__Chest => Location {
            id: LocationId::Deku_Tree__Slingshot_Room__Slingshot__Chest,
            canonical: CanonId::None,
            item: Item::Slingshot,
            price: Currency::Free,
            time: 3000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Slingshot_Upper__Ledge__Chest => Location {
            id: LocationId::Deku_Tree__Slingshot_Upper__Ledge__Chest,
            canonical: CanonId::None,
            item: Item::Recovery_Heart,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Floor_3__Door__Break_Web => Location {
            id: LocationId::Deku_Tree__Floor_3__Door__Break_Web,
            canonical: CanonId::Deku_Lobby_Web,
            item: Item::Deku_Lobby_Web,
            price: Currency::Free,
            time: 0,
            exit_id: Some(ExitId::Deku_Tree__Floor_3__Door__Break_Web),
        },
        LocationId::Deku_Tree__Compass_Room__Entry__Burn_Web => Location {
            id: LocationId::Deku_Tree__Compass_Room__Entry__Burn_Web,
            canonical: CanonId::Deku_Lobby_Web,
            item: Item::Deku_Lobby_Web,
            price: Currency::Free,
            time: 1000,
            exit_id: Some(ExitId::Deku_Tree__Compass_Room__Entry__Burn_Web),
        },
        LocationId::Deku_Tree__Compass_Room__Compass__Chest => Location {
            id: LocationId::Deku_Tree__Compass_Room__Compass__Chest,
            canonical: CanonId::None,
            item: Item::Compass_Deku_Tree,
            price: Currency::Free,
            time: 3000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Compass_Room__Ledge__Chest => Location {
            id: LocationId::Deku_Tree__Compass_Room__Ledge__Chest,
            canonical: CanonId::None,
            item: Item::Recovery_Heart,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Compass_Room__Ledge__GS => Location {
            id: LocationId::Deku_Tree__Compass_Room__Ledge__GS,
            canonical: CanonId::None,
            item: Item::Gold_Skulltula_Token,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Basement_1__Center__Vines_GS => Location {
            id: LocationId::Deku_Tree__Basement_1__Center__Vines_GS,
            canonical: CanonId::None,
            item: Item::Gold_Skulltula_Token,
            price: Currency::Free,
            time: 2000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Basement_1__Corner__Switch => Location {
            id: LocationId::Deku_Tree__Basement_1__Corner__Switch,
            canonical: CanonId::None,
            item: Item::Deku_Basement_Switch,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Basement_1__Corner__Chest => Location {
            id: LocationId::Deku_Tree__Basement_1__Corner__Chest,
            canonical: CanonId::None,
            item: Item::Recovery_Heart,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Basement_1__Corner__Gate_GS => Location {
            id: LocationId::Deku_Tree__Basement_1__Corner__Gate_GS,
            canonical: CanonId::None,
            item: Item::Gold_Skulltula_Token,
            price: Currency::Free,
            time: 2000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web => Location {
            id: LocationId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web,
            canonical: CanonId::Deku_Basement_Web,
            item: Item::Deku_Basement_Web,
            price: Currency::Free,
            time: 1000,
            exit_id: Some(ExitId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web),
        },
        LocationId::Deku_Tree__Back_Room__Northwest__Burn_Web => Location {
            id: LocationId::Deku_Tree__Back_Room__Northwest__Burn_Web,
            canonical: CanonId::None,
            item: Item::Deku_Back_Room_Web,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Back_Room__Northwest__Break_Wall => Location {
            id: LocationId::Deku_Tree__Back_Room__Northwest__Break_Wall,
            canonical: CanonId::None,
            item: Item::Deku_Back_Room_Wall,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Skull_Room__Entry__GS => Location {
            id: LocationId::Deku_Tree__Skull_Room__Entry__GS,
            canonical: CanonId::None,
            item: Item::Gold_Skulltula_Token,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Basement_Ledge__Block__Push_Block => Location {
            id: LocationId::Deku_Tree__Basement_Ledge__Block__Push_Block,
            canonical: CanonId::None,
            item: Item::Deku_Basement_Block,
            price: Currency::Free,
            time: 4000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Basement_Ledge__Web__Burn_Web => Location {
            id: LocationId::Deku_Tree__Basement_Ledge__Web__Burn_Web,
            canonical: CanonId::Deku_Basement_Web,
            item: Item::Deku_Basement_Web,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Basement_2__Boss_Door__Scrubs => Location {
            id: LocationId::Deku_Tree__Basement_2__Boss_Door__Scrubs,
            canonical: CanonId::None,
            item: Item::Deku_Basement_Scrubs,
            price: Currency::Free,
            time: 4000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Boss_Room__Arena__Gohma => Location {
            id: LocationId::Deku_Tree__Boss_Room__Arena__Gohma,
            canonical: CanonId::Defeat_Gohma,
            item: Item::Defeat_Gohma,
            price: Currency::Free,
            time: 10000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Quick_Kill => Location {
            id: LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Quick_Kill,
            canonical: CanonId::Defeat_Gohma,
            item: Item::Defeat_Gohma,
            price: Currency::Free,
            time: 4000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Heart => Location {
            id: LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Heart,
            canonical: CanonId::None,
            item: Item::Heart_Container,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::Deku_Tree__Boss_Room__Arena__Blue_Warp => Location {
            id: LocationId::Deku_Tree__Boss_Room__Arena__Blue_Warp,
            canonical: CanonId::None,
            item: Item::Kokiri_Emerald,
            price: Currency::Free,
            time: 6000,
            exit_id: Some(ExitId::Deku_Tree__Boss_Room__Arena__Blue_Warp),
        },
        LocationId::KF__Kokiri_Village__Training_Center__Victory => Location {
            id: LocationId::KF__Kokiri_Village__Training_Center__Victory,
            canonical: CanonId::None,
            item: Item::Victory,
            price: Currency::Free,
            time: 0,
            exit_id: None,
        },
        LocationId::KF__Kokiri_Village__Midos_Guardpost__Show_Mido => Location {
            id: LocationId::KF__Kokiri_Village__Midos_Guardpost__Show_Mido,
            canonical: CanonId::None,
            item: Item::Showed_Mido,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Boulder_Maze__Reward__Chest => Location {
            id: LocationId::KF__Boulder_Maze__Reward__Chest,
            canonical: CanonId::None,
            item: Item::Kokiri_Sword,
            price: Currency::Free,
            time: 3000,
            exit_id: None,
        },
        LocationId::KF__Baba_Corridor__Deku_Babas__Sticks => Location {
            id: LocationId::KF__Baba_Corridor__Deku_Babas__Sticks,
            canonical: CanonId::None,
            item: Item::Deku_Stick_Drop,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Baba_Corridor__Deku_Babas__Nuts => Location {
            id: LocationId::KF__Baba_Corridor__Deku_Babas__Nuts,
            canonical: CanonId::None,
            item: Item::Deku_Nut_Drop,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Outside_Deku_Tree__Left__Gossip_Stone => Location {
            id: LocationId::KF__Outside_Deku_Tree__Left__Gossip_Stone,
            canonical: CanonId::None,
            item: Item::Gossip_Stone_Deku_Left,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Outside_Deku_Tree__Right__Gossip_Stone => Location {
            id: LocationId::KF__Outside_Deku_Tree__Right__Gossip_Stone,
            canonical: CanonId::None,
            item: Item::Gossip_Stone_Deku_Right,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Midos_House__Entry__Top_Left_Chest => Location {
            id: LocationId::KF__Midos_House__Entry__Top_Left_Chest,
            canonical: CanonId::None,
            item: Item::Rupees_5,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Midos_House__Entry__Top_Right_Chest => Location {
            id: LocationId::KF__Midos_House__Entry__Top_Right_Chest,
            canonical: CanonId::None,
            item: Item::Rupees_50,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Midos_House__Entry__Bottom_Left_Chest => Location {
            id: LocationId::KF__Midos_House__Entry__Bottom_Left_Chest,
            canonical: CanonId::None,
            item: Item::Rupee_1,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Midos_House__Entry__Bottom_Right_Chest => Location {
            id: LocationId::KF__Midos_House__Entry__Bottom_Right_Chest,
            canonical: CanonId::None,
            item: Item::Recovery_Heart,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Shop__Entry__Blue_Rupee => Location {
            id: LocationId::KF__Shop__Entry__Blue_Rupee,
            canonical: CanonId::None,
            item: Item::Rupees_5,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Shop__Entry__Item_1 => Location {
            id: LocationId::KF__Shop__Entry__Item_1,
            canonical: CanonId::None,
            item: Item::Buy_Deku_Shield,
            price: Currency::Rupees(40),
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Shop__Entry__Item_2 => Location {
            id: LocationId::KF__Shop__Entry__Item_2,
            canonical: CanonId::None,
            item: Item::Buy_Deku_Nut_5,
            price: Currency::Rupees(15),
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Shop__Entry__Item_3 => Location {
            id: LocationId::KF__Shop__Entry__Item_3,
            canonical: CanonId::None,
            item: Item::Buy_Deku_Nut_10,
            price: Currency::Rupees(30),
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Shop__Entry__Item_4 => Location {
            id: LocationId::KF__Shop__Entry__Item_4,
            canonical: CanonId::None,
            item: Item::Buy_Deku_Stick_1,
            price: Currency::Rupees(10),
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Shop__Entry__Item_5 => Location {
            id: LocationId::KF__Shop__Entry__Item_5,
            canonical: CanonId::None,
            item: Item::Buy_Deku_Seeds_30,
            price: Currency::Rupees(30),
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Shop__Entry__Item_6 => Location {
            id: LocationId::KF__Shop__Entry__Item_6,
            canonical: CanonId::None,
            item: Item::Buy_Arrows_10,
            price: Currency::Rupees(20),
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Shop__Entry__Item_7 => Location {
            id: LocationId::KF__Shop__Entry__Item_7,
            canonical: CanonId::None,
            item: Item::Buy_Arrows_30,
            price: Currency::Rupees(60),
            time: 1000,
            exit_id: None,
        },
        LocationId::KF__Shop__Entry__Item_8 => Location {
            id: LocationId::KF__Shop__Entry__Item_8,
            canonical: CanonId::None,
            item: Item::Buy_Heart,
            price: Currency::Rupees(10),
            time: 1000,
            exit_id: None,
        },
        LocationId::Kak__Spider_House__Entry__Skulls_10 => Location {
            id: LocationId::Kak__Spider_House__Entry__Skulls_10,
            canonical: CanonId::None,
            item: Item::Arrows_10,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
    }
}

pub fn build_exits() -> EnumMap<ExitId, Exit> {
    enum_map! {
        ExitId::Deku_Tree__Lobby__Center__ex__Basement_1__Center_1 => Exit {
            id: ExitId::Deku_Tree__Lobby__Center__ex__Basement_1__Center_1,
            time: 2000,
            dest: SpotId::Deku_Tree__Basement_1__Center,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Lobby__Center__ex__Basement_Ledge__Block_1 => Exit {
            id: ExitId::Deku_Tree__Lobby__Center__ex__Basement_Ledge__Block_1,
            time: 5000,
            dest: SpotId::Deku_Tree__Basement_Ledge__Block,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Lobby__Vines__ex__Floor_2__Lower_1 => Exit {
            id: ExitId::Deku_Tree__Lobby__Vines__ex__Floor_2__Lower_1,
            time: 4000,
            dest: SpotId::Deku_Tree__Floor_2__Lower,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Floor_2__Lower__ex__Lobby__Vines_1 => Exit {
            id: ExitId::Deku_Tree__Floor_2__Lower__ex__Lobby__Vines_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Lobby__Vines,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Floor_2__Lower__ex__Lobby__Center_1 => Exit {
            id: ExitId::Deku_Tree__Floor_2__Lower__ex__Lobby__Center_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Lobby__Center,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Floor_2__Vines__ex__Floor_3__Climb_1 => Exit {
            id: ExitId::Deku_Tree__Floor_2__Vines__ex__Floor_3__Climb_1,
            time: 16000,
            dest: SpotId::Deku_Tree__Floor_3__Climb,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Floor_2__Vines__ex__Floor_3__Climb_2 => Exit {
            id: ExitId::Deku_Tree__Floor_2__Vines__ex__Floor_3__Climb_2,
            time: 10000,
            dest: SpotId::Deku_Tree__Floor_3__Climb,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Vines_1 => Exit {
            id: ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Vines_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Lobby__Vines,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Entry_1 => Exit {
            id: ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Entry_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Lobby__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Center_1 => Exit {
            id: ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Center_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Lobby__Center,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Scrub_Room__Entry_1 => Exit {
            id: ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Scrub_Room__Entry_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Scrub_Room__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Lobby__Entry_1 => Exit {
            id: ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Lobby__Entry_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Lobby__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Lobby__Center_1 => Exit {
            id: ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Lobby__Center_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Lobby__Center,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Scrub_Room__Entry__ex__Floor_2__Slingshot_Door_1 => Exit {
            id: ExitId::Deku_Tree__Scrub_Room__Entry__ex__Floor_2__Slingshot_Door_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Floor_2__Slingshot_Door,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Scrub_Room__Rear__ex__Slingshot_Room__Entry_1 => Exit {
            id: ExitId::Deku_Tree__Scrub_Room__Rear__ex__Slingshot_Room__Entry_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Slingshot_Room__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Slingshot_Room__Entry__ex__Scrub_Room__Rear_1 => Exit {
            id: ExitId::Deku_Tree__Slingshot_Room__Entry__ex__Scrub_Room__Rear_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Scrub_Room__Rear,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Slingshot_Room__Slingshot__ex__Slingshot_Upper__Ledge_1 => Exit {
            id: ExitId::Deku_Tree__Slingshot_Room__Slingshot__ex__Slingshot_Upper__Ledge_1,
            time: 4000,
            dest: SpotId::Deku_Tree__Slingshot_Upper__Ledge,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Slingshot_Upper__Ledge__ex__Slingshot_Room__Slingshot_1 => Exit {
            id: ExitId::Deku_Tree__Slingshot_Upper__Ledge__ex__Slingshot_Room__Slingshot_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Slingshot_Room__Slingshot,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Floor_3__Door__ex__Compass_Room__Entry_1 => Exit {
            id: ExitId::Deku_Tree__Floor_3__Door__ex__Compass_Room__Entry_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Compass_Room__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Floor_3__Door__ex__Lobby__Center_1 => Exit {
            id: ExitId::Deku_Tree__Floor_3__Door__ex__Lobby__Center_1,
            time: 3000,
            dest: SpotId::Deku_Tree__Lobby__Center,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Floor_3__Door__Break_Web => Exit {
            id: ExitId::Deku_Tree__Floor_3__Door__Break_Web,
            time: 4000,
            dest: SpotId::Deku_Tree__Basement_1__Center,
            price: Currency::Free,
            loc_id: Some(LocationId::Deku_Tree__Floor_3__Door__Break_Web),
        },
        ExitId::Deku_Tree__Compass_Room__Entry__ex__Floor_3__Door_1 => Exit {
            id: ExitId::Deku_Tree__Compass_Room__Entry__ex__Floor_3__Door_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Floor_3__Door,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Compass_Room__Entry__Burn_Web => Exit {
            id: ExitId::Deku_Tree__Compass_Room__Entry__Burn_Web,
            time: 5000,
            dest: SpotId::Deku_Tree__Lobby__Center,
            price: Currency::Free,
            loc_id: Some(LocationId::Deku_Tree__Compass_Room__Entry__Burn_Web),
        },
        ExitId::Deku_Tree__Basement_1__Center__ex__Lobby__Center_1 => Exit {
            id: ExitId::Deku_Tree__Basement_1__Center__ex__Lobby__Center_1,
            time: 6000,
            dest: SpotId::Deku_Tree__Lobby__Center,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Basement_1__Corner__ex__Basement_Ledge__Block_1 => Exit {
            id: ExitId::Deku_Tree__Basement_1__Corner__ex__Basement_Ledge__Block_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Basement_Ledge__Block,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web => Exit {
            id: ExitId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web,
            time: 2000,
            dest: SpotId::Deku_Tree__Basement_Ledge__Web,
            price: Currency::Free,
            loc_id: Some(LocationId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web),
        },
        ExitId::Deku_Tree__Basement_1__South_Door__ex__Back_Room__South_1 => Exit {
            id: ExitId::Deku_Tree__Basement_1__South_Door__ex__Back_Room__South_1,
            time: 20000,
            dest: SpotId::Deku_Tree__Back_Room__South,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Back_Room__Northwest__ex__Skull_Room__Entry_1 => Exit {
            id: ExitId::Deku_Tree__Back_Room__Northwest__ex__Skull_Room__Entry_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Skull_Room__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Back_Room__East__ex__Basement_Ledge__Web_1 => Exit {
            id: ExitId::Deku_Tree__Back_Room__East__ex__Basement_Ledge__Web_1,
            time: 2000,
            dest: SpotId::Deku_Tree__Basement_Ledge__Web,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Skull_Room__Entry__ex__Back_Room__Northwest_1 => Exit {
            id: ExitId::Deku_Tree__Skull_Room__Entry__ex__Back_Room__Northwest_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Back_Room__Northwest,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Basement_Ledge__Block__ex__Basement_1__Corner_1 => Exit {
            id: ExitId::Deku_Tree__Basement_Ledge__Block__ex__Basement_1__Corner_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Basement_1__Corner,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Basement_Ledge__Web__ex__Basement_2__Pool_1 => Exit {
            id: ExitId::Deku_Tree__Basement_Ledge__Web__ex__Basement_2__Pool_1,
            time: 1000,
            dest: SpotId::Deku_Tree__Basement_2__Pool,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Basement_2__Pool__ex__Basement_Ledge__Web_1 => Exit {
            id: ExitId::Deku_Tree__Basement_2__Pool__ex__Basement_Ledge__Web_1,
            time: 6000,
            dest: SpotId::Deku_Tree__Basement_Ledge__Web,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Basement_2__Boss_Door__ex__Boss_Room__Entry_1 => Exit {
            id: ExitId::Deku_Tree__Basement_2__Boss_Door__ex__Boss_Room__Entry_1,
            time: 2000,
            dest: SpotId::Deku_Tree__Boss_Room__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Deku_Tree__Boss_Room__Arena__Blue_Warp => Exit {
            id: ExitId::Deku_Tree__Boss_Room__Arena__Blue_Warp,
            time: 8000,
            dest: SpotId::KF__Outside_Deku_Tree__Mouth,
            price: Currency::Free,
            loc_id: Some(LocationId::Deku_Tree__Boss_Room__Arena__Blue_Warp),
        },
        ExitId::KF__Links_House__Entry__ex__Kokiri_Village__Links_Porch_1 => Exit {
            id: ExitId::KF__Links_House__Entry__ex__Kokiri_Village__Links_Porch_1,
            time: 2000,
            dest: SpotId::KF__Kokiri_Village__Links_Porch,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::KF__Kokiri_Village__Links_Porch__ex__Links_House__Entry_1 => Exit {
            id: ExitId::KF__Kokiri_Village__Links_Porch__ex__Links_House__Entry_1,
            time: 2000,
            dest: SpotId::KF__Links_House__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::KF__Kokiri_Village__Midos_Porch__ex__Midos_House__Entry_1 => Exit {
            id: ExitId::KF__Kokiri_Village__Midos_Porch__ex__Midos_House__Entry_1,
            time: 2000,
            dest: SpotId::KF__Midos_House__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::KF__Kokiri_Village__Know_it_all_Porch__ex__Know_it_all_House__Entry_1 => Exit {
            id: ExitId::KF__Kokiri_Village__Know_it_all_Porch__ex__Know_it_all_House__Entry_1,
            time: 2000,
            dest: SpotId::KF__Know_it_all_House__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::KF__Kokiri_Village__Training_Center__ex__Boulder_Maze__Entry_1 => Exit {
            id: ExitId::KF__Kokiri_Village__Training_Center__ex__Boulder_Maze__Entry_1,
            time: 6000,
            dest: SpotId::KF__Boulder_Maze__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::KF__Kokiri_Village__Shop_Porch__ex__Shop__Entry_1 => Exit {
            id: ExitId::KF__Kokiri_Village__Shop_Porch__ex__Shop__Entry_1,
            time: 2000,
            dest: SpotId::KF__Shop__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::KF__Kokiri_Village__Sarias_Porch__ex__Kak__Spider_House__Entry_1 => Exit {
            id: ExitId::KF__Kokiri_Village__Sarias_Porch__ex__Kak__Spider_House__Entry_1,
            time: 2000,
            dest: SpotId::Kak__Spider_House__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::KF__Kokiri_Village__Midos_Guardpost__ex__Baba_Corridor__Village_Side_1 => Exit {
            id: ExitId::KF__Kokiri_Village__Midos_Guardpost__ex__Baba_Corridor__Village_Side_1,
            time: 1000,
            dest: SpotId::KF__Baba_Corridor__Village_Side,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::KF__Boulder_Maze__Entry__ex__Kokiri_Village__Training_Center_1 => Exit {
            id: ExitId::KF__Boulder_Maze__Entry__ex__Kokiri_Village__Training_Center_1,
            time: 6000,
            dest: SpotId::KF__Kokiri_Village__Training_Center,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::KF__Baba_Corridor__Village_Side__ex__Kokiri_Village__Midos_Guardpost_1 => Exit {
            id: ExitId::KF__Baba_Corridor__Village_Side__ex__Kokiri_Village__Midos_Guardpost_1,
            time: 1000,
            dest: SpotId::KF__Kokiri_Village__Midos_Guardpost,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::KF__Baba_Corridor__Tree_Side__ex__Outside_Deku_Tree__Entry_1 => Exit {
            id: ExitId::KF__Baba_Corridor__Tree_Side__ex__Outside_Deku_Tree__Entry_1,
            time: 1000,
            dest: SpotId::KF__Outside_Deku_Tree__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::KF__Outside_Deku_Tree__Entry__ex__Baba_Corridor__Tree_Side_1 => Exit {
            id: ExitId::KF__Outside_Deku_Tree__Entry__ex__Baba_Corridor__Tree_Side_1,
            time: 1000,
            dest: SpotId::KF__Baba_Corridor__Tree_Side,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::KF__Outside_Deku_Tree__Mouth__ex__Deku_Tree__Lobby__Entry_1 => Exit {
            id: ExitId::KF__Outside_Deku_Tree__Mouth__ex__Deku_Tree__Lobby__Entry_1,
            time: 2000,
            dest: SpotId::Deku_Tree__Lobby__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::KF__Midos_House__Entry__ex__Kokiri_Village__Midos_Porch_1 => Exit {
            id: ExitId::KF__Midos_House__Entry__ex__Kokiri_Village__Midos_Porch_1,
            time: 2000,
            dest: SpotId::KF__Kokiri_Village__Midos_Porch,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::KF__Know_it_all_House__Entry__ex__Kokiri_Village__Know_it_all_Porch_1 => Exit {
            id: ExitId::KF__Know_it_all_House__Entry__ex__Kokiri_Village__Know_it_all_Porch_1,
            time: 2000,
            dest: SpotId::KF__Kokiri_Village__Know_it_all_Porch,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::KF__Shop__Entry__ex__Kokiri_Village__Shop_Porch_1 => Exit {
            id: ExitId::KF__Shop__Entry__ex__Kokiri_Village__Shop_Porch_1,
            time: 2000,
            dest: SpotId::KF__Kokiri_Village__Shop_Porch,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Kak__Spider_House__Entry__ex__KF__Kokiri_Village__Sarias_Porch_1 => Exit {
            id: ExitId::Kak__Spider_House__Entry__ex__KF__Kokiri_Village__Sarias_Porch_1,
            time: 2000,
            dest: SpotId::KF__Kokiri_Village__Sarias_Porch,
            price: Currency::Free,
            loc_id: None,
        },
    }
}

pub fn build_actions() -> EnumMap<ActionId, Action> {
    enum_map! {
        ActionId::Global__Change_Time => Action {
            id: ActionId::Global__Change_Time,
            time: 2000,
            price: Currency::Rupees(10),
        },
        ActionId::Deku_Tree__Compass_Room__Entry__Light_Torch => Action {
            id: ActionId::Deku_Tree__Compass_Room__Entry__Light_Torch,
            time: 1000,
            price: Currency::Free,
        },
        ActionId::KF__Kokiri_Village__Midos_Porch__Gather_Rupees => Action {
            id: ActionId::KF__Kokiri_Village__Midos_Porch__Gather_Rupees,
            time: 20000,
            price: Currency::Free,
        },
        ActionId::KF__Kokiri_Village__Sarias_Porch__Save => Action {
            id: ActionId::KF__Kokiri_Village__Sarias_Porch__Save,
            time: 1000,
            price: Currency::Free,
        },
    }
}

pub fn build_spots() -> EnumMap<SpotId, Spot> {
    enum_map! {
        SpotId::None => Spot::default(),
        SpotId::Deku_Tree__Lobby__Entry => Spot {
            id: SpotId::Deku_Tree__Lobby__Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Lobby__Center => Spot {
            id: SpotId::Deku_Tree__Lobby__Center,
            locations: Range {
                start: LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Nuts.into_usize(),
                end: LocationId::Deku_Tree__Lobby__Center__Web.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Lobby__Center__ex__Basement_1__Center_1.into_usize(),
                end: ExitId::Deku_Tree__Lobby__Center__ex__Basement_Ledge__Block_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Lobby__Vines => Spot {
            id: SpotId::Deku_Tree__Lobby__Vines,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Lobby__Vines__ex__Floor_2__Lower_1.into_usize(),
                end: ExitId::Deku_Tree__Lobby__Vines__ex__Floor_2__Lower_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Floor_2__Lower => Spot {
            id: SpotId::Deku_Tree__Floor_2__Lower,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Floor_2__Lower__ex__Lobby__Center_1.into_usize(),
                end: ExitId::Deku_Tree__Floor_2__Lower__ex__Lobby__Vines_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Floor_2__Vines => Spot {
            id: SpotId::Deku_Tree__Floor_2__Vines,
            locations: Range {
                start: LocationId::Deku_Tree__Floor_2__Vines__Map_Chest.into_usize(),
                end: LocationId::Deku_Tree__Floor_2__Vines__Map_Chest.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Floor_2__Vines__ex__Floor_3__Climb_1.into_usize(),
                end: ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Vines_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Floor_2__Slingshot_Door => Spot {
            id: SpotId::Deku_Tree__Floor_2__Slingshot_Door,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Lobby__Center_1.into_usize(),
                end: ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Scrub_Room__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Scrub_Room__Entry => Spot {
            id: SpotId::Deku_Tree__Scrub_Room__Entry,
            locations: Range {
                start: LocationId::Deku_Tree__Scrub_Room__Entry__Scrub.into_usize(),
                end: LocationId::Deku_Tree__Scrub_Room__Entry__Scrub.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Scrub_Room__Entry__ex__Floor_2__Slingshot_Door_1.into_usize(),
                end: ExitId::Deku_Tree__Scrub_Room__Entry__ex__Floor_2__Slingshot_Door_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Scrub_Room__Rear => Spot {
            id: SpotId::Deku_Tree__Scrub_Room__Rear,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Scrub_Room__Rear__ex__Slingshot_Room__Entry_1.into_usize(),
                end: ExitId::Deku_Tree__Scrub_Room__Rear__ex__Slingshot_Room__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Slingshot_Room__Entry => Spot {
            id: SpotId::Deku_Tree__Slingshot_Room__Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Slingshot_Room__Entry__ex__Scrub_Room__Rear_1.into_usize(),
                end: ExitId::Deku_Tree__Slingshot_Room__Entry__ex__Scrub_Room__Rear_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Slingshot_Room__Slingshot => Spot {
            id: SpotId::Deku_Tree__Slingshot_Room__Slingshot,
            locations: Range {
                start: LocationId::Deku_Tree__Slingshot_Room__Slingshot__Chest.into_usize(),
                end: LocationId::Deku_Tree__Slingshot_Room__Slingshot__Chest.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Slingshot_Room__Slingshot__ex__Slingshot_Upper__Ledge_1.into_usize(),
                end: ExitId::Deku_Tree__Slingshot_Room__Slingshot__ex__Slingshot_Upper__Ledge_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Slingshot_Upper__Ledge => Spot {
            id: SpotId::Deku_Tree__Slingshot_Upper__Ledge,
            locations: Range {
                start: LocationId::Deku_Tree__Slingshot_Upper__Ledge__Chest.into_usize(),
                end: LocationId::Deku_Tree__Slingshot_Upper__Ledge__Chest.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Slingshot_Upper__Ledge__ex__Slingshot_Room__Slingshot_1.into_usize(),
                end: ExitId::Deku_Tree__Slingshot_Upper__Ledge__ex__Slingshot_Room__Slingshot_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Floor_3__Climb => Spot {
            id: SpotId::Deku_Tree__Floor_3__Climb,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Floor_3__Door => Spot {
            id: SpotId::Deku_Tree__Floor_3__Door,
            locations: Range {
                start: LocationId::Deku_Tree__Floor_3__Door__Break_Web.into_usize(),
                end: LocationId::Deku_Tree__Floor_3__Door__Break_Web.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Floor_3__Door__ex__Compass_Room__Entry_1.into_usize(),
                end: ExitId::Deku_Tree__Floor_3__Door__ex__Lobby__Center_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Compass_Room__Entry => Spot {
            id: SpotId::Deku_Tree__Compass_Room__Entry,
            locations: Range {
                start: LocationId::Deku_Tree__Compass_Room__Entry__Burn_Web.into_usize(),
                end: LocationId::Deku_Tree__Compass_Room__Entry__Burn_Web.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Compass_Room__Entry__ex__Floor_3__Door_1.into_usize(),
                end: ExitId::Deku_Tree__Compass_Room__Entry__ex__Floor_3__Door_1.into_usize() + 1,
            },
            actions: Range {
                start: ActionId::Deku_Tree__Compass_Room__Entry__Light_Torch.into_usize(),
                end: ActionId::Deku_Tree__Compass_Room__Entry__Light_Torch.into_usize() + 1,
            },
        },
        SpotId::Deku_Tree__Compass_Room__Compass => Spot {
            id: SpotId::Deku_Tree__Compass_Room__Compass,
            locations: Range {
                start: LocationId::Deku_Tree__Compass_Room__Compass__Chest.into_usize(),
                end: LocationId::Deku_Tree__Compass_Room__Compass__Chest.into_usize() + 1,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Compass_Room__Ledge => Spot {
            id: SpotId::Deku_Tree__Compass_Room__Ledge,
            locations: Range {
                start: LocationId::Deku_Tree__Compass_Room__Ledge__Chest.into_usize(),
                end: LocationId::Deku_Tree__Compass_Room__Ledge__GS.into_usize() + 1,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Basement_1__Center => Spot {
            id: SpotId::Deku_Tree__Basement_1__Center,
            locations: Range {
                start: LocationId::Deku_Tree__Basement_1__Center__Vines_GS.into_usize(),
                end: LocationId::Deku_Tree__Basement_1__Center__Vines_GS.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Basement_1__Center__ex__Lobby__Center_1.into_usize(),
                end: ExitId::Deku_Tree__Basement_1__Center__ex__Lobby__Center_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Basement_1__Corner => Spot {
            id: SpotId::Deku_Tree__Basement_1__Corner,
            locations: Range {
                start: LocationId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web.into_usize(),
                end: LocationId::Deku_Tree__Basement_1__Corner__Switch.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Basement_1__Corner__ex__Basement_Ledge__Block_1.into_usize(),
                end: ExitId::Deku_Tree__Basement_1__Corner__ex__Basement_Ledge__Block_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Basement_1__South_Door => Spot {
            id: SpotId::Deku_Tree__Basement_1__South_Door,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Basement_1__South_Door__ex__Back_Room__South_1.into_usize(),
                end: ExitId::Deku_Tree__Basement_1__South_Door__ex__Back_Room__South_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Back_Room__South => Spot {
            id: SpotId::Deku_Tree__Back_Room__South,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Back_Room__Northwest => Spot {
            id: SpotId::Deku_Tree__Back_Room__Northwest,
            locations: Range {
                start: LocationId::Deku_Tree__Back_Room__Northwest__Break_Wall.into_usize(),
                end: LocationId::Deku_Tree__Back_Room__Northwest__Burn_Web.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Back_Room__Northwest__ex__Skull_Room__Entry_1.into_usize(),
                end: ExitId::Deku_Tree__Back_Room__Northwest__ex__Skull_Room__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Back_Room__East => Spot {
            id: SpotId::Deku_Tree__Back_Room__East,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Back_Room__East__ex__Basement_Ledge__Web_1.into_usize(),
                end: ExitId::Deku_Tree__Back_Room__East__ex__Basement_Ledge__Web_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Skull_Room__Entry => Spot {
            id: SpotId::Deku_Tree__Skull_Room__Entry,
            locations: Range {
                start: LocationId::Deku_Tree__Skull_Room__Entry__GS.into_usize(),
                end: LocationId::Deku_Tree__Skull_Room__Entry__GS.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Skull_Room__Entry__ex__Back_Room__Northwest_1.into_usize(),
                end: ExitId::Deku_Tree__Skull_Room__Entry__ex__Back_Room__Northwest_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Basement_Ledge__Block => Spot {
            id: SpotId::Deku_Tree__Basement_Ledge__Block,
            locations: Range {
                start: LocationId::Deku_Tree__Basement_Ledge__Block__Push_Block.into_usize(),
                end: LocationId::Deku_Tree__Basement_Ledge__Block__Push_Block.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Basement_Ledge__Block__ex__Basement_1__Corner_1.into_usize(),
                end: ExitId::Deku_Tree__Basement_Ledge__Block__ex__Basement_1__Corner_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Basement_Ledge__Web => Spot {
            id: SpotId::Deku_Tree__Basement_Ledge__Web,
            locations: Range {
                start: LocationId::Deku_Tree__Basement_Ledge__Web__Burn_Web.into_usize(),
                end: LocationId::Deku_Tree__Basement_Ledge__Web__Burn_Web.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Basement_Ledge__Web__ex__Basement_2__Pool_1.into_usize(),
                end: ExitId::Deku_Tree__Basement_Ledge__Web__ex__Basement_2__Pool_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Basement_2__Pool => Spot {
            id: SpotId::Deku_Tree__Basement_2__Pool,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Basement_2__Pool__ex__Basement_Ledge__Web_1.into_usize(),
                end: ExitId::Deku_Tree__Basement_2__Pool__ex__Basement_Ledge__Web_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Basement_2__Boss_Door => Spot {
            id: SpotId::Deku_Tree__Basement_2__Boss_Door,
            locations: Range {
                start: LocationId::Deku_Tree__Basement_2__Boss_Door__Scrubs.into_usize(),
                end: LocationId::Deku_Tree__Basement_2__Boss_Door__Scrubs.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::Deku_Tree__Basement_2__Boss_Door__ex__Boss_Room__Entry_1.into_usize(),
                end: ExitId::Deku_Tree__Basement_2__Boss_Door__ex__Boss_Room__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Boss_Room__Entry => Spot {
            id: SpotId::Deku_Tree__Boss_Room__Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Deku_Tree__Boss_Room__Arena => Spot {
            id: SpotId::Deku_Tree__Boss_Room__Arena,
            locations: Range {
                start: LocationId::Deku_Tree__Boss_Room__Arena__Blue_Warp.into_usize(),
                end: LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Quick_Kill.into_usize() + 1,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Links_House__Start_Point => Spot {
            id: SpotId::KF__Links_House__Start_Point,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Links_House__Entry => Spot {
            id: SpotId::KF__Links_House__Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::KF__Links_House__Entry__ex__Kokiri_Village__Links_Porch_1.into_usize(),
                end: ExitId::KF__Links_House__Entry__ex__Kokiri_Village__Links_Porch_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Kokiri_Village__Links_Porch => Spot {
            id: SpotId::KF__Kokiri_Village__Links_Porch,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::KF__Kokiri_Village__Links_Porch__ex__Links_House__Entry_1.into_usize(),
                end: ExitId::KF__Kokiri_Village__Links_Porch__ex__Links_House__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Kokiri_Village__Midos_Porch => Spot {
            id: SpotId::KF__Kokiri_Village__Midos_Porch,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::KF__Kokiri_Village__Midos_Porch__ex__Midos_House__Entry_1.into_usize(),
                end: ExitId::KF__Kokiri_Village__Midos_Porch__ex__Midos_House__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: ActionId::KF__Kokiri_Village__Midos_Porch__Gather_Rupees.into_usize(),
                end: ActionId::KF__Kokiri_Village__Midos_Porch__Gather_Rupees.into_usize() + 1,
            },
        },
        SpotId::KF__Kokiri_Village__Know_it_all_Porch => Spot {
            id: SpotId::KF__Kokiri_Village__Know_it_all_Porch,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::KF__Kokiri_Village__Know_it_all_Porch__ex__Know_it_all_House__Entry_1.into_usize(),
                end: ExitId::KF__Kokiri_Village__Know_it_all_Porch__ex__Know_it_all_House__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Kokiri_Village__Training_Center => Spot {
            id: SpotId::KF__Kokiri_Village__Training_Center,
            locations: Range {
                start: LocationId::KF__Kokiri_Village__Training_Center__Victory.into_usize(),
                end: LocationId::KF__Kokiri_Village__Training_Center__Victory.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::KF__Kokiri_Village__Training_Center__ex__Boulder_Maze__Entry_1.into_usize(),
                end: ExitId::KF__Kokiri_Village__Training_Center__ex__Boulder_Maze__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Kokiri_Village__Shop_Porch => Spot {
            id: SpotId::KF__Kokiri_Village__Shop_Porch,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::KF__Kokiri_Village__Shop_Porch__ex__Shop__Entry_1.into_usize(),
                end: ExitId::KF__Kokiri_Village__Shop_Porch__ex__Shop__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Kokiri_Village__Sarias_Porch => Spot {
            id: SpotId::KF__Kokiri_Village__Sarias_Porch,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::KF__Kokiri_Village__Sarias_Porch__ex__Kak__Spider_House__Entry_1.into_usize(),
                end: ExitId::KF__Kokiri_Village__Sarias_Porch__ex__Kak__Spider_House__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: ActionId::KF__Kokiri_Village__Sarias_Porch__Save.into_usize(),
                end: ActionId::KF__Kokiri_Village__Sarias_Porch__Save.into_usize() + 1,
            },
        },
        SpotId::KF__Kokiri_Village__Midos_Guardpost => Spot {
            id: SpotId::KF__Kokiri_Village__Midos_Guardpost,
            locations: Range {
                start: LocationId::KF__Kokiri_Village__Midos_Guardpost__Show_Mido.into_usize(),
                end: LocationId::KF__Kokiri_Village__Midos_Guardpost__Show_Mido.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::KF__Kokiri_Village__Midos_Guardpost__ex__Baba_Corridor__Village_Side_1.into_usize(),
                end: ExitId::KF__Kokiri_Village__Midos_Guardpost__ex__Baba_Corridor__Village_Side_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Boulder_Maze__Entry => Spot {
            id: SpotId::KF__Boulder_Maze__Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::KF__Boulder_Maze__Entry__ex__Kokiri_Village__Training_Center_1.into_usize(),
                end: ExitId::KF__Boulder_Maze__Entry__ex__Kokiri_Village__Training_Center_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Boulder_Maze__Reward => Spot {
            id: SpotId::KF__Boulder_Maze__Reward,
            locations: Range {
                start: LocationId::KF__Boulder_Maze__Reward__Chest.into_usize(),
                end: LocationId::KF__Boulder_Maze__Reward__Chest.into_usize() + 1,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Baba_Corridor__Village_Side => Spot {
            id: SpotId::KF__Baba_Corridor__Village_Side,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::KF__Baba_Corridor__Village_Side__ex__Kokiri_Village__Midos_Guardpost_1.into_usize(),
                end: ExitId::KF__Baba_Corridor__Village_Side__ex__Kokiri_Village__Midos_Guardpost_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Baba_Corridor__Deku_Babas => Spot {
            id: SpotId::KF__Baba_Corridor__Deku_Babas,
            locations: Range {
                start: LocationId::KF__Baba_Corridor__Deku_Babas__Nuts.into_usize(),
                end: LocationId::KF__Baba_Corridor__Deku_Babas__Sticks.into_usize() + 1,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Baba_Corridor__Tree_Side => Spot {
            id: SpotId::KF__Baba_Corridor__Tree_Side,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::KF__Baba_Corridor__Tree_Side__ex__Outside_Deku_Tree__Entry_1.into_usize(),
                end: ExitId::KF__Baba_Corridor__Tree_Side__ex__Outside_Deku_Tree__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Outside_Deku_Tree__Entry => Spot {
            id: SpotId::KF__Outside_Deku_Tree__Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::KF__Outside_Deku_Tree__Entry__ex__Baba_Corridor__Tree_Side_1.into_usize(),
                end: ExitId::KF__Outside_Deku_Tree__Entry__ex__Baba_Corridor__Tree_Side_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Outside_Deku_Tree__Left => Spot {
            id: SpotId::KF__Outside_Deku_Tree__Left,
            locations: Range {
                start: LocationId::KF__Outside_Deku_Tree__Left__Gossip_Stone.into_usize(),
                end: LocationId::KF__Outside_Deku_Tree__Left__Gossip_Stone.into_usize() + 1,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Outside_Deku_Tree__Right => Spot {
            id: SpotId::KF__Outside_Deku_Tree__Right,
            locations: Range {
                start: LocationId::KF__Outside_Deku_Tree__Right__Gossip_Stone.into_usize(),
                end: LocationId::KF__Outside_Deku_Tree__Right__Gossip_Stone.into_usize() + 1,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Outside_Deku_Tree__Mouth => Spot {
            id: SpotId::KF__Outside_Deku_Tree__Mouth,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::KF__Outside_Deku_Tree__Mouth__ex__Deku_Tree__Lobby__Entry_1.into_usize(),
                end: ExitId::KF__Outside_Deku_Tree__Mouth__ex__Deku_Tree__Lobby__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Midos_House__Entry => Spot {
            id: SpotId::KF__Midos_House__Entry,
            locations: Range {
                start: LocationId::KF__Midos_House__Entry__Bottom_Left_Chest.into_usize(),
                end: LocationId::KF__Midos_House__Entry__Top_Right_Chest.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::KF__Midos_House__Entry__ex__Kokiri_Village__Midos_Porch_1.into_usize(),
                end: ExitId::KF__Midos_House__Entry__ex__Kokiri_Village__Midos_Porch_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Know_it_all_House__Entry => Spot {
            id: SpotId::KF__Know_it_all_House__Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::KF__Know_it_all_House__Entry__ex__Kokiri_Village__Know_it_all_Porch_1.into_usize(),
                end: ExitId::KF__Know_it_all_House__Entry__ex__Kokiri_Village__Know_it_all_Porch_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::KF__Shop__Entry => Spot {
            id: SpotId::KF__Shop__Entry,
            locations: Range {
                start: LocationId::KF__Shop__Entry__Blue_Rupee.into_usize(),
                end: LocationId::KF__Shop__Entry__Item_8.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::KF__Shop__Entry__ex__Kokiri_Village__Shop_Porch_1.into_usize(),
                end: ExitId::KF__Shop__Entry__ex__Kokiri_Village__Shop_Porch_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
        SpotId::Kak__Spider_House__Entry => Spot {
            id: SpotId::Kak__Spider_House__Entry,
            locations: Range {
                start: LocationId::Kak__Spider_House__Entry__Skulls_10.into_usize(),
                end: LocationId::Kak__Spider_House__Entry__Skulls_10.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::Kak__Spider_House__Entry__ex__KF__Kokiri_Village__Sarias_Porch_1.into_usize(),
                end: ExitId::Kak__Spider_House__Entry__ex__KF__Kokiri_Village__Sarias_Porch_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
        },
    }
}

pub fn build_warps() -> EnumMap<WarpId, Warp> {
    enum_map! {
        WarpId::Minuet => Warp {
            id: WarpId::Minuet,
            dest: SpotId::None,
            time: 5000,
            price: Currency::Free,
        },
        WarpId::Save => Warp {
            id: WarpId::Save,
            dest: SpotId::None,
            time: 8000,
            price: Currency::Free,
        },
    }
}

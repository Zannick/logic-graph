//! AUTOGENERATED FOR sample - DO NOT MODIFY
//!
//! Context (game state).

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused_imports)]
#![allow(unused_variables)]
#![allow(unused_parens)]

use crate::context::*;
use crate::items::Item;
use crate::prices::Currency;
use crate::*;
use analyzer::context::Ctx;
use analyzer::world;

pub fn access_default(_ctx: &Context) -> bool {
    true
}

pub fn access_defeat_ganon(ctx: &Context) -> bool {
    ctx.has(&Item::Defeat_Ganon)
}
pub fn access_triforce_piecetriforce_count(ctx: &Context) -> bool {
    ctx.count(&Item::Triforce_Piece) >= ctx.triforce_count
}
pub fn access_kokiri_emerald(ctx: &Context) -> bool {
    ctx.has(&Item::Kokiri_Emerald)
}
pub fn access_can_playminuet_of_forest(ctx: &Context) -> bool {
    helper__can_play!(ctx, Item::Minuet_of_Forest)
}
pub fn access_is_adult_or_kokiri_sword_or_boomerang(ctx: &Context) -> bool {
    ((helper__is_adult!(ctx) || ctx.has(&Item::Kokiri_Sword)) || ctx.has(&Item::Boomerang))
}
pub fn access_is_adult_or_slingshot_or_sticks_or_kokiri_sword(ctx: &Context) -> bool {
    (((helper__is_adult!(ctx) || ctx.has(&Item::Slingshot)) || helper__Sticks!(ctx))
        || ctx.has(&Item::Kokiri_Sword))
}
pub fn access_false(ctx: &Context) -> bool {
    false
}
pub fn access_deku_lobby_web(ctx: &Context) -> bool {
    ctx.has(&Item::Deku_Lobby_Web)
}
pub fn access_deku_lobby_web_and_logic_deku_b1_skip(ctx: &Context) -> bool {
    (ctx.has(&Item::Deku_Lobby_Web) && ctx.logic_deku_b1_skip)
}
pub fn access_can_useslingshot(ctx: &Context) -> bool {
    helper__can_use!(ctx, Item::Slingshot)
}
pub fn access_has_shield(ctx: &Context) -> bool {
    helper__has_shield!(ctx)
}
pub fn access_deku_slingshot_scrub(ctx: &Context) -> bool {
    ctx.has(&Item::Deku_Slingshot_Scrub)
}
pub fn access_is_adult_or_can_child_attack_or_nuts(ctx: &Context) -> bool {
    ((helper__is_adult!(ctx) || helper__can_child_attack!(ctx)) || helper__Nuts!(ctx))
}
pub fn access_is_child_and_sticks_and_nuts(ctx: &Context) -> bool {
    ((helper__is_child!(ctx) && helper__Sticks!(ctx)) && helper__Nuts!(ctx))
}
pub fn access_deku_tree__compass_room__entry__floor(ctx: &Context) -> bool {
    ctx.deku_tree__compass_room__ctx__torch
}
pub fn access_is_child_and_sticks(ctx: &Context) -> bool {
    (helper__is_child!(ctx) && helper__Sticks!(ctx))
}
pub fn access_is_adult_or_can_child_attack(ctx: &Context) -> bool {
    (helper__is_adult!(ctx) || helper__can_child_attack!(ctx))
}
pub fn access_is_adult_or_sticks_or_kokiri_sword(ctx: &Context) -> bool {
    ((helper__is_adult!(ctx) || helper__Sticks!(ctx)) || ctx.has(&Item::Kokiri_Sword))
}
pub fn access_deku_basement_switch(ctx: &Context) -> bool {
    ctx.has(&Item::Deku_Basement_Switch)
}
pub fn access_deku_basement_block_and_is_child_and_sticks(ctx: &Context) -> bool {
    ((ctx.has(&Item::Deku_Basement_Block) && helper__is_child!(ctx)) && helper__Sticks!(ctx))
}
pub fn access_is_adult_or_deku_basement_block(ctx: &Context) -> bool {
    (helper__is_adult!(ctx) || ctx.has(&Item::Deku_Basement_Block))
}
pub fn access_has_fire_source_with_torch_or_can_usebow(ctx: &Context) -> bool {
    (helper__has_fire_source_with_torch!(ctx) || helper__can_use!(ctx, Item::Bow))
}
pub fn access_deku_back_room_web_and_can_blast_or_smash(ctx: &Context) -> bool {
    (ctx.has(&Item::Deku_Back_Room_Web) && helper__can_blast_or_smash!(ctx))
}
pub fn access_deku_back_room_web_and_deku_back_room_wall(ctx: &Context) -> bool {
    (ctx.has(&Item::Deku_Back_Room_Web) && ctx.has(&Item::Deku_Back_Room_Wall))
}
pub fn access_is_child(ctx: &Context) -> bool {
    helper__is_child!(ctx)
}
pub fn access_can_useboomerang_or_can_usehookshot(ctx: &Context) -> bool {
    (helper__can_use!(ctx, Item::Boomerang) || helper__can_use!(ctx, Item::Hookshot))
}
pub fn access_has_fire_source(ctx: &Context) -> bool {
    helper__has_fire_source!(ctx)
}
pub fn access_deku_basement_web(ctx: &Context) -> bool {
    ctx.has(&Item::Deku_Basement_Web)
}
pub fn access_deku_basement_scrubs(ctx: &Context) -> bool {
    ctx.has(&Item::Deku_Basement_Scrubs)
}
pub fn access_nuts_or_can_useslingshot_and_can_jumpslash(ctx: &Context) -> bool {
    ((helper__Nuts!(ctx) || helper__can_use!(ctx, Item::Slingshot)) && helper__can_jumpslash!(ctx))
}
pub fn access_nuts_and_has_shield_and_if_is_child__sticks__else__biggoron_sword_(
    ctx: &Context,
) -> bool {
    ((helper__Nuts!(ctx) && helper__has_shield!(ctx))
        && if helper__is_child!(ctx) {
            helper__Sticks!(ctx)
        } else {
            ctx.has(&Item::Biggoron_Sword)
        })
}
pub fn access_defeat_gohma(ctx: &Context) -> bool {
    ctx.has(&Item::Defeat_Gohma)
}
pub fn access_is_child_and_kokiri_sword_and_deku_shield(ctx: &Context) -> bool {
    ((helper__is_child!(ctx) && ctx.has(&Item::Kokiri_Sword)) && helper__Deku_Shield!(ctx))
}
pub fn access_is_adult_or_showed_mido(ctx: &Context) -> bool {
    (helper__is_adult!(ctx) || ctx.has(&Item::Showed_Mido))
}
pub fn access_is_adult(ctx: &Context) -> bool {
    helper__is_adult!(ctx)
}
pub fn access_gold_skulltula_token10(ctx: &Context) -> bool {
    ctx.count(&Item::Gold_Skulltula_Token) >= 10
}
pub fn action_rupees__maxrupees__1_wallet_max(ctx: &mut Context) {
    ctx.rupees = std::cmp::max(1, helper__wallet_max!(ctx));
}
pub fn action_rupees__maxrupees__5_wallet_max(ctx: &mut Context) {
    ctx.rupees = std::cmp::max(5, helper__wallet_max!(ctx));
}
pub fn action_rupees__maxrupees__10_wallet_max(ctx: &mut Context) {
    ctx.rupees = std::cmp::max(10, helper__wallet_max!(ctx));
}
pub fn action_rupees__maxrupees__20_wallet_max(ctx: &mut Context) {
    ctx.rupees = std::cmp::max(20, helper__wallet_max!(ctx));
}
pub fn action_rupees__maxrupees__50_wallet_max(ctx: &mut Context) {
    ctx.rupees = std::cmp::max(50, helper__wallet_max!(ctx));
}
pub fn action_deku_tree__compass_room__entry_light_torchdo(ctx: &mut Context) {
    ctx.deku_tree__compass_room__ctx__torch = true;
}

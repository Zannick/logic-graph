//! AUTOGENERATED FOR sample - DO NOT MODIFY
//!
//! Context (game state).

#![allow(non_snake_case)]

use crate::graph::*;
use crate::items::Item;
use crate::movements;
use crate::prices::Currency;
use crate::rules;
use analyzer::context;
use enum_map::EnumMap;

#[derive(Copy, Clone, Debug, Default, PartialEq, Eq)]
pub enum Status {
    #[default]
    None,
    Visited,
    Skipped,
}

#[derive(Clone, Debug, Default, Eq, PartialEq)]
pub struct Context {
    // context vars
    pub position: SpotId,
    pub save: SpotId,
    pub child: bool,
    pub tod: &'static str,
    pub rupees: i32,
    pub deku_tree__compass_room__ctx__torch: bool,
    // settings
    pub triforce_count: i16,
    pub logic_deku_b1_skip: bool,
    // items
    pub biggoron_sword: bool,
    pub blue_fire_arrows: bool,
    pub bombs: bool,
    pub boomerang: bool,
    pub bow: bool,
    pub buy_deku_nut_10: bool,
    pub buy_deku_nut_5: bool,
    pub buy_deku_shield: bool,
    pub buy_deku_stick_1: bool,
    pub defeat_ganon: bool,
    pub defeat_gohma: bool,
    pub deku_back_room_wall: bool,
    pub deku_back_room_web: bool,
    pub deku_basement_block: bool,
    pub deku_basement_scrubs: bool,
    pub deku_basement_switch: bool,
    pub deku_basement_web: bool,
    pub deku_lobby_web: bool,
    pub deku_nut_drop: bool,
    pub deku_shield_drop: bool,
    pub deku_slingshot_scrub: bool,
    pub deku_stick_drop: bool,
    pub dins_fire: bool,
    pub farores_wind: bool,
    pub fire_arrows: bool,
    pub gold_skulltula_token: i8,
    pub goron_tunic: bool,
    pub hookshot: bool,
    pub hover_boots: bool,
    pub hylian_shield: bool,
    pub iron_boots: bool,
    pub kokiri_emerald: bool,
    pub kokiri_sword: bool,
    pub lens_of_truth: bool,
    pub light_arrows: bool,
    pub magic_meter: bool,
    pub megaton_hammer: bool,
    pub minuet_of_forest: bool,
    pub mirror_shield: bool,
    pub nayrus_love: bool,
    pub ocarina: bool,
    pub showed_mido: bool,
    pub slingshot: bool,
    pub triforce_piece: i16,
    pub zora_tunic: bool,
    // other
    pub status: EnumMap<LocationId, Status>,
}

impl context::Ctx for Context {
    type World = World;
    type ItemId = Item;
    type AreaId = AreaId;
    type RegionId = RegionId;

    fn has(&self, item: Item) -> bool {
        match item {
            Item::Biggoron_Sword => self.biggoron_sword,
            Item::Blue_Fire_Arrows => self.blue_fire_arrows,
            Item::Bombs => self.bombs,
            Item::Boomerang => self.boomerang,
            Item::Bow => self.bow,
            Item::Buy_Deku_Nut_10 => self.buy_deku_nut_10,
            Item::Buy_Deku_Nut_5 => self.buy_deku_nut_5,
            Item::Buy_Deku_Shield => self.buy_deku_shield,
            Item::Buy_Deku_Stick_1 => self.buy_deku_stick_1,
            Item::Defeat_Ganon => self.defeat_ganon,
            Item::Defeat_Gohma => self.defeat_gohma,
            Item::Deku_Back_Room_Wall => self.deku_back_room_wall,
            Item::Deku_Back_Room_Web => self.deku_back_room_web,
            Item::Deku_Basement_Block => self.deku_basement_block,
            Item::Deku_Basement_Scrubs => self.deku_basement_scrubs,
            Item::Deku_Basement_Switch => self.deku_basement_switch,
            Item::Deku_Basement_Web => self.deku_basement_web,
            Item::Deku_Lobby_Web => self.deku_lobby_web,
            Item::Deku_Nut_Drop => self.deku_nut_drop,
            Item::Deku_Shield_Drop => self.deku_shield_drop,
            Item::Deku_Slingshot_Scrub => self.deku_slingshot_scrub,
            Item::Deku_Stick_Drop => self.deku_stick_drop,
            Item::Dins_Fire => self.dins_fire,
            Item::Farores_Wind => self.farores_wind,
            Item::Fire_Arrows => self.fire_arrows,
            Item::Gold_Skulltula_Token => self.gold_skulltula_token >= 1,
            Item::Goron_Tunic => self.goron_tunic,
            Item::Hookshot => self.hookshot,
            Item::Hover_Boots => self.hover_boots,
            Item::Hylian_Shield => self.hylian_shield,
            Item::Iron_Boots => self.iron_boots,
            Item::Kokiri_Emerald => self.kokiri_emerald,
            Item::Kokiri_Sword => self.kokiri_sword,
            Item::Lens_of_Truth => self.lens_of_truth,
            Item::Light_Arrows => self.light_arrows,
            Item::Magic_Meter => self.magic_meter,
            Item::Megaton_Hammer => self.megaton_hammer,
            Item::Minuet_of_Forest => self.minuet_of_forest,
            Item::Mirror_Shield => self.mirror_shield,
            Item::Nayrus_Love => self.nayrus_love,
            Item::Ocarina => self.ocarina,
            Item::Showed_Mido => self.showed_mido,
            Item::Slingshot => self.slingshot,
            Item::Triforce_Piece => self.triforce_piece >= 1,
            Item::Zora_Tunic => self.zora_tunic,
            _ => false,
        }
    }
    fn count(&self, item: Item) -> i16 {
        match item {
            Item::Biggoron_Sword => self.biggoron_sword.into(),
            Item::Blue_Fire_Arrows => self.blue_fire_arrows.into(),
            Item::Bombs => self.bombs.into(),
            Item::Boomerang => self.boomerang.into(),
            Item::Bow => self.bow.into(),
            Item::Buy_Deku_Nut_10 => self.buy_deku_nut_10.into(),
            Item::Buy_Deku_Nut_5 => self.buy_deku_nut_5.into(),
            Item::Buy_Deku_Shield => self.buy_deku_shield.into(),
            Item::Buy_Deku_Stick_1 => self.buy_deku_stick_1.into(),
            Item::Defeat_Ganon => self.defeat_ganon.into(),
            Item::Defeat_Gohma => self.defeat_gohma.into(),
            Item::Deku_Back_Room_Wall => self.deku_back_room_wall.into(),
            Item::Deku_Back_Room_Web => self.deku_back_room_web.into(),
            Item::Deku_Basement_Block => self.deku_basement_block.into(),
            Item::Deku_Basement_Scrubs => self.deku_basement_scrubs.into(),
            Item::Deku_Basement_Switch => self.deku_basement_switch.into(),
            Item::Deku_Basement_Web => self.deku_basement_web.into(),
            Item::Deku_Lobby_Web => self.deku_lobby_web.into(),
            Item::Deku_Nut_Drop => self.deku_nut_drop.into(),
            Item::Deku_Shield_Drop => self.deku_shield_drop.into(),
            Item::Deku_Slingshot_Scrub => self.deku_slingshot_scrub.into(),
            Item::Deku_Stick_Drop => self.deku_stick_drop.into(),
            Item::Dins_Fire => self.dins_fire.into(),
            Item::Farores_Wind => self.farores_wind.into(),
            Item::Fire_Arrows => self.fire_arrows.into(),
            Item::Gold_Skulltula_Token => self.gold_skulltula_token.into(),
            Item::Goron_Tunic => self.goron_tunic.into(),
            Item::Hookshot => self.hookshot.into(),
            Item::Hover_Boots => self.hover_boots.into(),
            Item::Hylian_Shield => self.hylian_shield.into(),
            Item::Iron_Boots => self.iron_boots.into(),
            Item::Kokiri_Emerald => self.kokiri_emerald.into(),
            Item::Kokiri_Sword => self.kokiri_sword.into(),
            Item::Lens_of_Truth => self.lens_of_truth.into(),
            Item::Light_Arrows => self.light_arrows.into(),
            Item::Magic_Meter => self.magic_meter.into(),
            Item::Megaton_Hammer => self.megaton_hammer.into(),
            Item::Minuet_of_Forest => self.minuet_of_forest.into(),
            Item::Mirror_Shield => self.mirror_shield.into(),
            Item::Nayrus_Love => self.nayrus_love.into(),
            Item::Ocarina => self.ocarina.into(),
            Item::Showed_Mido => self.showed_mido.into(),
            Item::Slingshot => self.slingshot.into(),
            Item::Triforce_Piece => self.triforce_piece.into(),
            Item::Zora_Tunic => self.zora_tunic.into(),
            _ => 0,
        }
    }
    fn collect(&mut self, item: Item) {
        match item {
            Item::Biggoron_Sword => {
                self.biggoron_sword = true;
            }
            Item::Blue_Fire_Arrows => {
                self.blue_fire_arrows = true;
            }
            Item::Bombs => {
                self.bombs = true;
            }
            Item::Boomerang => {
                self.boomerang = true;
            }
            Item::Bow => {
                self.bow = true;
            }
            Item::Buy_Deku_Nut_10 => {
                self.buy_deku_nut_10 = true;
            }
            Item::Buy_Deku_Nut_5 => {
                self.buy_deku_nut_5 = true;
            }
            Item::Buy_Deku_Shield => {
                self.buy_deku_shield = true;
            }
            Item::Buy_Deku_Stick_1 => {
                self.buy_deku_stick_1 = true;
            }
            Item::Defeat_Ganon => {
                self.defeat_ganon = true;
            }
            Item::Defeat_Gohma => {
                self.defeat_gohma = true;
            }
            Item::Deku_Back_Room_Wall => {
                self.deku_back_room_wall = true;
            }
            Item::Deku_Back_Room_Web => {
                self.deku_back_room_web = true;
            }
            Item::Deku_Basement_Block => {
                self.deku_basement_block = true;
            }
            Item::Deku_Basement_Scrubs => {
                self.deku_basement_scrubs = true;
            }
            Item::Deku_Basement_Switch => {
                self.deku_basement_switch = true;
            }
            Item::Deku_Basement_Web => {
                self.deku_basement_web = true;
            }
            Item::Deku_Lobby_Web => {
                self.deku_lobby_web = true;
            }
            Item::Deku_Nut_Drop => {
                self.deku_nut_drop = true;
            }
            Item::Deku_Shield_Drop => {
                self.deku_shield_drop = true;
            }
            Item::Deku_Slingshot_Scrub => {
                self.deku_slingshot_scrub = true;
            }
            Item::Deku_Stick_Drop => {
                self.deku_stick_drop = true;
            }
            Item::Dins_Fire => {
                self.dins_fire = true;
            }
            Item::Farores_Wind => {
                self.farores_wind = true;
            }
            Item::Fire_Arrows => {
                self.fire_arrows = true;
            }
            Item::Gold_Skulltula_Token => {
                self.gold_skulltula_token += 1;
            }
            Item::Goron_Tunic => {
                self.goron_tunic = true;
            }
            Item::Hookshot => {
                self.hookshot = true;
            }
            Item::Hover_Boots => {
                self.hover_boots = true;
            }
            Item::Hylian_Shield => {
                self.hylian_shield = true;
            }
            Item::Iron_Boots => {
                self.iron_boots = true;
            }
            Item::Kokiri_Emerald => {
                self.kokiri_emerald = true;
            }
            Item::Kokiri_Sword => {
                self.kokiri_sword = true;
            }
            Item::Lens_of_Truth => {
                self.lens_of_truth = true;
            }
            Item::Light_Arrows => {
                self.light_arrows = true;
            }
            Item::Magic_Meter => {
                self.magic_meter = true;
            }
            Item::Megaton_Hammer => {
                self.megaton_hammer = true;
            }
            Item::Minuet_of_Forest => {
                self.minuet_of_forest = true;
            }
            Item::Mirror_Shield => {
                self.mirror_shield = true;
            }
            Item::Nayrus_Love => {
                self.nayrus_love = true;
            }
            Item::Ocarina => {
                self.ocarina = true;
            }
            Item::Showed_Mido => {
                self.showed_mido = true;
            }
            Item::Slingshot => {
                self.slingshot = true;
            }
            Item::Triforce_Piece => {
                self.triforce_piece += 1;
            }
            Item::Zora_Tunic => {
                self.zora_tunic = true;
            }
            Item::Rupee_1 => rules::action_rupees__max__rupees__1_wallet_max(self),
            Item::Rupees_5 => rules::action_rupees__max__rupees__5_wallet_max(self),
            Item::Rupees_50 => rules::action_rupees__max__rupees__50_wallet_max(self),
            _ => (),
        }
    }

    fn position(&self) -> SpotId {
        self.position
    }
    fn set_position(&mut self, pos: SpotId) {
        match get_area(pos) {
            AreaId::Deku_Tree__Compass_Room => {
                if get_area(self.position) != AreaId::Deku_Tree__Compass_Room {
                    self.deku_tree__compass_room__ctx__torch = false;
                }
            }
            _ => (),
        }
        self.position = pos;
    }

    fn can_afford(&self, cost: &Currency) -> bool {
        match cost {
            Currency::Free => true,
            Currency::Rupees(c) => self.rupees >= *c,
        }
    }
    fn spend(&mut self, cost: &Currency) {
        match cost {
            Currency::Free => (),
            Currency::Rupees(c) => self.rupees -= *c,
        }
    }

    fn visit(&mut self, loc_id: LocationId) {
        self.status[loc_id] = Status::Visited;
    }
    fn skip(&mut self, loc_id: LocationId) {
        self.status[loc_id] = Status::Skipped;
    }
    fn reset(&mut self, loc_id: LocationId) {
        self.status[loc_id] = Status::None;
    }

    fn todo(&self, loc_id: LocationId) -> bool {
        self.status[loc_id] == Status::None
    }
    fn visited(&self, loc_id: LocationId) -> bool {
        self.status[loc_id] == Status::Visited
    }
    fn skipped(&self, loc_id: LocationId) -> bool {
        self.status[loc_id] == Status::Skipped
    }

    fn all_spot_checks(&self, id: SpotId) -> bool {
        let r = spot_locations(id);
        self.status.as_slice()[r.start..r.end]
            .iter()
            .all(|&x| x == Status::Visited)
    }
    fn all_area_checks(&self, id: AreaId) -> bool {
        let r = area_locations(id);
        self.status.as_slice()[r.start..r.end]
            .iter()
            .all(|&x| x == Status::Visited)
    }
    fn all_region_checks(&self, id: RegionId) -> bool {
        let r = region_locations(id);
        self.status.as_slice()[r.start..r.end]
            .iter()
            .all(|&x| x == Status::Visited)
    }
    fn local_travel_time(&self, dest: SpotId) -> i32 {
        movements::local_travel_time(self, self.position, dest)
    }

    fn count_visits(&self) -> usize {
        self.status
            .values()
            .filter(|&x| *x == Status::Visited)
            .count()
    }
    fn count_skips(&self) -> usize {
        self.status
            .values()
            .filter(|&x| *x == Status::Skipped)
            .count()
    }
}

impl Context {
    pub fn new() -> Context {
        Context {
            position: SpotId::KF__Links_House__Start_Point,
            save: SpotId::KF__Links_House__Start_Point,
            child: true,
            tod: "day",
            rupees: 0,
            deku_tree__compass_room__ctx__torch: false,
            ..Context::default()
        }
    }
}

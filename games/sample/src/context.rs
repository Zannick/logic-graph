//! AUTOGENERATED FOR sample - MODIFICATIONS WILL BE LOST

#![allow(non_snake_case)]
#![allow(unused)]

use crate::graph::*;
use crate::items::Item;
use crate::movements;
use crate::observe::*;
use crate::prices::Currency;
use crate::rules;
use analyzer::context;
use analyzer::matchertrie::IntegerObservation;
use analyzer::world::{Exit as _, World as _};
use enum_map::EnumMap;
use serde::{Deserialize, Serialize};
use serde_repr::{Deserialize_repr, Serialize_repr};
use std::str::FromStr;
use yaml_rust::Yaml;

pub mod enums {
use std::fmt;
#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd, Default, serde_repr::Serialize_repr, serde_repr::Deserialize_repr)]
#[repr(u8)]
pub enum Tod {
    #[default]
    Day,
    Night,
}
impl fmt::Display for Tod {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            Tod::Day => write!(f, "{}", "Day"),
            Tod::Night => write!(f, "{}", "Night"),
        }
    }
}
impl std::str::FromStr for Tod {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Day" | "day" => Ok(Tod::Day),
            "Night" | "night" => Ok(Tod::Night),
            _ => Err(format!("Could not recognize as a Tod: {}", s)),
        }
    }
}

}

#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub enum Expectation {
    Position(SpotId),
    Child(bool),
    Tod(enums::Tod),
    Rupees(i32),
    DekuTreeCompassRoomCtxTorch(bool),
    // items
    BiggoronSword(bool),
    Bombs(bool),
    Boomerang(bool),
    Bow(bool),
    BuyDekuNut10(bool),
    BuyDekuNut5(bool),
    BuyDekuShield(bool),
    BuyDekuStick1(bool),
    DefeatGanon(bool),
    DefeatGohma(bool),
    DekuBackRoomWall(bool),
    DekuBackRoomWeb(bool),
    DekuBasementBlock(bool),
    DekuBasementScrubs(bool),
    DekuBasementSwitch(bool),
    DekuBasementWeb(bool),
    DekuLobbyWeb(bool),
    DekuNutDrop(bool),
    DekuShieldDrop(bool),
    DekuSlingshotScrub(bool),
    DekuStickDrop(bool),
    GoldSkulltulaToken(i8),
    HylianShield(bool),
    KokiriEmerald(bool),
    KokiriSword(bool),
    MagicMeter(bool),
    Ocarina(bool),
    ProgressiveWallet(i8),
    ShowedMido(bool),
    Slingshot(bool),
    TriforcePiece(i16),
    Victory(bool),
}

pub mod data {
#[allow(unused_imports)]
use crate::context::enums;
use crate::graph::*;
pub fn save(spot_id: SpotId) -> SpotId {
    match spot_id {
        SpotId::Deku_Tree__Back_Room__East => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Back_Room__Northwest => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Back_Room__South => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Basement_1__Center => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Basement_1__Corner => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Basement_1__South_Door => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Basement_2__Boss_Door => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Basement_2__Pool => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Basement_Ledge__Block => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Basement_Ledge__Web => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Boss_Room__Arena => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Boss_Room__Entry => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Compass_Room__Compass => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Compass_Room__Entry => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Compass_Room__Ledge => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Floor_2__Lower => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Floor_2__Slingshot_Door => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Floor_2__Vines => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Floor_3__Climb => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Floor_3__Door => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Lobby__Center => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Lobby__Entry => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Lobby__Vines => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Scrub_Room__Entry => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Scrub_Room__Rear => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Skull_Room__Entry => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Slingshot_Room__Entry => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Slingshot_Room__Slingshot => SpotId::Deku_Tree__Lobby__Entry,
        SpotId::Deku_Tree__Slingshot_Upper__Ledge => SpotId::Deku_Tree__Lobby__Entry,
        _ => SpotId::KF__Links_House__Start_Point
    }
}
}

pub mod flags {
use bitflags::bitflags;
use serde::{self, Serialize, Deserialize};

bitflags!{
    #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]
    pub struct ContextBits1: u64 {
        const CHILD = 0x1;
        const DEKU_TREE__COMPASS_ROOM__CTX__TORCH = 0x2;
        const BIGGORON_SWORD = 0x4;
        const BOMBS = 0x8;
        const BOOMERANG = 0x10;
        const BOW = 0x20;
        const BUY_DEKU_NUT_10 = 0x40;
        const BUY_DEKU_NUT_5 = 0x80;
        const BUY_DEKU_SHIELD = 0x100;
        const BUY_DEKU_STICK_1 = 0x200;
        const DEFEAT_GANON = 0x400;
        const DEFEAT_GOHMA = 0x800;
        const DEKU_BACK_ROOM_WALL = 0x1000;
        const DEKU_BACK_ROOM_WEB = 0x2000;
        const DEKU_BASEMENT_BLOCK = 0x4000;
        const DEKU_BASEMENT_SCRUBS = 0x8000;
        const DEKU_BASEMENT_SWITCH = 0x10000;
        const DEKU_BASEMENT_WEB = 0x20000;
        const DEKU_LOBBY_WEB = 0x40000;
        const DEKU_NUT_DROP = 0x80000;
        const DEKU_SHIELD_DROP = 0x100000;
        const DEKU_SLINGSHOT_SCRUB = 0x200000;
        const DEKU_STICK_DROP = 0x400000;
        const HYLIAN_SHIELD = 0x800000;
        const KOKIRI_EMERALD = 0x1000000;
        const KOKIRI_SWORD = 0x2000000;
        const MAGIC_METER = 0x4000000;
        const OCARINA = 0x8000000;
        const SHOWED_MIDO = 0x10000000;
        const SLINGSHOT = 0x20000000;
        const VICTORY = 0x40000000;
        const VISITED_DEFEAT_GOHMA = 0x80000000;
        const VISITED_DEKU_BASEMENT_WEB = 0x100000000;
        const VISITED_DEKU_LOBBY_WEB = 0x200000000;
        const VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BREAK_WALL = 0x400000000;
        const VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BURN_WEB = 0x800000000;
        const VISITED_LOC_DEKU_TREE__BASEMENT_1__CENTER__VINES_GS = 0x1000000000;
        const VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__CHEST = 0x2000000000;
        const VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__GATE_GS = 0x4000000000;
        const VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__SWITCH = 0x8000000000;
        const VISITED_LOC_DEKU_TREE__BASEMENT_2__BOSS_DOOR__SCRUBS = 0x10000000000;
        const VISITED_LOC_DEKU_TREE__BASEMENT_LEDGE__BLOCK__PUSH_BLOCK = 0x20000000000;
        const VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__BLUE_WARP = 0x40000000000;
        const VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__GOHMA_HEART = 0x80000000000;
        const VISITED_LOC_DEKU_TREE__COMPASS_ROOM__COMPASS__CHEST = 0x100000000000;
        const VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__CHEST = 0x200000000000;
        const VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__GS = 0x400000000000;
        const VISITED_LOC_DEKU_TREE__FLOOR_2__VINES__MAP_CHEST = 0x800000000000;
        const VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_NUTS = 0x1000000000000;
        const VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_STICKS = 0x2000000000000;
        const VISITED_LOC_DEKU_TREE__SCRUB_ROOM__ENTRY__SCRUB = 0x4000000000000;
        const VISITED_LOC_DEKU_TREE__SKULL_ROOM__ENTRY__GS = 0x8000000000000;
        const VISITED_LOC_DEKU_TREE__SLINGSHOT_ROOM__SLINGSHOT__CHEST = 0x10000000000000;
        const VISITED_LOC_DEKU_TREE__SLINGSHOT_UPPER__LEDGE__CHEST = 0x20000000000000;
        const VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__NUTS = 0x40000000000000;
        const VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__STICKS = 0x80000000000000;
        const VISITED_LOC_KF__BOULDER_MAZE__REWARD__CHEST = 0x100000000000000;
        const VISITED_LOC_KF__KOKIRI_VILLAGE__MIDOS_GUARDPOST__SHOW_MIDO = 0x200000000000000;
        const VISITED_LOC_KF__KOKIRI_VILLAGE__TRAINING_CENTER__VICTORY = 0x400000000000000;
        const VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_LEFT_CHEST = 0x800000000000000;
        const VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_RIGHT_CHEST = 0x1000000000000000;
        const VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_LEFT_CHEST = 0x2000000000000000;
        const VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_RIGHT_CHEST = 0x4000000000000000;
        const VISITED_LOC_KF__OUTSIDE_DEKU_TREE__LEFT__GOSSIP_STONE = 0x8000000000000000;
        const ALL_VISIT_FLAGS = 0xffffffff80000000;
    }
}
impl Default for ContextBits1 {
    fn default() -> ContextBits1 {
        ContextBits1::CHILD
    }
}
bitflags!{
    #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
    pub struct ContextBits2: u16 {
        const VISITED_LOC_KF__OUTSIDE_DEKU_TREE__RIGHT__GOSSIP_STONE = 0x1;
        const VISITED_LOC_KF__SHOP__ENTRY__BLUE_RUPEE = 0x2;
        const VISITED_LOC_KF__SHOP__ENTRY__ITEM_1 = 0x4;
        const VISITED_LOC_KF__SHOP__ENTRY__ITEM_2 = 0x8;
        const VISITED_LOC_KF__SHOP__ENTRY__ITEM_3 = 0x10;
        const VISITED_LOC_KF__SHOP__ENTRY__ITEM_4 = 0x20;
        const VISITED_LOC_KF__SHOP__ENTRY__ITEM_5 = 0x40;
        const VISITED_LOC_KF__SHOP__ENTRY__ITEM_6 = 0x80;
        const VISITED_LOC_KF__SHOP__ENTRY__ITEM_7 = 0x100;
        const VISITED_LOC_KF__SHOP__ENTRY__ITEM_8 = 0x200;
        const VISITED_LOC_KAK__SPIDER_HOUSE__ENTRY__SKULLS_10 = 0x400;
        const ALL_VISIT_FLAGS = 0x7ff;
    }
}
}


#[derive(Clone, Debug, Eq, PartialEq, Hash, Serialize, Deserialize)]
pub struct Context {
    // context vars
    pub position: SpotId,
    pub tod: enums::Tod,
    pub rupees: i32,
    // items
    pub gold_skulltula_token: i8,
    pub progressive_wallet: i8,
    pub triforce_piece: i16,
    // bitflags
    pub cbits1: flags::ContextBits1,
    pub cbits2: flags::ContextBits2,
}

impl Default for Context {
    fn default() -> Context {
        Context {
            position: SpotId::KF__Links_House__Start_Point,
            tod: enums::Tod::Day,
            rupees: 0,
            // items
            gold_skulltula_token: Default::default(),
            progressive_wallet: Default::default(),
            triforce_piece: Default::default(),
            // bitflags
            cbits1: Default::default(),
            cbits2: Default::default(),
        }
    }
}

impl analyzer::matchertrie::Observable for Context {
    type PropertyObservation = OneObservation;

    fn root_observation(&self) -> OneObservation {
        OneObservation::Position(self.position)
    }
    fn matches(&self, obs: &OneObservation) -> bool {
        obs.matches(self)
    }
    fn matches_all(&self, observations: &[OneObservation]) -> bool {
        observations.into_iter().all(|obs| obs.matches(self))
    }
}

impl context::Ctx for Context {
    type World = World;
    type ItemId = Item;
    type AreaId = AreaId;
    type RegionId = RegionId;
    type MovementState = movements::MovementState;
    type Observer = FullObservation;
    type Expectation = Expectation;
    const NUM_ITEMS: u32 = 32;


    fn has(&self, item: Item) -> bool {
        match item {
            Item::Biggoron_Sword => self.cbits1.contains(flags::ContextBits1::BIGGORON_SWORD),
            Item::Bombs => self.cbits1.contains(flags::ContextBits1::BOMBS),
            Item::Boomerang => self.cbits1.contains(flags::ContextBits1::BOOMERANG),
            Item::Bow => self.cbits1.contains(flags::ContextBits1::BOW),
            Item::Buy_Deku_Nut_10 => self.cbits1.contains(flags::ContextBits1::BUY_DEKU_NUT_10),
            Item::Buy_Deku_Nut_5 => self.cbits1.contains(flags::ContextBits1::BUY_DEKU_NUT_5),
            Item::Buy_Deku_Shield => self.cbits1.contains(flags::ContextBits1::BUY_DEKU_SHIELD),
            Item::Buy_Deku_Stick_1 => self.cbits1.contains(flags::ContextBits1::BUY_DEKU_STICK_1),
            Item::Defeat_Ganon => self.cbits1.contains(flags::ContextBits1::DEFEAT_GANON),
            Item::Defeat_Gohma => self.cbits1.contains(flags::ContextBits1::DEFEAT_GOHMA),
            Item::Deku_Back_Room_Wall => self.cbits1.contains(flags::ContextBits1::DEKU_BACK_ROOM_WALL),
            Item::Deku_Back_Room_Web => self.cbits1.contains(flags::ContextBits1::DEKU_BACK_ROOM_WEB),
            Item::Deku_Basement_Block => self.cbits1.contains(flags::ContextBits1::DEKU_BASEMENT_BLOCK),
            Item::Deku_Basement_Scrubs => self.cbits1.contains(flags::ContextBits1::DEKU_BASEMENT_SCRUBS),
            Item::Deku_Basement_Switch => self.cbits1.contains(flags::ContextBits1::DEKU_BASEMENT_SWITCH),
            Item::Deku_Basement_Web => self.cbits1.contains(flags::ContextBits1::DEKU_BASEMENT_WEB),
            Item::Deku_Lobby_Web => self.cbits1.contains(flags::ContextBits1::DEKU_LOBBY_WEB),
            Item::Deku_Nut_Drop => self.cbits1.contains(flags::ContextBits1::DEKU_NUT_DROP),
            Item::Deku_Shield_Drop => self.cbits1.contains(flags::ContextBits1::DEKU_SHIELD_DROP),
            Item::Deku_Slingshot_Scrub => self.cbits1.contains(flags::ContextBits1::DEKU_SLINGSHOT_SCRUB),
            Item::Deku_Stick_Drop => self.cbits1.contains(flags::ContextBits1::DEKU_STICK_DROP),
            Item::Gold_Skulltula_Token => self.gold_skulltula_token >= 1,
            Item::Hylian_Shield => self.cbits1.contains(flags::ContextBits1::HYLIAN_SHIELD),
            Item::Kokiri_Emerald => self.cbits1.contains(flags::ContextBits1::KOKIRI_EMERALD),
            Item::Kokiri_Sword => self.cbits1.contains(flags::ContextBits1::KOKIRI_SWORD),
            Item::Magic_Meter => self.cbits1.contains(flags::ContextBits1::MAGIC_METER),
            Item::Ocarina => self.cbits1.contains(flags::ContextBits1::OCARINA),
            Item::Progressive_Wallet => self.progressive_wallet >= 1,
            Item::Showed_Mido => self.cbits1.contains(flags::ContextBits1::SHOWED_MIDO),
            Item::Slingshot => self.cbits1.contains(flags::ContextBits1::SLINGSHOT),
            Item::Triforce_Piece => self.triforce_piece >= 1,
            Item::Victory => self.cbits1.contains(flags::ContextBits1::VICTORY),
            _ => false,
        }
    }
    fn count(&self, item: Item) -> i16 {
        match item {
            Item::Biggoron_Sword => self.cbits1.contains(flags::ContextBits1::BIGGORON_SWORD).into(),
            Item::Bombs => self.cbits1.contains(flags::ContextBits1::BOMBS).into(),
            Item::Boomerang => self.cbits1.contains(flags::ContextBits1::BOOMERANG).into(),
            Item::Bow => self.cbits1.contains(flags::ContextBits1::BOW).into(),
            Item::Buy_Deku_Nut_10 => self.cbits1.contains(flags::ContextBits1::BUY_DEKU_NUT_10).into(),
            Item::Buy_Deku_Nut_5 => self.cbits1.contains(flags::ContextBits1::BUY_DEKU_NUT_5).into(),
            Item::Buy_Deku_Shield => self.cbits1.contains(flags::ContextBits1::BUY_DEKU_SHIELD).into(),
            Item::Buy_Deku_Stick_1 => self.cbits1.contains(flags::ContextBits1::BUY_DEKU_STICK_1).into(),
            Item::Defeat_Ganon => self.cbits1.contains(flags::ContextBits1::DEFEAT_GANON).into(),
            Item::Defeat_Gohma => self.cbits1.contains(flags::ContextBits1::DEFEAT_GOHMA).into(),
            Item::Deku_Back_Room_Wall => self.cbits1.contains(flags::ContextBits1::DEKU_BACK_ROOM_WALL).into(),
            Item::Deku_Back_Room_Web => self.cbits1.contains(flags::ContextBits1::DEKU_BACK_ROOM_WEB).into(),
            Item::Deku_Basement_Block => self.cbits1.contains(flags::ContextBits1::DEKU_BASEMENT_BLOCK).into(),
            Item::Deku_Basement_Scrubs => self.cbits1.contains(flags::ContextBits1::DEKU_BASEMENT_SCRUBS).into(),
            Item::Deku_Basement_Switch => self.cbits1.contains(flags::ContextBits1::DEKU_BASEMENT_SWITCH).into(),
            Item::Deku_Basement_Web => self.cbits1.contains(flags::ContextBits1::DEKU_BASEMENT_WEB).into(),
            Item::Deku_Lobby_Web => self.cbits1.contains(flags::ContextBits1::DEKU_LOBBY_WEB).into(),
            Item::Deku_Nut_Drop => self.cbits1.contains(flags::ContextBits1::DEKU_NUT_DROP).into(),
            Item::Deku_Shield_Drop => self.cbits1.contains(flags::ContextBits1::DEKU_SHIELD_DROP).into(),
            Item::Deku_Slingshot_Scrub => self.cbits1.contains(flags::ContextBits1::DEKU_SLINGSHOT_SCRUB).into(),
            Item::Deku_Stick_Drop => self.cbits1.contains(flags::ContextBits1::DEKU_STICK_DROP).into(),
            Item::Gold_Skulltula_Token => self.gold_skulltula_token.into(),
            Item::Hylian_Shield => self.cbits1.contains(flags::ContextBits1::HYLIAN_SHIELD).into(),
            Item::Kokiri_Emerald => self.cbits1.contains(flags::ContextBits1::KOKIRI_EMERALD).into(),
            Item::Kokiri_Sword => self.cbits1.contains(flags::ContextBits1::KOKIRI_SWORD).into(),
            Item::Magic_Meter => self.cbits1.contains(flags::ContextBits1::MAGIC_METER).into(),
            Item::Ocarina => self.cbits1.contains(flags::ContextBits1::OCARINA).into(),
            Item::Progressive_Wallet => self.progressive_wallet.into(),
            Item::Showed_Mido => self.cbits1.contains(flags::ContextBits1::SHOWED_MIDO).into(),
            Item::Slingshot => self.cbits1.contains(flags::ContextBits1::SLINGSHOT).into(),
            Item::Triforce_Piece => self.triforce_piece.into(),
            Item::Victory => self.cbits1.contains(flags::ContextBits1::VICTORY).into(),
            _ => 0,
        }
    }

    fn collect(&mut self, item: Item, world: &World) {
        match item {
            Item::Biggoron_Sword => {
                self.cbits1.insert(flags::ContextBits1::BIGGORON_SWORD);
            }
            Item::Bombs => {
                self.cbits1.insert(flags::ContextBits1::BOMBS);
            }
            Item::Boomerang => {
                self.cbits1.insert(flags::ContextBits1::BOOMERANG);
            }
            Item::Bow => {
                self.cbits1.insert(flags::ContextBits1::BOW);
            }
            Item::Buy_Deku_Nut_10 => {
                self.cbits1.insert(flags::ContextBits1::BUY_DEKU_NUT_10);
            }
            Item::Buy_Deku_Nut_5 => {
                self.cbits1.insert(flags::ContextBits1::BUY_DEKU_NUT_5);
            }
            Item::Buy_Deku_Shield => {
                self.cbits1.insert(flags::ContextBits1::BUY_DEKU_SHIELD);
            }
            Item::Buy_Deku_Stick_1 => {
                self.cbits1.insert(flags::ContextBits1::BUY_DEKU_STICK_1);
            }
            Item::Defeat_Ganon => {
                self.cbits1.insert(flags::ContextBits1::DEFEAT_GANON);
            }
            Item::Defeat_Gohma => {
                self.cbits1.insert(flags::ContextBits1::DEFEAT_GOHMA);
            }
            Item::Deku_Back_Room_Wall => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BACK_ROOM_WALL);
            }
            Item::Deku_Back_Room_Web => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BACK_ROOM_WEB);
            }
            Item::Deku_Basement_Block => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_BLOCK);
            }
            Item::Deku_Basement_Scrubs => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_SCRUBS);
            }
            Item::Deku_Basement_Switch => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_SWITCH);
            }
            Item::Deku_Basement_Web => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_WEB);
            }
            Item::Deku_Lobby_Web => {
                self.cbits1.insert(flags::ContextBits1::DEKU_LOBBY_WEB);
            }
            Item::Deku_Nut_Drop => {
                self.cbits1.insert(flags::ContextBits1::DEKU_NUT_DROP);
            }
            Item::Deku_Shield_Drop => {
                self.cbits1.insert(flags::ContextBits1::DEKU_SHIELD_DROP);
            }
            Item::Deku_Slingshot_Scrub => {
                self.cbits1.insert(flags::ContextBits1::DEKU_SLINGSHOT_SCRUB);
            }
            Item::Deku_Stick_Drop => {
                self.cbits1.insert(flags::ContextBits1::DEKU_STICK_DROP);
            }
            Item::Gold_Skulltula_Token => {
                self.gold_skulltula_token += 1;
            }
            Item::Hylian_Shield => {
                self.cbits1.insert(flags::ContextBits1::HYLIAN_SHIELD);
            }
            Item::Kokiri_Emerald => {
                self.cbits1.insert(flags::ContextBits1::KOKIRI_EMERALD);
            }
            Item::Kokiri_Sword => {
                self.cbits1.insert(flags::ContextBits1::KOKIRI_SWORD);
            }
            Item::Magic_Meter => {
                self.cbits1.insert(flags::ContextBits1::MAGIC_METER);
            }
            Item::Ocarina => {
                self.cbits1.insert(flags::ContextBits1::OCARINA);
            }
            Item::Progressive_Wallet => {
                self.progressive_wallet += 1;
            }
            Item::Showed_Mido => {
                self.cbits1.insert(flags::ContextBits1::SHOWED_MIDO);
            }
            Item::Slingshot => {
                self.cbits1.insert(flags::ContextBits1::SLINGSHOT);
            }
            Item::Triforce_Piece => {
                self.triforce_piece += 1;
            }
            Item::Victory => {
                self.cbits1.insert(flags::ContextBits1::VICTORY);
            }
            Item::Rupee_1 => rules::action_rupees_set_invoke_min__rupees_add_1_invoke_wallet_max(self, world),
            Item::Rupees_5 => rules::action_rupees_set_invoke_min__rupees_add_5_invoke_wallet_max(self, world),
            Item::Rupees_50 => rules::action_rupees_set_invoke_min__rupees_add_50_invoke_wallet_max(self, world),
            _ => (),
        }
    }

    fn observe_collect(&mut self, item: Item, world: &World, full_obs: &mut FullObservation) {
        match item {
            Item::Biggoron_Sword => {
                self.cbits1.insert(flags::ContextBits1::BIGGORON_SWORD);
                full_obs.clear_biggoron_sword();
            }
            Item::Bombs => {
                self.cbits1.insert(flags::ContextBits1::BOMBS);
                full_obs.clear_bombs();
            }
            Item::Boomerang => {
                self.cbits1.insert(flags::ContextBits1::BOOMERANG);
                full_obs.clear_boomerang();
            }
            Item::Bow => {
                self.cbits1.insert(flags::ContextBits1::BOW);
                full_obs.clear_bow();
            }
            Item::Buy_Deku_Nut_10 => {
                self.cbits1.insert(flags::ContextBits1::BUY_DEKU_NUT_10);
                full_obs.clear_buy_deku_nut_10();
            }
            Item::Buy_Deku_Nut_5 => {
                self.cbits1.insert(flags::ContextBits1::BUY_DEKU_NUT_5);
                full_obs.clear_buy_deku_nut_5();
            }
            Item::Buy_Deku_Shield => {
                self.cbits1.insert(flags::ContextBits1::BUY_DEKU_SHIELD);
                full_obs.clear_buy_deku_shield();
            }
            Item::Buy_Deku_Stick_1 => {
                self.cbits1.insert(flags::ContextBits1::BUY_DEKU_STICK_1);
                full_obs.clear_buy_deku_stick_1();
            }
            Item::Defeat_Ganon => {
                self.cbits1.insert(flags::ContextBits1::DEFEAT_GANON);
                full_obs.clear_defeat_ganon();
            }
            Item::Defeat_Gohma => {
                self.cbits1.insert(flags::ContextBits1::DEFEAT_GOHMA);
                full_obs.clear_defeat_gohma();
            }
            Item::Deku_Back_Room_Wall => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BACK_ROOM_WALL);
                full_obs.clear_deku_back_room_wall();
            }
            Item::Deku_Back_Room_Web => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BACK_ROOM_WEB);
                full_obs.clear_deku_back_room_web();
            }
            Item::Deku_Basement_Block => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_BLOCK);
                full_obs.clear_deku_basement_block();
            }
            Item::Deku_Basement_Scrubs => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_SCRUBS);
                full_obs.clear_deku_basement_scrubs();
            }
            Item::Deku_Basement_Switch => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_SWITCH);
                full_obs.clear_deku_basement_switch();
            }
            Item::Deku_Basement_Web => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_WEB);
                full_obs.clear_deku_basement_web();
            }
            Item::Deku_Lobby_Web => {
                self.cbits1.insert(flags::ContextBits1::DEKU_LOBBY_WEB);
                full_obs.clear_deku_lobby_web();
            }
            Item::Deku_Nut_Drop => {
                self.cbits1.insert(flags::ContextBits1::DEKU_NUT_DROP);
                full_obs.clear_deku_nut_drop();
            }
            Item::Deku_Shield_Drop => {
                self.cbits1.insert(flags::ContextBits1::DEKU_SHIELD_DROP);
                full_obs.clear_deku_shield_drop();
            }
            Item::Deku_Slingshot_Scrub => {
                self.cbits1.insert(flags::ContextBits1::DEKU_SLINGSHOT_SCRUB);
                full_obs.clear_deku_slingshot_scrub();
            }
            Item::Deku_Stick_Drop => {
                self.cbits1.insert(flags::ContextBits1::DEKU_STICK_DROP);
                full_obs.clear_deku_stick_drop();
            }
            Item::Gold_Skulltula_Token => {
                self.gold_skulltula_token += 1;
                full_obs.observe_shift_gold_skulltula_token(1);
            }
            Item::Hylian_Shield => {
                self.cbits1.insert(flags::ContextBits1::HYLIAN_SHIELD);
                full_obs.clear_hylian_shield();
            }
            Item::Kokiri_Emerald => {
                self.cbits1.insert(flags::ContextBits1::KOKIRI_EMERALD);
                full_obs.clear_kokiri_emerald();
            }
            Item::Kokiri_Sword => {
                self.cbits1.insert(flags::ContextBits1::KOKIRI_SWORD);
                full_obs.clear_kokiri_sword();
            }
            Item::Magic_Meter => {
                self.cbits1.insert(flags::ContextBits1::MAGIC_METER);
                full_obs.clear_magic_meter();
            }
            Item::Ocarina => {
                self.cbits1.insert(flags::ContextBits1::OCARINA);
                full_obs.clear_ocarina();
            }
            Item::Progressive_Wallet => {
                self.progressive_wallet += 1;
                full_obs.observe_shift_progressive_wallet(1);
            }
            Item::Showed_Mido => {
                self.cbits1.insert(flags::ContextBits1::SHOWED_MIDO);
                full_obs.clear_showed_mido();
            }
            Item::Slingshot => {
                self.cbits1.insert(flags::ContextBits1::SLINGSHOT);
                full_obs.clear_slingshot();
            }
            Item::Triforce_Piece => {
                self.triforce_piece += 1;
                full_obs.observe_shift_triforce_piece(1);
            }
            Item::Victory => {
                self.cbits1.insert(flags::ContextBits1::VICTORY);
                full_obs.clear_victory();
            }
            Item::Rupee_1 => rules::observe_action_rupees_set_invoke_min__rupees_add_1_invoke_wallet_max(self, world, full_obs),
            Item::Rupees_5 => rules::observe_action_rupees_set_invoke_min__rupees_add_5_invoke_wallet_max(self, world, full_obs),
            Item::Rupees_50 => rules::observe_action_rupees_set_invoke_min__rupees_add_50_invoke_wallet_max(self, world, full_obs),
            _ => (),
        }
    }

    // test helper for items
    fn add_item(&mut self, item: Item) {
        match item {
            Item::Biggoron_Sword => {
                self.cbits1.insert(flags::ContextBits1::BIGGORON_SWORD);
            }
            Item::Bombs => {
                self.cbits1.insert(flags::ContextBits1::BOMBS);
            }
            Item::Boomerang => {
                self.cbits1.insert(flags::ContextBits1::BOOMERANG);
            }
            Item::Bow => {
                self.cbits1.insert(flags::ContextBits1::BOW);
            }
            Item::Buy_Deku_Nut_10 => {
                self.cbits1.insert(flags::ContextBits1::BUY_DEKU_NUT_10);
            }
            Item::Buy_Deku_Nut_5 => {
                self.cbits1.insert(flags::ContextBits1::BUY_DEKU_NUT_5);
            }
            Item::Buy_Deku_Shield => {
                self.cbits1.insert(flags::ContextBits1::BUY_DEKU_SHIELD);
            }
            Item::Buy_Deku_Stick_1 => {
                self.cbits1.insert(flags::ContextBits1::BUY_DEKU_STICK_1);
            }
            Item::Defeat_Ganon => {
                self.cbits1.insert(flags::ContextBits1::DEFEAT_GANON);
            }
            Item::Defeat_Gohma => {
                self.cbits1.insert(flags::ContextBits1::DEFEAT_GOHMA);
            }
            Item::Deku_Back_Room_Wall => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BACK_ROOM_WALL);
            }
            Item::Deku_Back_Room_Web => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BACK_ROOM_WEB);
            }
            Item::Deku_Basement_Block => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_BLOCK);
            }
            Item::Deku_Basement_Scrubs => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_SCRUBS);
            }
            Item::Deku_Basement_Switch => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_SWITCH);
            }
            Item::Deku_Basement_Web => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_WEB);
            }
            Item::Deku_Lobby_Web => {
                self.cbits1.insert(flags::ContextBits1::DEKU_LOBBY_WEB);
            }
            Item::Deku_Nut_Drop => {
                self.cbits1.insert(flags::ContextBits1::DEKU_NUT_DROP);
            }
            Item::Deku_Shield_Drop => {
                self.cbits1.insert(flags::ContextBits1::DEKU_SHIELD_DROP);
            }
            Item::Deku_Slingshot_Scrub => {
                self.cbits1.insert(flags::ContextBits1::DEKU_SLINGSHOT_SCRUB);
            }
            Item::Deku_Stick_Drop => {
                self.cbits1.insert(flags::ContextBits1::DEKU_STICK_DROP);
            }
            Item::Gold_Skulltula_Token => {
                self.gold_skulltula_token += 1;
            }
            Item::Hylian_Shield => {
                self.cbits1.insert(flags::ContextBits1::HYLIAN_SHIELD);
            }
            Item::Kokiri_Emerald => {
                self.cbits1.insert(flags::ContextBits1::KOKIRI_EMERALD);
            }
            Item::Kokiri_Sword => {
                self.cbits1.insert(flags::ContextBits1::KOKIRI_SWORD);
            }
            Item::Magic_Meter => {
                self.cbits1.insert(flags::ContextBits1::MAGIC_METER);
            }
            Item::Ocarina => {
                self.cbits1.insert(flags::ContextBits1::OCARINA);
            }
            Item::Progressive_Wallet => {
                self.progressive_wallet += 1;
            }
            Item::Showed_Mido => {
                self.cbits1.insert(flags::ContextBits1::SHOWED_MIDO);
            }
            Item::Slingshot => {
                self.cbits1.insert(flags::ContextBits1::SLINGSHOT);
            }
            Item::Triforce_Piece => {
                self.triforce_piece += 1;
            }
            Item::Victory => {
                self.cbits1.insert(flags::ContextBits1::VICTORY);
            }
            _ => (),
        }
    }

    fn observe_add_item(&mut self, item: Item, full_obs: &mut FullObservation) {
        match item {
            Item::Biggoron_Sword => {
                self.cbits1.insert(flags::ContextBits1::BIGGORON_SWORD);
                full_obs.clear_biggoron_sword();
            }
            Item::Bombs => {
                self.cbits1.insert(flags::ContextBits1::BOMBS);
                full_obs.clear_bombs();
            }
            Item::Boomerang => {
                self.cbits1.insert(flags::ContextBits1::BOOMERANG);
                full_obs.clear_boomerang();
            }
            Item::Bow => {
                self.cbits1.insert(flags::ContextBits1::BOW);
                full_obs.clear_bow();
            }
            Item::Buy_Deku_Nut_10 => {
                self.cbits1.insert(flags::ContextBits1::BUY_DEKU_NUT_10);
                full_obs.clear_buy_deku_nut_10();
            }
            Item::Buy_Deku_Nut_5 => {
                self.cbits1.insert(flags::ContextBits1::BUY_DEKU_NUT_5);
                full_obs.clear_buy_deku_nut_5();
            }
            Item::Buy_Deku_Shield => {
                self.cbits1.insert(flags::ContextBits1::BUY_DEKU_SHIELD);
                full_obs.clear_buy_deku_shield();
            }
            Item::Buy_Deku_Stick_1 => {
                self.cbits1.insert(flags::ContextBits1::BUY_DEKU_STICK_1);
                full_obs.clear_buy_deku_stick_1();
            }
            Item::Defeat_Ganon => {
                self.cbits1.insert(flags::ContextBits1::DEFEAT_GANON);
                full_obs.clear_defeat_ganon();
            }
            Item::Defeat_Gohma => {
                self.cbits1.insert(flags::ContextBits1::DEFEAT_GOHMA);
                full_obs.clear_defeat_gohma();
            }
            Item::Deku_Back_Room_Wall => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BACK_ROOM_WALL);
                full_obs.clear_deku_back_room_wall();
            }
            Item::Deku_Back_Room_Web => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BACK_ROOM_WEB);
                full_obs.clear_deku_back_room_web();
            }
            Item::Deku_Basement_Block => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_BLOCK);
                full_obs.clear_deku_basement_block();
            }
            Item::Deku_Basement_Scrubs => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_SCRUBS);
                full_obs.clear_deku_basement_scrubs();
            }
            Item::Deku_Basement_Switch => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_SWITCH);
                full_obs.clear_deku_basement_switch();
            }
            Item::Deku_Basement_Web => {
                self.cbits1.insert(flags::ContextBits1::DEKU_BASEMENT_WEB);
                full_obs.clear_deku_basement_web();
            }
            Item::Deku_Lobby_Web => {
                self.cbits1.insert(flags::ContextBits1::DEKU_LOBBY_WEB);
                full_obs.clear_deku_lobby_web();
            }
            Item::Deku_Nut_Drop => {
                self.cbits1.insert(flags::ContextBits1::DEKU_NUT_DROP);
                full_obs.clear_deku_nut_drop();
            }
            Item::Deku_Shield_Drop => {
                self.cbits1.insert(flags::ContextBits1::DEKU_SHIELD_DROP);
                full_obs.clear_deku_shield_drop();
            }
            Item::Deku_Slingshot_Scrub => {
                self.cbits1.insert(flags::ContextBits1::DEKU_SLINGSHOT_SCRUB);
                full_obs.clear_deku_slingshot_scrub();
            }
            Item::Deku_Stick_Drop => {
                self.cbits1.insert(flags::ContextBits1::DEKU_STICK_DROP);
                full_obs.clear_deku_stick_drop();
            }
            Item::Gold_Skulltula_Token => {
                self.gold_skulltula_token += 1;
                full_obs.observe_shift_gold_skulltula_token(1);
            }
            Item::Hylian_Shield => {
                self.cbits1.insert(flags::ContextBits1::HYLIAN_SHIELD);
                full_obs.clear_hylian_shield();
            }
            Item::Kokiri_Emerald => {
                self.cbits1.insert(flags::ContextBits1::KOKIRI_EMERALD);
                full_obs.clear_kokiri_emerald();
            }
            Item::Kokiri_Sword => {
                self.cbits1.insert(flags::ContextBits1::KOKIRI_SWORD);
                full_obs.clear_kokiri_sword();
            }
            Item::Magic_Meter => {
                self.cbits1.insert(flags::ContextBits1::MAGIC_METER);
                full_obs.clear_magic_meter();
            }
            Item::Ocarina => {
                self.cbits1.insert(flags::ContextBits1::OCARINA);
                full_obs.clear_ocarina();
            }
            Item::Progressive_Wallet => {
                self.progressive_wallet += 1;
                full_obs.observe_shift_progressive_wallet(1);
            }
            Item::Showed_Mido => {
                self.cbits1.insert(flags::ContextBits1::SHOWED_MIDO);
                full_obs.clear_showed_mido();
            }
            Item::Slingshot => {
                self.cbits1.insert(flags::ContextBits1::SLINGSHOT);
                full_obs.clear_slingshot();
            }
            Item::Triforce_Piece => {
                self.triforce_piece += 1;
                full_obs.observe_shift_triforce_piece(1);
            }
            Item::Victory => {
                self.cbits1.insert(flags::ContextBits1::VICTORY);
                full_obs.clear_victory();
            }
            _ => (),
        }
    }


    // test helper for context vars
    fn parse_set_context(&mut self, ckey: &str, cval: &Yaml) -> Result<(), String> {
        match (ckey, cval) {
            ("position", Yaml::String(s)) => self.set_position_raw(SpotId::from_str(s).map_err(|e| format!("{}", e))?),
            ("position", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("child", Yaml::Boolean(b)) => self.set_child(*b),
            ("child", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("tod", Yaml::String(s)) => self.set_tod(enums::Tod::from_str(s).map_err(|e| format!("{}", e))?),
            ("tod", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("rupees", Yaml::Integer(i)) => self.set_rupees(i32::try_from(*i).map_err(|e| format!("{}", e))?),
            ("rupees", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("deku_tree__compass_room__ctx__torch", Yaml::Boolean(b)) => self.set_deku_tree__compass_room__ctx__torch(*b),
            ("deku_tree__compass_room__ctx__torch", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            _ => { return Err(format!("Unrecognized context key: {:?}", ckey)); }
        }
        Ok(())
    }

    fn parse_expect_context(ckey: &str, cval: &Yaml) -> Result<Expectation, String> {
        Ok(match (ckey, cval) {
            ("position", Yaml::String(s)) => Expectation::Position(SpotId::from_str(s).map_err(|e| format!("{}", e))?),
            ("position", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("child", Yaml::Boolean(b)) => Expectation::Child(*b),
            ("child", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("tod", Yaml::String(s)) => Expectation::Tod(enums::Tod::from_str(s).map_err(|e| format!("{}", e))?),
            ("tod", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("rupees", Yaml::Integer(i)) => Expectation::Rupees(i32::try_from(*i).map_err(|e| format!("{}", e))?),
            ("rupees", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("deku_tree__compass_room__ctx__torch", Yaml::Boolean(b)) => Expectation::DekuTreeCompassRoomCtxTorch(*b),
            ("deku_tree__compass_room__ctx__torch", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Biggoron_Sword", Yaml::Boolean(b)) => Expectation::BiggoronSword(*b),
            ("Biggoron_Sword", Yaml::Integer(i)) => Expectation::BiggoronSword(*i > 0),
            ("Biggoron_Sword", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Bombs", Yaml::Boolean(b)) => Expectation::Bombs(*b),
            ("Bombs", Yaml::Integer(i)) => Expectation::Bombs(*i > 0),
            ("Bombs", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Boomerang", Yaml::Boolean(b)) => Expectation::Boomerang(*b),
            ("Boomerang", Yaml::Integer(i)) => Expectation::Boomerang(*i > 0),
            ("Boomerang", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Bow", Yaml::Boolean(b)) => Expectation::Bow(*b),
            ("Bow", Yaml::Integer(i)) => Expectation::Bow(*i > 0),
            ("Bow", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Buy_Deku_Nut_10", Yaml::Boolean(b)) => Expectation::BuyDekuNut10(*b),
            ("Buy_Deku_Nut_10", Yaml::Integer(i)) => Expectation::BuyDekuNut10(*i > 0),
            ("Buy_Deku_Nut_10", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Buy_Deku_Nut_5", Yaml::Boolean(b)) => Expectation::BuyDekuNut5(*b),
            ("Buy_Deku_Nut_5", Yaml::Integer(i)) => Expectation::BuyDekuNut5(*i > 0),
            ("Buy_Deku_Nut_5", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Buy_Deku_Shield", Yaml::Boolean(b)) => Expectation::BuyDekuShield(*b),
            ("Buy_Deku_Shield", Yaml::Integer(i)) => Expectation::BuyDekuShield(*i > 0),
            ("Buy_Deku_Shield", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Buy_Deku_Stick_1", Yaml::Boolean(b)) => Expectation::BuyDekuStick1(*b),
            ("Buy_Deku_Stick_1", Yaml::Integer(i)) => Expectation::BuyDekuStick1(*i > 0),
            ("Buy_Deku_Stick_1", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Defeat_Ganon", Yaml::Boolean(b)) => Expectation::DefeatGanon(*b),
            ("Defeat_Ganon", Yaml::Integer(i)) => Expectation::DefeatGanon(*i > 0),
            ("Defeat_Ganon", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Defeat_Gohma", Yaml::Boolean(b)) => Expectation::DefeatGohma(*b),
            ("Defeat_Gohma", Yaml::Integer(i)) => Expectation::DefeatGohma(*i > 0),
            ("Defeat_Gohma", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Deku_Back_Room_Wall", Yaml::Boolean(b)) => Expectation::DekuBackRoomWall(*b),
            ("Deku_Back_Room_Wall", Yaml::Integer(i)) => Expectation::DekuBackRoomWall(*i > 0),
            ("Deku_Back_Room_Wall", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Deku_Back_Room_Web", Yaml::Boolean(b)) => Expectation::DekuBackRoomWeb(*b),
            ("Deku_Back_Room_Web", Yaml::Integer(i)) => Expectation::DekuBackRoomWeb(*i > 0),
            ("Deku_Back_Room_Web", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Deku_Basement_Block", Yaml::Boolean(b)) => Expectation::DekuBasementBlock(*b),
            ("Deku_Basement_Block", Yaml::Integer(i)) => Expectation::DekuBasementBlock(*i > 0),
            ("Deku_Basement_Block", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Deku_Basement_Scrubs", Yaml::Boolean(b)) => Expectation::DekuBasementScrubs(*b),
            ("Deku_Basement_Scrubs", Yaml::Integer(i)) => Expectation::DekuBasementScrubs(*i > 0),
            ("Deku_Basement_Scrubs", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Deku_Basement_Switch", Yaml::Boolean(b)) => Expectation::DekuBasementSwitch(*b),
            ("Deku_Basement_Switch", Yaml::Integer(i)) => Expectation::DekuBasementSwitch(*i > 0),
            ("Deku_Basement_Switch", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Deku_Basement_Web", Yaml::Boolean(b)) => Expectation::DekuBasementWeb(*b),
            ("Deku_Basement_Web", Yaml::Integer(i)) => Expectation::DekuBasementWeb(*i > 0),
            ("Deku_Basement_Web", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Deku_Lobby_Web", Yaml::Boolean(b)) => Expectation::DekuLobbyWeb(*b),
            ("Deku_Lobby_Web", Yaml::Integer(i)) => Expectation::DekuLobbyWeb(*i > 0),
            ("Deku_Lobby_Web", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Deku_Nut_Drop", Yaml::Boolean(b)) => Expectation::DekuNutDrop(*b),
            ("Deku_Nut_Drop", Yaml::Integer(i)) => Expectation::DekuNutDrop(*i > 0),
            ("Deku_Nut_Drop", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Deku_Shield_Drop", Yaml::Boolean(b)) => Expectation::DekuShieldDrop(*b),
            ("Deku_Shield_Drop", Yaml::Integer(i)) => Expectation::DekuShieldDrop(*i > 0),
            ("Deku_Shield_Drop", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Deku_Slingshot_Scrub", Yaml::Boolean(b)) => Expectation::DekuSlingshotScrub(*b),
            ("Deku_Slingshot_Scrub", Yaml::Integer(i)) => Expectation::DekuSlingshotScrub(*i > 0),
            ("Deku_Slingshot_Scrub", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Deku_Stick_Drop", Yaml::Boolean(b)) => Expectation::DekuStickDrop(*b),
            ("Deku_Stick_Drop", Yaml::Integer(i)) => Expectation::DekuStickDrop(*i > 0),
            ("Deku_Stick_Drop", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Gold_Skulltula_Token", Yaml::Integer(i)) => Expectation::GoldSkulltulaToken(i8::try_from(*i).map_err(|e| format!("{}", e))?),
            ("Gold_Skulltula_Token", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Hylian_Shield", Yaml::Boolean(b)) => Expectation::HylianShield(*b),
            ("Hylian_Shield", Yaml::Integer(i)) => Expectation::HylianShield(*i > 0),
            ("Hylian_Shield", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Kokiri_Emerald", Yaml::Boolean(b)) => Expectation::KokiriEmerald(*b),
            ("Kokiri_Emerald", Yaml::Integer(i)) => Expectation::KokiriEmerald(*i > 0),
            ("Kokiri_Emerald", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Kokiri_Sword", Yaml::Boolean(b)) => Expectation::KokiriSword(*b),
            ("Kokiri_Sword", Yaml::Integer(i)) => Expectation::KokiriSword(*i > 0),
            ("Kokiri_Sword", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Magic_Meter", Yaml::Boolean(b)) => Expectation::MagicMeter(*b),
            ("Magic_Meter", Yaml::Integer(i)) => Expectation::MagicMeter(*i > 0),
            ("Magic_Meter", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Ocarina", Yaml::Boolean(b)) => Expectation::Ocarina(*b),
            ("Ocarina", Yaml::Integer(i)) => Expectation::Ocarina(*i > 0),
            ("Ocarina", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Progressive_Wallet", Yaml::Integer(i)) => Expectation::ProgressiveWallet(i8::try_from(*i).map_err(|e| format!("{}", e))?),
            ("Progressive_Wallet", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Showed_Mido", Yaml::Boolean(b)) => Expectation::ShowedMido(*b),
            ("Showed_Mido", Yaml::Integer(i)) => Expectation::ShowedMido(*i > 0),
            ("Showed_Mido", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Slingshot", Yaml::Boolean(b)) => Expectation::Slingshot(*b),
            ("Slingshot", Yaml::Integer(i)) => Expectation::Slingshot(*i > 0),
            ("Slingshot", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Triforce_Piece", Yaml::Integer(i)) => Expectation::TriforcePiece(i16::try_from(*i).map_err(|e| format!("{}", e))?),
            ("Triforce_Piece", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Victory", Yaml::Boolean(b)) => Expectation::Victory(*b),
            ("Victory", Yaml::Integer(i)) => Expectation::Victory(*i > 0),
            ("Victory", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            _ => { return Err(format!("Unrecognized/disallowed expect context key: {:?}", ckey)); }
        })
    }

    fn assert_expectations(&self, exps: &Vec<Expectation>) -> Result<(), String> {
        let mut errs = Vec::new();
        for exp in exps {
            match exp {
                Expectation::Position(e) => {
                    let v = self.position();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "position", e, v));
                    }
                }
                Expectation::Child(e) => {
                    let v = self.child();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "child", e, v));
                    }
                }
                Expectation::Tod(e) => {
                    let v = self.tod();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "tod", e, v));
                    }
                }
                Expectation::Rupees(e) => {
                    let v = self.rupees();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "rupees", e, v));
                    }
                }
                Expectation::DekuTreeCompassRoomCtxTorch(e) => {
                    let v = self.deku_tree__compass_room__ctx__torch();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "deku_tree__compass_room__ctx__torch", e, v));
                    }
                }
            Expectation::BiggoronSword(e) => {
                let v = self.has(Item::Biggoron_Sword);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Biggoron_Sword", e, v));
                }
            }
            Expectation::Bombs(e) => {
                let v = self.has(Item::Bombs);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Bombs", e, v));
                }
            }
            Expectation::Boomerang(e) => {
                let v = self.has(Item::Boomerang);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Boomerang", e, v));
                }
            }
            Expectation::Bow(e) => {
                let v = self.has(Item::Bow);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Bow", e, v));
                }
            }
            Expectation::BuyDekuNut10(e) => {
                let v = self.has(Item::Buy_Deku_Nut_10);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Buy_Deku_Nut_10", e, v));
                }
            }
            Expectation::BuyDekuNut5(e) => {
                let v = self.has(Item::Buy_Deku_Nut_5);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Buy_Deku_Nut_5", e, v));
                }
            }
            Expectation::BuyDekuShield(e) => {
                let v = self.has(Item::Buy_Deku_Shield);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Buy_Deku_Shield", e, v));
                }
            }
            Expectation::BuyDekuStick1(e) => {
                let v = self.has(Item::Buy_Deku_Stick_1);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Buy_Deku_Stick_1", e, v));
                }
            }
            Expectation::DefeatGanon(e) => {
                let v = self.has(Item::Defeat_Ganon);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Defeat_Ganon", e, v));
                }
            }
            Expectation::DefeatGohma(e) => {
                let v = self.has(Item::Defeat_Gohma);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Defeat_Gohma", e, v));
                }
            }
            Expectation::DekuBackRoomWall(e) => {
                let v = self.has(Item::Deku_Back_Room_Wall);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Deku_Back_Room_Wall", e, v));
                }
            }
            Expectation::DekuBackRoomWeb(e) => {
                let v = self.has(Item::Deku_Back_Room_Web);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Deku_Back_Room_Web", e, v));
                }
            }
            Expectation::DekuBasementBlock(e) => {
                let v = self.has(Item::Deku_Basement_Block);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Deku_Basement_Block", e, v));
                }
            }
            Expectation::DekuBasementScrubs(e) => {
                let v = self.has(Item::Deku_Basement_Scrubs);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Deku_Basement_Scrubs", e, v));
                }
            }
            Expectation::DekuBasementSwitch(e) => {
                let v = self.has(Item::Deku_Basement_Switch);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Deku_Basement_Switch", e, v));
                }
            }
            Expectation::DekuBasementWeb(e) => {
                let v = self.has(Item::Deku_Basement_Web);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Deku_Basement_Web", e, v));
                }
            }
            Expectation::DekuLobbyWeb(e) => {
                let v = self.has(Item::Deku_Lobby_Web);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Deku_Lobby_Web", e, v));
                }
            }
            Expectation::DekuNutDrop(e) => {
                let v = self.has(Item::Deku_Nut_Drop);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Deku_Nut_Drop", e, v));
                }
            }
            Expectation::DekuShieldDrop(e) => {
                let v = self.has(Item::Deku_Shield_Drop);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Deku_Shield_Drop", e, v));
                }
            }
            Expectation::DekuSlingshotScrub(e) => {
                let v = self.has(Item::Deku_Slingshot_Scrub);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Deku_Slingshot_Scrub", e, v));
                }
            }
            Expectation::DekuStickDrop(e) => {
                let v = self.has(Item::Deku_Stick_Drop);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Deku_Stick_Drop", e, v));
                }
            }
            Expectation::GoldSkulltulaToken(e) => {
                let v = self.count(Item::Gold_Skulltula_Token);
                if v != <i8 as Into<i16>>::into(*e) {
                    errs.push(format!("Expected {} = {}, got: {}", "Gold_Skulltula_Token", e, v));
                }
            }
            Expectation::HylianShield(e) => {
                let v = self.has(Item::Hylian_Shield);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Hylian_Shield", e, v));
                }
            }
            Expectation::KokiriEmerald(e) => {
                let v = self.has(Item::Kokiri_Emerald);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Kokiri_Emerald", e, v));
                }
            }
            Expectation::KokiriSword(e) => {
                let v = self.has(Item::Kokiri_Sword);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Kokiri_Sword", e, v));
                }
            }
            Expectation::MagicMeter(e) => {
                let v = self.has(Item::Magic_Meter);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Magic_Meter", e, v));
                }
            }
            Expectation::Ocarina(e) => {
                let v = self.has(Item::Ocarina);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Ocarina", e, v));
                }
            }
            Expectation::ProgressiveWallet(e) => {
                let v = self.count(Item::Progressive_Wallet);
                if v != <i8 as Into<i16>>::into(*e) {
                    errs.push(format!("Expected {} = {}, got: {}", "Progressive_Wallet", e, v));
                }
            }
            Expectation::ShowedMido(e) => {
                let v = self.has(Item::Showed_Mido);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Showed_Mido", e, v));
                }
            }
            Expectation::Slingshot(e) => {
                let v = self.has(Item::Slingshot);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Slingshot", e, v));
                }
            }
            Expectation::TriforcePiece(e) => {
                let v = self.count(Item::Triforce_Piece);
                if v != <i16 as Into<i16>>::into(*e) {
                    errs.push(format!("Expected {} = {}, got: {}", "Triforce_Piece", e, v));
                }
            }
            Expectation::Victory(e) => {
                let v = self.has(Item::Victory);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Victory", e, v));
                }
            }
            }
        }
        if errs.is_empty() {
            Ok(())
        } else {
            Err(errs.join("\n"))
        }
    }

    fn take_exit(&mut self, exit: &Exit, world: &World) {
        self.set_position(exit.dest(), world);
        match exit.id() {
            _ => (),
        }
    }

    fn observe_take_exit(&mut self, exit: &Exit, world: &World, full_obs: &mut FullObservation) {
        self.observe_set_position(exit.dest(), world, full_obs);
        match exit.id() {
            _ => (),
        }
    }


    fn position(&self) -> SpotId {
        self.position
    }
    fn set_position_raw(&mut self, pos: SpotId) {
        self.position = pos;
    }
    fn set_position(&mut self, pos: SpotId, world: &World) {
        let area = get_area(pos);
        match area {
            AreaId::Deku_Tree__Compass_Room => {
                if get_area(self.position) != area {
                    self.cbits1.remove(flags::ContextBits1::DEKU_TREE__COMPASS_ROOM__CTX__TORCH);
                }
            }
            _ => (),
        }
        self.position = pos;
    }

    fn observe_set_position(&mut self, pos: SpotId, world: &World, full_obs: &mut FullObservation) {
        let area = get_area(pos);
        match area {
            AreaId::Deku_Tree__Compass_Room => {
                if get_area(self.position) != area {
                    self.cbits1.remove(flags::ContextBits1::DEKU_TREE__COMPASS_ROOM__CTX__TORCH);
                    full_obs.clear_deku_tree__compass_room__ctx__torch();
                }
            }
            _ => (),
        }
        self.position = pos;
    }


    fn reload_game(&mut self, world: &World) {
        self.reset_all(world);
    }

    fn observe_reload_game(&mut self, world: &World, full_obs: &mut FullObservation) {
        self.observe_reset_all(world, full_obs);
    }


    fn reset_all(&mut self, world: &World) {
    }

    fn observe_reset_all(&mut self, world: &World, full_obs: &mut FullObservation) {
    }


    fn reset_region(&mut self, region_id: RegionId, world: &World) {
    }
fn reset_area(&mut self, area_id: AreaId, world: &World) {
    }

    fn observe_reset_region(&mut self, region_id: RegionId, world: &World, full_obs: &mut FullObservation) {
    }
fn observe_reset_area(&mut self, area_id: AreaId, world: &World, full_obs: &mut FullObservation) {
    }


    fn can_afford(&self, cost: &Currency) -> bool {
        match cost {
            Currency::Free => true,
            Currency::Rupees(c) => self.rupees >= *c,
        }
    }
    fn amount_could_afford(&self, cost: &Currency) -> i16 {
        match cost {
            Currency::Free => 1,
            Currency::Rupees(_) => self.rupees as i16,
        }
    }
    fn observe_afford(&self, cost: &Currency, full_obs: &mut FullObservation) {
        match cost {
            Currency::Free => (),
            Currency::Rupees(c) => full_obs.observe_rupees(IntegerObservation::Ge(*c)),
        }
    }

    fn spend(&mut self, cost: &Currency) {
        match cost {
            Currency::Free => (),
            Currency::Rupees(c) => self.rupees -= *c,
        }
    }
    fn observe_spend(&mut self, cost: &Currency, full_obs: &mut FullObservation) {
        match cost {
            Currency::Free => (),
            Currency::Rupees(c) => {
                self.rupees -= *c;
                full_obs.observe_shift_rupees(-*c);
            }
        }
    }

        fn visit(&mut self, loc_id: LocationId) {
        match loc_id {
            LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Sticks => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_STICKS);
            }
            LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Nuts => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_NUTS);
            }
            LocationId::Deku_Tree__Lobby__Center__Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEKU_LOBBY_WEB);
            }
            LocationId::Deku_Tree__Floor_2__Vines__Map_Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__FLOOR_2__VINES__MAP_CHEST);
            }
            LocationId::Deku_Tree__Scrub_Room__Entry__Scrub => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SCRUB_ROOM__ENTRY__SCRUB);
            }
            LocationId::Deku_Tree__Slingshot_Room__Slingshot__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SLINGSHOT_ROOM__SLINGSHOT__CHEST);
            }
            LocationId::Deku_Tree__Slingshot_Upper__Ledge__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SLINGSHOT_UPPER__LEDGE__CHEST);
            }
            LocationId::Deku_Tree__Floor_3__Door__Break_Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEKU_LOBBY_WEB);
            }
            LocationId::Deku_Tree__Compass_Room__Entry__Burn_Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEKU_LOBBY_WEB);
            }
            LocationId::Deku_Tree__Compass_Room__Compass__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__COMPASS__CHEST);
            }
            LocationId::Deku_Tree__Compass_Room__Ledge__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__CHEST);
            }
            LocationId::Deku_Tree__Compass_Room__Ledge__GS => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__GS);
            }
            LocationId::Deku_Tree__Basement_1__Center__Vines_GS => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CENTER__VINES_GS);
            }
            LocationId::Deku_Tree__Basement_1__Corner__Switch => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__SWITCH);
            }
            LocationId::Deku_Tree__Basement_1__Corner__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__CHEST);
            }
            LocationId::Deku_Tree__Basement_1__Corner__Gate_GS => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__GATE_GS);
            }
            LocationId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEKU_BASEMENT_WEB);
            }
            LocationId::Deku_Tree__Back_Room__Northwest__Burn_Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BURN_WEB);
            }
            LocationId::Deku_Tree__Back_Room__Northwest__Break_Wall => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BREAK_WALL);
            }
            LocationId::Deku_Tree__Skull_Room__Entry__GS => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SKULL_ROOM__ENTRY__GS);
            }
            LocationId::Deku_Tree__Basement_Ledge__Block__Push_Block => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_LEDGE__BLOCK__PUSH_BLOCK);
            }
            LocationId::Deku_Tree__Basement_Ledge__Web__Burn_Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEKU_BASEMENT_WEB);
            }
            LocationId::Deku_Tree__Basement_2__Boss_Door__Scrubs => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_2__BOSS_DOOR__SCRUBS);
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEFEAT_GOHMA);
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Quick_Kill => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEFEAT_GOHMA);
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Heart => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__GOHMA_HEART);
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Blue_Warp => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__BLUE_WARP);
            }
            LocationId::KF__Kokiri_Village__Training_Center__Victory => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__KOKIRI_VILLAGE__TRAINING_CENTER__VICTORY);
            }
            LocationId::KF__Kokiri_Village__Midos_Guardpost__Show_Mido => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__KOKIRI_VILLAGE__MIDOS_GUARDPOST__SHOW_MIDO);
            }
            LocationId::KF__Boulder_Maze__Reward__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__BOULDER_MAZE__REWARD__CHEST);
            }
            LocationId::KF__Baba_Corridor__Deku_Babas__Sticks => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__STICKS);
            }
            LocationId::KF__Baba_Corridor__Deku_Babas__Nuts => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__NUTS);
            }
            LocationId::KF__Outside_Deku_Tree__Left__Gossip_Stone => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__OUTSIDE_DEKU_TREE__LEFT__GOSSIP_STONE);
            }
            LocationId::KF__Outside_Deku_Tree__Right__Gossip_Stone => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__OUTSIDE_DEKU_TREE__RIGHT__GOSSIP_STONE);
            }
            LocationId::KF__Midos_House__Entry__Top_Left_Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_LEFT_CHEST);
            }
            LocationId::KF__Midos_House__Entry__Top_Right_Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_RIGHT_CHEST);
            }
            LocationId::KF__Midos_House__Entry__Bottom_Left_Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_LEFT_CHEST);
            }
            LocationId::KF__Midos_House__Entry__Bottom_Right_Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_RIGHT_CHEST);
            }
            LocationId::KF__Shop__Entry__Blue_Rupee => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__BLUE_RUPEE);
            }
            LocationId::KF__Shop__Entry__Item_1 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_1);
            }
            LocationId::KF__Shop__Entry__Item_2 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_2);
            }
            LocationId::KF__Shop__Entry__Item_3 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_3);
            }
            LocationId::KF__Shop__Entry__Item_4 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_4);
            }
            LocationId::KF__Shop__Entry__Item_5 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_5);
            }
            LocationId::KF__Shop__Entry__Item_6 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_6);
            }
            LocationId::KF__Shop__Entry__Item_7 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_7);
            }
            LocationId::KF__Shop__Entry__Item_8 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_8);
            }
            LocationId::Kak__Spider_House__Entry__Skulls_10 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KAK__SPIDER_HOUSE__ENTRY__SKULLS_10);
            }
        }
    }

        fn observe_visit(&mut self, loc_id: LocationId, full_obs: &mut FullObservation) {
        match loc_id {
            LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Sticks => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_STICKS);
            }
            LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Nuts => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_NUTS);
            }
            LocationId::Deku_Tree__Lobby__Center__Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEKU_LOBBY_WEB);
            }
            LocationId::Deku_Tree__Floor_2__Vines__Map_Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__FLOOR_2__VINES__MAP_CHEST);
            }
            LocationId::Deku_Tree__Scrub_Room__Entry__Scrub => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SCRUB_ROOM__ENTRY__SCRUB);
            }
            LocationId::Deku_Tree__Slingshot_Room__Slingshot__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SLINGSHOT_ROOM__SLINGSHOT__CHEST);
            }
            LocationId::Deku_Tree__Slingshot_Upper__Ledge__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SLINGSHOT_UPPER__LEDGE__CHEST);
            }
            LocationId::Deku_Tree__Floor_3__Door__Break_Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEKU_LOBBY_WEB);
            }
            LocationId::Deku_Tree__Compass_Room__Entry__Burn_Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEKU_LOBBY_WEB);
            }
            LocationId::Deku_Tree__Compass_Room__Compass__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__COMPASS__CHEST);
            }
            LocationId::Deku_Tree__Compass_Room__Ledge__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__CHEST);
            }
            LocationId::Deku_Tree__Compass_Room__Ledge__GS => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__GS);
            }
            LocationId::Deku_Tree__Basement_1__Center__Vines_GS => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CENTER__VINES_GS);
            }
            LocationId::Deku_Tree__Basement_1__Corner__Switch => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__SWITCH);
            }
            LocationId::Deku_Tree__Basement_1__Corner__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__CHEST);
            }
            LocationId::Deku_Tree__Basement_1__Corner__Gate_GS => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__GATE_GS);
            }
            LocationId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEKU_BASEMENT_WEB);
            }
            LocationId::Deku_Tree__Back_Room__Northwest__Burn_Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BURN_WEB);
            }
            LocationId::Deku_Tree__Back_Room__Northwest__Break_Wall => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BREAK_WALL);
            }
            LocationId::Deku_Tree__Skull_Room__Entry__GS => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SKULL_ROOM__ENTRY__GS);
            }
            LocationId::Deku_Tree__Basement_Ledge__Block__Push_Block => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_LEDGE__BLOCK__PUSH_BLOCK);
            }
            LocationId::Deku_Tree__Basement_Ledge__Web__Burn_Web => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEKU_BASEMENT_WEB);
            }
            LocationId::Deku_Tree__Basement_2__Boss_Door__Scrubs => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_2__BOSS_DOOR__SCRUBS);
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEFEAT_GOHMA);
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Quick_Kill => {
                self.cbits1.insert(flags::ContextBits1::VISITED_DEFEAT_GOHMA);
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Heart => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__GOHMA_HEART);
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Blue_Warp => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__BLUE_WARP);
            }
            LocationId::KF__Kokiri_Village__Training_Center__Victory => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__KOKIRI_VILLAGE__TRAINING_CENTER__VICTORY);
            }
            LocationId::KF__Kokiri_Village__Midos_Guardpost__Show_Mido => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__KOKIRI_VILLAGE__MIDOS_GUARDPOST__SHOW_MIDO);
            }
            LocationId::KF__Boulder_Maze__Reward__Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__BOULDER_MAZE__REWARD__CHEST);
            }
            LocationId::KF__Baba_Corridor__Deku_Babas__Sticks => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__STICKS);
            }
            LocationId::KF__Baba_Corridor__Deku_Babas__Nuts => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__NUTS);
            }
            LocationId::KF__Outside_Deku_Tree__Left__Gossip_Stone => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__OUTSIDE_DEKU_TREE__LEFT__GOSSIP_STONE);
            }
            LocationId::KF__Outside_Deku_Tree__Right__Gossip_Stone => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__OUTSIDE_DEKU_TREE__RIGHT__GOSSIP_STONE);
            }
            LocationId::KF__Midos_House__Entry__Top_Left_Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_LEFT_CHEST);
            }
            LocationId::KF__Midos_House__Entry__Top_Right_Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_RIGHT_CHEST);
            }
            LocationId::KF__Midos_House__Entry__Bottom_Left_Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_LEFT_CHEST);
            }
            LocationId::KF__Midos_House__Entry__Bottom_Right_Chest => {
                self.cbits1.insert(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_RIGHT_CHEST);
            }
            LocationId::KF__Shop__Entry__Blue_Rupee => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__BLUE_RUPEE);
            }
            LocationId::KF__Shop__Entry__Item_1 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_1);
            }
            LocationId::KF__Shop__Entry__Item_2 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_2);
            }
            LocationId::KF__Shop__Entry__Item_3 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_3);
            }
            LocationId::KF__Shop__Entry__Item_4 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_4);
            }
            LocationId::KF__Shop__Entry__Item_5 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_5);
            }
            LocationId::KF__Shop__Entry__Item_6 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_6);
            }
            LocationId::KF__Shop__Entry__Item_7 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_7);
            }
            LocationId::KF__Shop__Entry__Item_8 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_8);
            }
            LocationId::Kak__Spider_House__Entry__Skulls_10 => {
                self.cbits2.insert(flags::ContextBits2::VISITED_LOC_KAK__SPIDER_HOUSE__ENTRY__SKULLS_10);
            }
        }
    }


    fn reset(&mut self, loc_id: LocationId) {
        match loc_id {
            LocationId::Deku_Tree__Lobby__Center__Web | LocationId::Deku_Tree__Floor_3__Door__Break_Web | LocationId::Deku_Tree__Compass_Room__Entry__Burn_Web => {
                self.cbits1.remove(flags::ContextBits1::VISITED_DEKU_LOBBY_WEB);
            }
            LocationId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web | LocationId::Deku_Tree__Basement_Ledge__Web__Burn_Web => {
                self.cbits1.remove(flags::ContextBits1::VISITED_DEKU_BASEMENT_WEB);
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma | LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Quick_Kill => {
                self.cbits1.remove(flags::ContextBits1::VISITED_DEFEAT_GOHMA);
            }
            LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Sticks => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_STICKS);
            }
            LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Nuts => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_NUTS);
            }
            LocationId::Deku_Tree__Floor_2__Vines__Map_Chest => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__FLOOR_2__VINES__MAP_CHEST);
            }
            LocationId::Deku_Tree__Scrub_Room__Entry__Scrub => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SCRUB_ROOM__ENTRY__SCRUB);
            }
            LocationId::Deku_Tree__Slingshot_Room__Slingshot__Chest => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SLINGSHOT_ROOM__SLINGSHOT__CHEST);
            }
            LocationId::Deku_Tree__Slingshot_Upper__Ledge__Chest => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SLINGSHOT_UPPER__LEDGE__CHEST);
            }
            LocationId::Deku_Tree__Compass_Room__Compass__Chest => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__COMPASS__CHEST);
            }
            LocationId::Deku_Tree__Compass_Room__Ledge__Chest => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__CHEST);
            }
            LocationId::Deku_Tree__Compass_Room__Ledge__GS => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__GS);
            }
            LocationId::Deku_Tree__Basement_1__Center__Vines_GS => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CENTER__VINES_GS);
            }
            LocationId::Deku_Tree__Basement_1__Corner__Switch => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__SWITCH);
            }
            LocationId::Deku_Tree__Basement_1__Corner__Chest => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__CHEST);
            }
            LocationId::Deku_Tree__Basement_1__Corner__Gate_GS => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__GATE_GS);
            }
            LocationId::Deku_Tree__Back_Room__Northwest__Burn_Web => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BURN_WEB);
            }
            LocationId::Deku_Tree__Back_Room__Northwest__Break_Wall => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BREAK_WALL);
            }
            LocationId::Deku_Tree__Skull_Room__Entry__GS => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SKULL_ROOM__ENTRY__GS);
            }
            LocationId::Deku_Tree__Basement_Ledge__Block__Push_Block => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_LEDGE__BLOCK__PUSH_BLOCK);
            }
            LocationId::Deku_Tree__Basement_2__Boss_Door__Scrubs => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_2__BOSS_DOOR__SCRUBS);
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Heart => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__GOHMA_HEART);
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Blue_Warp => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__BLUE_WARP);
            }
            LocationId::KF__Kokiri_Village__Training_Center__Victory => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_KF__KOKIRI_VILLAGE__TRAINING_CENTER__VICTORY);
            }
            LocationId::KF__Kokiri_Village__Midos_Guardpost__Show_Mido => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_KF__KOKIRI_VILLAGE__MIDOS_GUARDPOST__SHOW_MIDO);
            }
            LocationId::KF__Boulder_Maze__Reward__Chest => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_KF__BOULDER_MAZE__REWARD__CHEST);
            }
            LocationId::KF__Baba_Corridor__Deku_Babas__Sticks => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__STICKS);
            }
            LocationId::KF__Baba_Corridor__Deku_Babas__Nuts => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__NUTS);
            }
            LocationId::KF__Outside_Deku_Tree__Left__Gossip_Stone => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_KF__OUTSIDE_DEKU_TREE__LEFT__GOSSIP_STONE);
            }
            LocationId::KF__Outside_Deku_Tree__Right__Gossip_Stone => {
                self.cbits2.remove(flags::ContextBits2::VISITED_LOC_KF__OUTSIDE_DEKU_TREE__RIGHT__GOSSIP_STONE);
            }
            LocationId::KF__Midos_House__Entry__Top_Left_Chest => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_LEFT_CHEST);
            }
            LocationId::KF__Midos_House__Entry__Top_Right_Chest => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_RIGHT_CHEST);
            }
            LocationId::KF__Midos_House__Entry__Bottom_Left_Chest => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_LEFT_CHEST);
            }
            LocationId::KF__Midos_House__Entry__Bottom_Right_Chest => {
                self.cbits1.remove(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_RIGHT_CHEST);
            }
            LocationId::KF__Shop__Entry__Blue_Rupee => {
                self.cbits2.remove(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__BLUE_RUPEE);
            }
            LocationId::KF__Shop__Entry__Item_1 => {
                self.cbits2.remove(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_1);
            }
            LocationId::KF__Shop__Entry__Item_2 => {
                self.cbits2.remove(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_2);
            }
            LocationId::KF__Shop__Entry__Item_3 => {
                self.cbits2.remove(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_3);
            }
            LocationId::KF__Shop__Entry__Item_4 => {
                self.cbits2.remove(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_4);
            }
            LocationId::KF__Shop__Entry__Item_5 => {
                self.cbits2.remove(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_5);
            }
            LocationId::KF__Shop__Entry__Item_6 => {
                self.cbits2.remove(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_6);
            }
            LocationId::KF__Shop__Entry__Item_7 => {
                self.cbits2.remove(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_7);
            }
            LocationId::KF__Shop__Entry__Item_8 => {
                self.cbits2.remove(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_8);
            }
            LocationId::Kak__Spider_House__Entry__Skulls_10 => {
                self.cbits2.remove(flags::ContextBits2::VISITED_LOC_KAK__SPIDER_HOUSE__ENTRY__SKULLS_10);
            }
        }
    }

    fn visited(&self, loc_id: LocationId) -> bool {
        match loc_id {
            LocationId::Deku_Tree__Lobby__Center__Web | LocationId::Deku_Tree__Floor_3__Door__Break_Web | LocationId::Deku_Tree__Compass_Room__Entry__Burn_Web => {
                self.cbits1.contains(flags::ContextBits1::VISITED_DEKU_LOBBY_WEB)
            }
            LocationId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web | LocationId::Deku_Tree__Basement_Ledge__Web__Burn_Web => {
                self.cbits1.contains(flags::ContextBits1::VISITED_DEKU_BASEMENT_WEB)
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma | LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Quick_Kill => {
                self.cbits1.contains(flags::ContextBits1::VISITED_DEFEAT_GOHMA)
            }
            LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Sticks => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_STICKS)
            }
            LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Nuts => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_NUTS)
            }
            LocationId::Deku_Tree__Floor_2__Vines__Map_Chest => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__FLOOR_2__VINES__MAP_CHEST)
            }
            LocationId::Deku_Tree__Scrub_Room__Entry__Scrub => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SCRUB_ROOM__ENTRY__SCRUB)
            }
            LocationId::Deku_Tree__Slingshot_Room__Slingshot__Chest => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SLINGSHOT_ROOM__SLINGSHOT__CHEST)
            }
            LocationId::Deku_Tree__Slingshot_Upper__Ledge__Chest => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SLINGSHOT_UPPER__LEDGE__CHEST)
            }
            LocationId::Deku_Tree__Compass_Room__Compass__Chest => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__COMPASS__CHEST)
            }
            LocationId::Deku_Tree__Compass_Room__Ledge__Chest => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__CHEST)
            }
            LocationId::Deku_Tree__Compass_Room__Ledge__GS => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__GS)
            }
            LocationId::Deku_Tree__Basement_1__Center__Vines_GS => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CENTER__VINES_GS)
            }
            LocationId::Deku_Tree__Basement_1__Corner__Switch => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__SWITCH)
            }
            LocationId::Deku_Tree__Basement_1__Corner__Chest => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__CHEST)
            }
            LocationId::Deku_Tree__Basement_1__Corner__Gate_GS => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__GATE_GS)
            }
            LocationId::Deku_Tree__Back_Room__Northwest__Burn_Web => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BURN_WEB)
            }
            LocationId::Deku_Tree__Back_Room__Northwest__Break_Wall => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BREAK_WALL)
            }
            LocationId::Deku_Tree__Skull_Room__Entry__GS => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SKULL_ROOM__ENTRY__GS)
            }
            LocationId::Deku_Tree__Basement_Ledge__Block__Push_Block => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_LEDGE__BLOCK__PUSH_BLOCK)
            }
            LocationId::Deku_Tree__Basement_2__Boss_Door__Scrubs => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_2__BOSS_DOOR__SCRUBS)
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Heart => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__GOHMA_HEART)
            }
            LocationId::Deku_Tree__Boss_Room__Arena__Blue_Warp => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__BLUE_WARP)
            }
            LocationId::KF__Kokiri_Village__Training_Center__Victory => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__KOKIRI_VILLAGE__TRAINING_CENTER__VICTORY)
            }
            LocationId::KF__Kokiri_Village__Midos_Guardpost__Show_Mido => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__KOKIRI_VILLAGE__MIDOS_GUARDPOST__SHOW_MIDO)
            }
            LocationId::KF__Boulder_Maze__Reward__Chest => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__BOULDER_MAZE__REWARD__CHEST)
            }
            LocationId::KF__Baba_Corridor__Deku_Babas__Sticks => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__STICKS)
            }
            LocationId::KF__Baba_Corridor__Deku_Babas__Nuts => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__NUTS)
            }
            LocationId::KF__Outside_Deku_Tree__Left__Gossip_Stone => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__OUTSIDE_DEKU_TREE__LEFT__GOSSIP_STONE)
            }
            LocationId::KF__Outside_Deku_Tree__Right__Gossip_Stone => {
                self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__OUTSIDE_DEKU_TREE__RIGHT__GOSSIP_STONE)
            }
            LocationId::KF__Midos_House__Entry__Top_Left_Chest => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_LEFT_CHEST)
            }
            LocationId::KF__Midos_House__Entry__Top_Right_Chest => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_RIGHT_CHEST)
            }
            LocationId::KF__Midos_House__Entry__Bottom_Left_Chest => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_LEFT_CHEST)
            }
            LocationId::KF__Midos_House__Entry__Bottom_Right_Chest => {
                self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_RIGHT_CHEST)
            }
            LocationId::KF__Shop__Entry__Blue_Rupee => {
                self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__BLUE_RUPEE)
            }
            LocationId::KF__Shop__Entry__Item_1 => {
                self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_1)
            }
            LocationId::KF__Shop__Entry__Item_2 => {
                self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_2)
            }
            LocationId::KF__Shop__Entry__Item_3 => {
                self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_3)
            }
            LocationId::KF__Shop__Entry__Item_4 => {
                self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_4)
            }
            LocationId::KF__Shop__Entry__Item_5 => {
                self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_5)
            }
            LocationId::KF__Shop__Entry__Item_6 => {
                self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_6)
            }
            LocationId::KF__Shop__Entry__Item_7 => {
                self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_7)
            }
            LocationId::KF__Shop__Entry__Item_8 => {
                self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_8)
            }
            LocationId::Kak__Spider_House__Entry__Skulls_10 => {
                self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KAK__SPIDER_HOUSE__ENTRY__SKULLS_10)
            }
        }
    }

    fn all_spot_checks(&self, id: SpotId) -> bool {
        false
    }
    fn all_area_checks(&self, id: AreaId) -> bool {
        false
    }
    fn all_region_checks(&self, id: RegionId) -> bool {
        false
    }
    fn get_movement_state(&self, world: &World) -> movements::MovementState {
        movements::get_movement_state(self, world)
    }

    fn observe_movement_state(&self, world: &World, full_obs: &mut FullObservation) -> movements::MovementState {
        movements::observe_movement_state(self, world, full_obs)
    }

    fn local_travel_time(&self, movement_state: movements::MovementState, dest: SpotId) -> u32 {
        movements::local_travel_time(movement_state, self.position, dest)
    }

    fn count_visits(&self) -> usize {
        self.cbits1.intersection(flags::ContextBits1::ALL_VISIT_FLAGS).bits().count_ones() as usize
            + self.cbits2.intersection(flags::ContextBits2::ALL_VISIT_FLAGS).bits().count_ones() as usize
    }
    fn progress(&self) -> u32 {
        let visits = self.count_visits();
        if visits <= 0 {
            0
        } else {
            (visits * 100 / Self::World::NUM_CANON_LOCATIONS).try_into().unwrap()
        }
    }

    fn diff(&self, old: &Context) -> String {
        let mut list: Vec<String> = Vec::new();

        if old.position != self.position {
            list.push(format!("position: {:?} → {:?}", old.position, self.position));
        }
        if old.tod != self.tod {
            list.push(format!("tod: {:?} → {:?}", old.tod, self.tod));
        }
        if old.rupees != self.rupees {
            list.push(format!("rupees: {:?} → {:?}", old.rupees, self.rupees));
        }
        if old.gold_skulltula_token != self.gold_skulltula_token {
            list.push(format!("Gold_Skulltula_Token: {:+}", self.gold_skulltula_token - old.gold_skulltula_token));
        }
        if old.progressive_wallet != self.progressive_wallet {
            list.push(format!("Progressive_Wallet: {:+}", self.progressive_wallet - old.progressive_wallet));
        }
        if old.triforce_piece != self.triforce_piece {
            list.push(format!("Triforce_Piece: {:+}", self.triforce_piece - old.triforce_piece));
        }
    // bitflags
        let n = self.cbits1.contains(flags::ContextBits1::CHILD);
        let p = old.cbits1.contains(flags::ContextBits1::CHILD);
        if n != p {
            list.push(format!("{}CHILD", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::DEKU_TREE__COMPASS_ROOM__CTX__TORCH);
        let p = old.cbits1.contains(flags::ContextBits1::DEKU_TREE__COMPASS_ROOM__CTX__TORCH);
        if n != p {
            list.push(format!("{}DEKU_TREE__COMPASS_ROOM__CTX__TORCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::BIGGORON_SWORD);
        let p = old.cbits1.contains(flags::ContextBits1::BIGGORON_SWORD);
        if n != p {
            list.push(format!("{}BIGGORON_SWORD", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::BOMBS);
        let p = old.cbits1.contains(flags::ContextBits1::BOMBS);
        if n != p {
            list.push(format!("{}BOMBS", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::BOOMERANG);
        let p = old.cbits1.contains(flags::ContextBits1::BOOMERANG);
        if n != p {
            list.push(format!("{}BOOMERANG", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::BOW);
        let p = old.cbits1.contains(flags::ContextBits1::BOW);
        if n != p {
            list.push(format!("{}BOW", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::BUY_DEKU_NUT_10);
        let p = old.cbits1.contains(flags::ContextBits1::BUY_DEKU_NUT_10);
        if n != p {
            list.push(format!("{}BUY_DEKU_NUT_10", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::BUY_DEKU_NUT_5);
        let p = old.cbits1.contains(flags::ContextBits1::BUY_DEKU_NUT_5);
        if n != p {
            list.push(format!("{}BUY_DEKU_NUT_5", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::BUY_DEKU_SHIELD);
        let p = old.cbits1.contains(flags::ContextBits1::BUY_DEKU_SHIELD);
        if n != p {
            list.push(format!("{}BUY_DEKU_SHIELD", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::BUY_DEKU_STICK_1);
        let p = old.cbits1.contains(flags::ContextBits1::BUY_DEKU_STICK_1);
        if n != p {
            list.push(format!("{}BUY_DEKU_STICK_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::DEFEAT_GANON);
        let p = old.cbits1.contains(flags::ContextBits1::DEFEAT_GANON);
        if n != p {
            list.push(format!("{}DEFEAT_GANON", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::DEFEAT_GOHMA);
        let p = old.cbits1.contains(flags::ContextBits1::DEFEAT_GOHMA);
        if n != p {
            list.push(format!("{}DEFEAT_GOHMA", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::DEKU_BACK_ROOM_WALL);
        let p = old.cbits1.contains(flags::ContextBits1::DEKU_BACK_ROOM_WALL);
        if n != p {
            list.push(format!("{}DEKU_BACK_ROOM_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::DEKU_BACK_ROOM_WEB);
        let p = old.cbits1.contains(flags::ContextBits1::DEKU_BACK_ROOM_WEB);
        if n != p {
            list.push(format!("{}DEKU_BACK_ROOM_WEB", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::DEKU_BASEMENT_BLOCK);
        let p = old.cbits1.contains(flags::ContextBits1::DEKU_BASEMENT_BLOCK);
        if n != p {
            list.push(format!("{}DEKU_BASEMENT_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::DEKU_BASEMENT_SCRUBS);
        let p = old.cbits1.contains(flags::ContextBits1::DEKU_BASEMENT_SCRUBS);
        if n != p {
            list.push(format!("{}DEKU_BASEMENT_SCRUBS", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::DEKU_BASEMENT_SWITCH);
        let p = old.cbits1.contains(flags::ContextBits1::DEKU_BASEMENT_SWITCH);
        if n != p {
            list.push(format!("{}DEKU_BASEMENT_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::DEKU_BASEMENT_WEB);
        let p = old.cbits1.contains(flags::ContextBits1::DEKU_BASEMENT_WEB);
        if n != p {
            list.push(format!("{}DEKU_BASEMENT_WEB", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::DEKU_LOBBY_WEB);
        let p = old.cbits1.contains(flags::ContextBits1::DEKU_LOBBY_WEB);
        if n != p {
            list.push(format!("{}DEKU_LOBBY_WEB", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::DEKU_NUT_DROP);
        let p = old.cbits1.contains(flags::ContextBits1::DEKU_NUT_DROP);
        if n != p {
            list.push(format!("{}DEKU_NUT_DROP", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::DEKU_SHIELD_DROP);
        let p = old.cbits1.contains(flags::ContextBits1::DEKU_SHIELD_DROP);
        if n != p {
            list.push(format!("{}DEKU_SHIELD_DROP", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::DEKU_SLINGSHOT_SCRUB);
        let p = old.cbits1.contains(flags::ContextBits1::DEKU_SLINGSHOT_SCRUB);
        if n != p {
            list.push(format!("{}DEKU_SLINGSHOT_SCRUB", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::DEKU_STICK_DROP);
        let p = old.cbits1.contains(flags::ContextBits1::DEKU_STICK_DROP);
        if n != p {
            list.push(format!("{}DEKU_STICK_DROP", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::HYLIAN_SHIELD);
        let p = old.cbits1.contains(flags::ContextBits1::HYLIAN_SHIELD);
        if n != p {
            list.push(format!("{}HYLIAN_SHIELD", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::KOKIRI_EMERALD);
        let p = old.cbits1.contains(flags::ContextBits1::KOKIRI_EMERALD);
        if n != p {
            list.push(format!("{}KOKIRI_EMERALD", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::KOKIRI_SWORD);
        let p = old.cbits1.contains(flags::ContextBits1::KOKIRI_SWORD);
        if n != p {
            list.push(format!("{}KOKIRI_SWORD", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAGIC_METER);
        let p = old.cbits1.contains(flags::ContextBits1::MAGIC_METER);
        if n != p {
            list.push(format!("{}MAGIC_METER", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::OCARINA);
        let p = old.cbits1.contains(flags::ContextBits1::OCARINA);
        if n != p {
            list.push(format!("{}OCARINA", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::SHOWED_MIDO);
        let p = old.cbits1.contains(flags::ContextBits1::SHOWED_MIDO);
        if n != p {
            list.push(format!("{}SHOWED_MIDO", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::SLINGSHOT);
        let p = old.cbits1.contains(flags::ContextBits1::SLINGSHOT);
        if n != p {
            list.push(format!("{}SLINGSHOT", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VICTORY);
        let p = old.cbits1.contains(flags::ContextBits1::VICTORY);
        if n != p {
            list.push(format!("{}VICTORY", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_DEFEAT_GOHMA);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_DEFEAT_GOHMA);
        if n != p {
            list.push(format!("{}VISITED_DEFEAT_GOHMA", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_DEKU_BASEMENT_WEB);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_DEKU_BASEMENT_WEB);
        if n != p {
            list.push(format!("{}VISITED_DEKU_BASEMENT_WEB", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_DEKU_LOBBY_WEB);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_DEKU_LOBBY_WEB);
        if n != p {
            list.push(format!("{}VISITED_DEKU_LOBBY_WEB", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BREAK_WALL);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BREAK_WALL);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BURN_WEB);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BURN_WEB);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__BACK_ROOM__NORTHWEST__BURN_WEB", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CENTER__VINES_GS);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CENTER__VINES_GS);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__BASEMENT_1__CENTER__VINES_GS", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__CHEST);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__CHEST);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__CHEST", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__GATE_GS);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__GATE_GS);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__GATE_GS", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__SWITCH);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__SWITCH);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__BASEMENT_1__CORNER__SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_2__BOSS_DOOR__SCRUBS);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_2__BOSS_DOOR__SCRUBS);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__BASEMENT_2__BOSS_DOOR__SCRUBS", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_LEDGE__BLOCK__PUSH_BLOCK);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BASEMENT_LEDGE__BLOCK__PUSH_BLOCK);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__BASEMENT_LEDGE__BLOCK__PUSH_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__BLUE_WARP);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__BLUE_WARP);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__BLUE_WARP", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__GOHMA_HEART);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__GOHMA_HEART);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__BOSS_ROOM__ARENA__GOHMA_HEART", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__COMPASS__CHEST);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__COMPASS__CHEST);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__COMPASS_ROOM__COMPASS__CHEST", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__CHEST);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__CHEST);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__CHEST", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__GS);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__GS);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__COMPASS_ROOM__LEDGE__GS", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__FLOOR_2__VINES__MAP_CHEST);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__FLOOR_2__VINES__MAP_CHEST);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__FLOOR_2__VINES__MAP_CHEST", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_NUTS);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_NUTS);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_NUTS", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_STICKS);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_STICKS);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__LOBBY__CENTER__DEKU_BABA_STICKS", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SCRUB_ROOM__ENTRY__SCRUB);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SCRUB_ROOM__ENTRY__SCRUB);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__SCRUB_ROOM__ENTRY__SCRUB", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SKULL_ROOM__ENTRY__GS);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SKULL_ROOM__ENTRY__GS);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__SKULL_ROOM__ENTRY__GS", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SLINGSHOT_ROOM__SLINGSHOT__CHEST);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SLINGSHOT_ROOM__SLINGSHOT__CHEST);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__SLINGSHOT_ROOM__SLINGSHOT__CHEST", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SLINGSHOT_UPPER__LEDGE__CHEST);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_DEKU_TREE__SLINGSHOT_UPPER__LEDGE__CHEST);
        if n != p {
            list.push(format!("{}VISITED_LOC_DEKU_TREE__SLINGSHOT_UPPER__LEDGE__CHEST", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__NUTS);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__NUTS);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__NUTS", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__STICKS);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__STICKS);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__BABA_CORRIDOR__DEKU_BABAS__STICKS", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__BOULDER_MAZE__REWARD__CHEST);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__BOULDER_MAZE__REWARD__CHEST);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__BOULDER_MAZE__REWARD__CHEST", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__KOKIRI_VILLAGE__MIDOS_GUARDPOST__SHOW_MIDO);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__KOKIRI_VILLAGE__MIDOS_GUARDPOST__SHOW_MIDO);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__KOKIRI_VILLAGE__MIDOS_GUARDPOST__SHOW_MIDO", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__KOKIRI_VILLAGE__TRAINING_CENTER__VICTORY);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__KOKIRI_VILLAGE__TRAINING_CENTER__VICTORY);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__KOKIRI_VILLAGE__TRAINING_CENTER__VICTORY", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_LEFT_CHEST);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_LEFT_CHEST);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_LEFT_CHEST", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_RIGHT_CHEST);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_RIGHT_CHEST);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__BOTTOM_RIGHT_CHEST", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_LEFT_CHEST);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_LEFT_CHEST);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_LEFT_CHEST", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_RIGHT_CHEST);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_RIGHT_CHEST);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__MIDOS_HOUSE__ENTRY__TOP_RIGHT_CHEST", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__OUTSIDE_DEKU_TREE__LEFT__GOSSIP_STONE);
        let p = old.cbits1.contains(flags::ContextBits1::VISITED_LOC_KF__OUTSIDE_DEKU_TREE__LEFT__GOSSIP_STONE);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__OUTSIDE_DEKU_TREE__LEFT__GOSSIP_STONE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__OUTSIDE_DEKU_TREE__RIGHT__GOSSIP_STONE);
        let p = old.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__OUTSIDE_DEKU_TREE__RIGHT__GOSSIP_STONE);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__OUTSIDE_DEKU_TREE__RIGHT__GOSSIP_STONE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__BLUE_RUPEE);
        let p = old.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__BLUE_RUPEE);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__SHOP__ENTRY__BLUE_RUPEE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_1);
        let p = old.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_1);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__SHOP__ENTRY__ITEM_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_2);
        let p = old.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_2);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__SHOP__ENTRY__ITEM_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_3);
        let p = old.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_3);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__SHOP__ENTRY__ITEM_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_4);
        let p = old.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_4);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__SHOP__ENTRY__ITEM_4", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_5);
        let p = old.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_5);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__SHOP__ENTRY__ITEM_5", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_6);
        let p = old.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_6);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__SHOP__ENTRY__ITEM_6", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_7);
        let p = old.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_7);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__SHOP__ENTRY__ITEM_7", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_8);
        let p = old.cbits2.contains(flags::ContextBits2::VISITED_LOC_KF__SHOP__ENTRY__ITEM_8);
        if n != p {
            list.push(format!("{}VISITED_LOC_KF__SHOP__ENTRY__ITEM_8", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::VISITED_LOC_KAK__SPIDER_HOUSE__ENTRY__SKULLS_10);
        let p = old.cbits2.contains(flags::ContextBits2::VISITED_LOC_KAK__SPIDER_HOUSE__ENTRY__SKULLS_10);
        if n != p {
            list.push(format!("{}VISITED_LOC_KAK__SPIDER_HOUSE__ENTRY__SKULLS_10", if n { "+" } else { "-" }));
        }
        if list.is_empty() {
            String::from("NONE")
        } else {
            list.join("\n")
        }
    }
}

impl Context {
    pub fn position(&self) -> SpotId {
        self.position
    }
    pub fn child(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::CHILD)
    }
    pub fn set_child(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::CHILD, val);
    }
    pub fn tod(&self) -> enums::Tod {
        self.tod
    }
    pub fn set_tod(&mut self, val: enums::Tod) {
        self.tod = val;
    }
    pub fn rupees(&self) -> i32 {
        self.rupees
    }
    pub fn set_rupees(&mut self, val: i32) {
        self.rupees = val;
    }
    pub fn deku_tree__compass_room__ctx__torch(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::DEKU_TREE__COMPASS_ROOM__CTX__TORCH)
    }
    pub fn set_deku_tree__compass_room__ctx__torch(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::DEKU_TREE__COMPASS_ROOM__CTX__TORCH, val);
    }
}

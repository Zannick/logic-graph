//! AUTOGENERATED FOR sample - MODIFICATIONS WILL BE LOST

#![allow(non_camel_case_types)]

use std::fmt;

#[derive(
    Debug,
    PartialEq,
    Eq,
    Copy,
    Clone,
    Hash,
    Ord,
    PartialOrd,
    enum_map::Enum,
    Default,
    serde_repr::Serialize_repr,
    serde_repr::Deserialize_repr,
)]
#[repr(u8)]
pub enum Item {
    #[default]
    None,
    Arrows_10,
    Biggoron_Sword,
    Blue_Fire_Arrows,
    Bombs,
    Boomerang,
    Bow,
    Buy_Arrows_10,
    Buy_Arrows_30,
    Buy_Deku_Nut_10,
    Buy_Deku_Nut_5,
    Buy_Deku_Seeds_30,
    Buy_Deku_Shield,
    Buy_Deku_Stick_1,
    Buy_Heart,
    Compass_Deku_Tree,
    Defeat_Ganon,
    Defeat_Gohma,
    Deku_Back_Room_Wall,
    Deku_Back_Room_Web,
    Deku_Basement_Block,
    Deku_Basement_Scrubs,
    Deku_Basement_Switch,
    Deku_Basement_Web,
    Deku_Lobby_Web,
    Deku_Nut_Drop,
    Deku_Shield_Drop,
    Deku_Slingshot_Scrub,
    Deku_Stick_Drop,
    Dins_Fire,
    Farores_Wind,
    Fire_Arrows,
    Gold_Skulltula_Token,
    Goron_Tunic,
    Heart_Container,
    Hookshot,
    Hover_Boots,
    Hylian_Shield,
    Iron_Boots,
    Kokiri_Emerald,
    Kokiri_Sword,
    Lens_of_Truth,
    Light_Arrows,
    Magic_Meter,
    Map_Deku_Tree,
    Megaton_Hammer,
    Minuet_of_Forest,
    Mirror_Shield,
    Nayrus_Love,
    Ocarina,
    Progressive_Wallet,
    Recovery_Heart,
    Rupee_1,
    Rupees_5,
    Rupees_50,
    Showed_Mido,
    Slingshot,
    Triforce_Piece,
    Zora_Tunic,
}
impl fmt::Display for Item {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            Item::None => write!(f, "{}", "None"),
            Item::Arrows_10 => write!(f, "{}", "Arrows_10"),
            Item::Biggoron_Sword => write!(f, "{}", "Biggoron_Sword"),
            Item::Blue_Fire_Arrows => write!(f, "{}", "Blue_Fire_Arrows"),
            Item::Bombs => write!(f, "{}", "Bombs"),
            Item::Boomerang => write!(f, "{}", "Boomerang"),
            Item::Bow => write!(f, "{}", "Bow"),
            Item::Buy_Arrows_10 => write!(f, "{}", "Buy_Arrows_10"),
            Item::Buy_Arrows_30 => write!(f, "{}", "Buy_Arrows_30"),
            Item::Buy_Deku_Nut_10 => write!(f, "{}", "Buy_Deku_Nut_10"),
            Item::Buy_Deku_Nut_5 => write!(f, "{}", "Buy_Deku_Nut_5"),
            Item::Buy_Deku_Seeds_30 => write!(f, "{}", "Buy_Deku_Seeds_30"),
            Item::Buy_Deku_Shield => write!(f, "{}", "Buy_Deku_Shield"),
            Item::Buy_Deku_Stick_1 => write!(f, "{}", "Buy_Deku_Stick_1"),
            Item::Buy_Heart => write!(f, "{}", "Buy_Heart"),
            Item::Compass_Deku_Tree => write!(f, "{}", "Compass_Deku_Tree"),
            Item::Defeat_Ganon => write!(f, "{}", "Defeat_Ganon"),
            Item::Defeat_Gohma => write!(f, "{}", "Defeat_Gohma"),
            Item::Deku_Back_Room_Wall => write!(f, "{}", "Deku_Back_Room_Wall"),
            Item::Deku_Back_Room_Web => write!(f, "{}", "Deku_Back_Room_Web"),
            Item::Deku_Basement_Block => write!(f, "{}", "Deku_Basement_Block"),
            Item::Deku_Basement_Scrubs => write!(f, "{}", "Deku_Basement_Scrubs"),
            Item::Deku_Basement_Switch => write!(f, "{}", "Deku_Basement_Switch"),
            Item::Deku_Basement_Web => write!(f, "{}", "Deku_Basement_Web"),
            Item::Deku_Lobby_Web => write!(f, "{}", "Deku_Lobby_Web"),
            Item::Deku_Nut_Drop => write!(f, "{}", "Deku_Nut_Drop"),
            Item::Deku_Shield_Drop => write!(f, "{}", "Deku_Shield_Drop"),
            Item::Deku_Slingshot_Scrub => write!(f, "{}", "Deku_Slingshot_Scrub"),
            Item::Deku_Stick_Drop => write!(f, "{}", "Deku_Stick_Drop"),
            Item::Dins_Fire => write!(f, "{}", "Dins_Fire"),
            Item::Farores_Wind => write!(f, "{}", "Farores_Wind"),
            Item::Fire_Arrows => write!(f, "{}", "Fire_Arrows"),
            Item::Gold_Skulltula_Token => write!(f, "{}", "Gold_Skulltula_Token"),
            Item::Goron_Tunic => write!(f, "{}", "Goron_Tunic"),
            Item::Heart_Container => write!(f, "{}", "Heart_Container"),
            Item::Hookshot => write!(f, "{}", "Hookshot"),
            Item::Hover_Boots => write!(f, "{}", "Hover_Boots"),
            Item::Hylian_Shield => write!(f, "{}", "Hylian_Shield"),
            Item::Iron_Boots => write!(f, "{}", "Iron_Boots"),
            Item::Kokiri_Emerald => write!(f, "{}", "Kokiri_Emerald"),
            Item::Kokiri_Sword => write!(f, "{}", "Kokiri_Sword"),
            Item::Lens_of_Truth => write!(f, "{}", "Lens_of_Truth"),
            Item::Light_Arrows => write!(f, "{}", "Light_Arrows"),
            Item::Magic_Meter => write!(f, "{}", "Magic_Meter"),
            Item::Map_Deku_Tree => write!(f, "{}", "Map_Deku_Tree"),
            Item::Megaton_Hammer => write!(f, "{}", "Megaton_Hammer"),
            Item::Minuet_of_Forest => write!(f, "{}", "Minuet_of_Forest"),
            Item::Mirror_Shield => write!(f, "{}", "Mirror_Shield"),
            Item::Nayrus_Love => write!(f, "{}", "Nayrus_Love"),
            Item::Ocarina => write!(f, "{}", "Ocarina"),
            Item::Progressive_Wallet => write!(f, "{}", "Progressive_Wallet"),
            Item::Recovery_Heart => write!(f, "{}", "Recovery_Heart"),
            Item::Rupee_1 => write!(f, "{}", "Rupee_1"),
            Item::Rupees_5 => write!(f, "{}", "Rupees_5"),
            Item::Rupees_50 => write!(f, "{}", "Rupees_50"),
            Item::Showed_Mido => write!(f, "{}", "Showed_Mido"),
            Item::Slingshot => write!(f, "{}", "Slingshot"),
            Item::Triforce_Piece => write!(f, "{}", "Triforce_Piece"),
            Item::Zora_Tunic => write!(f, "{}", "Zora_Tunic"),
        }
    }
}
impl analyzer::world::Id for Item {}
impl std::str::FromStr for Item {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Arrows_10" => Ok(Item::Arrows_10),
            "Biggoron_Sword" => Ok(Item::Biggoron_Sword),
            "Blue_Fire_Arrows" => Ok(Item::Blue_Fire_Arrows),
            "Bombs" => Ok(Item::Bombs),
            "Boomerang" => Ok(Item::Boomerang),
            "Bow" => Ok(Item::Bow),
            "Buy_Arrows_10" => Ok(Item::Buy_Arrows_10),
            "Buy_Arrows_30" => Ok(Item::Buy_Arrows_30),
            "Buy_Deku_Nut_10" => Ok(Item::Buy_Deku_Nut_10),
            "Buy_Deku_Nut_5" => Ok(Item::Buy_Deku_Nut_5),
            "Buy_Deku_Seeds_30" => Ok(Item::Buy_Deku_Seeds_30),
            "Buy_Deku_Shield" => Ok(Item::Buy_Deku_Shield),
            "Buy_Deku_Stick_1" => Ok(Item::Buy_Deku_Stick_1),
            "Buy_Heart" => Ok(Item::Buy_Heart),
            "Compass_Deku_Tree" => Ok(Item::Compass_Deku_Tree),
            "Defeat_Ganon" => Ok(Item::Defeat_Ganon),
            "Defeat_Gohma" => Ok(Item::Defeat_Gohma),
            "Deku_Back_Room_Wall" => Ok(Item::Deku_Back_Room_Wall),
            "Deku_Back_Room_Web" => Ok(Item::Deku_Back_Room_Web),
            "Deku_Basement_Block" => Ok(Item::Deku_Basement_Block),
            "Deku_Basement_Scrubs" => Ok(Item::Deku_Basement_Scrubs),
            "Deku_Basement_Switch" => Ok(Item::Deku_Basement_Switch),
            "Deku_Basement_Web" => Ok(Item::Deku_Basement_Web),
            "Deku_Lobby_Web" => Ok(Item::Deku_Lobby_Web),
            "Deku_Nut_Drop" => Ok(Item::Deku_Nut_Drop),
            "Deku_Shield_Drop" => Ok(Item::Deku_Shield_Drop),
            "Deku_Slingshot_Scrub" => Ok(Item::Deku_Slingshot_Scrub),
            "Deku_Stick_Drop" => Ok(Item::Deku_Stick_Drop),
            "Dins_Fire" => Ok(Item::Dins_Fire),
            "Farores_Wind" => Ok(Item::Farores_Wind),
            "Fire_Arrows" => Ok(Item::Fire_Arrows),
            "Gold_Skulltula_Token" => Ok(Item::Gold_Skulltula_Token),
            "Goron_Tunic" => Ok(Item::Goron_Tunic),
            "Heart_Container" => Ok(Item::Heart_Container),
            "Hookshot" => Ok(Item::Hookshot),
            "Hover_Boots" => Ok(Item::Hover_Boots),
            "Hylian_Shield" => Ok(Item::Hylian_Shield),
            "Iron_Boots" => Ok(Item::Iron_Boots),
            "Kokiri_Emerald" => Ok(Item::Kokiri_Emerald),
            "Kokiri_Sword" => Ok(Item::Kokiri_Sword),
            "Lens_of_Truth" => Ok(Item::Lens_of_Truth),
            "Light_Arrows" => Ok(Item::Light_Arrows),
            "Magic_Meter" => Ok(Item::Magic_Meter),
            "Map_Deku_Tree" => Ok(Item::Map_Deku_Tree),
            "Megaton_Hammer" => Ok(Item::Megaton_Hammer),
            "Minuet_of_Forest" => Ok(Item::Minuet_of_Forest),
            "Mirror_Shield" => Ok(Item::Mirror_Shield),
            "Nayrus_Love" => Ok(Item::Nayrus_Love),
            "Ocarina" => Ok(Item::Ocarina),
            "Progressive_Wallet" => Ok(Item::Progressive_Wallet),
            "Recovery_Heart" => Ok(Item::Recovery_Heart),
            "Rupee_1" => Ok(Item::Rupee_1),
            "Rupees_5" => Ok(Item::Rupees_5),
            "Rupees_50" => Ok(Item::Rupees_50),
            "Showed_Mido" => Ok(Item::Showed_Mido),
            "Slingshot" => Ok(Item::Slingshot),
            "Triforce_Piece" => Ok(Item::Triforce_Piece),
            "Zora_Tunic" => Ok(Item::Zora_Tunic),
            _ => Err(format!("Could not recognize as a Item: {}", s)),
        }
    }
}

pub fn unused_item(id: Item) -> bool {
    match id {
        Item::None => true,
        Item::Arrows_10
        | Item::Buy_Arrows_10
        | Item::Buy_Arrows_30
        | Item::Buy_Deku_Seeds_30
        | Item::Buy_Heart
        | Item::Compass_Deku_Tree
        | Item::Heart_Container
        | Item::Map_Deku_Tree
        | Item::Progressive_Wallet
        | Item::Recovery_Heart => true,
        _ => false,
    }
}

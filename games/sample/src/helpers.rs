//! AUTOGENERATED FOR sample - DO NOT MODIFY
//!
//! Macro definitions for helpers.

/// $is_child
/// ^child
#[macro_export]
macro_rules! helper__is_child {
    () => {{
        println!("{}", "Arg:child");
    }};
}

/// $is_adult
/// NOT ^child
#[macro_export]
macro_rules! helper__is_adult {
    () => {{
        println!("{}", "Arg:child");
    }};
}

/// $Deku_Shield
/// Buy_Deku_Shield or Deku_Shield_Drop
#[macro_export]
macro_rules! helper__Deku_Shield {
    () => {{
        println!("{}", "OR[ Item:Buy_Deku_Shield , Item:Deku_Shield_Drop ]");
    }};
}

/// $Nuts
/// Buy_Deku_Nut_5 or Buy_Deku_Nut_10 or Deku_Nut_Drop
#[macro_export]
macro_rules! helper__Nuts {
    () => {{
        println!(
            "{}",
            "OR[ OR[ Item:Buy_Deku_Nut_5 , Item:Buy_Deku_Nut_10 ] , Item:Deku_Nut_Drop ]"
        );
    }};
}

/// $Sticks
/// Buy_Deku_Stick_1 or Deku_Stick_Drop
#[macro_export]
macro_rules! helper__Sticks {
    () => {{
        println!("{}", "OR[ Item:Buy_Deku_Stick_1 , Item:Deku_Stick_Drop ]");
    }};
}

/// num:$wallet_max
/// PER Progressive_Wallet { 3 => 999; 2 => 500; 1 => 200; _ => 99 }
#[macro_export]
macro_rules! helper__numwallet_max {
    () => {{
        println!("{}", "Const:None");
    }};
}

/// $has_shield
/// ($is_adult and Hylian_Shield) or ($is_child and $Deku_Shield)
#[macro_export]
macro_rules! helper__has_shield {
    () => {{
        println!("{}", "OR[ AND[ Func:is_adult() , Item:Hylian_Shield ] , AND[ Func:is_child() , Func:Deku_Shield() ] ]");
    }}
}

/// $can_play
/// Ocarina and ^song
#[macro_export]
macro_rules! helper__can_play {
    ($song:expr) => {{
        println!("{}", "AND[ Item:Ocarina , Arg:song ]");
        println!("song := {}", $song);
    }};
}

/// $can_jumpslash
/// $is_adult or $Sticks or Kokiri_Sword
#[macro_export]
macro_rules! helper__can_jumpslash {
    () => {{
        println!(
            "{}",
            "OR[ OR[ Func:is_adult() , Func:Sticks() ] , Item:Kokiri_Sword ]"
        );
    }};
}

/// $can_use
/// IF ($_is_magic_item(^item)) { ^item and Magic_Meter } ELSE IF ($_is_adult_item(^item)) { $is_adult and ^item } ELSE IF ($_is_magic_arrow(^item)) { $is_adult and ^item and Bow and Magic_Meter } ELSE IF ($_is_child_item(^item)) { $is_child and ^item }

#[macro_export]
macro_rules! helper__can_use {
    ($item:expr) => {{
        println!("{}", "IF( Func:_is_magic_item(Arg:item) ) THEN{ AND[ Arg:item , Item:Magic_Meter ] } ELSE IF( Func:_is_adult_item(Arg:item) ) THEN{ AND[ Func:is_adult() , Arg:item ] } ELSE IF( Func:_is_magic_arrow(Arg:item) ) THEN{ AND[ AND[ AND[ Func:is_adult() , Arg:item ] , Item:Bow ] , Item:Magic_Meter ] } ELSE IF( Func:_is_child_item(Arg:item) ) THEN{ AND[ Func:is_child() , Arg:item ] }");
        println!("item := {}", $item);
    }}
}

/// $_is_magic_item
/// ^item IN [Dins_Fire, Farores_Wind, Nayrus_Love, Lens_of_Truth]
#[macro_export]
macro_rules! helper___is_magic_item {
    ($item:expr) => {{
        println!("{}", "None");
        println!("item := {}", $item);
    }};
}

/// $_is_adult_item
/// ^item IN [Bow, Megaton_Hammer, Iron_Boots, Hover_Boots, Hookshot, Goron_Tunic, Zora_Tunic, Mirror_Shield]
#[macro_export]
macro_rules! helper___is_adult_item {
    ($item:expr) => {{
        println!("{}", "None");
        println!("item := {}", $item);
    }};
}

/// $_is_child_item
/// ^item IN [Slingshot, Boomerang, Kokiri_Sword]
#[macro_export]
macro_rules! helper___is_child_item {
    ($item:expr) => {{
        println!("{}", "None");
        println!("item := {}", $item);
    }};
}

/// $_is_magic_arrow
/// ^item IN [Fire_Arrows, Light_Arrows, Blue_Fire_Arrows]
#[macro_export]
macro_rules! helper___is_magic_arrow {
    ($item:expr) => {{
        println!("{}", "None");
        println!("item := {}", $item);
    }};
}

/// $has_explosives
/// Bombs
#[macro_export]
macro_rules! helper__has_explosives {
    () => {{
        println!("{}", "Item:Bombs");
    }};
}

/// $can_blast_or_smash
/// $has_explosives or $can_use(Megaton_Hammer)
#[macro_export]
macro_rules! helper__can_blast_or_smash {
    () => {{
        println!(
            "{}",
            "OR[ Func:has_explosives() , Func:can_use(Megaton_Hammer) ]"
        );
    }};
}

/// $can_child_attack
/// $is_child and (Slingshot or Boomerang or $Sticks or Kokiri_Sword)
#[macro_export]
macro_rules! helper__can_child_attack {
    () => {{
        println!("{}", "AND[ Func:is_child() , OR[ OR[ OR[ Item:Slingshot , Item:Boomerang ] , Func:Sticks() ] , Item:Kokiri_Sword ] ]");
    }}
}

/// $has_fire_source
/// $can_use(Dins_Fire) or $can_use(Fire_Arrows)
#[macro_export]
macro_rules! helper__has_fire_source {
    () => {{
        println!(
            "{}",
            "OR[ Func:can_use(Dins_Fire) , Func:can_use(Fire_Arrows) ]"
        );
    }};
}

/// $has_fire_source_with_torch
/// $has_fire_source or ($is_child and $Sticks)
#[macro_export]
macro_rules! helper__has_fire_source_with_torch {
    () => {{
        println!(
            "{}",
            "OR[ Func:has_fire_source() , AND[ Func:is_child() , Func:Sticks() ] ]"
        );
    }};
}

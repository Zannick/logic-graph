//! AUTOGENERATED FOR sample - MODIFICATIONS WILL BE LOST

/// $is_child (  )
/// ^child
#[macro_export]
macro_rules! helper__is_child {
    ($ctx:expr, $world:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.child()
    }};
}

/// $is_adult (  )
/// NOT ^child
#[macro_export]
macro_rules! helper__is_adult {
    ($ctx:expr, $world:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        !$ctx.child()
    }};
}

/// $Deku_Shield (  )
/// Buy_Deku_Shield or Deku_Shield_Drop
#[macro_export]
macro_rules! helper__Deku_Shield {
    ($ctx:expr, $world:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.has(Item::Buy_Deku_Shield) || $ctx.has(Item::Deku_Shield_Drop))
    }};
}

/// $Nuts (  )
/// Buy_Deku_Nut_5 or Buy_Deku_Nut_10 or Deku_Nut_Drop
#[macro_export]
macro_rules! helper__Nuts {
    ($ctx:expr, $world:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        (($ctx.has(Item::Buy_Deku_Nut_5) || $ctx.has(Item::Buy_Deku_Nut_10))
            || $ctx.has(Item::Deku_Nut_Drop))
    }};
}

/// $Sticks (  )
/// Buy_Deku_Stick_1 or Deku_Stick_Drop
#[macro_export]
macro_rules! helper__Sticks {
    ($ctx:expr, $world:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.has(Item::Buy_Deku_Stick_1) || $ctx.has(Item::Deku_Stick_Drop))
    }};
}

/// $wallet_max (  )
/// PER Progressive_Wallet { 3 => 999, 2 => 500, 1 => 200, _ => 99 }
#[macro_export]
macro_rules! helper__wallet_max {
    ($ctx:expr, $world:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        match $ctx.count(Item::Progressive_Wallet) {
            3 => 999,
            2 => 500,
            1 => 200,
            _ => 99,
        }
    }};
}

/// $has_shield (  )
/// ($is_adult and Hylian_Shield) or ($is_child and $Deku_Shield)
#[macro_export]
macro_rules! helper__has_shield {
    ($ctx:expr, $world:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ((helper__is_adult!($ctx, $world) && $ctx.has(Item::Hylian_Shield))
            || (helper__is_child!($ctx, $world) && helper__Deku_Shield!($ctx, $world)))
    }};
}

/// $can_play ( TypedVar(name='song', type='Item') )
/// Ocarina and ^song
#[macro_export]
macro_rules! helper__can_play {
    ($ctx:expr, $world:expr, $song:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.has(Item::Ocarina) && $ctx.has($song))
    }};
}

/// $can_jumpslash (  )
/// $is_adult or $Sticks or Kokiri_Sword
#[macro_export]
macro_rules! helper__can_jumpslash {
    ($ctx:expr, $world:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ((helper__is_adult!($ctx, $world) || helper__Sticks!($ctx, $world))
            || $ctx.has(Item::Kokiri_Sword))
    }};
}

/// $can_use ( TypedVar(name='item', type='Item') )
/// IF ($_is_magic_item(^item)) { ^item and Magic_Meter } ELSE IF ($_is_adult_item(^item)) { $is_adult and ^item } ELSE IF ($_is_magic_arrow(^item)) { $is_adult and ^item and Bow and Magic_Meter } ELSE IF ($_is_child_item(^item)) { $is_child and ^item }
#[macro_export]
macro_rules! helper__can_use {
    ($ctx:expr, $world:expr, $item:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        if helper___is_magic_item!($ctx, $world, $item) {
            ($ctx.has($item) && $ctx.has(Item::Magic_Meter))
        } else if helper___is_adult_item!($ctx, $world, $item) {
            (helper__is_adult!($ctx, $world) && $ctx.has($item))
        } else if helper___is_magic_arrow!($ctx, $world, $item) {
            (((helper__is_adult!($ctx, $world) && $ctx.has($item)) && $ctx.has(Item::Bow))
                && $ctx.has(Item::Magic_Meter))
        } else if helper___is_child_item!($ctx, $world, $item) {
            (helper__is_child!($ctx, $world) && $ctx.has($item))
        } else {
            false
        }
    }};
}

/// $_is_magic_item ( TypedVar(name='item', type='Item') )
/// ^item IN [Dins_Fire, Farores_Wind, Nayrus_Love, Lens_of_Truth]
#[macro_export]
macro_rules! helper___is_magic_item {
    ($ctx:expr, $world:expr, $item:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        match $item {
            Item::Dins_Fire | Item::Farores_Wind | Item::Nayrus_Love | Item::Lens_of_Truth => true,
            _ => false,
        }
    }};
}

/// $_is_adult_item ( TypedVar(name='item', type='Item') )
/// ^item IN [Bow, Megaton_Hammer, Iron_Boots, Hover_Boots, Hookshot, Goron_Tunic, Zora_Tunic, Mirror_Shield]
#[macro_export]
macro_rules! helper___is_adult_item {
    ($ctx:expr, $world:expr, $item:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        match $item {
            Item::Bow
            | Item::Megaton_Hammer
            | Item::Iron_Boots
            | Item::Hover_Boots
            | Item::Hookshot
            | Item::Goron_Tunic
            | Item::Zora_Tunic
            | Item::Mirror_Shield => true,
            _ => false,
        }
    }};
}

/// $_is_child_item ( TypedVar(name='item', type='Item') )
/// ^item IN [Slingshot, Boomerang, Kokiri_Sword]
#[macro_export]
macro_rules! helper___is_child_item {
    ($ctx:expr, $world:expr, $item:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        match $item {
            Item::Slingshot | Item::Boomerang | Item::Kokiri_Sword => true,
            _ => false,
        }
    }};
}

/// $_is_magic_arrow ( TypedVar(name='item', type='Item') )
/// ^item IN [Fire_Arrows, Light_Arrows, Blue_Fire_Arrows]
#[macro_export]
macro_rules! helper___is_magic_arrow {
    ($ctx:expr, $world:expr, $item:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        match $item {
            Item::Fire_Arrows | Item::Light_Arrows | Item::Blue_Fire_Arrows => true,
            _ => false,
        }
    }};
}

/// $has_explosives (  )
/// Bombs
#[macro_export]
macro_rules! helper__has_explosives {
    ($ctx:expr, $world:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.has(Item::Bombs)
    }};
}

/// $can_blast_or_smash (  )
/// $has_explosives or $can_use(Megaton_Hammer)
#[macro_export]
macro_rules! helper__can_blast_or_smash {
    ($ctx:expr, $world:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        (helper__has_explosives!($ctx, $world)
            || helper__can_use!($ctx, $world, Item::Megaton_Hammer))
    }};
}

/// $can_child_attack (  )
/// $is_child and (Slingshot or Boomerang or $Sticks or Kokiri_Sword)
#[macro_export]
macro_rules! helper__can_child_attack {
    ($ctx:expr, $world:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        (helper__is_child!($ctx, $world)
            && ((($ctx.has(Item::Slingshot) || $ctx.has(Item::Boomerang))
                || helper__Sticks!($ctx, $world))
                || $ctx.has(Item::Kokiri_Sword)))
    }};
}

/// $has_fire_source (  )
/// $can_use(Dins_Fire) or $can_use(Fire_Arrows)
#[macro_export]
macro_rules! helper__has_fire_source {
    ($ctx:expr, $world:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        (helper__can_use!($ctx, $world, Item::Dins_Fire)
            || helper__can_use!($ctx, $world, Item::Fire_Arrows))
    }};
}

/// $has_fire_source_with_torch (  )
/// $has_fire_source or ($is_child and $Sticks)
#[macro_export]
macro_rules! helper__has_fire_source_with_torch {
    ($ctx:expr, $world:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        (helper__has_fire_source!($ctx, $world)
            || (helper__is_child!($ctx, $world) && helper__Sticks!($ctx, $world)))
    }};
}

/// Rule $victory
#[macro_export]
macro_rules! rule__victory {
    ($ctx:expr, $world:expr) => {{
        use $crate::graph_enums::*;
        use $crate::rules;
        match $world.rule_victory {
            RuleVictory::Default => rules::access___victory_objective($ctx, $world),
        }
    }};
}

/// Rule $objective
#[macro_export]
macro_rules! rule__objective {
    ($ctx:expr, $world:expr) => {{
        use $crate::graph_enums::*;
        use $crate::rules;
        match $world.rule_objective {
            RuleObjective::Gohma => rules::access___deku_lobby_web_kokiri_emerald($ctx, $world),
            RuleObjective::Ganon => rules::access___defeat_ganon($ctx, $world),
            RuleObjective::TriforceHunt => {
                rules::access___triforce_piece__triforce_count($ctx, $world)
            }
        }
    }};
}

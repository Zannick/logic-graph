//! AUTOGENERATED FOR sample - MODIFICATIONS WILL BE LOST

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::*;
use crate::graph::{action::*, community::*, coord::*, enums::*, exit::*, location::*, spot::*, warp::*};
use crate::items::*;
use crate::movements;
use analyzer::condense::{condense_graph, CondensedEdge};
use analyzer::context::Ctx;
use analyzer::world;
use analyzer::world::Location as _;
use enum_map::{enum_map, Enum, EnumMap};
use lazy_static::lazy_static;
use rustc_hash::{FxHashMap, FxHashSet};
use std::ops::Range;
use std::option::Option;

pub fn get_area(spot: SpotId) -> AreaId {
    match spot {
        SpotId::None => panic!("Spot not valid"),
        SpotId::Deku_Tree__Lobby__Entry | SpotId::Deku_Tree__Lobby__Center | SpotId::Deku_Tree__Lobby__Vines => AreaId::Deku_Tree__Lobby,
        SpotId::Deku_Tree__Floor_2__Lower | SpotId::Deku_Tree__Floor_2__Vines | SpotId::Deku_Tree__Floor_2__Slingshot_Door => AreaId::Deku_Tree__Floor_2,
        SpotId::Deku_Tree__Scrub_Room__Entry | SpotId::Deku_Tree__Scrub_Room__Rear => AreaId::Deku_Tree__Scrub_Room,
        SpotId::Deku_Tree__Slingshot_Room__Entry | SpotId::Deku_Tree__Slingshot_Room__Slingshot => AreaId::Deku_Tree__Slingshot_Room,
        SpotId::Deku_Tree__Slingshot_Upper__Ledge => AreaId::Deku_Tree__Slingshot_Upper,
        SpotId::Deku_Tree__Floor_3__Climb | SpotId::Deku_Tree__Floor_3__Door => AreaId::Deku_Tree__Floor_3,
        SpotId::Deku_Tree__Compass_Room__Entry | SpotId::Deku_Tree__Compass_Room__Compass | SpotId::Deku_Tree__Compass_Room__Ledge => AreaId::Deku_Tree__Compass_Room,
        SpotId::Deku_Tree__Basement_1__Center | SpotId::Deku_Tree__Basement_1__Corner | SpotId::Deku_Tree__Basement_1__South_Door => AreaId::Deku_Tree__Basement_1,
        SpotId::Deku_Tree__Back_Room__South | SpotId::Deku_Tree__Back_Room__Northwest | SpotId::Deku_Tree__Back_Room__East => AreaId::Deku_Tree__Back_Room,
        SpotId::Deku_Tree__Skull_Room__Entry => AreaId::Deku_Tree__Skull_Room,
        SpotId::Deku_Tree__Basement_Ledge__Block | SpotId::Deku_Tree__Basement_Ledge__Web => AreaId::Deku_Tree__Basement_Ledge,
        SpotId::Deku_Tree__Basement_2__Pool | SpotId::Deku_Tree__Basement_2__Boss_Door => AreaId::Deku_Tree__Basement_2,
        SpotId::Deku_Tree__Boss_Room__Entry | SpotId::Deku_Tree__Boss_Room__Arena => AreaId::Deku_Tree__Boss_Room,
        SpotId::KF__Links_House__Start_Point | SpotId::KF__Links_House__Entry => AreaId::KF__Links_House,
        SpotId::KF__Kokiri_Village__Links_Porch | SpotId::KF__Kokiri_Village__Midos_Porch | SpotId::KF__Kokiri_Village__Know_it_all_Porch | SpotId::KF__Kokiri_Village__Training_Center | SpotId::KF__Kokiri_Village__Shop_Porch | SpotId::KF__Kokiri_Village__Sarias_Porch | SpotId::KF__Kokiri_Village__Midos_Guardpost => AreaId::KF__Kokiri_Village,
        SpotId::KF__Boulder_Maze__Entry | SpotId::KF__Boulder_Maze__Reward => AreaId::KF__Boulder_Maze,
        SpotId::KF__Baba_Corridor__Village_Side | SpotId::KF__Baba_Corridor__Deku_Babas | SpotId::KF__Baba_Corridor__Tree_Side => AreaId::KF__Baba_Corridor,
        SpotId::KF__Outside_Deku_Tree__Entry | SpotId::KF__Outside_Deku_Tree__Left | SpotId::KF__Outside_Deku_Tree__Right | SpotId::KF__Outside_Deku_Tree__Mouth => AreaId::KF__Outside_Deku_Tree,
        SpotId::KF__Midos_House__Entry => AreaId::KF__Midos_House,
        SpotId::KF__Know_it_all_House__Entry => AreaId::KF__Know_it_all_House,
        SpotId::KF__Shop__Entry => AreaId::KF__Shop,
        SpotId::Kak__Spider_House__Entry => AreaId::Kak__Spider_House,
    }
}
pub fn get_region(spot: SpotId) -> RegionId {
    match spot {
        SpotId::None => panic!("Spot not valid"),
        SpotId::Deku_Tree__Lobby__Entry | SpotId::Deku_Tree__Lobby__Center | SpotId::Deku_Tree__Lobby__Vines => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Floor_2__Lower | SpotId::Deku_Tree__Floor_2__Vines | SpotId::Deku_Tree__Floor_2__Slingshot_Door => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Scrub_Room__Entry | SpotId::Deku_Tree__Scrub_Room__Rear => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Slingshot_Room__Entry | SpotId::Deku_Tree__Slingshot_Room__Slingshot => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Slingshot_Upper__Ledge => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Floor_3__Climb | SpotId::Deku_Tree__Floor_3__Door => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Compass_Room__Entry | SpotId::Deku_Tree__Compass_Room__Compass | SpotId::Deku_Tree__Compass_Room__Ledge => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Basement_1__Center | SpotId::Deku_Tree__Basement_1__Corner | SpotId::Deku_Tree__Basement_1__South_Door => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Back_Room__South | SpotId::Deku_Tree__Back_Room__Northwest | SpotId::Deku_Tree__Back_Room__East => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Skull_Room__Entry => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Basement_Ledge__Block | SpotId::Deku_Tree__Basement_Ledge__Web => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Basement_2__Pool | SpotId::Deku_Tree__Basement_2__Boss_Door => RegionId::Deku_Tree,
        SpotId::Deku_Tree__Boss_Room__Entry | SpotId::Deku_Tree__Boss_Room__Arena => RegionId::Deku_Tree,
        SpotId::KF__Links_House__Start_Point | SpotId::KF__Links_House__Entry => RegionId::KF,
        SpotId::KF__Kokiri_Village__Links_Porch | SpotId::KF__Kokiri_Village__Midos_Porch | SpotId::KF__Kokiri_Village__Know_it_all_Porch | SpotId::KF__Kokiri_Village__Training_Center | SpotId::KF__Kokiri_Village__Shop_Porch | SpotId::KF__Kokiri_Village__Sarias_Porch | SpotId::KF__Kokiri_Village__Midos_Guardpost => RegionId::KF,
        SpotId::KF__Boulder_Maze__Entry | SpotId::KF__Boulder_Maze__Reward => RegionId::KF,
        SpotId::KF__Baba_Corridor__Village_Side | SpotId::KF__Baba_Corridor__Deku_Babas | SpotId::KF__Baba_Corridor__Tree_Side => RegionId::KF,
        SpotId::KF__Outside_Deku_Tree__Entry | SpotId::KF__Outside_Deku_Tree__Left | SpotId::KF__Outside_Deku_Tree__Right | SpotId::KF__Outside_Deku_Tree__Mouth => RegionId::KF,
        SpotId::KF__Midos_House__Entry => RegionId::KF,
        SpotId::KF__Know_it_all_House__Entry => RegionId::KF,
        SpotId::KF__Shop__Entry => RegionId::KF,
        SpotId::Kak__Spider_House__Entry => RegionId::Kak,
    }
}

static RAW_SPOTS: [SpotId; 52] = [
    SpotId::None,
    SpotId::Deku_Tree__Back_Room__East,
    SpotId::Deku_Tree__Back_Room__Northwest,
    SpotId::Deku_Tree__Back_Room__South,
    SpotId::Deku_Tree__Basement_1__Center,
    SpotId::Deku_Tree__Basement_1__Corner,
    SpotId::Deku_Tree__Basement_1__South_Door,
    SpotId::Deku_Tree__Basement_2__Boss_Door,
    SpotId::Deku_Tree__Basement_2__Pool,
    SpotId::Deku_Tree__Basement_Ledge__Block,
    SpotId::Deku_Tree__Basement_Ledge__Web,
    SpotId::Deku_Tree__Boss_Room__Arena,
    SpotId::Deku_Tree__Boss_Room__Entry,
    SpotId::Deku_Tree__Compass_Room__Compass,
    SpotId::Deku_Tree__Compass_Room__Entry,
    SpotId::Deku_Tree__Compass_Room__Ledge,
    SpotId::Deku_Tree__Floor_2__Lower,
    SpotId::Deku_Tree__Floor_2__Slingshot_Door,
    SpotId::Deku_Tree__Floor_2__Vines,
    SpotId::Deku_Tree__Floor_3__Climb,
    SpotId::Deku_Tree__Floor_3__Door,
    SpotId::Deku_Tree__Lobby__Center,
    SpotId::Deku_Tree__Lobby__Entry,
    SpotId::Deku_Tree__Lobby__Vines,
    SpotId::Deku_Tree__Scrub_Room__Entry,
    SpotId::Deku_Tree__Scrub_Room__Rear,
    SpotId::Deku_Tree__Skull_Room__Entry,
    SpotId::Deku_Tree__Slingshot_Room__Entry,
    SpotId::Deku_Tree__Slingshot_Room__Slingshot,
    SpotId::Deku_Tree__Slingshot_Upper__Ledge,
    SpotId::KF__Baba_Corridor__Deku_Babas,
    SpotId::KF__Baba_Corridor__Tree_Side,
    SpotId::KF__Baba_Corridor__Village_Side,
    SpotId::KF__Boulder_Maze__Entry,
    SpotId::KF__Boulder_Maze__Reward,
    SpotId::KF__Know_it_all_House__Entry,
    SpotId::KF__Kokiri_Village__Know_it_all_Porch,
    SpotId::KF__Kokiri_Village__Links_Porch,
    SpotId::KF__Kokiri_Village__Midos_Guardpost,
    SpotId::KF__Kokiri_Village__Midos_Porch,
    SpotId::KF__Kokiri_Village__Sarias_Porch,
    SpotId::KF__Kokiri_Village__Shop_Porch,
    SpotId::KF__Kokiri_Village__Training_Center,
    SpotId::KF__Links_House__Entry,
    SpotId::KF__Links_House__Start_Point,
    SpotId::KF__Midos_House__Entry,
    SpotId::KF__Outside_Deku_Tree__Entry,
    SpotId::KF__Outside_Deku_Tree__Left,
    SpotId::KF__Outside_Deku_Tree__Mouth,
    SpotId::KF__Outside_Deku_Tree__Right,
    SpotId::KF__Shop__Entry,
    SpotId::Kak__Spider_House__Entry,
];

lazy_static! {
    // Using get_area, we can get the nearby spots by indexing into the spot lists
    static ref RAW_AREA_SPOT_RANGES: EnumMap<AreaId, Range<usize>> = enum_map! {
        AreaId::Deku_Tree__Back_Room => Range {
            start: SpotId::Deku_Tree__Back_Room__East.into_usize(),
            end: SpotId::Deku_Tree__Back_Room__South.into_usize() + 1,
        },
        AreaId::Deku_Tree__Basement_1 => Range {
            start: SpotId::Deku_Tree__Basement_1__Center.into_usize(),
            end: SpotId::Deku_Tree__Basement_1__South_Door.into_usize() + 1,
        },
        AreaId::Deku_Tree__Basement_2 => Range {
            start: SpotId::Deku_Tree__Basement_2__Boss_Door.into_usize(),
            end: SpotId::Deku_Tree__Basement_2__Pool.into_usize() + 1,
        },
        AreaId::Deku_Tree__Basement_Ledge => Range {
            start: SpotId::Deku_Tree__Basement_Ledge__Block.into_usize(),
            end: SpotId::Deku_Tree__Basement_Ledge__Web.into_usize() + 1,
        },
        AreaId::Deku_Tree__Boss_Room => Range {
            start: SpotId::Deku_Tree__Boss_Room__Arena.into_usize(),
            end: SpotId::Deku_Tree__Boss_Room__Entry.into_usize() + 1,
        },
        AreaId::Deku_Tree__Compass_Room => Range {
            start: SpotId::Deku_Tree__Compass_Room__Compass.into_usize(),
            end: SpotId::Deku_Tree__Compass_Room__Ledge.into_usize() + 1,
        },
        AreaId::Deku_Tree__Floor_2 => Range {
            start: SpotId::Deku_Tree__Floor_2__Lower.into_usize(),
            end: SpotId::Deku_Tree__Floor_2__Vines.into_usize() + 1,
        },
        AreaId::Deku_Tree__Floor_3 => Range {
            start: SpotId::Deku_Tree__Floor_3__Climb.into_usize(),
            end: SpotId::Deku_Tree__Floor_3__Door.into_usize() + 1,
        },
        AreaId::Deku_Tree__Lobby => Range {
            start: SpotId::Deku_Tree__Lobby__Center.into_usize(),
            end: SpotId::Deku_Tree__Lobby__Vines.into_usize() + 1,
        },
        AreaId::Deku_Tree__Scrub_Room => Range {
            start: SpotId::Deku_Tree__Scrub_Room__Entry.into_usize(),
            end: SpotId::Deku_Tree__Scrub_Room__Rear.into_usize() + 1,
        },
        AreaId::Deku_Tree__Skull_Room => Range {
            start: SpotId::Deku_Tree__Skull_Room__Entry.into_usize(),
            end: SpotId::Deku_Tree__Skull_Room__Entry.into_usize() + 1,
        },
        AreaId::Deku_Tree__Slingshot_Room => Range {
            start: SpotId::Deku_Tree__Slingshot_Room__Entry.into_usize(),
            end: SpotId::Deku_Tree__Slingshot_Room__Slingshot.into_usize() + 1,
        },
        AreaId::Deku_Tree__Slingshot_Upper => Range {
            start: SpotId::Deku_Tree__Slingshot_Upper__Ledge.into_usize(),
            end: SpotId::Deku_Tree__Slingshot_Upper__Ledge.into_usize() + 1,
        },
        AreaId::KF__Baba_Corridor => Range {
            start: SpotId::KF__Baba_Corridor__Deku_Babas.into_usize(),
            end: SpotId::KF__Baba_Corridor__Village_Side.into_usize() + 1,
        },
        AreaId::KF__Boulder_Maze => Range {
            start: SpotId::KF__Boulder_Maze__Entry.into_usize(),
            end: SpotId::KF__Boulder_Maze__Reward.into_usize() + 1,
        },
        AreaId::KF__Know_it_all_House => Range {
            start: SpotId::KF__Know_it_all_House__Entry.into_usize(),
            end: SpotId::KF__Know_it_all_House__Entry.into_usize() + 1,
        },
        AreaId::KF__Kokiri_Village => Range {
            start: SpotId::KF__Kokiri_Village__Know_it_all_Porch.into_usize(),
            end: SpotId::KF__Kokiri_Village__Training_Center.into_usize() + 1,
        },
        AreaId::KF__Links_House => Range {
            start: SpotId::KF__Links_House__Entry.into_usize(),
            end: SpotId::KF__Links_House__Start_Point.into_usize() + 1,
        },
        AreaId::KF__Midos_House => Range {
            start: SpotId::KF__Midos_House__Entry.into_usize(),
            end: SpotId::KF__Midos_House__Entry.into_usize() + 1,
        },
        AreaId::KF__Outside_Deku_Tree => Range {
            start: SpotId::KF__Outside_Deku_Tree__Entry.into_usize(),
            end: SpotId::KF__Outside_Deku_Tree__Right.into_usize() + 1,
        },
        AreaId::KF__Shop => Range {
            start: SpotId::KF__Shop__Entry.into_usize(),
            end: SpotId::KF__Shop__Entry.into_usize() + 1,
        },
        AreaId::Kak__Spider_House => Range {
            start: SpotId::Kak__Spider_House__Entry.into_usize(),
            end: SpotId::Kak__Spider_House__Entry.into_usize() + 1,
        },
    };
}

#[derive(Clone, Debug)]
pub struct World {
    pub rule_victory: RuleVictory,
    pub rule_objective: RuleObjective,
    // settings
    pub triforce_count: i16,
    pub logic_deku_b1_skip: bool,
    // These are arrays that group the items together by their parent.
    // Using EnumMap for this ONLY WORKS if the keys are properly ordered to group
    // nearby things together.
    // For entrance rando, we would need to have a layer of indirection:
    // list_index: EnumMap<EnumType, usize>,
    // list: EnumArray<ObjType>,
    locations: EnumMap<LocationId, Location>,
    exits: EnumMap<ExitId, Exit>,
    actions: EnumMap<ActionId, Action>,
    warps: EnumMap<WarpId, Warp>,
    // Index ranges for slices into the above arrays
    spots: EnumMap<SpotId, Spot>,
    global_actions: Range<usize>,
    min_warp_time: u32,
    // Condensed edges
    condensed: EnumMap<SpotId, Vec<CondensedEdge<Context, SpotId, ExitId>>>,
}

impl world::World for World {
    type Location = Location;
    type Exit = Exit;
    type Action = Action;
    type Warp = Warp;
    const NUM_CANON_LOCATIONS: usize = 44;

    fn new() -> Box<Self> {
        let mut world: Box<Self> = bytemuck::zeroed_box();

        world.rule_victory = RuleVictory::default();
        world.rule_objective = RuleObjective::default();
        world.triforce_count = Default::default();
        world.logic_deku_b1_skip = Default::default();
        world.global_actions = Range {
            start: ActionId::Global__Change_Time.into_usize(),
            end: ActionId::Global__Change_Time.into_usize() + 1,
        };
        world.min_warp_time = 0;
        world.condensed = EnumMap::default();

        build_locations(&mut world.locations);
        build_exits(&mut world.exits);
        build_actions(&mut world.actions);
        build_warps(&mut world.warps);
        build_spots(&mut world.spots);
        world
    }

    fn ruleset(&self) -> String {
        format!(
            "[$victory: {}, $objective: {}]",
            self.rule_victory,
            self.rule_objective,
        )
    }

    fn get_location(&self, id: LocationId)
         -> &Location { &self.locations[id] }
    fn get_spot_locations(&self, spot_id: SpotId) -> &[Location] {
        let r = &self.spots[spot_id].locations;
        &self.locations.as_slice()[r.start..r.end]
    }
    fn get_exit(&self, id: ExitId)
         -> &Exit { &self.exits[id] }
    fn get_spot_exits(&self, spot_id: SpotId) -> &[Exit] {
        let r = &self.spots[spot_id].exits;
        &self.exits.as_slice()[r.start..r.end]
    }
    fn get_action(&self, id: ActionId)
         -> &Action { &self.actions[id] }
    fn get_spot_actions(&self, spot_id: SpotId) -> &[Action] {
        let r = &self.spots[spot_id].actions;
        &self.actions.as_slice()[r.start..r.end]
    }
    fn get_global_actions(&self) -> &[Action] {
        &self.actions.as_slice()[self.global_actions.start..self.global_actions.end]
    }
    fn get_warp(&self, id: WarpId) -> &Warp { &self.warps[id] }

    // Hardcoded locations. To support a randomizer, this would be better as a cache.
    fn get_item_locations(&self, item: Item) -> Vec<LocationId> {
        match item {
            Item::Deku_Stick_Drop => vec![LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Sticks, LocationId::KF__Baba_Corridor__Deku_Babas__Sticks],
            Item::Deku_Nut_Drop => vec![LocationId::Deku_Tree__Lobby__Center__Deku_Baba_Nuts, LocationId::KF__Baba_Corridor__Deku_Babas__Nuts],
            Item::Deku_Lobby_Web => vec![LocationId::Deku_Tree__Lobby__Center__Web, LocationId::Deku_Tree__Floor_3__Door__Break_Web, LocationId::Deku_Tree__Compass_Room__Entry__Burn_Web],
            Item::Map_Deku_Tree => vec![LocationId::Deku_Tree__Floor_2__Vines__Map_Chest],
            Item::Deku_Slingshot_Scrub => vec![LocationId::Deku_Tree__Scrub_Room__Entry__Scrub],
            Item::Slingshot => vec![LocationId::Deku_Tree__Slingshot_Room__Slingshot__Chest],
            Item::Recovery_Heart => vec![LocationId::Deku_Tree__Slingshot_Upper__Ledge__Chest, LocationId::Deku_Tree__Compass_Room__Ledge__Chest, LocationId::Deku_Tree__Basement_1__Corner__Chest, LocationId::KF__Midos_House__Entry__Bottom_Right_Chest],
            Item::Compass_Deku_Tree => vec![LocationId::Deku_Tree__Compass_Room__Compass__Chest],
            Item::Gold_Skulltula_Token => vec![LocationId::Deku_Tree__Compass_Room__Ledge__GS, LocationId::Deku_Tree__Basement_1__Center__Vines_GS, LocationId::Deku_Tree__Basement_1__Corner__Gate_GS, LocationId::Deku_Tree__Skull_Room__Entry__GS],
            Item::Deku_Basement_Switch => vec![LocationId::Deku_Tree__Basement_1__Corner__Switch],
            Item::Deku_Basement_Web => vec![LocationId::Deku_Tree__Basement_1__Corner__Burn_Basement_Web, LocationId::Deku_Tree__Basement_Ledge__Web__Burn_Web],
            Item::Deku_Back_Room_Web => vec![LocationId::Deku_Tree__Back_Room__Northwest__Burn_Web],
            Item::Deku_Back_Room_Wall => vec![LocationId::Deku_Tree__Back_Room__Northwest__Break_Wall],
            Item::Deku_Basement_Block => vec![LocationId::Deku_Tree__Basement_Ledge__Block__Push_Block],
            Item::Deku_Basement_Scrubs => vec![LocationId::Deku_Tree__Basement_2__Boss_Door__Scrubs],
            Item::Defeat_Gohma => vec![LocationId::Deku_Tree__Boss_Room__Arena__Gohma, LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Quick_Kill],
            Item::Heart_Container => vec![LocationId::Deku_Tree__Boss_Room__Arena__Gohma_Heart],
            Item::Kokiri_Emerald => vec![LocationId::Deku_Tree__Boss_Room__Arena__Blue_Warp],
            Item::Victory => vec![LocationId::KF__Kokiri_Village__Training_Center__Victory],
            Item::Showed_Mido => vec![LocationId::KF__Kokiri_Village__Midos_Guardpost__Show_Mido],
            Item::Kokiri_Sword => vec![LocationId::KF__Boulder_Maze__Reward__Chest],
            Item::Gossip_Stone_Deku_Left => vec![LocationId::KF__Outside_Deku_Tree__Left__Gossip_Stone],
            Item::Gossip_Stone_Deku_Right => vec![LocationId::KF__Outside_Deku_Tree__Right__Gossip_Stone],
            Item::Rupees_5 => vec![LocationId::KF__Midos_House__Entry__Top_Left_Chest, LocationId::KF__Shop__Entry__Blue_Rupee],
            Item::Rupees_50 => vec![LocationId::KF__Midos_House__Entry__Top_Right_Chest],
            Item::Rupee_1 => vec![LocationId::KF__Midos_House__Entry__Bottom_Left_Chest],
            Item::Buy_Deku_Shield => vec![LocationId::KF__Shop__Entry__Item_1],
            Item::Buy_Deku_Nut_5 => vec![LocationId::KF__Shop__Entry__Item_2],
            Item::Buy_Deku_Nut_10 => vec![LocationId::KF__Shop__Entry__Item_3],
            Item::Buy_Deku_Stick_1 => vec![LocationId::KF__Shop__Entry__Item_4],
            Item::Buy_Deku_Seeds_30 => vec![LocationId::KF__Shop__Entry__Item_5],
            Item::Buy_Arrows_10 => vec![LocationId::KF__Shop__Entry__Item_6],
            Item::Buy_Arrows_30 => vec![LocationId::KF__Shop__Entry__Item_7],
            Item::Buy_Heart => vec![LocationId::KF__Shop__Entry__Item_8],
            Item::Arrows_10 => vec![LocationId::Kak__Spider_House__Entry__Skulls_10],
            _ => Vec::new(),
        }
    }

    fn same_region(sp1: SpotId, sp2: SpotId) -> bool {
        get_region(sp1) == get_region(sp2)
    }
    fn same_area(sp1: SpotId, sp2: SpotId) -> bool {
        get_area(sp1) == get_area(sp2)
    }
    fn get_area_spots(&self, spot_id: SpotId) -> &[SpotId] {
        if spot_id == SpotId::None {
            &RAW_SPOTS[0..0]
        } else {
            let area_id = get_area(spot_id);
            let r = &RAW_AREA_SPOT_RANGES[area_id];
            &RAW_SPOTS[r.start..r.end]
        }
    }
    fn get_warps(&self) -> &[Warp] { &self.warps.as_slice() }

    fn get_all_locations(&self) -> &[Location] { &self.locations.as_slice() }

    fn get_location_spot(&self, loc_id: LocationId) -> SpotId {
        get_location_spot(loc_id)
    }

    fn get_action_spot(&self, act_id: ActionId) -> SpotId {
        get_action_spot(act_id)
    }

    fn get_exit_spot(&self, exit_id: ExitId) -> SpotId {
        get_exit_spot(exit_id)
    }

    fn get_all_spots(&self) -> &[SpotId] {
        RAW_SPOTS.as_slice()
    }

    fn action_has_visit(act_id: ActionId) -> bool {
        action_has_visit(act_id)
    }

    fn won(&self, ctx: &Context) -> bool {
        crate::rule__victory!(ctx, self)
    }

    fn items_needed(&self, ctx: &Context) -> Vec<(Item, i16)> {
        let mut map = FxHashMap::default();

        match self.rule_victory {
            RuleVictory::Default => {
                if !ctx.has(Item::Victory) {
                    map.insert(Item::Victory, 1);
                }
                match self.rule_objective {
                    RuleObjective::Gohma => {
                        if !ctx.has(Item::Deku_Lobby_Web) {
                            if !map.contains_key(&Item::Deku_Lobby_Web) {
                                map.insert(Item::Deku_Lobby_Web, 1);
                            }
                        }
                        if !ctx.has(Item::Kokiri_Emerald) {
                            if !map.contains_key(&Item::Kokiri_Emerald) {
                                map.insert(Item::Kokiri_Emerald, 1);
                            }
                        }
                    }
                    RuleObjective::Ganon => {
                        if !ctx.has(Item::Defeat_Ganon) {
                            if !map.contains_key(&Item::Defeat_Ganon) {
                                map.insert(Item::Defeat_Ganon, 1);
                            }
                        }
                    }
                    RuleObjective::TriforceHunt => {
                        if ctx.count(Item::Triforce_Piece) < 1024 {
                            if let Some(val) = map.get_mut(&Item::Triforce_Piece) {
                                *val = std::cmp::max(*val, 1024 - ctx.count(Item::Triforce_Piece));
                            } else {
                                map.insert(Item::Triforce_Piece, 1024 - ctx.count(Item::Triforce_Piece));
                            }
                        }
                    }
                }
            }
        }

        map.drain().collect()
    }

    fn required_items(&self) -> Vec<(Item, i16)> {
        let mut map = FxHashMap::default();

        match self.rule_victory {
            RuleVictory::Default => {
                map.insert(Item::Victory, 1);
                match self.rule_objective {
                    RuleObjective::Gohma => {
                        if !map.contains_key(&Item::Deku_Lobby_Web) {
                            map.insert(Item::Deku_Lobby_Web, 1);
                        }
                        if !map.contains_key(&Item::Kokiri_Emerald) {
                            map.insert(Item::Kokiri_Emerald, 1);
                        }
                    }
                    RuleObjective::Ganon => {
                        if !map.contains_key(&Item::Defeat_Ganon) {
                            map.insert(Item::Defeat_Ganon, 1);
                        }
                    }
                    RuleObjective::TriforceHunt => {
                        if let Some(val) = map.get_mut(&Item::Triforce_Piece) {
                            *val = std::cmp::max(*val, 1024);
                        } else {
                            map.insert(Item::Triforce_Piece, 1024);
                        }
                    }
                }
            }
        }

        map.drain().collect()
    }

    fn unused_items(&self) -> Vec<Item> {
        let mut vec = Vec::from_iter(self.get_unused_items());
        vec.sort();
        vec
    }

    fn remaining_items(&self, ctx: &Context) -> Vec<(Item, i16)> {
        let mut map = FxHashMap::default();
        let mut canons_seen = FxHashSet::default();
        for loc in self.locations.values() {
            let cid = loc.canon_id();
            if ctx.todo(loc) && !canons_seen.contains(&cid) {
                canons_seen.insert(cid);
                let item = loc.item();
                if let Some(val) = map.get_mut(&item) {
                    *val = *val + 1;
                } else {
                    map.insert(item, 1);
                }
            }
        }
        map.drain().collect()
    }


    fn should_draw_edge(&self, exit_id: ExitId) -> bool {
        match exit_id {
            ExitId::Deku_Tree__Back_Room__Northwest__ex__Skull_Room__Entry_1 => true,
            ExitId::Deku_Tree__Back_Room__East__ex__Basement_Ledge__Web_1 => true,
            ExitId::Deku_Tree__Basement_1__Center__ex__Lobby__Center_1 => true,
            ExitId::Deku_Tree__Basement_1__Corner__ex__Basement_Ledge__Block_1 => true,
            ExitId::Deku_Tree__Basement_1__South_Door__ex__Back_Room__South_1 => true,
            ExitId::Deku_Tree__Basement_2__Pool__ex__Basement_Ledge__Web_1 => true,
            ExitId::Deku_Tree__Basement_2__Boss_Door__ex__Boss_Room__Entry_1 => true,
            ExitId::Deku_Tree__Basement_Ledge__Block__ex__Basement_1__Corner_1 => true,
            ExitId::Deku_Tree__Basement_Ledge__Web__ex__Basement_2__Pool_1 => true,
            ExitId::Deku_Tree__Compass_Room__Entry__ex__Floor_3__Door_1 => true,
            ExitId::Deku_Tree__Floor_2__Lower__ex__Lobby__Center_1 => true,
            ExitId::Deku_Tree__Floor_2__Lower__ex__Lobby__Vines_1 => true,
            ExitId::Deku_Tree__Floor_2__Vines__ex__Floor_3__Climb_1 => true,
            ExitId::Deku_Tree__Floor_2__Vines__ex__Floor_3__Climb_2 => true,
            ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Center_1 => true,
            ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Entry_1 => true,
            ExitId::Deku_Tree__Floor_2__Vines__ex__Lobby__Vines_1 => true,
            ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Lobby__Center_1 => true,
            ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Lobby__Entry_1 => true,
            ExitId::Deku_Tree__Floor_2__Slingshot_Door__ex__Scrub_Room__Entry_1 => true,
            ExitId::Deku_Tree__Floor_3__Door__ex__Compass_Room__Entry_1 => true,
            ExitId::Deku_Tree__Floor_3__Door__ex__Lobby__Center_1 => true,
            ExitId::Deku_Tree__Lobby__Center__ex__Basement_1__Center_1 => true,
            ExitId::Deku_Tree__Lobby__Center__ex__Basement_Ledge__Block_1 => true,
            ExitId::Deku_Tree__Lobby__Vines__ex__Floor_2__Lower_1 => true,
            ExitId::Deku_Tree__Scrub_Room__Entry__ex__Floor_2__Slingshot_Door_1 => true,
            ExitId::Deku_Tree__Scrub_Room__Rear__ex__Slingshot_Room__Entry_1 => true,
            ExitId::Deku_Tree__Skull_Room__Entry__ex__Back_Room__Northwest_1 => true,
            ExitId::Deku_Tree__Slingshot_Room__Entry__ex__Scrub_Room__Rear_1 => true,
            ExitId::Deku_Tree__Slingshot_Room__Slingshot__ex__Slingshot_Upper__Ledge_1 => true,
            ExitId::Deku_Tree__Slingshot_Upper__Ledge__ex__Slingshot_Room__Slingshot_1 => true,
            ExitId::Kak__Spider_House__Entry__ex__KF__Kokiri_Village__Sarias_Porch_1 => true,
            ExitId::KF__Baba_Corridor__Village_Side__ex__Kokiri_Village__Midos_Guardpost_1 => true,
            ExitId::KF__Baba_Corridor__Tree_Side__ex__Outside_Deku_Tree__Entry_1 => true,
            ExitId::KF__Boulder_Maze__Entry__ex__Kokiri_Village__Training_Center_1 => true,
            ExitId::KF__Know_it_all_House__Entry__ex__Kokiri_Village__Know_it_all_Porch_1 => true,
            ExitId::KF__Kokiri_Village__Links_Porch__ex__Links_House__Entry_1 => true,
            ExitId::KF__Kokiri_Village__Midos_Porch__ex__Midos_House__Entry_1 => true,
            ExitId::KF__Kokiri_Village__Know_it_all_Porch__ex__Know_it_all_House__Entry_1 => true,
            ExitId::KF__Kokiri_Village__Training_Center__ex__Boulder_Maze__Entry_1 => true,
            ExitId::KF__Kokiri_Village__Shop_Porch__ex__Shop__Entry_1 => true,
            ExitId::KF__Kokiri_Village__Sarias_Porch__ex__Kak__Spider_House__Entry_1 => true,
            ExitId::KF__Kokiri_Village__Midos_Guardpost__ex__Baba_Corridor__Village_Side_1 => true,
            ExitId::KF__Links_House__Entry__ex__Kokiri_Village__Links_Porch_1 => true,
            ExitId::KF__Midos_House__Entry__ex__Kokiri_Village__Midos_Porch_1 => true,
            ExitId::KF__Outside_Deku_Tree__Entry__ex__Baba_Corridor__Tree_Side_1 => true,
            ExitId::KF__Outside_Deku_Tree__Mouth__ex__Deku_Tree__Lobby__Entry_1 => true,
            ExitId::KF__Shop__Entry__ex__Kokiri_Village__Shop_Porch_1 => true,
            _ => false,
        }
    }

    fn should_draw_spot(&self, spot_id: SpotId) -> bool {
        match spot_id {
            SpotId::Deku_Tree__Back_Room__South => true,
            SpotId::Deku_Tree__Back_Room__Northwest => true,
            SpotId::Deku_Tree__Back_Room__East => true,
            SpotId::Deku_Tree__Basement_1__Center => true,
            SpotId::Deku_Tree__Basement_1__Corner => true,
            SpotId::Deku_Tree__Basement_1__South_Door => true,
            SpotId::Deku_Tree__Basement_2__Pool => true,
            SpotId::Deku_Tree__Basement_2__Boss_Door => true,
            SpotId::Deku_Tree__Basement_Ledge__Block => true,
            SpotId::Deku_Tree__Basement_Ledge__Web => true,
            SpotId::Deku_Tree__Boss_Room__Entry => true,
            SpotId::Deku_Tree__Boss_Room__Arena => true,
            SpotId::Deku_Tree__Compass_Room__Entry => true,
            SpotId::Deku_Tree__Compass_Room__Compass => true,
            SpotId::Deku_Tree__Compass_Room__Ledge => true,
            SpotId::Deku_Tree__Floor_2__Lower => true,
            SpotId::Deku_Tree__Floor_2__Vines => true,
            SpotId::Deku_Tree__Floor_2__Slingshot_Door => true,
            SpotId::Deku_Tree__Floor_3__Climb => true,
            SpotId::Deku_Tree__Floor_3__Door => true,
            SpotId::Deku_Tree__Lobby__Entry => true,
            SpotId::Deku_Tree__Lobby__Center => true,
            SpotId::Deku_Tree__Lobby__Vines => true,
            SpotId::Deku_Tree__Scrub_Room__Entry => true,
            SpotId::Deku_Tree__Scrub_Room__Rear => true,
            SpotId::Deku_Tree__Skull_Room__Entry => true,
            SpotId::Deku_Tree__Slingshot_Room__Entry => true,
            SpotId::Deku_Tree__Slingshot_Room__Slingshot => true,
            SpotId::Deku_Tree__Slingshot_Upper__Ledge => true,
            SpotId::Kak__Spider_House__Entry => true,
            SpotId::KF__Baba_Corridor__Village_Side => true,
            SpotId::KF__Baba_Corridor__Deku_Babas => true,
            SpotId::KF__Baba_Corridor__Tree_Side => true,
            SpotId::KF__Boulder_Maze__Entry => true,
            SpotId::KF__Boulder_Maze__Reward => true,
            SpotId::KF__Know_it_all_House__Entry => true,
            SpotId::KF__Kokiri_Village__Links_Porch => true,
            SpotId::KF__Kokiri_Village__Midos_Porch => true,
            SpotId::KF__Kokiri_Village__Know_it_all_Porch => true,
            SpotId::KF__Kokiri_Village__Training_Center => true,
            SpotId::KF__Kokiri_Village__Shop_Porch => true,
            SpotId::KF__Kokiri_Village__Sarias_Porch => true,
            SpotId::KF__Kokiri_Village__Midos_Guardpost => true,
            SpotId::KF__Links_House__Start_Point => true,
            SpotId::KF__Links_House__Entry => true,
            SpotId::KF__Midos_House__Entry => true,
            SpotId::KF__Outside_Deku_Tree__Entry => true,
            SpotId::KF__Outside_Deku_Tree__Left => true,
            SpotId::KF__Outside_Deku_Tree__Right => true,
            SpotId::KF__Outside_Deku_Tree__Mouth => true,
            SpotId::KF__Shop__Entry => true,
            _ => false,
        }
    }

    fn base_edges(&self) -> Vec<(SpotId, SpotId, u32)> {
        movements::base_edges()
    }

    fn are_spots_connected(&self, sp1: SpotId, sp2: SpotId) -> bool {
        movements::are_spots_connected(sp1, sp2)
    }

    fn free_movement(sp1: SpotId, sp2: SpotId) -> Option<u32> {
        movements::free_movement(sp1, sp2)
    }

    fn best_movements(sp1: SpotId, sp2: SpotId) -> (Option<u32>, Vec<(movements::MovementState, u32)>) {
        movements::best_movements(sp1, sp2)
    }

    fn min_warp_time(&self) -> u32 {
        self.min_warp_time
    }

    fn spot_distance(a: SpotId, b: SpotId) -> f32 {
        spot_distance_or_inf(a, b)
    }

    fn spot_of_interest(&self, sp: SpotId) -> bool {
        match sp {
            SpotId::Deku_Tree__Back_Room__East | SpotId::Deku_Tree__Back_Room__Northwest | SpotId::Deku_Tree__Basement_1__Center | SpotId::Deku_Tree__Basement_1__Corner | SpotId::Deku_Tree__Basement_1__South_Door | SpotId::Deku_Tree__Basement_2__Boss_Door | SpotId::Deku_Tree__Basement_2__Pool | SpotId::Deku_Tree__Basement_Ledge__Block | SpotId::Deku_Tree__Basement_Ledge__Web | SpotId::Deku_Tree__Boss_Room__Arena | SpotId::Deku_Tree__Compass_Room__Compass | SpotId::Deku_Tree__Compass_Room__Entry | SpotId::Deku_Tree__Compass_Room__Ledge | SpotId::Deku_Tree__Floor_2__Lower | SpotId::Deku_Tree__Floor_2__Slingshot_Door | SpotId::Deku_Tree__Floor_2__Vines | SpotId::Deku_Tree__Floor_3__Door | SpotId::Deku_Tree__Lobby__Center | SpotId::Deku_Tree__Lobby__Vines | SpotId::Deku_Tree__Scrub_Room__Entry | SpotId::Deku_Tree__Scrub_Room__Rear | SpotId::Deku_Tree__Skull_Room__Entry | SpotId::Deku_Tree__Slingshot_Room__Entry | SpotId::Deku_Tree__Slingshot_Room__Slingshot | SpotId::Deku_Tree__Slingshot_Upper__Ledge | SpotId::Kak__Spider_House__Entry | SpotId::KF__Baba_Corridor__Deku_Babas | SpotId::KF__Baba_Corridor__Tree_Side | SpotId::KF__Baba_Corridor__Village_Side | SpotId::KF__Boulder_Maze__Entry | SpotId::KF__Boulder_Maze__Reward | SpotId::KF__Know_it_all_House__Entry | SpotId::KF__Kokiri_Village__Know_it_all_Porch | SpotId::KF__Kokiri_Village__Links_Porch | SpotId::KF__Kokiri_Village__Midos_Guardpost | SpotId::KF__Kokiri_Village__Midos_Porch | SpotId::KF__Kokiri_Village__Sarias_Porch | SpotId::KF__Kokiri_Village__Shop_Porch | SpotId::KF__Kokiri_Village__Training_Center | SpotId::KF__Links_House__Entry | SpotId::KF__Midos_House__Entry | SpotId::KF__Outside_Deku_Tree__Entry | SpotId::KF__Outside_Deku_Tree__Left | SpotId::KF__Outside_Deku_Tree__Mouth | SpotId::KF__Outside_Deku_Tree__Right | SpotId::KF__Shop__Entry => true,
            _ => false,
        }
    }

    fn spot_community(spot_id: SpotId) -> usize {
        spot_community(spot_id)
    }

    fn location_community(loc_id: LocationId) -> usize {
        location_community(loc_id)
    }

    fn action_community(act_id: ActionId) -> usize {
        action_community(act_id)
    }

    fn exit_community(exit_id: ExitId) -> usize {
        exit_community(exit_id)
    }

    fn same_community(spot1: SpotId, spot2: SpotId) -> bool {
        same_community(spot1, spot2)
    }

    fn get_community(spot: SpotId) -> &'static FxHashSet<SpotId> {
        get_community(spot)
    }

    fn condense_graph(&mut self) {
        self.condensed.extend(condense_graph(self));
    }

    fn get_condensed_edges_from(&self, spot_id: SpotId) -> &[CondensedEdge<Context, SpotId, ExitId>] {
        &self.condensed[spot_id]
    }
}

unsafe impl bytemuck::Zeroable for World {}

impl World {
    pub fn update_skippable_locations(&mut self) {
        let unused_items = self.get_unused_items();
        for loc in self.locations.values_mut() {
            let item = loc.item();
            let skippable = unused_item(item) || unused_items.contains(&item);
            loc.set_skippable(skippable);
        }
    }

    fn unused_by_rules(&self, item: Item) -> bool {
        match self.rule_victory {
            RuleVictory::Default => {
                match self.rule_objective {
                    RuleObjective::Gohma => {
                        matches!(item, Item::Arrows_10 | Item::Blue_Fire_Arrows | Item::Buy_Arrows_10 | Item::Buy_Arrows_30 | Item::Buy_Deku_Seeds_30 | Item::Buy_Heart | Item::Compass_Deku_Tree | Item::Defeat_Ganon | Item::Dins_Fire | Item::Farores_Wind | Item::Fire_Arrows | Item::Goron_Tunic | Item::Gossip_Stone_Deku_Left | Item::Gossip_Stone_Deku_Right | Item::Heart_Container | Item::Hookshot | Item::Hover_Boots | Item::Iron_Boots | Item::Lens_of_Truth | Item::Light_Arrows | Item::Map_Deku_Tree | Item::Megaton_Hammer | Item::Minuet_of_Forest | Item::Mirror_Shield | Item::Nayrus_Love | Item::Progressive_Wallet | Item::Recovery_Heart | Item::Triforce_Piece | Item::Zora_Tunic)
                    }
                    RuleObjective::Ganon => {
                        matches!(item, Item::Arrows_10 | Item::Blue_Fire_Arrows | Item::Buy_Arrows_10 | Item::Buy_Arrows_30 | Item::Buy_Deku_Seeds_30 | Item::Buy_Heart | Item::Compass_Deku_Tree | Item::Dins_Fire | Item::Farores_Wind | Item::Fire_Arrows | Item::Goron_Tunic | Item::Gossip_Stone_Deku_Left | Item::Gossip_Stone_Deku_Right | Item::Heart_Container | Item::Hookshot | Item::Hover_Boots | Item::Iron_Boots | Item::Kokiri_Emerald | Item::Lens_of_Truth | Item::Light_Arrows | Item::Map_Deku_Tree | Item::Megaton_Hammer | Item::Minuet_of_Forest | Item::Mirror_Shield | Item::Nayrus_Love | Item::Progressive_Wallet | Item::Recovery_Heart | Item::Triforce_Piece | Item::Zora_Tunic)
                    }
                    RuleObjective::TriforceHunt => {
                        matches!(item, Item::Arrows_10 | Item::Blue_Fire_Arrows | Item::Buy_Arrows_10 | Item::Buy_Arrows_30 | Item::Buy_Deku_Seeds_30 | Item::Buy_Heart | Item::Compass_Deku_Tree | Item::Defeat_Ganon | Item::Dins_Fire | Item::Farores_Wind | Item::Fire_Arrows | Item::Goron_Tunic | Item::Gossip_Stone_Deku_Left | Item::Gossip_Stone_Deku_Right | Item::Heart_Container | Item::Hookshot | Item::Hover_Boots | Item::Iron_Boots | Item::Kokiri_Emerald | Item::Lens_of_Truth | Item::Light_Arrows | Item::Map_Deku_Tree | Item::Megaton_Hammer | Item::Minuet_of_Forest | Item::Mirror_Shield | Item::Nayrus_Love | Item::Progressive_Wallet | Item::Recovery_Heart | Item::Zora_Tunic)
                    }
                }
            }
        }
    }

    fn get_unused_items(&self) -> FxHashSet<Item> {
        match self.rule_victory {
            RuleVictory::Default => {
                let mut set = match self.rule_objective {
                    RuleObjective::Gohma => {
                        let mut iset = FxHashSet::default();
                        iset.insert(Item::Arrows_10);
                        iset.insert(Item::Blue_Fire_Arrows);
                        iset.insert(Item::Buy_Arrows_10);
                        iset.insert(Item::Buy_Arrows_30);
                        iset.insert(Item::Buy_Deku_Seeds_30);
                        iset.insert(Item::Buy_Heart);
                        iset.insert(Item::Compass_Deku_Tree);
                        iset.insert(Item::Defeat_Ganon);
                        iset.insert(Item::Dins_Fire);
                        iset.insert(Item::Farores_Wind);
                        iset.insert(Item::Fire_Arrows);
                        iset.insert(Item::Goron_Tunic);
                        iset.insert(Item::Gossip_Stone_Deku_Left);
                        iset.insert(Item::Gossip_Stone_Deku_Right);
                        iset.insert(Item::Heart_Container);
                        iset.insert(Item::Hookshot);
                        iset.insert(Item::Hover_Boots);
                        iset.insert(Item::Iron_Boots);
                        iset.insert(Item::Lens_of_Truth);
                        iset.insert(Item::Light_Arrows);
                        iset.insert(Item::Map_Deku_Tree);
                        iset.insert(Item::Megaton_Hammer);
                        iset.insert(Item::Minuet_of_Forest);
                        iset.insert(Item::Mirror_Shield);
                        iset.insert(Item::Nayrus_Love);
                        iset.insert(Item::Progressive_Wallet);
                        iset.insert(Item::Recovery_Heart);
                        iset.insert(Item::Triforce_Piece);
                        iset.insert(Item::Zora_Tunic);
                        iset
                    }
                    RuleObjective::Ganon => {
                        let mut iset = FxHashSet::default();
                        iset.insert(Item::Arrows_10);
                        iset.insert(Item::Blue_Fire_Arrows);
                        iset.insert(Item::Buy_Arrows_10);
                        iset.insert(Item::Buy_Arrows_30);
                        iset.insert(Item::Buy_Deku_Seeds_30);
                        iset.insert(Item::Buy_Heart);
                        iset.insert(Item::Compass_Deku_Tree);
                        iset.insert(Item::Dins_Fire);
                        iset.insert(Item::Farores_Wind);
                        iset.insert(Item::Fire_Arrows);
                        iset.insert(Item::Goron_Tunic);
                        iset.insert(Item::Gossip_Stone_Deku_Left);
                        iset.insert(Item::Gossip_Stone_Deku_Right);
                        iset.insert(Item::Heart_Container);
                        iset.insert(Item::Hookshot);
                        iset.insert(Item::Hover_Boots);
                        iset.insert(Item::Iron_Boots);
                        iset.insert(Item::Kokiri_Emerald);
                        iset.insert(Item::Lens_of_Truth);
                        iset.insert(Item::Light_Arrows);
                        iset.insert(Item::Map_Deku_Tree);
                        iset.insert(Item::Megaton_Hammer);
                        iset.insert(Item::Minuet_of_Forest);
                        iset.insert(Item::Mirror_Shield);
                        iset.insert(Item::Nayrus_Love);
                        iset.insert(Item::Progressive_Wallet);
                        iset.insert(Item::Recovery_Heart);
                        iset.insert(Item::Triforce_Piece);
                        iset.insert(Item::Zora_Tunic);
                        iset
                    }
                    RuleObjective::TriforceHunt => {
                        let mut iset = FxHashSet::default();
                        iset.insert(Item::Arrows_10);
                        iset.insert(Item::Blue_Fire_Arrows);
                        iset.insert(Item::Buy_Arrows_10);
                        iset.insert(Item::Buy_Arrows_30);
                        iset.insert(Item::Buy_Deku_Seeds_30);
                        iset.insert(Item::Buy_Heart);
                        iset.insert(Item::Compass_Deku_Tree);
                        iset.insert(Item::Defeat_Ganon);
                        iset.insert(Item::Dins_Fire);
                        iset.insert(Item::Farores_Wind);
                        iset.insert(Item::Fire_Arrows);
                        iset.insert(Item::Goron_Tunic);
                        iset.insert(Item::Gossip_Stone_Deku_Left);
                        iset.insert(Item::Gossip_Stone_Deku_Right);
                        iset.insert(Item::Heart_Container);
                        iset.insert(Item::Hookshot);
                        iset.insert(Item::Hover_Boots);
                        iset.insert(Item::Iron_Boots);
                        iset.insert(Item::Kokiri_Emerald);
                        iset.insert(Item::Lens_of_Truth);
                        iset.insert(Item::Light_Arrows);
                        iset.insert(Item::Map_Deku_Tree);
                        iset.insert(Item::Megaton_Hammer);
                        iset.insert(Item::Minuet_of_Forest);
                        iset.insert(Item::Mirror_Shield);
                        iset.insert(Item::Nayrus_Love);
                        iset.insert(Item::Progressive_Wallet);
                        iset.insert(Item::Recovery_Heart);
                        iset.insert(Item::Zora_Tunic);
                        iset
                    }
                };
                set
            }
        }
    }
}
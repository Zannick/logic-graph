//! AUTOGENERATED FOR sample - MODIFICATIONS WILL BE LOST

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::*;
use crate::graph::{action::*, enums::*, exit::*, location::*};
use lazy_static::lazy_static;
use rustc_hash::{FxHashMap, FxHashSet};

lazy_static! {
static ref COMMUNITIES: Vec<FxHashSet<SpotId>> = vec![
    FxHashSet::default(),
    FxHashSet::from_iter([
        SpotId::Deku_Tree__Basement_1__Center,
        SpotId::Deku_Tree__Basement_1__Corner,
        SpotId::Deku_Tree__Compass_Room__Compass,
        SpotId::Deku_Tree__Compass_Room__Ledge,
        SpotId::Deku_Tree__Floor_2__Vines,
        SpotId::Deku_Tree__Lobby__Center,
        SpotId::Deku_Tree__Slingshot_Room__Slingshot,
        SpotId::Deku_Tree__Slingshot_Upper__Ledge,
    ]),
    FxHashSet::from_iter([
        SpotId::KF__Baba_Corridor__Deku_Babas,
        SpotId::KF__Outside_Deku_Tree__Left,
        SpotId::KF__Outside_Deku_Tree__Right,
    ]),
    FxHashSet::from_iter([
        SpotId::KF__Boulder_Maze__Reward,
        SpotId::KF__Kokiri_Village__Training_Center,
        SpotId::KF__Midos_House__Entry,
        SpotId::KF__Shop__Entry,
        SpotId::Kak__Spider_House__Entry,
    ]),
];
}

pub fn spot_community(spot_id: SpotId) -> usize {
    match spot_id {
        SpotId::Deku_Tree__Basement_1__Center => 1,
        SpotId::Deku_Tree__Basement_1__Corner => 1,
        SpotId::Deku_Tree__Compass_Room__Compass => 1,
        SpotId::Deku_Tree__Compass_Room__Ledge => 1,
        SpotId::Deku_Tree__Floor_2__Vines => 1,
        SpotId::Deku_Tree__Lobby__Center => 1,
        SpotId::Deku_Tree__Slingshot_Room__Slingshot => 1,
        SpotId::Deku_Tree__Slingshot_Upper__Ledge => 1,
        SpotId::KF__Baba_Corridor__Deku_Babas => 2,
        SpotId::KF__Outside_Deku_Tree__Left => 2,
        SpotId::KF__Outside_Deku_Tree__Right => 2,
        SpotId::KF__Boulder_Maze__Reward => 3,
        SpotId::KF__Kokiri_Village__Training_Center => 3,
        SpotId::KF__Midos_House__Entry => 3,
        SpotId::KF__Shop__Entry => 3,
        SpotId::Kak__Spider_House__Entry => 3,
        _ => 0,
    }
}

pub fn location_community(loc_id: LocationId) -> usize {
    spot_community(get_location_spot(loc_id))
}

pub fn action_community(act_id: ActionId) -> usize {
    spot_community(get_action_spot(act_id))
}

pub fn exit_community(exit_id: ExitId) -> usize {
    spot_community(get_exit_spot(exit_id))
}

pub fn same_community(spot1: SpotId, spot2: SpotId) -> bool {
    let c1 = spot_community(spot1);
    c1 != 0 && c1 == spot_community(spot2)
}

pub fn get_community(spot: SpotId) -> &'static FxHashSet<SpotId> {
    &COMMUNITIES[spot_community(spot)]
}
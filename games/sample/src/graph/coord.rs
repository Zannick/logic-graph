//! AUTOGENERATED FOR sample - MODIFICATIONS WILL BE LOST

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::graph::enums::*;
use enum_map::Enum;

static COORDS: [(f32, f32); 52] = [
    (f32::NAN, f32::NAN),
    (2.0, 1.0),
    (0.0, 0.0),
    (1.0, 2.0),
    (2.0, 1.0),
    (2.0, 0.0),
    (2.0, 2.0),
    (0.0, 0.0),
    (0.0, 2.0),
    (0.0, 0.0),
    (0.0, 1.0),
    (0.0, 1.0),
    (0.0, 0.0),
    (0.0, 0.0),
    (2.0, 0.0),
    (1.0, 1.0),
    (0.0, 2.0),
    (0.0, 0.0),
    (1.0, 1.0),
    (2.0, 1.0),
    (0.0, 1.0),
    (0.0, 1.0),
    (0.0, 0.0),
    (0.0, 2.0),
    (0.0, 0.0),
    (0.0, 2.0),
    (f32::NAN, f32::NAN),
    (0.0, 0.0),
    (0.0, 1.0),
    (f32::NAN, f32::NAN),
    (28.0, 17.0),
    (31.0, 14.0),
    (24.0, 20.0),
    (8.0, 28.0),
    (10.0, 31.0),
    (f32::NAN, f32::NAN),
    (7.0, 21.0),
    (12.0, 26.0),
    (23.0, 20.0),
    (10.0, 18.0),
    (20.0, 22.0),
    (20.0, 18.0),
    (8.0, 25.0),
    (0.0, 2.0),
    (0.0, 0.0),
    (f32::NAN, f32::NAN),
    (32.0, 14.0),
    (39.0, 10.0),
    (39.0, 14.0),
    (42.0, 17.0),
    (f32::NAN, f32::NAN),
    (f32::NAN, f32::NAN),
];

pub fn coordinate(spot: SpotId) -> Result<(f32, f32), String> {
    let coord = COORDS[spot.into_usize()];
    if coord.0.is_nan() {
        Err(format!("Spot has no coordinate: {}", spot))
    } else {
        Ok(coord)
    }
}

pub fn distance(a: (f32, f32), b: (f32, f32)) -> f32 {
    ((a.0 - b.0).powi(2) + (a.1 - b.1).powi(2)).sqrt()
}

pub fn spot_distance(a: SpotId, b: SpotId) -> f32 {
    distance(coordinate(a).unwrap(), coordinate(b).unwrap())
}

pub fn spot_distance_or_inf(a: SpotId, b: SpotId) -> f32 {
    match (coordinate(a), coordinate(b)) {
        (Ok(c1), Ok(c2)) => distance(c1, c2),
        _ => f32::INFINITY,
    }
}

pub fn diagonal_speed(a: (f32, f32), b: (f32, f32), x_speed: f32, y_speed: f32) -> f32 {
    let dx = a.0 - b.0;
    let dy = a.1 - b.1;
    let tx = dx / x_speed;
    let ty = dy / y_speed;
    (tx.powi(2) + ty.powi(2)).sqrt()
}

pub fn diagonal_speed_spots(a: SpotId, b: SpotId, x_speed: f32, y_speed: f32) -> f32 {
    diagonal_speed(coordinate(a).unwrap(), coordinate(b).unwrap(), x_speed, y_speed)
}
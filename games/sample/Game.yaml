# A simpler version of OoT for initial testing purposes
name: sample

start:  # default initial context, global context values
  position: KF > Link's House > Start Point
  # where the player will warp to. Place names are formatted
  # Region (name or short) > Area > Spot
  save: KF > Link's House > Start Point
  # game-specific stuff
  child: True
  tod: day  # affected by realtime will be tough to handle
  rupees: 0  # the first numerical context item is the default currency

objectives:  # win conditions
  Ganon: Defeat_Ganon
  Triforce Hunt: Triforce_Piece{triforce_count}
  Gohma: Kokiri_Emerald
  Deku Full Clear: $all_region_checks(`Deku Tree`)

movements:
  # Movement types:
  #   free: move freely in 2d (3D games like OoT qualify)
  #   xy: move orthogonally (at the same speed)
  #   x: move L/R (separately from U/D)
  #   y: move U/D (separately from L/R)
  # Side-scrollers should mostly use x.
  # In general, recommend using separate Areas instead of modeling jump/fall.
  # Speed is based on the distance moveable in the unit time; even though you don't
  # need to use the same coordinate system in each Area, the distances must match.
  default:
    free: 1
  # Movement types other than default need to have a req: rule
  # Potentially something like areas: as well to limit it, until we can have a Place
  # type we can write in a req: rule

time:
  # If time for a check or exit is unspecified, the time will be assumed
  # based on the tags (at most one) or the default.
  default: 1
  big: 3
  bluewarp: 6
  load: 2

warps:
  save:
    time: 8
    to: ^save
  Minuet:
    time: 5
    req: $can_play(Minuet_of_Forest)
    to: KF > Kokiri Village > Shop Porch  # Sacred Forest Meadow > Temple Front > Warp Point

actions:
  Change Time:
    time: 2
    price: 10
    do: ^tod = MATCH ^tod { 'day' => 'night', 'night' => 'day', _ => 'day' }
    cycle: 2  # This is here as a placeholder until we implement CYCLE

helpers:
  $is_child: ^child
  $is_adult: NOT ^child
  # these are access rules and not traversal rules
  # so they assume the items are permanent after acquisition
  $Deku_Shield: Buy_Deku_Shield or Deku_Shield_Drop
  $Nuts: Buy_Deku_Nut_5 or Buy_Deku_Nut_10 or Deku_Nut_Drop
  $Sticks: Buy_Deku_Stick_1 or Deku_Stick_Drop

  # If the helper is meant to return a number and not a bool, it must be noted
  # with the rule (type, essentially) after the name:
  $wallet_max:num: PER Progressive_Wallet { 3 => 999, 2 => 500, 1 => 200, _ => 99 }

  $has_shield: ($is_adult and Hylian_Shield) or ($is_child and $Deku_Shield)
  # Argument types will be inferred based on usage.
  $can_play(song): Ocarina and ^song
  $can_jumpslash: $is_adult or $Sticks or Kokiri_Sword

  $can_use(item): >
    IF ($_is_magic_item(^item)) { ^item and Magic_Meter }
    ELSE IF ($_is_adult_item(^item)) { $is_adult and ^item }
    ELSE IF ($_is_magic_arrow(^item)) { $is_adult and ^item and Bow and Magic_Meter }
    ELSE IF ($_is_child_item(^item)) { $is_child and ^item }
  $_is_magic_item(item): ^item IN [Dins_Fire, Farores_Wind, Nayrus_Love, Lens_of_Truth]
  $_is_adult_item(item): ^item IN [Bow, Megaton_Hammer, Iron_Boots, Hover_Boots,
    Hookshot, Goron_Tunic, Zora_Tunic, Mirror_Shield]
  $_is_child_item(item): ^item IN [Slingshot, Boomerang, Kokiri_Sword]
  $_is_magic_arrow(item): ^item IN [Fire_Arrows, Light_Arrows, Blue_Fire_Arrows]

  $has_explosives: Bombs
  $can_blast_or_smash: $has_explosives or $can_use(Megaton_Hammer)
  $can_child_attack: $is_child and (Slingshot or Boomerang or $Sticks or Kokiri_Sword)
  $has_fire_source: $can_use(Dins_Fire) or $can_use(Fire_Arrows)
  $has_fire_source_with_torch: $has_fire_source or ($is_child and $Sticks)


collect:
  Rupee_1: ^rupees = $min(^rupees + 1, $wallet_max)
  Rupees_5: ^rupees = $min(^rupees + 5, $wallet_max)
    #Rupees_10: ^rupees = $max(^rupees + 10, $wallet_max)
    #Rupees_20: ^rupees = $max(^rupees + 20, $wallet_max)
  Rupees_50: ^rupees = $min(^rupees + 50, $wallet_max)


settings:
  triforce_count:
    max: 1024
  logic_deku_b1_skip:
    type: bool


//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::*;
use crate::graph::{World, enums::*};
use crate::observe::FullObservation;
use crate::prices::Currency;
use crate::rules;
use analyzer::context::Ctx;
use analyzer::world;
use enum_map::{Enum, EnumMap};
use rustc_hash::FxHashMap;

#[derive(Copy, Clone, Debug)]
pub struct Action {
    id: ActionId,
    time: u32,
    price: Currency,
}

impl world::Accessible for Action {
    type Context = Context;
    type Currency = Currency;
    fn can_access(&self, ctx: &Context, world: &World) -> bool {
        ctx.can_afford(&self.price) && match self.id {
            ActionId::Amagi__East_Lake__East_15_Flat__Attract_Portal_to_Arch => rules::access_invoke_hover_and_underwater_movement_and_breach_attractor_and_anuman_and_portal_eq_portal_start(ctx, world),
            ActionId::Amagi__East_Lake__East_15_Lower__Attract_Portal_to_Arch => rules::access_invoke_hover_and_underwater_movement_and_breach_attractor_and_anuman_and_portal_eq_portal_start(ctx, world),
            ActionId::Amagi__East_Lake__East_15_Lower_Hover__Attract_Portal_to_Arch => rules::access_invoke_hook_and_invoke_hover_and_underwater_movement_and_breach_attractor_and_anuman_and_portal_eq_portal_start(ctx, world),
            ActionId::Amagi__East_Lake__East_15_Upper_Hover__Attract_Portal_to_Arch => rules::access_invoke_hook_and_invoke_hover_and_underwater_movement_and_breach_attractor_and_anuman_and_portal_eq_portal_start(ctx, world),
            ActionId::Amagi__East_Lake__Save_Point__Save => true,
            ActionId::Amagi__Main_Area__Broken_Wall__Throw_Drone_West => rules::access_invoke_can_deploy_and_drone_hover_and_slingshot_hook(ctx, world),
            ActionId::Amagi__Main_Area__Carving__Key_Combo => rules::access_amagi__main_area__carving__key_combo__req(ctx, world),
            ActionId::Amagi__Main_Area__Catwalk_Center__Throw_Drone_East => rules::access_invoke_can_deploy_and_drone_hover(ctx, world),
            ActionId::Amagi__Main_Area__Catwalk_Center__Throw_Drone_West => rules::access_invoke_can_deploy_and_drone_hover(ctx, world),
            ActionId::Amagi__Main_Area__Platform_3__Throw_Drone_East => rules::access_invoke_can_deploy_and_drone_hover(ctx, world),
            ActionId::Amagi__Main_Area__Platform_3__Throw_Drone_West => rules::access_invoke_can_deploy_and_drone_hover(ctx, world),
            ActionId::Amagi__Main_Area__Save_Point__Save => true,
            ActionId::Amagi__Main_Area__Wall_Stuck_Spot__Throw_Drone_West => rules::access_invoke_can_deploy_and_drone_hover_and_slingshot_hook(ctx, world),
            ActionId::Amagi_Breach__East_Entrance__Save_Point__Save => true,
            ActionId::Amagi_Breach__East_Ruins__Save_Point__Save => true,
            ActionId::Amagi_Breach__Upper_Lake__Save_Point__Save => true,
            ActionId::Annuna__Center_Save__Save_Point__Save => true,
            ActionId::Annuna__East_Bridge__Center_Gap_East__Throw_Drone_into_Tower => rules::access_invoke_can_deploy_and_slingshot_hook_and_drone_hover(ctx, world),
            ActionId::Annuna__East_Bridge__Center_Gap_West__Throw_Drone_into_Tower => rules::access_invoke_can_deploy_and_slingshot_hook_and_drone_hover(ctx, world),
            ActionId::Annuna__East_Bridge__Tower_East_Ledge__Enter_Combo => rules::access_annuna__east_bridge__tower_east_ledge__enter_combo__req(ctx, world),
            ActionId::Annuna__East_Bridge__Tower_Opening__Climb_and_Throw_Drone => rules::access_invoke_climb_and_invoke_can_deploy_and_drone_hover_and_slingshot_hook(ctx, world),
            ActionId::Annuna__East_Bridge__Tower_Secret__Enter_Combo => rules::access_annuna__east_bridge__tower_secret__enter_combo__req(ctx, world),
            ActionId::Annuna__East_Bridge__Tower_West_Ledge__Enter_Combo => rules::access_annuna__east_bridge__tower_west_ledge__enter_combo__req(ctx, world),
            ActionId::Annuna__Factory_Entrance__Save_Point__Save => true,
            ActionId::Annuna__Filter_Teleporter__Northeast_Ministair__Throw_Drone_Up => rules::access_invoke_can_deploy_and_slingshot_hook(ctx, world),
            ActionId::Annuna__Filter_Teleporter__Shaft_Top__Throw_Drone => rules::access_invoke_can_deploy(ctx, world),
            ActionId::Annuna__Final_Save__Save_Point__Save => true,
            ActionId::Annuna__Mirror_Match__Save_Point__Save => rules::access_defeat_indra(ctx, world),
            ActionId::Annuna__Upper_Save__Save_Point__Save => true,
            ActionId::Annuna__Vertical_Room__Door_Switch__Open_Door => rules::access_invoke_open(ctx, world),
            ActionId::Annuna__Vertical_Room__Save_Point__Save => true,
            ActionId::Annuna__West_Climb__Switch_Ledge__Open_Door => rules::access_annuna__west_climb__switch_ledge__open_door__req(ctx, world),
            ActionId::Ebih__Base_Camp__Left_Platform__Move_Left_Platform => rules::access_ebih__base_camp__left_platform__move_left_platform__req(ctx, world),
            ActionId::Ebih__Base_Camp__Left_Platform_Moved__Reset_Left_Platform => rules::access_ebih__base_camp__left_platform_moved__reset_left_platform__req(ctx, world),
            ActionId::Ebih__Base_Camp__Save_Point__Save => true,
            ActionId::Ebih__Drone_Room__Moving_Platform__Throw_Drone => rules::access_invoke_can_deploy(ctx, world),
            ActionId::Ebih__Drone_Room__Pit_Left__Activate_Lift => rules::access_ebih__drone_room__pit_left__activate_lift__req(ctx, world),
            ActionId::Ebih__Drone_Room__Pit_Left__Activate_Lift_But_Get_Off_Early => rules::access_ebih__drone_room__pit_left__activate_lift_but_get_off_early__req(ctx, world),
            ActionId::Ebih__Drone_Room__Portal_Exit__Activate_Platform => rules::access_ebih__drone_room__portal_exit__activate_platform__req(ctx, world),
            ActionId::Ebih__Ebih_East__Dispenser__Activate_Lift => rules::access_ebih__ebih_east__dispenser__activate_lift__req(ctx, world),
            ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Lift => rules::access_ebih__ebih_east__lower_moving_platform__activate_lift__req(ctx, world),
            ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Ride => rules::access_ebih__ebih_east__lower_moving_platform__activate_ride__req(ctx, world),
            ActionId::Ebih__Ebih_East__Moving_Platform__Activate_Ride => rules::access_ebih__ebih_east__moving_platform__activate_ride__req(ctx, world),
            ActionId::Ebih__Ebih_West__Below_Door__Open_Door => rules::access_invoke_open(ctx, world),
            ActionId::Ebih__Ebih_West__Left_of_Switch__Open_Door => rules::access_infect(ctx, world),
            ActionId::Ebih__Ebih_West__Lower_Save__Save => true,
            ActionId::Ebih__Ebih_West__Medium_High_Platform__Throw_Drone_Long => rules::access_invoke_can_deploy(ctx, world),
            ActionId::Ebih__Ebih_West__Mid_Save__Save => true,
            ActionId::Ebih__Ebih_West__Upper_Save__Save => true,
            ActionId::Ebih__Grid_25_10_12__Door_Left__Open_Door => rules::access_invoke_open(ctx, world),
            ActionId::Ebih__Grid_25_10_12__East_11__Open_Door => rules::access_invoke_open(ctx, world),
            ActionId::Ebih__Hidden_Portal__Save_Point__Save => true,
            ActionId::Ebih__Truck_Gate__Portal_Stand__Open_Door => rules::access_ebih__truck_gate__portal_stand__open_door__req(ctx, world),
            ActionId::Ebih__Truck_Gate__Switch__Open_Door => rules::access_ebih__truck_gate__switch__open_door__req(ctx, world),
            ActionId::Ebih__Vertical_Interchange__West_13__Open_Door => rules::access_ebih__vertical_interchange__west_13__open_door__req(ctx, world),
            ActionId::Ebih__Waterfall__Below_Left_Switch__Open_Door => rules::access_invoke_open(ctx, world),
            ActionId::Ebih__Waterfall__East_Door_Right__Open_Door => rules::access_invoke_open(ctx, world),
            ActionId::Ebih__Waterfall__East_Horizontal_Door__Open_Door => rules::access_invoke_open_and_invoke_range2(ctx, world),
            ActionId::Ebih__Waterfall__East_Switch__Open_Door => rules::access_invoke_open(ctx, world),
            ActionId::Ebih__Waterfall__Ledge_Below_East_Door__Open_Door => rules::access_invoke_open_and_invoke_range3(ctx, world),
            ActionId::Ebih__Waterfall__Ledge_Below_Hole__Throw_Drone => rules::access_invoke_can_deploy(ctx, world),
            ActionId::Ebih__Waterfall__Platform_by_East_Door__Open_Door => rules::access_invoke_open_and_invoke_range2(ctx, world),
            ActionId::Ebih__Waterfall__West_8__Open_Door => rules::access_invoke_open(ctx, world),
            ActionId::Ebih_Breach__In_n_Out__Save_Point__Save => true,
            ActionId::Ebih_Breach__Portals_101__Save_Point__Save => true,
            ActionId::Ebih_Breach__Rock_Block__Save_Point__Save => true,
            ActionId::Emergence__Camp_Exterior__Save_Point__Save => true,
            ActionId::Emergence__Storage__At_Door__Open_Door => rules::access_emergence__storage__at_door__open_door__req(ctx, world),
            ActionId::Emergence__Storage__Portal_Stand__Open_Door => rules::access_emergence__storage__portal_stand__open_door__req(ctx, world),
            ActionId::Giguna__Carnelian__Lower_Susar__Caught => rules::access_giguna__carnelian__lower_susar__caught__req(ctx, world),
            ActionId::Giguna__Carnelian__Lower_Susar__Hack => rules::access_giguna__carnelian__lower_susar__hack__req(ctx, world),
            ActionId::Giguna__Carnelian__Switch__Open_Door => rules::access_giguna__carnelian__switch__open_door__req(ctx, world),
            ActionId::Giguna__Carnelian__Upper_Susar__Caught => rules::access_giguna__carnelian__upper_susar__caught__req(ctx, world),
            ActionId::Giguna__Carnelian__Upper_Susar__Hack => rules::access_giguna__carnelian__upper_susar__hack__req(ctx, world),
            ActionId::Giguna__Clouds__Platform_Early__Continue_to_Early_Portal => rules::access_giguna__clouds__platform_early__continue_to_early_portal__req(ctx, world),
            ActionId::Giguna__Clouds__Platform_Early__Deploy_and_Continue_to_Early_Portal => rules::access_giguna__clouds__platform_early__deploy_and_continue_to_early_portal__req(ctx, world),
            ActionId::Giguna__Clouds__Platform_Start__Hack_and_Maybe_Get_Off_Early => rules::access_giguna__clouds__platform_start__hack_and_maybe_get_off_early__req(ctx, world),
            ActionId::Giguna__Clouds__Platform_Start__Hack_and_Ride_to_Portal => rules::access_giguna__clouds__platform_start__hack_and_ride_to_portal__req(ctx, world),
            ActionId::Giguna__Clouds__Platform_Start__Hack_Deploy_Ride_to_Portal => rules::access_giguna__clouds__platform_start__hack_deploy_ride_to_portal__req(ctx, world),
            ActionId::Giguna__East_Caverns__Arc_Passage__Enter_Combo => rules::access_giguna__east_caverns__arc_passage__enter_combo__req(ctx, world),
            ActionId::Giguna__East_Caverns__Carving__Enter_Combo => rules::access_giguna__east_caverns__carving__enter_combo__req(ctx, world),
            ActionId::Giguna__East_Caverns__Lower_Susar__Caught => rules::access_giguna__east_caverns__lower_susar__caught__req(ctx, world),
            ActionId::Giguna__East_Caverns__Lower_Susar__Hack => rules::access_giguna__east_caverns__lower_susar__hack__req(ctx, world),
            ActionId::Giguna__East_Caverns__Mid_Susar__Caught => rules::access_giguna__east_caverns__mid_susar__caught__req(ctx, world),
            ActionId::Giguna__East_Caverns__Mid_Susar__Hack => rules::access_giguna__east_caverns__mid_susar__hack__req(ctx, world),
            ActionId::Giguna__East_Caverns__Statues_Ledge__Enter_Combo => rules::access_giguna__east_caverns__statues_ledge__enter_combo__req(ctx, world),
            ActionId::Giguna__East_Caverns__Statues_Ledge__Open_Door => rules::access_giguna__east_caverns__statues_ledge__open_door__req(ctx, world),
            ActionId::Giguna__East_Caverns__Switch__Open_Door => rules::access_giguna__east_caverns__switch__open_door__req(ctx, world),
            ActionId::Giguna__East_Caverns__Upper_Susar__Caught => rules::access_giguna__east_caverns__upper_susar__caught__req(ctx, world),
            ActionId::Giguna__East_Caverns__Upper_Susar_Jump_from_East__Caught => rules::access_giguna__east_caverns__upper_susar_jump_from_east__caught__req(ctx, world),
            ActionId::Giguna__East_Caverns__Upper_Susar_Jump_from_East__Hack => rules::access_giguna__east_caverns__upper_susar_jump_from_east__hack__req(ctx, world),
            ActionId::Giguna__East_Caverns__Upper_Susar_Mid_jump__Hack => rules::access_giguna__east_caverns__upper_susar_mid_jump__hack__req(ctx, world),
            ActionId::Giguna__East_Caverns__West_14__Enter_Combo => rules::access_giguna__east_caverns__west_14__enter_combo__req(ctx, world),
            ActionId::Giguna__East_Caverns__West_16__Open_Door => rules::access_giguna__east_caverns__west_16__open_door__req(ctx, world),
            ActionId::Giguna__Gateway__Flask_Ledge__Open_Door => rules::access_invoke_open(ctx, world),
            ActionId::Giguna__Gateway__One_Jump__Open_Door => rules::access_invoke_open_and_invoke_range2(ctx, world),
            ActionId::Giguna__Giguna_Base__Save_Point__Save => true,
            ActionId::Giguna__Giguna_Base__Stone_Knob__Throw_Drone => rules::access_invoke_can_deploy(ctx, world),
            ActionId::Giguna__Giguna_Base__Switch_Distance_1__Open_Door => rules::access_invoke_open(ctx, world),
            ActionId::Giguna__Giguna_Base__Switch_Distance_2__Open_Door => rules::access_invoke_open_and_invoke_range1(ctx, world),
            ActionId::Giguna__Giguna_Base__Switch_Distance_3__Open_Door => rules::access_invoke_open_and_invoke_range2(ctx, world),
            ActionId::Giguna__Giguna_Base__Switch_Distance_4__Open_Door => rules::access_invoke_open_and_invoke_range3(ctx, world),
            ActionId::Giguna__Giguna_Northeast__Gate_Left__Throw_Drone => rules::access_invoke_can_deploy_and_slingshot_hook(ctx, world),
            ActionId::Giguna__Giguna_Northeast__Right_Column__Open_Door_From_Afar => rules::access_giguna__giguna_northeast__right_column__open_door_from_afar__req(ctx, world),
            ActionId::Giguna__Giguna_Northeast__Save_Point__Save => true,
            ActionId::Giguna__Giguna_Northeast__Switch__Open_Door => rules::access_giguna__giguna_northeast__switch__open_door__req(ctx, world),
            ActionId::Giguna__Labyrinth__Door_Ledge__Open_Door => rules::access_invoke_open_and_invoke_range2(ctx, world),
            ActionId::Giguna__Labyrinth__Save_Point__Save => true,
            ActionId::Giguna__Labyrinth__Switch_Ledge__Open_Door => rules::access_invoke_open(ctx, world),
            ActionId::Giguna__Ruins_Top__Save_Point__Save => true,
            ActionId::Giguna__Ruins_Top__Switch__Open_Doors => rules::access_invoke_open(ctx, world),
            ActionId::Giguna__Ruins_Top__Turret_Balcony_West__Throw_Drone_onto_Tower => rules::access_invoke_grab_and_invoke_can_deploy(ctx, world),
            ActionId::Giguna__Ruins_West__Lower_Ledge__Destroy_Kishib => rules::access_giguna__ruins_west__lower_ledge__destroy_kishib__req(ctx, world),
            ActionId::Giguna__Ruins_West__Lower_Ledge__Hack_Kishib => rules::access_giguna__ruins_west__lower_ledge__hack_kishib__req(ctx, world),
            ActionId::Giguna__Ruins_West__Save_Point__Save => true,
            ActionId::Giguna__Separator__Platform__Deploy_to_Switch => rules::access_invoke_can_deploy_and___drone_hover_or_slingshot_hook(ctx, world),
            ActionId::Giguna__Separator__Save_Point__Save => true,
            ActionId::Giguna__Wasteland__Middle_Cliff__Throw_Drone => rules::access_invoke_can_deploy_and_slingshot_hook(ctx, world),
            ActionId::Giguna__West_Caverns__East_Susar__Caught => rules::access_giguna__west_caverns__east_susar__caught__req(ctx, world),
            ActionId::Giguna__West_Caverns__East_Susar__Hack => rules::access_giguna__west_caverns__east_susar__hack__req(ctx, world),
            ActionId::Giguna__West_Caverns__Small_Platform__Throw_Drone_Up => rules::access_invoke_can_deploy(ctx, world),
            ActionId::Giguna_Breach__East__Save_Point__Save => true,
            ActionId::Giguna_Breach__Emergence__Save_Point__Save => true,
            ActionId::Giguna_Breach__Labyrinth__Save_Point__Save => true,
            ActionId::Giguna_Breach__Peak__Save_Point__Save => true,
            ActionId::Giguna_Breach__South__Save_Point__Save => true,
            ActionId::Giguna_Breach__SW_Save__Save_Point__Save => true,
            ActionId::Giguna_Breach__SW_Save__West_11__Open_Door => rules::access_giguna_breach__sw_save__west_11__open_door__req(ctx, world),
            ActionId::Glacier__Dock_Outside__Lower_Platforms__Throw_Drone => rules::access_invoke_can_deploy_and_drone_hover(ctx, world),
            ActionId::Glacier__Dock_Outside__Ruins_Platform__Throw_Drone_Up => rules::access_invoke_can_deploy_and_drone_hover(ctx, world),
            ActionId::Glacier__Hammonds_End__Switch_from_Ledge__Open_Doors => rules::access_invoke_open_and_invoke_range2(ctx, world),
            ActionId::Glacier__Hammonds_End__Switch_Near__Open_Doors => rules::access_invoke_open(ctx, world),
            ActionId::Glacier__Hammonds_End__Upper_Floor__Move_Portal_to_Lower_West => rules::access_breach_attractor_and_anuman(ctx, world),
            ActionId::Glacier__Hammonds_End__Upper_Floor__Move_Portal_to_Note => rules::access_breach_attractor_and_anuman(ctx, world),
            ActionId::Glacier__Hammonds_End__Upper_Right_Mid_air__Move_Portal_to_Corner => rules::access_breach_attractor_and_mode_eq_drone_and_indra_within_annuna_gt_filter_teleporter_gt_shaft_top(ctx, world),
            ActionId::Glacier__Hammonds_End__Upper_Right_Pedestal__Move_Portal_to_Lower_West => rules::access_breach_attractor_and_anuman(ctx, world),
            ActionId::Glacier__Hammonds_End__Upper_Right_Pedestal__Move_Portal_to_Note => rules::access_breach_attractor_and_anuman(ctx, world),
            ActionId::Glacier__Hammonds_End__West_11__Open_Doors => rules::access_invoke_open(ctx, world),
            ActionId::Glacier__Revival__Save_Point__Save => true,
            ActionId::Glacier__Revival__Save_Point__Throw_Drone_West => rules::access_invoke_can_deploy_and_drone_hover(ctx, world),
            ActionId::Glacier__The_Big_Drop__Solid_Rock__Careful_Break => true,
            ActionId::Glacier__Vertical_Room__Lower_Switch__Open_Lower_Gatestones => rules::access_invoke_open(ctx, world),
            ActionId::Glacier__Vertical_Room__Upper_Switch__Open_Gate => rules::access_invoke_open(ctx, world),
            ActionId::Glacier_Breach__Angry_Lions__North__Summon_Portal_to_Second_Platform => rules::access_breach_attractor(ctx, world),
            ActionId::Glacier_Breach__Angry_Lions__North__Summon_Portal_to_Top_Platform => rules::access_breach_attractor(ctx, world),
            ActionId::Glacier_Breach__Guarded_Corridor__Save_Point__Save => true,
            ActionId::Glacier_Breach__Hammonds_Breach__Save_Point__Save => true,
            ActionId::Glacier_Breach__Save_and_Exit__Save_Point__Save => true,
            ActionId::Glacier_Breach__South_Save__Save_Point__Save => true,
            ActionId::Glacier_Breach__West_Save__Save_Point__Save => true,
            ActionId::Global__Become_Drone => rules::access_not_within_menu_and_anuman_and_mode_ne_drone(ctx, world),
            ActionId::Global__Become_Indra => rules::access_not_within_menu_and_realm_ne_breach_and_anuman_and_mode_eq_drone(ctx, world),
            ActionId::Global__Deploy_Drone => rules::access_not_within_menu_and_invoke_can_deploy(ctx, world),
            ActionId::Global__Move_Portal_Here => rules::access_not_within_menu_and_invoke_attract_and_portal_ne_invoke_default_and_portal_ne_position(ctx, world),
            ActionId::Global__Recall_Drone => rules::access_not_within_menu_and_realm_ne_breach_and_invoke_can_recall(ctx, world),
            ActionId::Global__Recall_Fast_Travel => rules::access_allow_warps_and_not_within_menu_and_invoke_ft_main_and_invoke_can_recall_and___map_spot_within_menu_gt_kiengir_map_and_not_apocalypse_bomb(ctx, world),
            ActionId::Interior__Cave_Behind_Waterfall__Middle__Throw_Drone => rules::access_invoke_can_deploy(ctx, world),
            ActionId::Interior__Emergence_Hangar__Freight_Elevator__Exit_Emergence => true,
            ActionId::Interior__Facility_Interior__Freight_Elevator__Enter_Emergence => true,
            ActionId::Interior__Observatory__East_Staircase_Top__Infinite_Climb_with_Hook => rules::access_invoke_infinite_climb_and_slingshot_hook(ctx, world),
            ActionId::Irikar__Basement_Portal__Moving_Platform_Start__Activate_Platform => rules::access_invoke_activate(ctx, world),
            ActionId::Irikar__Beach_Save__Save_Point__Save => true,
            ActionId::Irikar__Hub__Collapsed_Column__Shockwave_Wall => rules::access_not_irikar_royal_storage_wall_and_invoke_shockwave_and_not_invoke_visited__irikar_gt_hub_gt_collapsed_column_gt_shockwave_to_get_item(ctx, world),
            ActionId::Irikar__Hub__East_Rim__Throw_Drone_Far_East_High => rules::access_invoke_can_deploy_and_drone_hover(ctx, world),
            ActionId::Irikar__Hub__East_Rim__Throw_Drone_Far_East_Low => rules::access_invoke_can_deploy_and_drone_hover(ctx, world),
            ActionId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall => rules::access_not_irikar_royal_storage_wall_and_invoke_shockwave(ctx, world),
            ActionId::Irikar__Hub__Save_Point__Save => true,
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Far_East_High => rules::access_invoke_can_deploy_and_drone_hover(ctx, world),
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Far_East_Low => rules::access_invoke_can_deploy_and_drone_hover(ctx, world),
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Further_East_and_Low => rules::access_invoke_can_deploy_and_drone_hover(ctx, world),
            ActionId::Irikar__Midwest__Left_Platform_Start__Hack_and_Ride => rules::access_irikar__midwest__left_platform_start__hack_and_ride__req(ctx, world),
            ActionId::Irikar__Midwest__Right_Platform_Start__Hack_and_Ride_Platform => rules::access_irikar__midwest__right_platform_start__hack_and_ride_platform__req(ctx, world),
            ActionId::Irikar__Midwest__Save_Point__Save => true,
            ActionId::Irikar_Breach__Basement_Save__Save_Point__Save => true,
            ActionId::Irikar_Breach__Corridor__Save_Point__Save => true,
            ActionId::Uhrum__Annuna_Corridor__Between_Two_Flowers__Throw_Drone_Not_As_High => rules::access_invoke_can_deploy(ctx, world),
            ActionId::Uhrum__Annuna_Corridor__Between_Two_Flowers__Throw_Drone_Up => rules::access_invoke_can_deploy_and_drone_hover(ctx, world),
            ActionId::Uhrum__Annuna_Corridor__Save_Point__Save => true,
            ActionId::Uhrum__Emergence_Save__Save_Point__Save => true,
            ActionId::Uhrum__Save_Room__Save_Point__Save => true,
            ActionId::Uhrum__Waterfalls__Center_Island_Middle__Throw_Drone_Up => rules::access_invoke_can_deploy_and_slingshot_hook(ctx, world),
            ActionId::Uhrum__West_Entrance__Save_Point__Save => true,
            ActionId::Uhrum_Breach__East_Glitch__Save_Point__Save => true,
        }
    }
    fn observe_access(&self, ctx: &Context, world: &World, full_obs: &mut FullObservation) -> bool {
        ctx.observe_afford(&self.price, full_obs);
        match self.id {
            ActionId::Amagi__East_Lake__East_15_Flat__Attract_Portal_to_Arch => rules::observe_access_invoke_hover_and_underwater_movement_and_breach_attractor_and_anuman_and_portal_eq_portal_start(ctx, world, full_obs),
            ActionId::Amagi__East_Lake__East_15_Lower__Attract_Portal_to_Arch => rules::observe_access_invoke_hover_and_underwater_movement_and_breach_attractor_and_anuman_and_portal_eq_portal_start(ctx, world, full_obs),
            ActionId::Amagi__East_Lake__East_15_Lower_Hover__Attract_Portal_to_Arch => rules::observe_access_invoke_hook_and_invoke_hover_and_underwater_movement_and_breach_attractor_and_anuman_and_portal_eq_portal_start(ctx, world, full_obs),
            ActionId::Amagi__East_Lake__East_15_Upper_Hover__Attract_Portal_to_Arch => rules::observe_access_invoke_hook_and_invoke_hover_and_underwater_movement_and_breach_attractor_and_anuman_and_portal_eq_portal_start(ctx, world, full_obs),
            ActionId::Amagi__Main_Area__Broken_Wall__Throw_Drone_West => rules::observe_access_invoke_can_deploy_and_drone_hover_and_slingshot_hook(ctx, world, full_obs),
            ActionId::Amagi__Main_Area__Carving__Key_Combo => rules::observe_access_amagi__main_area__carving__key_combo__req(ctx, world, full_obs),
            ActionId::Amagi__Main_Area__Catwalk_Center__Throw_Drone_East => rules::observe_access_invoke_can_deploy_and_drone_hover(ctx, world, full_obs),
            ActionId::Amagi__Main_Area__Catwalk_Center__Throw_Drone_West => rules::observe_access_invoke_can_deploy_and_drone_hover(ctx, world, full_obs),
            ActionId::Amagi__Main_Area__Platform_3__Throw_Drone_East => rules::observe_access_invoke_can_deploy_and_drone_hover(ctx, world, full_obs),
            ActionId::Amagi__Main_Area__Platform_3__Throw_Drone_West => rules::observe_access_invoke_can_deploy_and_drone_hover(ctx, world, full_obs),
            ActionId::Amagi__Main_Area__Wall_Stuck_Spot__Throw_Drone_West => rules::observe_access_invoke_can_deploy_and_drone_hover_and_slingshot_hook(ctx, world, full_obs),
            ActionId::Annuna__East_Bridge__Center_Gap_East__Throw_Drone_into_Tower => rules::observe_access_invoke_can_deploy_and_slingshot_hook_and_drone_hover(ctx, world, full_obs),
            ActionId::Annuna__East_Bridge__Center_Gap_West__Throw_Drone_into_Tower => rules::observe_access_invoke_can_deploy_and_slingshot_hook_and_drone_hover(ctx, world, full_obs),
            ActionId::Annuna__East_Bridge__Tower_East_Ledge__Enter_Combo => rules::observe_access_annuna__east_bridge__tower_east_ledge__enter_combo__req(ctx, world, full_obs),
            ActionId::Annuna__East_Bridge__Tower_Opening__Climb_and_Throw_Drone => rules::observe_access_invoke_climb_and_invoke_can_deploy_and_drone_hover_and_slingshot_hook(ctx, world, full_obs),
            ActionId::Annuna__East_Bridge__Tower_Secret__Enter_Combo => rules::observe_access_annuna__east_bridge__tower_secret__enter_combo__req(ctx, world, full_obs),
            ActionId::Annuna__East_Bridge__Tower_West_Ledge__Enter_Combo => rules::observe_access_annuna__east_bridge__tower_west_ledge__enter_combo__req(ctx, world, full_obs),
            ActionId::Annuna__Filter_Teleporter__Northeast_Ministair__Throw_Drone_Up => rules::observe_access_invoke_can_deploy_and_slingshot_hook(ctx, world, full_obs),
            ActionId::Annuna__Filter_Teleporter__Shaft_Top__Throw_Drone => rules::observe_access_invoke_can_deploy(ctx, world, full_obs),
            ActionId::Annuna__Mirror_Match__Save_Point__Save => rules::observe_access_defeat_indra(ctx, world, full_obs),
            ActionId::Annuna__Vertical_Room__Door_Switch__Open_Door => rules::observe_access_invoke_open(ctx, world, full_obs),
            ActionId::Annuna__West_Climb__Switch_Ledge__Open_Door => rules::observe_access_annuna__west_climb__switch_ledge__open_door__req(ctx, world, full_obs),
            ActionId::Ebih__Base_Camp__Left_Platform__Move_Left_Platform => rules::observe_access_ebih__base_camp__left_platform__move_left_platform__req(ctx, world, full_obs),
            ActionId::Ebih__Base_Camp__Left_Platform_Moved__Reset_Left_Platform => rules::observe_access_ebih__base_camp__left_platform_moved__reset_left_platform__req(ctx, world, full_obs),
            ActionId::Ebih__Drone_Room__Moving_Platform__Throw_Drone => rules::observe_access_invoke_can_deploy(ctx, world, full_obs),
            ActionId::Ebih__Drone_Room__Pit_Left__Activate_Lift => rules::observe_access_ebih__drone_room__pit_left__activate_lift__req(ctx, world, full_obs),
            ActionId::Ebih__Drone_Room__Pit_Left__Activate_Lift_But_Get_Off_Early => rules::observe_access_ebih__drone_room__pit_left__activate_lift_but_get_off_early__req(ctx, world, full_obs),
            ActionId::Ebih__Drone_Room__Portal_Exit__Activate_Platform => rules::observe_access_ebih__drone_room__portal_exit__activate_platform__req(ctx, world, full_obs),
            ActionId::Ebih__Ebih_East__Dispenser__Activate_Lift => rules::observe_access_ebih__ebih_east__dispenser__activate_lift__req(ctx, world, full_obs),
            ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Lift => rules::observe_access_ebih__ebih_east__lower_moving_platform__activate_lift__req(ctx, world, full_obs),
            ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Ride => rules::observe_access_ebih__ebih_east__lower_moving_platform__activate_ride__req(ctx, world, full_obs),
            ActionId::Ebih__Ebih_East__Moving_Platform__Activate_Ride => rules::observe_access_ebih__ebih_east__moving_platform__activate_ride__req(ctx, world, full_obs),
            ActionId::Ebih__Ebih_West__Below_Door__Open_Door => rules::observe_access_invoke_open(ctx, world, full_obs),
            ActionId::Ebih__Ebih_West__Left_of_Switch__Open_Door => rules::observe_access_infect(ctx, world, full_obs),
            ActionId::Ebih__Ebih_West__Medium_High_Platform__Throw_Drone_Long => rules::observe_access_invoke_can_deploy(ctx, world, full_obs),
            ActionId::Ebih__Grid_25_10_12__Door_Left__Open_Door => rules::observe_access_invoke_open(ctx, world, full_obs),
            ActionId::Ebih__Grid_25_10_12__East_11__Open_Door => rules::observe_access_invoke_open(ctx, world, full_obs),
            ActionId::Ebih__Truck_Gate__Portal_Stand__Open_Door => rules::observe_access_ebih__truck_gate__portal_stand__open_door__req(ctx, world, full_obs),
            ActionId::Ebih__Truck_Gate__Switch__Open_Door => rules::observe_access_ebih__truck_gate__switch__open_door__req(ctx, world, full_obs),
            ActionId::Ebih__Vertical_Interchange__West_13__Open_Door => rules::observe_access_ebih__vertical_interchange__west_13__open_door__req(ctx, world, full_obs),
            ActionId::Ebih__Waterfall__Below_Left_Switch__Open_Door => rules::observe_access_invoke_open(ctx, world, full_obs),
            ActionId::Ebih__Waterfall__East_Door_Right__Open_Door => rules::observe_access_invoke_open(ctx, world, full_obs),
            ActionId::Ebih__Waterfall__East_Horizontal_Door__Open_Door => rules::observe_access_invoke_open_and_invoke_range2(ctx, world, full_obs),
            ActionId::Ebih__Waterfall__East_Switch__Open_Door => rules::observe_access_invoke_open(ctx, world, full_obs),
            ActionId::Ebih__Waterfall__Ledge_Below_East_Door__Open_Door => rules::observe_access_invoke_open_and_invoke_range3(ctx, world, full_obs),
            ActionId::Ebih__Waterfall__Ledge_Below_Hole__Throw_Drone => rules::observe_access_invoke_can_deploy(ctx, world, full_obs),
            ActionId::Ebih__Waterfall__Platform_by_East_Door__Open_Door => rules::observe_access_invoke_open_and_invoke_range2(ctx, world, full_obs),
            ActionId::Ebih__Waterfall__West_8__Open_Door => rules::observe_access_invoke_open(ctx, world, full_obs),
            ActionId::Emergence__Storage__At_Door__Open_Door => rules::observe_access_emergence__storage__at_door__open_door__req(ctx, world, full_obs),
            ActionId::Emergence__Storage__Portal_Stand__Open_Door => rules::observe_access_emergence__storage__portal_stand__open_door__req(ctx, world, full_obs),
            ActionId::Giguna__Carnelian__Lower_Susar__Caught => rules::observe_access_giguna__carnelian__lower_susar__caught__req(ctx, world, full_obs),
            ActionId::Giguna__Carnelian__Lower_Susar__Hack => rules::observe_access_giguna__carnelian__lower_susar__hack__req(ctx, world, full_obs),
            ActionId::Giguna__Carnelian__Switch__Open_Door => rules::observe_access_giguna__carnelian__switch__open_door__req(ctx, world, full_obs),
            ActionId::Giguna__Carnelian__Upper_Susar__Caught => rules::observe_access_giguna__carnelian__upper_susar__caught__req(ctx, world, full_obs),
            ActionId::Giguna__Carnelian__Upper_Susar__Hack => rules::observe_access_giguna__carnelian__upper_susar__hack__req(ctx, world, full_obs),
            ActionId::Giguna__Clouds__Platform_Early__Continue_to_Early_Portal => rules::observe_access_giguna__clouds__platform_early__continue_to_early_portal__req(ctx, world, full_obs),
            ActionId::Giguna__Clouds__Platform_Early__Deploy_and_Continue_to_Early_Portal => rules::observe_access_giguna__clouds__platform_early__deploy_and_continue_to_early_portal__req(ctx, world, full_obs),
            ActionId::Giguna__Clouds__Platform_Start__Hack_and_Maybe_Get_Off_Early => rules::observe_access_giguna__clouds__platform_start__hack_and_maybe_get_off_early__req(ctx, world, full_obs),
            ActionId::Giguna__Clouds__Platform_Start__Hack_and_Ride_to_Portal => rules::observe_access_giguna__clouds__platform_start__hack_and_ride_to_portal__req(ctx, world, full_obs),
            ActionId::Giguna__Clouds__Platform_Start__Hack_Deploy_Ride_to_Portal => rules::observe_access_giguna__clouds__platform_start__hack_deploy_ride_to_portal__req(ctx, world, full_obs),
            ActionId::Giguna__East_Caverns__Arc_Passage__Enter_Combo => rules::observe_access_giguna__east_caverns__arc_passage__enter_combo__req(ctx, world, full_obs),
            ActionId::Giguna__East_Caverns__Carving__Enter_Combo => rules::observe_access_giguna__east_caverns__carving__enter_combo__req(ctx, world, full_obs),
            ActionId::Giguna__East_Caverns__Lower_Susar__Caught => rules::observe_access_giguna__east_caverns__lower_susar__caught__req(ctx, world, full_obs),
            ActionId::Giguna__East_Caverns__Lower_Susar__Hack => rules::observe_access_giguna__east_caverns__lower_susar__hack__req(ctx, world, full_obs),
            ActionId::Giguna__East_Caverns__Mid_Susar__Caught => rules::observe_access_giguna__east_caverns__mid_susar__caught__req(ctx, world, full_obs),
            ActionId::Giguna__East_Caverns__Mid_Susar__Hack => rules::observe_access_giguna__east_caverns__mid_susar__hack__req(ctx, world, full_obs),
            ActionId::Giguna__East_Caverns__Statues_Ledge__Enter_Combo => rules::observe_access_giguna__east_caverns__statues_ledge__enter_combo__req(ctx, world, full_obs),
            ActionId::Giguna__East_Caverns__Statues_Ledge__Open_Door => rules::observe_access_giguna__east_caverns__statues_ledge__open_door__req(ctx, world, full_obs),
            ActionId::Giguna__East_Caverns__Switch__Open_Door => rules::observe_access_giguna__east_caverns__switch__open_door__req(ctx, world, full_obs),
            ActionId::Giguna__East_Caverns__Upper_Susar__Caught => rules::observe_access_giguna__east_caverns__upper_susar__caught__req(ctx, world, full_obs),
            ActionId::Giguna__East_Caverns__Upper_Susar_Jump_from_East__Caught => rules::observe_access_giguna__east_caverns__upper_susar_jump_from_east__caught__req(ctx, world, full_obs),
            ActionId::Giguna__East_Caverns__Upper_Susar_Jump_from_East__Hack => rules::observe_access_giguna__east_caverns__upper_susar_jump_from_east__hack__req(ctx, world, full_obs),
            ActionId::Giguna__East_Caverns__Upper_Susar_Mid_jump__Hack => rules::observe_access_giguna__east_caverns__upper_susar_mid_jump__hack__req(ctx, world, full_obs),
            ActionId::Giguna__East_Caverns__West_14__Enter_Combo => rules::observe_access_giguna__east_caverns__west_14__enter_combo__req(ctx, world, full_obs),
            ActionId::Giguna__East_Caverns__West_16__Open_Door => rules::observe_access_giguna__east_caverns__west_16__open_door__req(ctx, world, full_obs),
            ActionId::Giguna__Gateway__Flask_Ledge__Open_Door => rules::observe_access_invoke_open(ctx, world, full_obs),
            ActionId::Giguna__Gateway__One_Jump__Open_Door => rules::observe_access_invoke_open_and_invoke_range2(ctx, world, full_obs),
            ActionId::Giguna__Giguna_Base__Stone_Knob__Throw_Drone => rules::observe_access_invoke_can_deploy(ctx, world, full_obs),
            ActionId::Giguna__Giguna_Base__Switch_Distance_1__Open_Door => rules::observe_access_invoke_open(ctx, world, full_obs),
            ActionId::Giguna__Giguna_Base__Switch_Distance_2__Open_Door => rules::observe_access_invoke_open_and_invoke_range1(ctx, world, full_obs),
            ActionId::Giguna__Giguna_Base__Switch_Distance_3__Open_Door => rules::observe_access_invoke_open_and_invoke_range2(ctx, world, full_obs),
            ActionId::Giguna__Giguna_Base__Switch_Distance_4__Open_Door => rules::observe_access_invoke_open_and_invoke_range3(ctx, world, full_obs),
            ActionId::Giguna__Giguna_Northeast__Gate_Left__Throw_Drone => rules::observe_access_invoke_can_deploy_and_slingshot_hook(ctx, world, full_obs),
            ActionId::Giguna__Giguna_Northeast__Right_Column__Open_Door_From_Afar => rules::observe_access_giguna__giguna_northeast__right_column__open_door_from_afar__req(ctx, world, full_obs),
            ActionId::Giguna__Giguna_Northeast__Switch__Open_Door => rules::observe_access_giguna__giguna_northeast__switch__open_door__req(ctx, world, full_obs),
            ActionId::Giguna__Labyrinth__Door_Ledge__Open_Door => rules::observe_access_invoke_open_and_invoke_range2(ctx, world, full_obs),
            ActionId::Giguna__Labyrinth__Switch_Ledge__Open_Door => rules::observe_access_invoke_open(ctx, world, full_obs),
            ActionId::Giguna__Ruins_Top__Switch__Open_Doors => rules::observe_access_invoke_open(ctx, world, full_obs),
            ActionId::Giguna__Ruins_Top__Turret_Balcony_West__Throw_Drone_onto_Tower => rules::observe_access_invoke_grab_and_invoke_can_deploy(ctx, world, full_obs),
            ActionId::Giguna__Ruins_West__Lower_Ledge__Destroy_Kishib => rules::observe_access_giguna__ruins_west__lower_ledge__destroy_kishib__req(ctx, world, full_obs),
            ActionId::Giguna__Ruins_West__Lower_Ledge__Hack_Kishib => rules::observe_access_giguna__ruins_west__lower_ledge__hack_kishib__req(ctx, world, full_obs),
            ActionId::Giguna__Separator__Platform__Deploy_to_Switch => rules::observe_access_invoke_can_deploy_and___drone_hover_or_slingshot_hook(ctx, world, full_obs),
            ActionId::Giguna__Wasteland__Middle_Cliff__Throw_Drone => rules::observe_access_invoke_can_deploy_and_slingshot_hook(ctx, world, full_obs),
            ActionId::Giguna__West_Caverns__East_Susar__Caught => rules::observe_access_giguna__west_caverns__east_susar__caught__req(ctx, world, full_obs),
            ActionId::Giguna__West_Caverns__East_Susar__Hack => rules::observe_access_giguna__west_caverns__east_susar__hack__req(ctx, world, full_obs),
            ActionId::Giguna__West_Caverns__Small_Platform__Throw_Drone_Up => rules::observe_access_invoke_can_deploy(ctx, world, full_obs),
            ActionId::Giguna_Breach__SW_Save__West_11__Open_Door => rules::observe_access_giguna_breach__sw_save__west_11__open_door__req(ctx, world, full_obs),
            ActionId::Glacier__Dock_Outside__Lower_Platforms__Throw_Drone => rules::observe_access_invoke_can_deploy_and_drone_hover(ctx, world, full_obs),
            ActionId::Glacier__Dock_Outside__Ruins_Platform__Throw_Drone_Up => rules::observe_access_invoke_can_deploy_and_drone_hover(ctx, world, full_obs),
            ActionId::Glacier__Hammonds_End__Switch_from_Ledge__Open_Doors => rules::observe_access_invoke_open_and_invoke_range2(ctx, world, full_obs),
            ActionId::Glacier__Hammonds_End__Switch_Near__Open_Doors => rules::observe_access_invoke_open(ctx, world, full_obs),
            ActionId::Glacier__Hammonds_End__Upper_Floor__Move_Portal_to_Lower_West => rules::observe_access_breach_attractor_and_anuman(ctx, world, full_obs),
            ActionId::Glacier__Hammonds_End__Upper_Floor__Move_Portal_to_Note => rules::observe_access_breach_attractor_and_anuman(ctx, world, full_obs),
            ActionId::Glacier__Hammonds_End__Upper_Right_Mid_air__Move_Portal_to_Corner => rules::observe_access_breach_attractor_and_mode_eq_drone_and_indra_within_annuna_gt_filter_teleporter_gt_shaft_top(ctx, world, full_obs),
            ActionId::Glacier__Hammonds_End__Upper_Right_Pedestal__Move_Portal_to_Lower_West => rules::observe_access_breach_attractor_and_anuman(ctx, world, full_obs),
            ActionId::Glacier__Hammonds_End__Upper_Right_Pedestal__Move_Portal_to_Note => rules::observe_access_breach_attractor_and_anuman(ctx, world, full_obs),
            ActionId::Glacier__Hammonds_End__West_11__Open_Doors => rules::observe_access_invoke_open(ctx, world, full_obs),
            ActionId::Glacier__Revival__Save_Point__Throw_Drone_West => rules::observe_access_invoke_can_deploy_and_drone_hover(ctx, world, full_obs),
            ActionId::Glacier__Vertical_Room__Lower_Switch__Open_Lower_Gatestones => rules::observe_access_invoke_open(ctx, world, full_obs),
            ActionId::Glacier__Vertical_Room__Upper_Switch__Open_Gate => rules::observe_access_invoke_open(ctx, world, full_obs),
            ActionId::Glacier_Breach__Angry_Lions__North__Summon_Portal_to_Second_Platform => rules::observe_access_breach_attractor(ctx, world, full_obs),
            ActionId::Glacier_Breach__Angry_Lions__North__Summon_Portal_to_Top_Platform => rules::observe_access_breach_attractor(ctx, world, full_obs),
            ActionId::Global__Become_Drone => rules::observe_access_not_within_menu_and_anuman_and_mode_ne_drone(ctx, world, full_obs),
            ActionId::Global__Become_Indra => rules::observe_access_not_within_menu_and_realm_ne_breach_and_anuman_and_mode_eq_drone(ctx, world, full_obs),
            ActionId::Global__Deploy_Drone => rules::observe_access_not_within_menu_and_invoke_can_deploy(ctx, world, full_obs),
            ActionId::Global__Move_Portal_Here => rules::observe_access_not_within_menu_and_invoke_attract_and_portal_ne_invoke_default_and_portal_ne_position(ctx, world, full_obs),
            ActionId::Global__Recall_Drone => rules::observe_access_not_within_menu_and_realm_ne_breach_and_invoke_can_recall(ctx, world, full_obs),
            ActionId::Global__Recall_Fast_Travel => rules::observe_access_allow_warps_and_not_within_menu_and_invoke_ft_main_and_invoke_can_recall_and___map_spot_within_menu_gt_kiengir_map_and_not_apocalypse_bomb(ctx, world, full_obs),
            ActionId::Interior__Cave_Behind_Waterfall__Middle__Throw_Drone => rules::observe_access_invoke_can_deploy(ctx, world, full_obs),
            ActionId::Interior__Observatory__East_Staircase_Top__Infinite_Climb_with_Hook => rules::observe_access_invoke_infinite_climb_and_slingshot_hook(ctx, world, full_obs),
            ActionId::Irikar__Basement_Portal__Moving_Platform_Start__Activate_Platform => rules::observe_access_invoke_activate(ctx, world, full_obs),
            ActionId::Irikar__Hub__Collapsed_Column__Shockwave_Wall => rules::observe_access_not_irikar_royal_storage_wall_and_invoke_shockwave_and_not_invoke_visited__irikar_gt_hub_gt_collapsed_column_gt_shockwave_to_get_item(ctx, world, full_obs),
            ActionId::Irikar__Hub__East_Rim__Throw_Drone_Far_East_High => rules::observe_access_invoke_can_deploy_and_drone_hover(ctx, world, full_obs),
            ActionId::Irikar__Hub__East_Rim__Throw_Drone_Far_East_Low => rules::observe_access_invoke_can_deploy_and_drone_hover(ctx, world, full_obs),
            ActionId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall => rules::observe_access_not_irikar_royal_storage_wall_and_invoke_shockwave(ctx, world, full_obs),
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Far_East_High => rules::observe_access_invoke_can_deploy_and_drone_hover(ctx, world, full_obs),
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Far_East_Low => rules::observe_access_invoke_can_deploy_and_drone_hover(ctx, world, full_obs),
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Further_East_and_Low => rules::observe_access_invoke_can_deploy_and_drone_hover(ctx, world, full_obs),
            ActionId::Irikar__Midwest__Left_Platform_Start__Hack_and_Ride => rules::observe_access_irikar__midwest__left_platform_start__hack_and_ride__req(ctx, world, full_obs),
            ActionId::Irikar__Midwest__Right_Platform_Start__Hack_and_Ride_Platform => rules::observe_access_irikar__midwest__right_platform_start__hack_and_ride_platform__req(ctx, world, full_obs),
            ActionId::Uhrum__Annuna_Corridor__Between_Two_Flowers__Throw_Drone_Not_As_High => rules::observe_access_invoke_can_deploy(ctx, world, full_obs),
            ActionId::Uhrum__Annuna_Corridor__Between_Two_Flowers__Throw_Drone_Up => rules::observe_access_invoke_can_deploy_and_drone_hover(ctx, world, full_obs),
            ActionId::Uhrum__Waterfalls__Center_Island_Middle__Throw_Drone_Up => rules::observe_access_invoke_can_deploy_and_slingshot_hook(ctx, world, full_obs),
            _ => true,
        }
    }
    fn base_time(&self) -> u32 { self.time }
    fn time(&self, ctx: &Context, world: &World) -> u32 { 
        self.time
            + match self.id {
                ActionId::Global__Move_Portal_Here => {
                    if true {
                        (rules::num_invoke_diagonal_speed_spots__position_portal_0_55_1_0_mul_if___indra_eq_position____0_5__else____1_0_(ctx, world) * 1000.0).ceil() as u32
                    } else {
                        0
                    }
                }
            _ => 0,
        }
    }
    fn price(&self) -> &Currency { &self.price }

    fn explain_rule(&self, ctx: &Self::Context, world: &World, edict: &mut FxHashMap<&'static str, String>) -> (bool, Vec<&'static str>) {
        match self.id {
            ActionId::Amagi__East_Lake__East_15_Flat__Attract_Portal_to_Arch => {
                let (ret, mut tags) = rules::explain_invoke_hover_and_underwater_movement_and_breach_attractor_and_anuman_and_portal_eq_portal_start(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Arch East"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Amagi__East_Lake__East_15_Lower__Attract_Portal_to_Arch => {
                let (ret, mut tags) = rules::explain_invoke_hover_and_underwater_movement_and_breach_attractor_and_anuman_and_portal_eq_portal_start(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Arch East"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Amagi__East_Lake__East_15_Lower_Hover__Attract_Portal_to_Arch => {
                let (ret, mut tags) = rules::explain_invoke_hook_and_invoke_hover_and_underwater_movement_and_breach_attractor_and_anuman_and_portal_eq_portal_start(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Arch West"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Amagi__East_Lake__East_15_Upper_Hover__Attract_Portal_to_Arch => {
                let (ret, mut tags) = rules::explain_invoke_hook_and_invoke_hover_and_underwater_movement_and_breach_attractor_and_anuman_and_portal_eq_portal_start(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Arch West"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Amagi__Main_Area__Broken_Wall__Throw_Drone_West => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_drone_hover_and_slingshot_hook(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "West 18 Hook Point"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Amagi__Main_Area__Carving__Key_Combo => {
                let (ret, mut tags) = rules::explain_amagi__main_area__carving__key_combo__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Amagi__Main_Area__Catwalk_Center__Throw_Drone_East => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_drone_hover(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Grid 31,19 > Center"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Amagi__Main_Area__Catwalk_Center__Throw_Drone_West => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_drone_hover(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "West 18 Hook Point"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Amagi__Main_Area__Platform_3__Throw_Drone_East => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_drone_hover(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Grid 31,19 > Center"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Amagi__Main_Area__Platform_3__Throw_Drone_West => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_drone_hover(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "West 18 Hook Point"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Amagi__Main_Area__Wall_Stuck_Spot__Throw_Drone_West => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_drone_hover_and_slingshot_hook(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "West 18 Hook Point"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Annuna__East_Bridge__Center_Gap_East__Throw_Drone_into_Tower => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_slingshot_hook_and_drone_hover(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Tower Core"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Annuna__East_Bridge__Center_Gap_West__Throw_Drone_into_Tower => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_slingshot_hook_and_drone_hover(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Tower Core"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Annuna__East_Bridge__Tower_East_Ledge__Enter_Combo => {
                let (ret, mut tags) = rules::explain_annuna__east_bridge__tower_east_ledge__enter_combo__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Annuna__East_Bridge__Tower_Opening__Climb_and_Throw_Drone => {
                let (ret, mut tags) = rules::explain_invoke_climb_and_invoke_can_deploy_and_drone_hover_and_slingshot_hook(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Tower East Ledge"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Annuna__East_Bridge__Tower_Secret__Enter_Combo => {
                let (ret, mut tags) = rules::explain_annuna__east_bridge__tower_secret__enter_combo__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Annuna__East_Bridge__Tower_West_Ledge__Enter_Combo => {
                let (ret, mut tags) = rules::explain_annuna__east_bridge__tower_west_ledge__enter_combo__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Annuna__Filter_Teleporter__Northeast_Ministair__Throw_Drone_Up => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_slingshot_hook(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Northeast Cubby"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Annuna__Filter_Teleporter__Shaft_Top__Throw_Drone => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "West 19 Mid-flight"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Annuna__Mirror_Match__Save_Point__Save => {
                let (ret, mut tags) = rules::explain_defeat_indra(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Annuna__Vertical_Room__Door_Switch__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Annuna__West_Climb__Switch_Ledge__Open_Door => {
                let (ret, mut tags) = rules::explain_annuna__west_climb__switch_ledge__open_door__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Base_Camp__Left_Platform__Move_Left_Platform => {
                let (ret, mut tags) = rules::explain_ebih__base_camp__left_platform__move_left_platform__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Ebih > Base Camp > Left Platform Moved"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Base_Camp__Left_Platform_Moved__Reset_Left_Platform => {
                let (ret, mut tags) = rules::explain_ebih__base_camp__left_platform_moved__reset_left_platform__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Ebih > Base Camp > Left Platform"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Drone_Room__Moving_Platform__Throw_Drone => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Ebih > Drone Room > East 4"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Drone_Room__Pit_Left__Activate_Lift => {
                let (ret, mut tags) = rules::explain_ebih__drone_room__pit_left__activate_lift__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Ebih > Drone Room > Moving Platform"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Drone_Room__Pit_Left__Activate_Lift_But_Get_Off_Early => {
                let (ret, mut tags) = rules::explain_ebih__drone_room__pit_left__activate_lift_but_get_off_early__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Ebih > Drone Room > West 6"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Drone_Room__Portal_Exit__Activate_Platform => {
                let (ret, mut tags) = rules::explain_ebih__drone_room__portal_exit__activate_platform__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Ebih_East__Dispenser__Activate_Lift => {
                let (ret, mut tags) = rules::explain_ebih__ebih_east__dispenser__activate_lift__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Ebih > Ebih East > Ledge End"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Lift => {
                let (ret, mut tags) = rules::explain_ebih__ebih_east__lower_moving_platform__activate_lift__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Ebih > Ebih East > Ledge End"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Ride => {
                let (ret, mut tags) = rules::explain_ebih__ebih_east__lower_moving_platform__activate_ride__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Ebih > Ebih East > Dispenser"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Ebih_East__Moving_Platform__Activate_Ride => {
                let (ret, mut tags) = rules::explain_ebih__ebih_east__moving_platform__activate_ride__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Ebih > Ebih East > Middle Platform"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Ebih_West__Below_Door__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Ebih_West__Left_of_Switch__Open_Door => {
                let (ret, mut tags) = rules::explain_infect(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Ebih_West__Medium_High_Platform__Throw_Drone_Long => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Giguna > Giguna Northeast > Inner Wall"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Grid_25_10_12__Door_Left__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Grid_25_10_12__East_11__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Truck_Gate__Portal_Stand__Open_Door => {
                let (ret, mut tags) = rules::explain_ebih__truck_gate__portal_stand__open_door__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Truck_Gate__Switch__Open_Door => {
                let (ret, mut tags) = rules::explain_ebih__truck_gate__switch__open_door__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Vertical_Interchange__West_13__Open_Door => {
                let (ret, mut tags) = rules::explain_ebih__vertical_interchange__west_13__open_door__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Waterfall__Below_Left_Switch__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Waterfall__East_Door_Right__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Waterfall__East_Horizontal_Door__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open_and_invoke_range2(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Waterfall__East_Switch__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Waterfall__Ledge_Below_East_Door__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open_and_invoke_range3(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Waterfall__Ledge_Below_Hole__Throw_Drone => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Ebih > Waterfall > Below Left Switch"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Waterfall__Platform_by_East_Door__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open_and_invoke_range2(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Ebih__Waterfall__West_8__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Emergence__Storage__At_Door__Open_Door => {
                let (ret, mut tags) = rules::explain_emergence__storage__at_door__open_door__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Emergence__Storage__Portal_Stand__Open_Door => {
                let (ret, mut tags) = rules::explain_emergence__storage__portal_stand__open_door__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Carnelian__Lower_Susar__Caught => {
                let (ret, mut tags) = rules::explain_giguna__carnelian__lower_susar__caught__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Carnelian__Lower_Susar__Hack => {
                let (ret, mut tags) = rules::explain_giguna__carnelian__lower_susar__hack__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Carnelian__Switch__Open_Door => {
                let (ret, mut tags) = rules::explain_giguna__carnelian__switch__open_door__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Carnelian__Upper_Susar__Caught => {
                let (ret, mut tags) = rules::explain_giguna__carnelian__upper_susar__caught__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Carnelian__Upper_Susar__Hack => {
                let (ret, mut tags) = rules::explain_giguna__carnelian__upper_susar__hack__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Clouds__Platform_Early__Continue_to_Early_Portal => {
                let (ret, mut tags) = rules::explain_giguna__clouds__platform_early__continue_to_early_portal__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Platform Early Portal"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Clouds__Platform_Early__Deploy_and_Continue_to_Early_Portal => {
                let (ret, mut tags) = rules::explain_giguna__clouds__platform_early__deploy_and_continue_to_early_portal__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Platform Early Portal"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Clouds__Platform_Start__Hack_and_Maybe_Get_Off_Early => {
                let (ret, mut tags) = rules::explain_giguna__clouds__platform_start__hack_and_maybe_get_off_early__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Platform Early"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Clouds__Platform_Start__Hack_and_Ride_to_Portal => {
                let (ret, mut tags) = rules::explain_giguna__clouds__platform_start__hack_and_ride_to_portal__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Platform Stop"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Clouds__Platform_Start__Hack_Deploy_Ride_to_Portal => {
                let (ret, mut tags) = rules::explain_giguna__clouds__platform_start__hack_deploy_ride_to_portal__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Platform Stop"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__East_Caverns__Arc_Passage__Enter_Combo => {
                let (ret, mut tags) = rules::explain_giguna__east_caverns__arc_passage__enter_combo__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__East_Caverns__Carving__Enter_Combo => {
                let (ret, mut tags) = rules::explain_giguna__east_caverns__carving__enter_combo__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__East_Caverns__Lower_Susar__Caught => {
                let (ret, mut tags) = rules::explain_giguna__east_caverns__lower_susar__caught__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__East_Caverns__Lower_Susar__Hack => {
                let (ret, mut tags) = rules::explain_giguna__east_caverns__lower_susar__hack__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__East_Caverns__Mid_Susar__Caught => {
                let (ret, mut tags) = rules::explain_giguna__east_caverns__mid_susar__caught__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__East_Caverns__Mid_Susar__Hack => {
                let (ret, mut tags) = rules::explain_giguna__east_caverns__mid_susar__hack__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__East_Caverns__Statues_Ledge__Enter_Combo => {
                let (ret, mut tags) = rules::explain_giguna__east_caverns__statues_ledge__enter_combo__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__East_Caverns__Statues_Ledge__Open_Door => {
                let (ret, mut tags) = rules::explain_giguna__east_caverns__statues_ledge__open_door__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__East_Caverns__Switch__Open_Door => {
                let (ret, mut tags) = rules::explain_giguna__east_caverns__switch__open_door__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__East_Caverns__Upper_Susar__Caught => {
                let (ret, mut tags) = rules::explain_giguna__east_caverns__upper_susar__caught__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__East_Caverns__Upper_Susar_Jump_from_East__Caught => {
                let (ret, mut tags) = rules::explain_giguna__east_caverns__upper_susar_jump_from_east__caught__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__East_Caverns__Upper_Susar_Jump_from_East__Hack => {
                let (ret, mut tags) = rules::explain_giguna__east_caverns__upper_susar_jump_from_east__hack__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__East_Caverns__Upper_Susar_Mid_jump__Hack => {
                let (ret, mut tags) = rules::explain_giguna__east_caverns__upper_susar_mid_jump__hack__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__East_Caverns__West_14__Enter_Combo => {
                let (ret, mut tags) = rules::explain_giguna__east_caverns__west_14__enter_combo__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__East_Caverns__West_16__Open_Door => {
                let (ret, mut tags) = rules::explain_giguna__east_caverns__west_16__open_door__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Gateway__Flask_Ledge__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Gateway__One_Jump__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open_and_invoke_range2(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Giguna_Base__Stone_Knob__Throw_Drone => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Upper Cliff"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Giguna_Base__Switch_Distance_1__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Giguna_Base__Switch_Distance_2__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open_and_invoke_range1(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Giguna_Base__Switch_Distance_3__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open_and_invoke_range2(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Giguna_Base__Switch_Distance_4__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open_and_invoke_range3(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Giguna_Northeast__Gate_Left__Throw_Drone => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_slingshot_hook(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Giguna > Giguna Northeast > Gate Vent"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Giguna_Northeast__Right_Column__Open_Door_From_Afar => {
                let (ret, mut tags) = rules::explain_giguna__giguna_northeast__right_column__open_door_from_afar__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Giguna_Northeast__Switch__Open_Door => {
                let (ret, mut tags) = rules::explain_giguna__giguna_northeast__switch__open_door__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Labyrinth__Door_Ledge__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open_and_invoke_range2(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Labyrinth__Switch_Ledge__Open_Door => {
                let (ret, mut tags) = rules::explain_invoke_open(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Ruins_Top__Switch__Open_Doors => {
                let (ret, mut tags) = rules::explain_invoke_open(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Ruins_Top__Turret_Balcony_West__Throw_Drone_onto_Tower => {
                let (ret, mut tags) = rules::explain_invoke_grab_and_invoke_can_deploy(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Giguna > Ruins West > Rooftop East Edge"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Ruins_West__Lower_Ledge__Destroy_Kishib => {
                let (ret, mut tags) = rules::explain_giguna__ruins_west__lower_ledge__destroy_kishib__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Ruins_West__Lower_Ledge__Hack_Kishib => {
                let (ret, mut tags) = rules::explain_giguna__ruins_west__lower_ledge__hack_kishib__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Separator__Platform__Deploy_to_Switch => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and___drone_hover_or_slingshot_hook(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Switch"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__Wasteland__Middle_Cliff__Throw_Drone => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_slingshot_hook(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Giguna > Wasteland > West 12"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__West_Caverns__East_Susar__Caught => {
                let (ret, mut tags) = rules::explain_giguna__west_caverns__east_susar__caught__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__West_Caverns__East_Susar__Hack => {
                let (ret, mut tags) = rules::explain_giguna__west_caverns__east_susar__hack__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna__West_Caverns__Small_Platform__Throw_Drone_Up => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Giguna > West Caverns > Higher Ledge"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Giguna_Breach__SW_Save__West_11__Open_Door => {
                let (ret, mut tags) = rules::explain_giguna_breach__sw_save__west_11__open_door__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Glacier__Dock_Outside__Lower_Platforms__Throw_Drone => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_drone_hover(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Lower Mid-air"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Glacier__Dock_Outside__Ruins_Platform__Throw_Drone_Up => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_drone_hover(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Above Ruins"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Glacier__Hammonds_End__Switch_from_Ledge__Open_Doors => {
                let (ret, mut tags) = rules::explain_invoke_open_and_invoke_range2(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Glacier__Hammonds_End__Switch_Near__Open_Doors => {
                let (ret, mut tags) = rules::explain_invoke_open(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Glacier__Hammonds_End__Upper_Floor__Move_Portal_to_Lower_West => {
                let (ret, mut tags) = rules::explain_breach_attractor_and_anuman(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Upper Right Mid-air"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Glacier__Hammonds_End__Upper_Floor__Move_Portal_to_Note => {
                let (ret, mut tags) = rules::explain_breach_attractor_and_anuman(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Hammond"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Glacier__Hammonds_End__Upper_Right_Mid_air__Move_Portal_to_Corner => {
                let (ret, mut tags) = rules::explain_breach_attractor_and_mode_eq_drone_and_indra_within_annuna_gt_filter_teleporter_gt_shaft_top(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Corner"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Glacier__Hammonds_End__Upper_Right_Pedestal__Move_Portal_to_Lower_West => {
                let (ret, mut tags) = rules::explain_breach_attractor_and_anuman(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Upper Right Mid-air"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Glacier__Hammonds_End__Upper_Right_Pedestal__Move_Portal_to_Note => {
                let (ret, mut tags) = rules::explain_breach_attractor_and_anuman(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Hammond"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Glacier__Hammonds_End__West_11__Open_Doors => {
                let (ret, mut tags) = rules::explain_invoke_open(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Glacier__Revival__Save_Point__Throw_Drone_West => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_drone_hover(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Just Thrown"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Glacier__Vertical_Room__Lower_Switch__Open_Lower_Gatestones => {
                let (ret, mut tags) = rules::explain_invoke_open(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Glacier__Vertical_Room__Upper_Switch__Open_Gate => {
                let (ret, mut tags) = rules::explain_invoke_open(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Glacier_Breach__Angry_Lions__North__Summon_Portal_to_Second_Platform => {
                let (ret, mut tags) = rules::explain_breach_attractor(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Second Platform"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Glacier_Breach__Angry_Lions__North__Summon_Portal_to_Top_Platform => {
                let (ret, mut tags) = rules::explain_breach_attractor(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Top Platform"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Global__Become_Drone => {
                let (ret, mut tags) = rules::explain_not_within_menu_and_anuman_and_mode_ne_drone(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Global__Become_Indra => {
                let (ret, mut tags) = rules::explain_not_within_menu_and_realm_ne_breach_and_anuman_and_mode_eq_drone(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Global__Deploy_Drone => {
                let (ret, mut tags) = rules::explain_not_within_menu_and_invoke_can_deploy(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Global__Move_Portal_Here => {
                let (ret, mut tags) = rules::explain_not_within_menu_and_invoke_attract_and_portal_ne_invoke_default_and_portal_ne_position(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Global__Recall_Drone => {
                let (ret, mut tags) = rules::explain_not_within_menu_and_realm_ne_breach_and_invoke_can_recall(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "^indra"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Global__Recall_Fast_Travel => {
                let (ret, mut tags) = rules::explain_allow_warps_and_not_within_menu_and_invoke_ft_main_and_invoke_can_recall_and___map_spot_within_menu_gt_kiengir_map_and_not_apocalypse_bomb(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "^map_spot"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Interior__Cave_Behind_Waterfall__Middle__Throw_Drone => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Top"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Interior__Observatory__East_Staircase_Top__Infinite_Climb_with_Hook => {
                let (ret, mut tags) = rules::explain_invoke_infinite_climb_and_slingshot_hook(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Catwalk"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Irikar__Basement_Portal__Moving_Platform_Start__Activate_Platform => {
                let (ret, mut tags) = rules::explain_invoke_activate(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Moving Platform End"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Irikar__Hub__Collapsed_Column__Shockwave_Wall => {
                let (ret, mut tags) = rules::explain_not_irikar_royal_storage_wall_and_invoke_shockwave_and_not_invoke_visited__irikar_gt_hub_gt_collapsed_column_gt_shockwave_to_get_item(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Irikar__Hub__East_Rim__Throw_Drone_Far_East_High => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_drone_hover(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Airy > Right Hover Throw End"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Irikar__Hub__East_Rim__Throw_Drone_Far_East_Low => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_drone_hover(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Airy > South Center"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall => {
                let (ret, mut tags) = rules::explain_not_irikar_royal_storage_wall_and_invoke_shockwave(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, ""));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Far_East_High => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_drone_hover(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Airy > Left Hover Throw End"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Far_East_Low => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_drone_hover(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Airy > Lower Throw End"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Further_East_and_Low => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_drone_hover(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Airy > South Center"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Irikar__Midwest__Left_Platform_Start__Hack_and_Ride => {
                let (ret, mut tags) = rules::explain_irikar__midwest__left_platform_start__hack_and_ride__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Left Platform Dest"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Irikar__Midwest__Right_Platform_Start__Hack_and_Ride_Platform => {
                let (ret, mut tags) = rules::explain_irikar__midwest__right_platform_start__hack_and_ride_platform__req(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Right Platform Dest"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Uhrum__Annuna_Corridor__Between_Two_Flowers__Throw_Drone_Not_As_High => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Lower Platform"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Uhrum__Annuna_Corridor__Between_Two_Flowers__Throw_Drone_Up => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_drone_hover(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Middle Platform"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            ActionId::Uhrum__Waterfalls__Center_Island_Middle__Throw_Drone_Up => {
                let (ret, mut tags) = rules::explain_invoke_can_deploy_and_slingshot_hook(ctx, world, edict);
                let dest = world::Action::dest(self, ctx, world);
                if dest != SpotId::None {
                    edict.insert("dest", format!("{} ({})", dest, "Medium Rock"));
                    tags.push("dest");
                }
                (ret, tags)
            }
            _ => (true, vec![])
        }
    }
}
impl world::Action for Action {
    type ActionId = ActionId;
    type SpotId = SpotId;
    fn id(&self) -> ActionId { self.id }
    fn perform(&self, ctx: &mut Context, world: &World) {
        match self.id {
            ActionId::Global__Recall_Drone => rules::action_mode_set_indra(ctx, world),
            ActionId::Global__Recall_Fast_Travel => rules::action_mode_set_indra_last_set_indra(ctx, world),
            ActionId::Global__Deploy_Drone => rules::action_mode_set_drone_indra_set_position(ctx, world),
            ActionId::Global__Become_Drone => rules::action_mode_set_drone(ctx, world),
            ActionId::Global__Become_Indra => rules::action_mode_set_indra(ctx, world),
            ActionId::Global__Move_Portal_Here => rules::action_portal_set_position(ctx, world),
            ActionId::Amagi_Breach__East_Entrance__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Amagi_Breach__East_Ruins__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Amagi_Breach__Upper_Lake__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Amagi__Main_Area__Carving__Key_Combo => rules::action_amagi__main_area__carving__key_combo__do(ctx, world),
            ActionId::Amagi__Main_Area__Platform_3__Throw_Drone_West => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Amagi__Main_Area__Platform_3__Throw_Drone_East => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Amagi__Main_Area__Catwalk_Center__Throw_Drone_West => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Amagi__Main_Area__Catwalk_Center__Throw_Drone_East => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Amagi__Main_Area__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Amagi__Main_Area__Broken_Wall__Throw_Drone_West => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Amagi__Main_Area__Wall_Stuck_Spot__Throw_Drone_West => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Amagi__East_Lake__East_15_Flat__Attract_Portal_to_Arch => rules::action_portal_set_amagi_gt_east_lake_gt_arch_east(ctx, world),
            ActionId::Amagi__East_Lake__East_15_Lower__Attract_Portal_to_Arch => rules::action_portal_set_amagi_gt_east_lake_gt_arch_east(ctx, world),
            ActionId::Amagi__East_Lake__East_15_Upper_Hover__Attract_Portal_to_Arch => rules::action_portal_set_amagi_gt_east_lake_gt_arch_west(ctx, world),
            ActionId::Amagi__East_Lake__East_15_Lower_Hover__Attract_Portal_to_Arch => rules::action_portal_set_amagi_gt_east_lake_gt_arch_west(ctx, world),
            ActionId::Amagi__East_Lake__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Annuna__Mirror_Match__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Annuna__East_Bridge__Center_Gap_West__Throw_Drone_into_Tower => rules::action_invoke_deploy_drone_and_move__annuna_gt_east_bridge_gt_center_corridor(ctx, world),
            ActionId::Annuna__East_Bridge__Center_Gap_East__Throw_Drone_into_Tower => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Annuna__East_Bridge__Tower_Opening__Climb_and_Throw_Drone => rules::action_invoke_deploy_drone_and_move__annuna_gt_east_bridge_gt_tower_base_east(ctx, world),
            ActionId::Annuna__East_Bridge__Tower_West_Ledge__Enter_Combo => rules::action_annuna__east_bridge__tower_west_ledge__enter_combo__do(ctx, world),
            ActionId::Annuna__East_Bridge__Tower_East_Ledge__Enter_Combo => rules::action_annuna__east_bridge__tower_east_ledge__enter_combo__do(ctx, world),
            ActionId::Annuna__East_Bridge__Tower_Secret__Enter_Combo => rules::action_annuna__east_bridge__tower_secret__enter_combo__do(ctx, world),
            ActionId::Annuna__Vertical_Room__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Annuna__Vertical_Room__Door_Switch__Open_Door => rules::action_annuna__vertical_room__door_switch__open_door__do(ctx, world),
            ActionId::Annuna__Factory_Entrance__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Annuna__Filter_Teleporter__Shaft_Top__Throw_Drone => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Annuna__Filter_Teleporter__Northeast_Ministair__Throw_Drone_Up => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Annuna__Upper_Save__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Annuna__Center_Save__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Annuna__West_Climb__Switch_Ledge__Open_Door => rules::action_annuna__west_climb__switch_ledge__open_door__do(ctx, world),
            ActionId::Annuna__Final_Save__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Ebih_Breach__Portals_101__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Ebih_Breach__In_n_Out__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Ebih_Breach__Rock_Block__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Ebih__Base_Camp__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Ebih__Base_Camp__Left_Platform__Move_Left_Platform => rules::action_ebih__base_camp__left_platform__move_left_platform__do(ctx, world),
            ActionId::Ebih__Base_Camp__Left_Platform_Moved__Reset_Left_Platform => rules::action_ebih__base_camp__left_platform_moved__reset_left_platform__do(ctx, world),
            ActionId::Ebih__Truck_Gate__Switch__Open_Door => rules::action_ebih__truck_gate__switch__open_door__do(ctx, world),
            ActionId::Ebih__Truck_Gate__Portal_Stand__Open_Door => rules::action_ebih__truck_gate__portal_stand__open_door__do(ctx, world),
            ActionId::Ebih__Grid_25_10_12__Door_Left__Open_Door => rules::action_ebih__grid_25_10_12__door_left__open_door__do(ctx, world),
            ActionId::Ebih__Grid_25_10_12__East_11__Open_Door => rules::action_ebih__grid_25_10_12__east_11__open_door__do(ctx, world),
            ActionId::Ebih__Waterfall__Ledge_Below_Hole__Throw_Drone => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Ebih__Waterfall__Below_Left_Switch__Open_Door => rules::action_ebih__waterfall__below_left_switch__open_door__do(ctx, world),
            ActionId::Ebih__Waterfall__West_8__Open_Door => rules::action_ebih__waterfall__west_8__open_door__do(ctx, world),
            ActionId::Ebih__Waterfall__East_Door_Right__Open_Door => rules::action_ebih__waterfall__east_door_right__open_door__do(ctx, world),
            ActionId::Ebih__Waterfall__East_Switch__Open_Door => rules::action_ebih__waterfall__east_switch__open_door__do(ctx, world),
            ActionId::Ebih__Waterfall__Platform_by_East_Door__Open_Door => rules::action_ebih__waterfall__platform_by_east_door__open_door__do(ctx, world),
            ActionId::Ebih__Waterfall__East_Horizontal_Door__Open_Door => rules::action_ebih__waterfall__east_horizontal_door__open_door__do(ctx, world),
            ActionId::Ebih__Waterfall__Ledge_Below_East_Door__Open_Door => rules::action_ebih__waterfall__ledge_below_east_door__open_door__do(ctx, world),
            ActionId::Ebih__Ebih_West__Mid_Save__Save => rules::action_invoke_save(ctx, world),
            ActionId::Ebih__Ebih_West__Upper_Save__Save => rules::action_invoke_save(ctx, world),
            ActionId::Ebih__Ebih_West__Medium_High_Platform__Throw_Drone_Long => rules::action_invoke_deploy_drone_and_move__ebih_gt_ebih_west_gt_alcove_entrance(ctx, world),
            ActionId::Ebih__Ebih_West__Below_Door__Open_Door => rules::action_ebih__ebih_west__below_door__open_door__do(ctx, world),
            ActionId::Ebih__Ebih_West__Left_of_Switch__Open_Door => rules::action_ebih__ebih_west__left_of_switch__open_door__do(ctx, world),
            ActionId::Ebih__Ebih_West__Lower_Save__Save => rules::action_invoke_save(ctx, world),
            ActionId::Ebih__Ebih_East__Moving_Platform__Activate_Ride => rules::action_ebih__ebih_east__moving_platform__activate_ride__do(ctx, world),
            ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Ride => rules::action_ebih__ebih_east__lower_moving_platform__activate_ride__do(ctx, world),
            ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Lift => rules::action_ebih__ebih_east__lower_moving_platform__activate_lift__do(ctx, world),
            ActionId::Ebih__Ebih_East__Dispenser__Activate_Lift => rules::action_ebih__ebih_east__dispenser__activate_lift__do(ctx, world),
            ActionId::Ebih__Hidden_Portal__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Ebih__Drone_Room__Pit_Left__Activate_Lift => rules::action_ebih__drone_room__pit_left__activate_lift__do(ctx, world),
            ActionId::Ebih__Drone_Room__Pit_Left__Activate_Lift_But_Get_Off_Early => rules::action_ebih__drone_room__pit_left__activate_lift_but_get_off_early__do(ctx, world),
            ActionId::Ebih__Drone_Room__Portal_Exit__Activate_Platform => rules::action_ebih__drone_room__portal_exit__activate_platform__do(ctx, world),
            ActionId::Ebih__Drone_Room__Moving_Platform__Throw_Drone => rules::action_invoke_deploy_drone_and_move__ebih_gt_drone_room_gt_tree(ctx, world),
            ActionId::Ebih__Vertical_Interchange__West_13__Open_Door => rules::action_ebih__vertical_interchange__west_13__open_door__do(ctx, world),
            ActionId::Emergence__Camp_Exterior__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Emergence__Storage__At_Door__Open_Door => rules::action_emergence__storage__at_door__open_door__do(ctx, world),
            ActionId::Emergence__Storage__Portal_Stand__Open_Door => rules::action_emergence__storage__portal_stand__open_door__do(ctx, world),
            ActionId::Giguna_Breach__Peak__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Giguna_Breach__SW_Save__West_11__Open_Door => rules::action_giguna_breach__sw_save__west_11__open_door__do(ctx, world),
            ActionId::Giguna_Breach__SW_Save__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Giguna_Breach__Labyrinth__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Giguna_Breach__East__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Giguna_Breach__Emergence__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Giguna_Breach__South__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Giguna__Giguna_Northeast__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Giguna__Giguna_Northeast__Gate_Left__Throw_Drone => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Giguna__Giguna_Northeast__Right_Column__Open_Door_From_Afar => rules::action_giguna__giguna_northeast__right_column__open_door_from_afar__do(ctx, world),
            ActionId::Giguna__Giguna_Northeast__Switch__Open_Door => rules::action_giguna__giguna_northeast__switch__open_door__do(ctx, world),
            ActionId::Giguna__Carnelian__Upper_Susar__Caught => rules::action_giguna__carnelian__upper_susar__caught__do(ctx, world),
            ActionId::Giguna__Carnelian__Upper_Susar__Hack => rules::action_giguna__carnelian__upper_susar__hack__do(ctx, world),
            ActionId::Giguna__Carnelian__Switch__Open_Door => rules::action_giguna__carnelian__switch__open_door__do(ctx, world),
            ActionId::Giguna__Carnelian__Lower_Susar__Caught => rules::action_giguna__carnelian__lower_susar__caught__do(ctx, world),
            ActionId::Giguna__Carnelian__Lower_Susar__Hack => rules::action_giguna__carnelian__lower_susar__hack__do(ctx, world),
            ActionId::Giguna__West_Caverns__Small_Platform__Throw_Drone_Up => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Giguna__West_Caverns__East_Susar__Caught => rules::action_giguna__west_caverns__east_susar__caught__do(ctx, world),
            ActionId::Giguna__West_Caverns__East_Susar__Hack => rules::action_giguna__west_caverns__east_susar__hack__do(ctx, world),
            ActionId::Giguna__Wasteland__Middle_Cliff__Throw_Drone => rules::action_invoke_deploy_drone_and_move__giguna_gt_wasteland_gt_middle_path(ctx, world),
            ActionId::Giguna__Giguna_Base__Stone_Knob__Throw_Drone => rules::action_invoke_deploy_drone_and_move__giguna_gt_giguna_base_gt_kari(ctx, world),
            ActionId::Giguna__Giguna_Base__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Giguna__Giguna_Base__Switch_Distance_1__Open_Door => rules::action_giguna__giguna_base__switch_distance_1__open_door__do(ctx, world),
            ActionId::Giguna__Giguna_Base__Switch_Distance_2__Open_Door => rules::action_giguna__giguna_base__switch_distance_2__open_door__do(ctx, world),
            ActionId::Giguna__Giguna_Base__Switch_Distance_3__Open_Door => rules::action_giguna__giguna_base__switch_distance_3__open_door__do(ctx, world),
            ActionId::Giguna__Giguna_Base__Switch_Distance_4__Open_Door => rules::action_giguna__giguna_base__switch_distance_4__open_door__do(ctx, world),
            ActionId::Giguna__Ruins_West__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Giguna__Ruins_West__Lower_Ledge__Hack_Kishib => rules::action_giguna__ruins_west__lower_ledge__hack_kishib__do(ctx, world),
            ActionId::Giguna__Ruins_West__Lower_Ledge__Destroy_Kishib => rules::action_giguna__ruins_west__lower_ledge__destroy_kishib__do(ctx, world),
            ActionId::Giguna__Ruins_Top__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Giguna__Ruins_Top__Switch__Open_Doors => rules::action_giguna__ruins_top__switch__open_doors__do(ctx, world),
            ActionId::Giguna__Ruins_Top__Turret_Balcony_West__Throw_Drone_onto_Tower => rules::action_invoke_deploy_drone_and_move__giguna_gt_ruins_top_gt_west_7(ctx, world),
            ActionId::Giguna__Clouds__Platform_Start__Hack_and_Ride_to_Portal => rules::action_giguna__clouds__platform_start__hack_and_ride_to_portal__do(ctx, world),
            ActionId::Giguna__Clouds__Platform_Start__Hack_Deploy_Ride_to_Portal => rules::action_giguna__clouds__platform_start__hack_deploy_ride_to_portal__do(ctx, world),
            ActionId::Giguna__Clouds__Platform_Start__Hack_and_Maybe_Get_Off_Early => rules::action_giguna__clouds__platform_start__hack_and_maybe_get_off_early__do(ctx, world),
            ActionId::Giguna__Clouds__Platform_Early__Continue_to_Early_Portal => rules::action_if___indra_within_position____indra_set_giguna_gt_clouds_gt_platform_early_portal__portal_set_giguna_gt_clouds_gt_platform_early_portal(ctx, world),
            ActionId::Giguna__Clouds__Platform_Early__Deploy_and_Continue_to_Early_Portal => rules::action_portal_set_giguna_gt_clouds_gt_platform_early_portal_invoke_deploy_drone_and_move__giguna_gt_clouds_gt_platform_early_portal(ctx, world),
            ActionId::Giguna__East_Caverns__West_14__Enter_Combo => rules::action_giguna__east_caverns__west_14__enter_combo__do(ctx, world),
            ActionId::Giguna__East_Caverns__Upper_Susar__Caught => rules::action_giguna__east_caverns__upper_susar__caught__do(ctx, world),
            ActionId::Giguna__East_Caverns__Upper_Susar_Mid_jump__Hack => rules::action_giguna__east_caverns__upper_susar_mid_jump__hack__do(ctx, world),
            ActionId::Giguna__East_Caverns__Upper_Susar_Jump_from_East__Hack => rules::action_giguna__east_caverns__upper_susar_jump_from_east__hack__do(ctx, world),
            ActionId::Giguna__East_Caverns__Upper_Susar_Jump_from_East__Caught => rules::action_giguna__east_caverns__upper_susar_jump_from_east__caught__do(ctx, world),
            ActionId::Giguna__East_Caverns__Carving__Enter_Combo => rules::action_giguna__east_caverns__carving__enter_combo__do(ctx, world),
            ActionId::Giguna__East_Caverns__Mid_Susar__Hack => rules::action_giguna__east_caverns__mid_susar__hack__do(ctx, world),
            ActionId::Giguna__East_Caverns__Mid_Susar__Caught => rules::action_giguna__east_caverns__mid_susar__caught__do(ctx, world),
            ActionId::Giguna__East_Caverns__Statues_Ledge__Open_Door => rules::action_giguna__east_caverns__statues_ledge__open_door__do(ctx, world),
            ActionId::Giguna__East_Caverns__Statues_Ledge__Enter_Combo => rules::action_giguna__east_caverns__statues_ledge__enter_combo__do(ctx, world),
            ActionId::Giguna__East_Caverns__Switch__Open_Door => rules::action_giguna__east_caverns__switch__open_door__do(ctx, world),
            ActionId::Giguna__East_Caverns__West_16__Open_Door => rules::action_giguna__east_caverns__west_16__open_door__do(ctx, world),
            ActionId::Giguna__East_Caverns__Arc_Passage__Enter_Combo => rules::action_giguna__east_caverns__arc_passage__enter_combo__do(ctx, world),
            ActionId::Giguna__East_Caverns__Lower_Susar__Hack => rules::action_giguna__east_caverns__lower_susar__hack__do(ctx, world),
            ActionId::Giguna__East_Caverns__Lower_Susar__Caught => rules::action_giguna__east_caverns__lower_susar__caught__do(ctx, world),
            ActionId::Giguna__Gateway__One_Jump__Open_Door => rules::action_giguna__gateway__one_jump__open_door__do(ctx, world),
            ActionId::Giguna__Gateway__Flask_Ledge__Open_Door => rules::action_giguna__gateway__flask_ledge__open_door__do(ctx, world),
            ActionId::Giguna__Labyrinth__Door_Ledge__Open_Door => rules::action_giguna__labyrinth__door_ledge__open_door__do(ctx, world),
            ActionId::Giguna__Labyrinth__Switch_Ledge__Open_Door => rules::action_giguna__labyrinth__switch_ledge__open_door__do(ctx, world),
            ActionId::Giguna__Labyrinth__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Giguna__Separator__Platform__Deploy_to_Switch => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Giguna__Separator__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Glacier_Breach__South_Save__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Glacier_Breach__West_Save__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Glacier_Breach__Guarded_Corridor__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Glacier_Breach__Save_and_Exit__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Glacier_Breach__Hammonds_Breach__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Glacier_Breach__Angry_Lions__North__Summon_Portal_to_Top_Platform => rules::action_portal_set_glacier_breach_gt_angry_lions_gt_top_platform(ctx, world),
            ActionId::Glacier_Breach__Angry_Lions__North__Summon_Portal_to_Second_Platform => rules::action_portal_set_glacier_breach_gt_angry_lions_gt_second_platform(ctx, world),
            ActionId::Glacier__Dock_Outside__Lower_Platforms__Throw_Drone => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Glacier__Dock_Outside__Ruins_Platform__Throw_Drone_Up => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Glacier__Revival__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Glacier__Revival__Save_Point__Throw_Drone_West => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Glacier__The_Big_Drop__Solid_Rock__Careful_Break => rules::action_glacier__the_big_drop__solid_rock__careful_break__do(ctx, world),
            ActionId::Glacier__Vertical_Room__Upper_Switch__Open_Gate => rules::action_glacier__vertical_room__upper_switch__open_gate__do(ctx, world),
            ActionId::Glacier__Vertical_Room__Lower_Switch__Open_Lower_Gatestones => rules::action_glacier__vertical_room__lower_switch__open_lower_gatestones__do(ctx, world),
            ActionId::Glacier__Hammonds_End__Upper_Floor__Move_Portal_to_Lower_West => rules::action_portal_set_glacier_gt_hammonds_end_gt_lower_pedestal_west(ctx, world),
            ActionId::Glacier__Hammonds_End__Upper_Floor__Move_Portal_to_Note => rules::action_portal_set_glacier_gt_hammonds_end_gt_hammond(ctx, world),
            ActionId::Glacier__Hammonds_End__Upper_Right_Pedestal__Move_Portal_to_Lower_West => rules::action_portal_set_glacier_gt_hammonds_end_gt_lower_pedestal_west(ctx, world),
            ActionId::Glacier__Hammonds_End__Upper_Right_Pedestal__Move_Portal_to_Note => rules::action_portal_set_glacier_gt_hammonds_end_gt_hammond(ctx, world),
            ActionId::Glacier__Hammonds_End__Upper_Right_Mid_air__Move_Portal_to_Corner => rules::action_portal_set_glacier_gt_hammonds_end_gt_corner(ctx, world),
            ActionId::Glacier__Hammonds_End__Switch_from_Ledge__Open_Doors => rules::action_glacier__hammonds_end__switch_from_ledge__open_doors__do(ctx, world),
            ActionId::Glacier__Hammonds_End__Switch_Near__Open_Doors => rules::action_glacier__hammonds_end__switch_near__open_doors__do(ctx, world),
            ActionId::Glacier__Hammonds_End__West_11__Open_Doors => rules::action_glacier__hammonds_end__west_11__open_doors__do(ctx, world),
            ActionId::Interior__Observatory__East_Staircase_Top__Infinite_Climb_with_Hook => rules::action_mode_set_drone(ctx, world),
            ActionId::Interior__Cave_Behind_Waterfall__Middle__Throw_Drone => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Interior__Facility_Interior__Freight_Elevator__Enter_Emergence => rules::action_save_set_emergence_gt_camp_exterior_gt_save_point(ctx, world),
            ActionId::Interior__Emergence_Hangar__Freight_Elevator__Exit_Emergence => rules::action_save_set_uhrum_gt_emergence_save_gt_save_point(ctx, world),
            ActionId::Irikar_Breach__Basement_Save__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Irikar_Breach__Corridor__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Far_East_High => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Far_East_Low => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Further_East_and_Low => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Irikar__Hub__East_Rim__Throw_Drone_Far_East_High => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Irikar__Hub__East_Rim__Throw_Drone_Far_East_Low => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Irikar__Hub__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall => rules::action_invoke_collect__irikar_royal_storage_wall_invoke_collect__flask_invoke_visit__irikar_gt_hub_gt_royal_storage_in_wall_gt_item_invoke_visit__irikar_gt_hub_gt_royal_storage_by_wall_gt_shockwave_just_the_wall(ctx, world),
            ActionId::Irikar__Hub__Collapsed_Column__Shockwave_Wall => rules::action_invoke_collect__irikar_royal_storage_wall_invoke_collect__flask_invoke_visit__irikar_gt_hub_gt_royal_storage_in_wall_gt_item_invoke_visit__irikar_gt_hub_gt_royal_storage_by_wall_gt_shockwave_just_the_wall(ctx, world),
            ActionId::Irikar__Basement_Portal__Moving_Platform_Start__Activate_Platform => rules::action_irikar__basement_portal__moving_platform_start__activate_platform__do(ctx, world),
            ActionId::Irikar__Midwest__Left_Platform_Start__Hack_and_Ride => rules::action_irikar__midwest__left_platform_start__hack_and_ride__do(ctx, world),
            ActionId::Irikar__Midwest__Right_Platform_Start__Hack_and_Ride_Platform => rules::action_irikar__midwest__right_platform_start__hack_and_ride_platform__do(ctx, world),
            ActionId::Irikar__Midwest__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Irikar__Beach_Save__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Uhrum_Breach__East_Glitch__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Uhrum__West_Entrance__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Uhrum__Waterfalls__Center_Island_Middle__Throw_Drone_Up => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Uhrum__Save_Room__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Uhrum__Annuna_Corridor__Save_Point__Save => rules::action_invoke_save(ctx, world),
            ActionId::Uhrum__Annuna_Corridor__Between_Two_Flowers__Throw_Drone_Up => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Uhrum__Annuna_Corridor__Between_Two_Flowers__Throw_Drone_Not_As_High => rules::action_invoke_deploy_drone(ctx, world),
            ActionId::Uhrum__Emergence_Save__Save_Point__Save => rules::action_invoke_save(ctx, world),
        };
        let dest = self.dest(ctx, world);
        if dest != SpotId::None {
            ctx.set_position(dest, world);
        }
        match self.id {
            ActionId::Global__Recall_Drone => {
                rules::action_indra_set_invoke_default(ctx, world);
            }
            ActionId::Global__Recall_Fast_Travel => {
                rules::action_indra_set_invoke_default(ctx, world);
            }
            _ => (),
        };
    }
    fn dest(&self, ctx: &Context, world: &World) -> SpotId {
        match self.id {
            ActionId::Global__Recall_Drone => ctx.indra(),
            ActionId::Global__Recall_Fast_Travel => data::map_spot(ctx.position()),
            ActionId::Amagi__Main_Area__Platform_3__Throw_Drone_West => SpotId::Amagi__Main_Area__West_18_Hook_Point,
            ActionId::Amagi__Main_Area__Platform_3__Throw_Drone_East => SpotId::Amagi__Grid_31_19__Center,
            ActionId::Amagi__Main_Area__Catwalk_Center__Throw_Drone_West => SpotId::Amagi__Main_Area__West_18_Hook_Point,
            ActionId::Amagi__Main_Area__Catwalk_Center__Throw_Drone_East => SpotId::Amagi__Grid_31_19__Center,
            ActionId::Amagi__Main_Area__Broken_Wall__Throw_Drone_West => SpotId::Amagi__Main_Area__West_18_Hook_Point,
            ActionId::Amagi__Main_Area__Wall_Stuck_Spot__Throw_Drone_West => SpotId::Amagi__Main_Area__West_18_Hook_Point,
            ActionId::Amagi__East_Lake__East_15_Flat__Attract_Portal_to_Arch => SpotId::Amagi__East_Lake__Arch_East,
            ActionId::Amagi__East_Lake__East_15_Lower__Attract_Portal_to_Arch => SpotId::Amagi__East_Lake__Arch_East,
            ActionId::Amagi__East_Lake__East_15_Upper_Hover__Attract_Portal_to_Arch => SpotId::Amagi__East_Lake__Arch_West,
            ActionId::Amagi__East_Lake__East_15_Lower_Hover__Attract_Portal_to_Arch => SpotId::Amagi__East_Lake__Arch_West,
            ActionId::Annuna__East_Bridge__Center_Gap_West__Throw_Drone_into_Tower => SpotId::Annuna__East_Bridge__Tower_Core,
            ActionId::Annuna__East_Bridge__Center_Gap_East__Throw_Drone_into_Tower => SpotId::Annuna__East_Bridge__Tower_Core,
            ActionId::Annuna__East_Bridge__Tower_Opening__Climb_and_Throw_Drone => SpotId::Annuna__East_Bridge__Tower_East_Ledge,
            ActionId::Annuna__Filter_Teleporter__Shaft_Top__Throw_Drone => SpotId::Annuna__Filter_Teleporter__West_19_Mid_flight,
            ActionId::Annuna__Filter_Teleporter__Northeast_Ministair__Throw_Drone_Up => SpotId::Annuna__Filter_Teleporter__Northeast_Cubby,
            ActionId::Ebih__Base_Camp__Left_Platform__Move_Left_Platform => SpotId::Ebih__Base_Camp__Left_Platform_Moved,
            ActionId::Ebih__Base_Camp__Left_Platform_Moved__Reset_Left_Platform => SpotId::Ebih__Base_Camp__Left_Platform,
            ActionId::Ebih__Waterfall__Ledge_Below_Hole__Throw_Drone => SpotId::Ebih__Waterfall__Below_Left_Switch,
            ActionId::Ebih__Ebih_West__Medium_High_Platform__Throw_Drone_Long => SpotId::Giguna__Giguna_Northeast__Inner_Wall,
            ActionId::Ebih__Ebih_East__Moving_Platform__Activate_Ride => SpotId::Ebih__Ebih_East__Middle_Platform,
            ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Ride => SpotId::Ebih__Ebih_East__Dispenser,
            ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Lift => SpotId::Ebih__Ebih_East__Ledge_End,
            ActionId::Ebih__Ebih_East__Dispenser__Activate_Lift => SpotId::Ebih__Ebih_East__Ledge_End,
            ActionId::Ebih__Drone_Room__Pit_Left__Activate_Lift => SpotId::Ebih__Drone_Room__Moving_Platform,
            ActionId::Ebih__Drone_Room__Pit_Left__Activate_Lift_But_Get_Off_Early => SpotId::Ebih__Drone_Room__West_6,
            ActionId::Ebih__Drone_Room__Moving_Platform__Throw_Drone => SpotId::Ebih__Drone_Room__East_4,
            ActionId::Giguna__Giguna_Northeast__Gate_Left__Throw_Drone => SpotId::Giguna__Giguna_Northeast__Gate_Vent,
            ActionId::Giguna__West_Caverns__Small_Platform__Throw_Drone_Up => SpotId::Giguna__West_Caverns__Higher_Ledge,
            ActionId::Giguna__Wasteland__Middle_Cliff__Throw_Drone => SpotId::Giguna__Wasteland__West_12,
            ActionId::Giguna__Giguna_Base__Stone_Knob__Throw_Drone => SpotId::Giguna__Giguna_Base__Upper_Cliff,
            ActionId::Giguna__Ruins_Top__Turret_Balcony_West__Throw_Drone_onto_Tower => SpotId::Giguna__Ruins_West__Rooftop_East_Edge,
            ActionId::Giguna__Clouds__Platform_Start__Hack_and_Ride_to_Portal => SpotId::Giguna__Clouds__Platform_Stop,
            ActionId::Giguna__Clouds__Platform_Start__Hack_Deploy_Ride_to_Portal => SpotId::Giguna__Clouds__Platform_Stop,
            ActionId::Giguna__Clouds__Platform_Start__Hack_and_Maybe_Get_Off_Early => SpotId::Giguna__Clouds__Platform_Early,
            ActionId::Giguna__Clouds__Platform_Early__Continue_to_Early_Portal => SpotId::Giguna__Clouds__Platform_Early_Portal,
            ActionId::Giguna__Clouds__Platform_Early__Deploy_and_Continue_to_Early_Portal => SpotId::Giguna__Clouds__Platform_Early_Portal,
            ActionId::Giguna__Separator__Platform__Deploy_to_Switch => SpotId::Giguna__Separator__Switch,
            ActionId::Glacier_Breach__Angry_Lions__North__Summon_Portal_to_Top_Platform => SpotId::Glacier_Breach__Angry_Lions__Top_Platform,
            ActionId::Glacier_Breach__Angry_Lions__North__Summon_Portal_to_Second_Platform => SpotId::Glacier_Breach__Angry_Lions__Second_Platform,
            ActionId::Glacier__Dock_Outside__Lower_Platforms__Throw_Drone => SpotId::Glacier__Dock_Outside__Lower_Mid_air,
            ActionId::Glacier__Dock_Outside__Ruins_Platform__Throw_Drone_Up => SpotId::Glacier__Dock_Outside__Above_Ruins,
            ActionId::Glacier__Revival__Save_Point__Throw_Drone_West => SpotId::Glacier__Revival__Just_Thrown,
            ActionId::Glacier__Hammonds_End__Upper_Floor__Move_Portal_to_Lower_West => SpotId::Glacier__Hammonds_End__Upper_Right_Mid_air,
            ActionId::Glacier__Hammonds_End__Upper_Floor__Move_Portal_to_Note => SpotId::Glacier__Hammonds_End__Hammond,
            ActionId::Glacier__Hammonds_End__Upper_Right_Pedestal__Move_Portal_to_Lower_West => SpotId::Glacier__Hammonds_End__Upper_Right_Mid_air,
            ActionId::Glacier__Hammonds_End__Upper_Right_Pedestal__Move_Portal_to_Note => SpotId::Glacier__Hammonds_End__Hammond,
            ActionId::Glacier__Hammonds_End__Upper_Right_Mid_air__Move_Portal_to_Corner => SpotId::Glacier__Hammonds_End__Corner,
            ActionId::Interior__Observatory__East_Staircase_Top__Infinite_Climb_with_Hook => SpotId::Interior__Observatory__Catwalk,
            ActionId::Interior__Cave_Behind_Waterfall__Middle__Throw_Drone => SpotId::Interior__Cave_Behind_Waterfall__Top,
            ActionId::Interior__Facility_Interior__Freight_Elevator__Enter_Emergence => SpotId::Interior__Emergence_Hangar__Freight_Elevator,
            ActionId::Interior__Emergence_Hangar__Freight_Elevator__Exit_Emergence => SpotId::Interior__Facility_Interior__Freight_Elevator,
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Far_East_High => SpotId::Irikar__Airy__Left_Hover_Throw_End,
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Far_East_Low => SpotId::Irikar__Airy__Lower_Throw_End,
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Further_East_and_Low => SpotId::Irikar__Airy__South_Center,
            ActionId::Irikar__Hub__East_Rim__Throw_Drone_Far_East_High => SpotId::Irikar__Airy__Right_Hover_Throw_End,
            ActionId::Irikar__Hub__East_Rim__Throw_Drone_Far_East_Low => SpotId::Irikar__Airy__South_Center,
            ActionId::Irikar__Basement_Portal__Moving_Platform_Start__Activate_Platform => SpotId::Irikar__Basement_Portal__Moving_Platform_End,
            ActionId::Irikar__Midwest__Left_Platform_Start__Hack_and_Ride => SpotId::Irikar__Midwest__Left_Platform_Dest,
            ActionId::Irikar__Midwest__Right_Platform_Start__Hack_and_Ride_Platform => SpotId::Irikar__Midwest__Right_Platform_Dest,
            ActionId::Uhrum__Waterfalls__Center_Island_Middle__Throw_Drone_Up => SpotId::Uhrum__Waterfalls__Medium_Rock,
            ActionId::Uhrum__Annuna_Corridor__Between_Two_Flowers__Throw_Drone_Up => SpotId::Uhrum__Annuna_Corridor__Middle_Platform,
            ActionId::Uhrum__Annuna_Corridor__Between_Two_Flowers__Throw_Drone_Not_As_High => SpotId::Uhrum__Annuna_Corridor__Lower_Platform,
            _ => SpotId::None,
        }
    }
    fn observe_effects(&self, ctx: &Context, world: &World, full_obs: &mut FullObservation) {
        match self.id {
            ActionId::Global__Recall_Drone => {
                rules::observe_action_mode_set_indra(ctx, world, full_obs);
                rules::observe_action_indra_set_invoke_default(ctx, world, full_obs);
            }
            ActionId::Global__Recall_Fast_Travel => {
                rules::observe_action_mode_set_indra_last_set_indra(ctx, world, full_obs);
                rules::observe_action_indra_set_invoke_default(ctx, world, full_obs);
            }
            ActionId::Global__Deploy_Drone => {
                rules::observe_action_mode_set_drone_indra_set_position(ctx, world, full_obs);
            }
            ActionId::Global__Become_Drone => {
                rules::observe_action_mode_set_drone(ctx, world, full_obs);
            }
            ActionId::Global__Become_Indra => {
                rules::observe_action_mode_set_indra(ctx, world, full_obs);
            }
            ActionId::Global__Move_Portal_Here => {
                rules::observe_action_portal_set_position(ctx, world, full_obs);
            }
            ActionId::Amagi_Breach__East_Entrance__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Amagi_Breach__East_Ruins__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Amagi_Breach__Upper_Lake__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Amagi__Main_Area__Carving__Key_Combo => {
                rules::observe_action_amagi__main_area__carving__key_combo__do(ctx, world, full_obs);
            }
            ActionId::Amagi__Main_Area__Platform_3__Throw_Drone_West => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Amagi__Main_Area__Platform_3__Throw_Drone_East => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Amagi__Main_Area__Catwalk_Center__Throw_Drone_West => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Amagi__Main_Area__Catwalk_Center__Throw_Drone_East => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Amagi__Main_Area__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Amagi__Main_Area__Broken_Wall__Throw_Drone_West => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Amagi__Main_Area__Wall_Stuck_Spot__Throw_Drone_West => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Amagi__East_Lake__East_15_Flat__Attract_Portal_to_Arch => {
                rules::observe_action_portal_set_amagi_gt_east_lake_gt_arch_east(ctx, world, full_obs);
            }
            ActionId::Amagi__East_Lake__East_15_Lower__Attract_Portal_to_Arch => {
                rules::observe_action_portal_set_amagi_gt_east_lake_gt_arch_east(ctx, world, full_obs);
            }
            ActionId::Amagi__East_Lake__East_15_Upper_Hover__Attract_Portal_to_Arch => {
                rules::observe_action_portal_set_amagi_gt_east_lake_gt_arch_west(ctx, world, full_obs);
            }
            ActionId::Amagi__East_Lake__East_15_Lower_Hover__Attract_Portal_to_Arch => {
                rules::observe_action_portal_set_amagi_gt_east_lake_gt_arch_west(ctx, world, full_obs);
            }
            ActionId::Amagi__East_Lake__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Annuna__Mirror_Match__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Annuna__East_Bridge__Center_Gap_West__Throw_Drone_into_Tower => {
                rules::observe_action_invoke_deploy_drone_and_move__annuna_gt_east_bridge_gt_center_corridor(ctx, world, full_obs);
            }
            ActionId::Annuna__East_Bridge__Center_Gap_East__Throw_Drone_into_Tower => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Annuna__East_Bridge__Tower_Opening__Climb_and_Throw_Drone => {
                rules::observe_action_invoke_deploy_drone_and_move__annuna_gt_east_bridge_gt_tower_base_east(ctx, world, full_obs);
            }
            ActionId::Annuna__East_Bridge__Tower_West_Ledge__Enter_Combo => {
                rules::observe_action_annuna__east_bridge__tower_west_ledge__enter_combo__do(ctx, world, full_obs);
            }
            ActionId::Annuna__East_Bridge__Tower_East_Ledge__Enter_Combo => {
                rules::observe_action_annuna__east_bridge__tower_east_ledge__enter_combo__do(ctx, world, full_obs);
            }
            ActionId::Annuna__East_Bridge__Tower_Secret__Enter_Combo => {
                rules::observe_action_annuna__east_bridge__tower_secret__enter_combo__do(ctx, world, full_obs);
            }
            ActionId::Annuna__Vertical_Room__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Annuna__Vertical_Room__Door_Switch__Open_Door => {
                rules::observe_action_annuna__vertical_room__door_switch__open_door__do(ctx, world, full_obs);
            }
            ActionId::Annuna__Factory_Entrance__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Annuna__Filter_Teleporter__Shaft_Top__Throw_Drone => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Annuna__Filter_Teleporter__Northeast_Ministair__Throw_Drone_Up => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Annuna__Upper_Save__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Annuna__Center_Save__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Annuna__West_Climb__Switch_Ledge__Open_Door => {
                rules::observe_action_annuna__west_climb__switch_ledge__open_door__do(ctx, world, full_obs);
            }
            ActionId::Annuna__Final_Save__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Ebih_Breach__Portals_101__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Ebih_Breach__In_n_Out__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Ebih_Breach__Rock_Block__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Ebih__Base_Camp__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Ebih__Base_Camp__Left_Platform__Move_Left_Platform => {
                rules::observe_action_ebih__base_camp__left_platform__move_left_platform__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Base_Camp__Left_Platform_Moved__Reset_Left_Platform => {
                rules::observe_action_ebih__base_camp__left_platform_moved__reset_left_platform__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Truck_Gate__Switch__Open_Door => {
                rules::observe_action_ebih__truck_gate__switch__open_door__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Truck_Gate__Portal_Stand__Open_Door => {
                rules::observe_action_ebih__truck_gate__portal_stand__open_door__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Grid_25_10_12__Door_Left__Open_Door => {
                rules::observe_action_ebih__grid_25_10_12__door_left__open_door__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Grid_25_10_12__East_11__Open_Door => {
                rules::observe_action_ebih__grid_25_10_12__east_11__open_door__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Waterfall__Ledge_Below_Hole__Throw_Drone => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Ebih__Waterfall__Below_Left_Switch__Open_Door => {
                rules::observe_action_ebih__waterfall__below_left_switch__open_door__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Waterfall__West_8__Open_Door => {
                rules::observe_action_ebih__waterfall__west_8__open_door__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Waterfall__East_Door_Right__Open_Door => {
                rules::observe_action_ebih__waterfall__east_door_right__open_door__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Waterfall__East_Switch__Open_Door => {
                rules::observe_action_ebih__waterfall__east_switch__open_door__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Waterfall__Platform_by_East_Door__Open_Door => {
                rules::observe_action_ebih__waterfall__platform_by_east_door__open_door__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Waterfall__East_Horizontal_Door__Open_Door => {
                rules::observe_action_ebih__waterfall__east_horizontal_door__open_door__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Waterfall__Ledge_Below_East_Door__Open_Door => {
                rules::observe_action_ebih__waterfall__ledge_below_east_door__open_door__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Ebih_West__Mid_Save__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Ebih__Ebih_West__Upper_Save__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Ebih__Ebih_West__Medium_High_Platform__Throw_Drone_Long => {
                rules::observe_action_invoke_deploy_drone_and_move__ebih_gt_ebih_west_gt_alcove_entrance(ctx, world, full_obs);
            }
            ActionId::Ebih__Ebih_West__Below_Door__Open_Door => {
                rules::observe_action_ebih__ebih_west__below_door__open_door__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Ebih_West__Left_of_Switch__Open_Door => {
                rules::observe_action_ebih__ebih_west__left_of_switch__open_door__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Ebih_West__Lower_Save__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Ebih__Ebih_East__Moving_Platform__Activate_Ride => {
                rules::observe_action_ebih__ebih_east__moving_platform__activate_ride__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Ride => {
                rules::observe_action_ebih__ebih_east__lower_moving_platform__activate_ride__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Lift => {
                rules::observe_action_ebih__ebih_east__lower_moving_platform__activate_lift__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Ebih_East__Dispenser__Activate_Lift => {
                rules::observe_action_ebih__ebih_east__dispenser__activate_lift__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Hidden_Portal__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Ebih__Drone_Room__Pit_Left__Activate_Lift => {
                rules::observe_action_ebih__drone_room__pit_left__activate_lift__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Drone_Room__Pit_Left__Activate_Lift_But_Get_Off_Early => {
                rules::observe_action_ebih__drone_room__pit_left__activate_lift_but_get_off_early__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Drone_Room__Portal_Exit__Activate_Platform => {
                rules::observe_action_ebih__drone_room__portal_exit__activate_platform__do(ctx, world, full_obs);
            }
            ActionId::Ebih__Drone_Room__Moving_Platform__Throw_Drone => {
                rules::observe_action_invoke_deploy_drone_and_move__ebih_gt_drone_room_gt_tree(ctx, world, full_obs);
            }
            ActionId::Ebih__Vertical_Interchange__West_13__Open_Door => {
                rules::observe_action_ebih__vertical_interchange__west_13__open_door__do(ctx, world, full_obs);
            }
            ActionId::Emergence__Camp_Exterior__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Emergence__Storage__At_Door__Open_Door => {
                rules::observe_action_emergence__storage__at_door__open_door__do(ctx, world, full_obs);
            }
            ActionId::Emergence__Storage__Portal_Stand__Open_Door => {
                rules::observe_action_emergence__storage__portal_stand__open_door__do(ctx, world, full_obs);
            }
            ActionId::Giguna_Breach__Peak__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Giguna_Breach__SW_Save__West_11__Open_Door => {
                rules::observe_action_giguna_breach__sw_save__west_11__open_door__do(ctx, world, full_obs);
            }
            ActionId::Giguna_Breach__SW_Save__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Giguna_Breach__Labyrinth__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Giguna_Breach__East__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Giguna_Breach__Emergence__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Giguna_Breach__South__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Giguna__Giguna_Northeast__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Giguna__Giguna_Northeast__Gate_Left__Throw_Drone => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Giguna__Giguna_Northeast__Right_Column__Open_Door_From_Afar => {
                rules::observe_action_giguna__giguna_northeast__right_column__open_door_from_afar__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Giguna_Northeast__Switch__Open_Door => {
                rules::observe_action_giguna__giguna_northeast__switch__open_door__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Carnelian__Upper_Susar__Caught => {
                rules::observe_action_giguna__carnelian__upper_susar__caught__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Carnelian__Upper_Susar__Hack => {
                rules::observe_action_giguna__carnelian__upper_susar__hack__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Carnelian__Switch__Open_Door => {
                rules::observe_action_giguna__carnelian__switch__open_door__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Carnelian__Lower_Susar__Caught => {
                rules::observe_action_giguna__carnelian__lower_susar__caught__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Carnelian__Lower_Susar__Hack => {
                rules::observe_action_giguna__carnelian__lower_susar__hack__do(ctx, world, full_obs);
            }
            ActionId::Giguna__West_Caverns__Small_Platform__Throw_Drone_Up => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Giguna__West_Caverns__East_Susar__Caught => {
                rules::observe_action_giguna__west_caverns__east_susar__caught__do(ctx, world, full_obs);
            }
            ActionId::Giguna__West_Caverns__East_Susar__Hack => {
                rules::observe_action_giguna__west_caverns__east_susar__hack__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Wasteland__Middle_Cliff__Throw_Drone => {
                rules::observe_action_invoke_deploy_drone_and_move__giguna_gt_wasteland_gt_middle_path(ctx, world, full_obs);
            }
            ActionId::Giguna__Giguna_Base__Stone_Knob__Throw_Drone => {
                rules::observe_action_invoke_deploy_drone_and_move__giguna_gt_giguna_base_gt_kari(ctx, world, full_obs);
            }
            ActionId::Giguna__Giguna_Base__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Giguna__Giguna_Base__Switch_Distance_1__Open_Door => {
                rules::observe_action_giguna__giguna_base__switch_distance_1__open_door__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Giguna_Base__Switch_Distance_2__Open_Door => {
                rules::observe_action_giguna__giguna_base__switch_distance_2__open_door__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Giguna_Base__Switch_Distance_3__Open_Door => {
                rules::observe_action_giguna__giguna_base__switch_distance_3__open_door__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Giguna_Base__Switch_Distance_4__Open_Door => {
                rules::observe_action_giguna__giguna_base__switch_distance_4__open_door__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Ruins_West__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Giguna__Ruins_West__Lower_Ledge__Hack_Kishib => {
                rules::observe_action_giguna__ruins_west__lower_ledge__hack_kishib__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Ruins_West__Lower_Ledge__Destroy_Kishib => {
                rules::observe_action_giguna__ruins_west__lower_ledge__destroy_kishib__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Ruins_Top__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Giguna__Ruins_Top__Switch__Open_Doors => {
                rules::observe_action_giguna__ruins_top__switch__open_doors__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Ruins_Top__Turret_Balcony_West__Throw_Drone_onto_Tower => {
                rules::observe_action_invoke_deploy_drone_and_move__giguna_gt_ruins_top_gt_west_7(ctx, world, full_obs);
            }
            ActionId::Giguna__Clouds__Platform_Start__Hack_and_Ride_to_Portal => {
                rules::observe_action_giguna__clouds__platform_start__hack_and_ride_to_portal__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Clouds__Platform_Start__Hack_Deploy_Ride_to_Portal => {
                rules::observe_action_giguna__clouds__platform_start__hack_deploy_ride_to_portal__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Clouds__Platform_Start__Hack_and_Maybe_Get_Off_Early => {
                rules::observe_action_giguna__clouds__platform_start__hack_and_maybe_get_off_early__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Clouds__Platform_Early__Continue_to_Early_Portal => {
                rules::observe_action_if___indra_within_position____indra_set_giguna_gt_clouds_gt_platform_early_portal__portal_set_giguna_gt_clouds_gt_platform_early_portal(ctx, world, full_obs);
            }
            ActionId::Giguna__Clouds__Platform_Early__Deploy_and_Continue_to_Early_Portal => {
                rules::observe_action_portal_set_giguna_gt_clouds_gt_platform_early_portal_invoke_deploy_drone_and_move__giguna_gt_clouds_gt_platform_early_portal(ctx, world, full_obs);
            }
            ActionId::Giguna__East_Caverns__West_14__Enter_Combo => {
                rules::observe_action_giguna__east_caverns__west_14__enter_combo__do(ctx, world, full_obs);
            }
            ActionId::Giguna__East_Caverns__Upper_Susar__Caught => {
                rules::observe_action_giguna__east_caverns__upper_susar__caught__do(ctx, world, full_obs);
            }
            ActionId::Giguna__East_Caverns__Upper_Susar_Mid_jump__Hack => {
                rules::observe_action_giguna__east_caverns__upper_susar_mid_jump__hack__do(ctx, world, full_obs);
            }
            ActionId::Giguna__East_Caverns__Upper_Susar_Jump_from_East__Hack => {
                rules::observe_action_giguna__east_caverns__upper_susar_jump_from_east__hack__do(ctx, world, full_obs);
            }
            ActionId::Giguna__East_Caverns__Upper_Susar_Jump_from_East__Caught => {
                rules::observe_action_giguna__east_caverns__upper_susar_jump_from_east__caught__do(ctx, world, full_obs);
            }
            ActionId::Giguna__East_Caverns__Carving__Enter_Combo => {
                rules::observe_action_giguna__east_caverns__carving__enter_combo__do(ctx, world, full_obs);
            }
            ActionId::Giguna__East_Caverns__Mid_Susar__Hack => {
                rules::observe_action_giguna__east_caverns__mid_susar__hack__do(ctx, world, full_obs);
            }
            ActionId::Giguna__East_Caverns__Mid_Susar__Caught => {
                rules::observe_action_giguna__east_caverns__mid_susar__caught__do(ctx, world, full_obs);
            }
            ActionId::Giguna__East_Caverns__Statues_Ledge__Open_Door => {
                rules::observe_action_giguna__east_caverns__statues_ledge__open_door__do(ctx, world, full_obs);
            }
            ActionId::Giguna__East_Caverns__Statues_Ledge__Enter_Combo => {
                rules::observe_action_giguna__east_caverns__statues_ledge__enter_combo__do(ctx, world, full_obs);
            }
            ActionId::Giguna__East_Caverns__Switch__Open_Door => {
                rules::observe_action_giguna__east_caverns__switch__open_door__do(ctx, world, full_obs);
            }
            ActionId::Giguna__East_Caverns__West_16__Open_Door => {
                rules::observe_action_giguna__east_caverns__west_16__open_door__do(ctx, world, full_obs);
            }
            ActionId::Giguna__East_Caverns__Arc_Passage__Enter_Combo => {
                rules::observe_action_giguna__east_caverns__arc_passage__enter_combo__do(ctx, world, full_obs);
            }
            ActionId::Giguna__East_Caverns__Lower_Susar__Hack => {
                rules::observe_action_giguna__east_caverns__lower_susar__hack__do(ctx, world, full_obs);
            }
            ActionId::Giguna__East_Caverns__Lower_Susar__Caught => {
                rules::observe_action_giguna__east_caverns__lower_susar__caught__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Gateway__One_Jump__Open_Door => {
                rules::observe_action_giguna__gateway__one_jump__open_door__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Gateway__Flask_Ledge__Open_Door => {
                rules::observe_action_giguna__gateway__flask_ledge__open_door__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Labyrinth__Door_Ledge__Open_Door => {
                rules::observe_action_giguna__labyrinth__door_ledge__open_door__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Labyrinth__Switch_Ledge__Open_Door => {
                rules::observe_action_giguna__labyrinth__switch_ledge__open_door__do(ctx, world, full_obs);
            }
            ActionId::Giguna__Labyrinth__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Giguna__Separator__Platform__Deploy_to_Switch => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Giguna__Separator__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Glacier_Breach__South_Save__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Glacier_Breach__West_Save__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Glacier_Breach__Guarded_Corridor__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Glacier_Breach__Save_and_Exit__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Glacier_Breach__Hammonds_Breach__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Glacier_Breach__Angry_Lions__North__Summon_Portal_to_Top_Platform => {
                rules::observe_action_portal_set_glacier_breach_gt_angry_lions_gt_top_platform(ctx, world, full_obs);
            }
            ActionId::Glacier_Breach__Angry_Lions__North__Summon_Portal_to_Second_Platform => {
                rules::observe_action_portal_set_glacier_breach_gt_angry_lions_gt_second_platform(ctx, world, full_obs);
            }
            ActionId::Glacier__Dock_Outside__Lower_Platforms__Throw_Drone => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Glacier__Dock_Outside__Ruins_Platform__Throw_Drone_Up => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Glacier__Revival__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Glacier__Revival__Save_Point__Throw_Drone_West => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Glacier__The_Big_Drop__Solid_Rock__Careful_Break => {
                rules::observe_action_glacier__the_big_drop__solid_rock__careful_break__do(ctx, world, full_obs);
            }
            ActionId::Glacier__Vertical_Room__Upper_Switch__Open_Gate => {
                rules::observe_action_glacier__vertical_room__upper_switch__open_gate__do(ctx, world, full_obs);
            }
            ActionId::Glacier__Vertical_Room__Lower_Switch__Open_Lower_Gatestones => {
                rules::observe_action_glacier__vertical_room__lower_switch__open_lower_gatestones__do(ctx, world, full_obs);
            }
            ActionId::Glacier__Hammonds_End__Upper_Floor__Move_Portal_to_Lower_West => {
                rules::observe_action_portal_set_glacier_gt_hammonds_end_gt_lower_pedestal_west(ctx, world, full_obs);
            }
            ActionId::Glacier__Hammonds_End__Upper_Floor__Move_Portal_to_Note => {
                rules::observe_action_portal_set_glacier_gt_hammonds_end_gt_hammond(ctx, world, full_obs);
            }
            ActionId::Glacier__Hammonds_End__Upper_Right_Pedestal__Move_Portal_to_Lower_West => {
                rules::observe_action_portal_set_glacier_gt_hammonds_end_gt_lower_pedestal_west(ctx, world, full_obs);
            }
            ActionId::Glacier__Hammonds_End__Upper_Right_Pedestal__Move_Portal_to_Note => {
                rules::observe_action_portal_set_glacier_gt_hammonds_end_gt_hammond(ctx, world, full_obs);
            }
            ActionId::Glacier__Hammonds_End__Upper_Right_Mid_air__Move_Portal_to_Corner => {
                rules::observe_action_portal_set_glacier_gt_hammonds_end_gt_corner(ctx, world, full_obs);
            }
            ActionId::Glacier__Hammonds_End__Switch_from_Ledge__Open_Doors => {
                rules::observe_action_glacier__hammonds_end__switch_from_ledge__open_doors__do(ctx, world, full_obs);
            }
            ActionId::Glacier__Hammonds_End__Switch_Near__Open_Doors => {
                rules::observe_action_glacier__hammonds_end__switch_near__open_doors__do(ctx, world, full_obs);
            }
            ActionId::Glacier__Hammonds_End__West_11__Open_Doors => {
                rules::observe_action_glacier__hammonds_end__west_11__open_doors__do(ctx, world, full_obs);
            }
            ActionId::Interior__Observatory__East_Staircase_Top__Infinite_Climb_with_Hook => {
                rules::observe_action_mode_set_drone(ctx, world, full_obs);
            }
            ActionId::Interior__Cave_Behind_Waterfall__Middle__Throw_Drone => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Interior__Facility_Interior__Freight_Elevator__Enter_Emergence => {
                rules::observe_action_save_set_emergence_gt_camp_exterior_gt_save_point(ctx, world, full_obs);
            }
            ActionId::Interior__Emergence_Hangar__Freight_Elevator__Exit_Emergence => {
                rules::observe_action_save_set_uhrum_gt_emergence_save_gt_save_point(ctx, world, full_obs);
            }
            ActionId::Irikar_Breach__Basement_Save__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Irikar_Breach__Corridor__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Far_East_High => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Far_East_Low => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Irikar__Hub__West_Rim__Throw_Drone_Further_East_and_Low => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Irikar__Hub__East_Rim__Throw_Drone_Far_East_High => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Irikar__Hub__East_Rim__Throw_Drone_Far_East_Low => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Irikar__Hub__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall => {
                rules::observe_action_invoke_collect__irikar_royal_storage_wall_invoke_collect__flask_invoke_visit__irikar_gt_hub_gt_royal_storage_in_wall_gt_item_invoke_visit__irikar_gt_hub_gt_royal_storage_by_wall_gt_shockwave_just_the_wall(ctx, world, full_obs);
            }
            ActionId::Irikar__Hub__Collapsed_Column__Shockwave_Wall => {
                rules::observe_action_invoke_collect__irikar_royal_storage_wall_invoke_collect__flask_invoke_visit__irikar_gt_hub_gt_royal_storage_in_wall_gt_item_invoke_visit__irikar_gt_hub_gt_royal_storage_by_wall_gt_shockwave_just_the_wall(ctx, world, full_obs);
            }
            ActionId::Irikar__Basement_Portal__Moving_Platform_Start__Activate_Platform => {
                rules::observe_action_irikar__basement_portal__moving_platform_start__activate_platform__do(ctx, world, full_obs);
            }
            ActionId::Irikar__Midwest__Left_Platform_Start__Hack_and_Ride => {
                rules::observe_action_irikar__midwest__left_platform_start__hack_and_ride__do(ctx, world, full_obs);
            }
            ActionId::Irikar__Midwest__Right_Platform_Start__Hack_and_Ride_Platform => {
                rules::observe_action_irikar__midwest__right_platform_start__hack_and_ride_platform__do(ctx, world, full_obs);
            }
            ActionId::Irikar__Midwest__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Irikar__Beach_Save__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Uhrum_Breach__East_Glitch__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Uhrum__West_Entrance__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Uhrum__Waterfalls__Center_Island_Middle__Throw_Drone_Up => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Uhrum__Save_Room__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Uhrum__Annuna_Corridor__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
            ActionId::Uhrum__Annuna_Corridor__Between_Two_Flowers__Throw_Drone_Up => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Uhrum__Annuna_Corridor__Between_Two_Flowers__Throw_Drone_Not_As_High => {
                rules::observe_action_invoke_deploy_drone(ctx, world, full_obs);
            }
            ActionId::Uhrum__Emergence_Save__Save_Point__Save => {
                rules::observe_action_invoke_save(ctx, world, full_obs);
            }
        }
    }
}

static ACT_DEFS: [Action; 183] = [
    Action {
        id: ActionId::Amagi_Breach__East_Entrance__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Amagi_Breach__East_Ruins__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Amagi_Breach__Upper_Lake__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Amagi__East_Lake__East_15_Flat__Attract_Portal_to_Arch,
        time: 6000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Amagi__East_Lake__East_15_Lower_Hover__Attract_Portal_to_Arch,
        time: 5500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Amagi__East_Lake__East_15_Lower__Attract_Portal_to_Arch,
        time: 6000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Amagi__East_Lake__East_15_Upper_Hover__Attract_Portal_to_Arch,
        time: 5500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Amagi__East_Lake__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Amagi__Main_Area__Broken_Wall__Throw_Drone_West,
        time: 3062,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Amagi__Main_Area__Carving__Key_Combo,
        time: 1750,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Amagi__Main_Area__Catwalk_Center__Throw_Drone_East,
        time: 8974,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Amagi__Main_Area__Catwalk_Center__Throw_Drone_West,
        time: 2750,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Amagi__Main_Area__Platform_3__Throw_Drone_East,
        time: 9724,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Amagi__Main_Area__Platform_3__Throw_Drone_West,
        time: 2000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Amagi__Main_Area__Save_Point__Save,
        time: 1200,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Amagi__Main_Area__Wall_Stuck_Spot__Throw_Drone_West,
        time: 2999,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Annuna__Center_Save__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Annuna__East_Bridge__Center_Gap_East__Throw_Drone_into_Tower,
        time: 3000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Annuna__East_Bridge__Center_Gap_West__Throw_Drone_into_Tower,
        time: 2500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Annuna__East_Bridge__Tower_East_Ledge__Enter_Combo,
        time: 1750,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Annuna__East_Bridge__Tower_Opening__Climb_and_Throw_Drone,
        time: 4000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Annuna__East_Bridge__Tower_Secret__Enter_Combo,
        time: 1750,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Annuna__East_Bridge__Tower_West_Ledge__Enter_Combo,
        time: 1750,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Annuna__Factory_Entrance__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Annuna__Filter_Teleporter__Northeast_Ministair__Throw_Drone_Up,
        time: 2000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Annuna__Filter_Teleporter__Shaft_Top__Throw_Drone,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Annuna__Final_Save__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Annuna__Mirror_Match__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Annuna__Upper_Save__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Annuna__Vertical_Room__Door_Switch__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Annuna__Vertical_Room__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Annuna__West_Climb__Switch_Ledge__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih_Breach__In_n_Out__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih_Breach__Portals_101__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih_Breach__Rock_Block__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Base_Camp__Left_Platform_Moved__Reset_Left_Platform,
        time: 1000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Base_Camp__Left_Platform__Move_Left_Platform,
        time: 1000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Base_Camp__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Drone_Room__Moving_Platform__Throw_Drone,
        time: 1500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Drone_Room__Pit_Left__Activate_Lift,
        time: 7000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Drone_Room__Pit_Left__Activate_Lift_But_Get_Off_Early,
        time: 1400,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Drone_Room__Portal_Exit__Activate_Platform,
        time: 4000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Ebih_East__Dispenser__Activate_Lift,
        time: 5000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Lift,
        time: 1000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Ride,
        time: 4500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Ebih_East__Moving_Platform__Activate_Ride,
        time: 3700,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Ebih_West__Below_Door__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Ebih_West__Left_of_Switch__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Ebih_West__Lower_Save__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Ebih_West__Medium_High_Platform__Throw_Drone_Long,
        time: 5300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Ebih_West__Mid_Save__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Ebih_West__Upper_Save__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Grid_25_10_12__Door_Left__Open_Door,
        time: 1000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Grid_25_10_12__East_11__Open_Door,
        time: 1000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Hidden_Portal__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Truck_Gate__Portal_Stand__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Truck_Gate__Switch__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Vertical_Interchange__West_13__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Waterfall__Below_Left_Switch__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Waterfall__East_Door_Right__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Waterfall__East_Horizontal_Door__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Waterfall__East_Switch__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Waterfall__Ledge_Below_East_Door__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Waterfall__Ledge_Below_Hole__Throw_Drone,
        time: 2000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Waterfall__Platform_by_East_Door__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Ebih__Waterfall__West_8__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Emergence__Camp_Exterior__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Emergence__Storage__At_Door__Open_Door,
        time: 1000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Emergence__Storage__Portal_Stand__Open_Door,
        time: 1000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna_Breach__East__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna_Breach__Emergence__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna_Breach__Labyrinth__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna_Breach__Peak__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna_Breach__SW_Save__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna_Breach__SW_Save__West_11__Open_Door,
        time: 250,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna_Breach__South__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Carnelian__Lower_Susar__Caught,
        time: 3000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Carnelian__Lower_Susar__Hack,
        time: 500,
        price: Currency::Energy(100),
    },
    Action {
        id: ActionId::Giguna__Carnelian__Switch__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Carnelian__Upper_Susar__Caught,
        time: 3000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Carnelian__Upper_Susar__Hack,
        time: 500,
        price: Currency::Energy(100),
    },
    Action {
        id: ActionId::Giguna__Clouds__Platform_Early__Continue_to_Early_Portal,
        time: 2708,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Clouds__Platform_Early__Deploy_and_Continue_to_Early_Portal,
        time: 2708,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Clouds__Platform_Start__Hack_Deploy_Ride_to_Portal,
        time: 12000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Clouds__Platform_Start__Hack_and_Maybe_Get_Off_Early,
        time: 8695,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Clouds__Platform_Start__Hack_and_Ride_to_Portal,
        time: 12000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__East_Caverns__Arc_Passage__Enter_Combo,
        time: 1750,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__East_Caverns__Carving__Enter_Combo,
        time: 1750,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__East_Caverns__Lower_Susar__Caught,
        time: 3000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__East_Caverns__Lower_Susar__Hack,
        time: 500,
        price: Currency::Energy(100),
    },
    Action {
        id: ActionId::Giguna__East_Caverns__Mid_Susar__Caught,
        time: 3000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__East_Caverns__Mid_Susar__Hack,
        time: 500,
        price: Currency::Energy(100),
    },
    Action {
        id: ActionId::Giguna__East_Caverns__Statues_Ledge__Enter_Combo,
        time: 1750,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__East_Caverns__Statues_Ledge__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__East_Caverns__Switch__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__East_Caverns__Upper_Susar_Jump_from_East__Caught,
        time: 3000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__East_Caverns__Upper_Susar_Jump_from_East__Hack,
        time: 500,
        price: Currency::Energy(100),
    },
    Action {
        id: ActionId::Giguna__East_Caverns__Upper_Susar_Mid_jump__Hack,
        time: 500,
        price: Currency::Energy(100),
    },
    Action {
        id: ActionId::Giguna__East_Caverns__Upper_Susar__Caught,
        time: 3000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__East_Caverns__West_14__Enter_Combo,
        time: 1750,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__East_Caverns__West_16__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Gateway__Flask_Ledge__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Gateway__One_Jump__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Giguna_Base__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Giguna_Base__Stone_Knob__Throw_Drone,
        time: 1000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Giguna_Base__Switch_Distance_1__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Giguna_Base__Switch_Distance_2__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Giguna_Base__Switch_Distance_3__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Giguna_Base__Switch_Distance_4__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Giguna_Northeast__Gate_Left__Throw_Drone,
        time: 1250,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Giguna_Northeast__Right_Column__Open_Door_From_Afar,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Giguna_Northeast__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Giguna_Northeast__Switch__Open_Door,
        time: 1000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Labyrinth__Door_Ledge__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Labyrinth__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Labyrinth__Switch_Ledge__Open_Door,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Ruins_Top__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Ruins_Top__Switch__Open_Doors,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Ruins_Top__Turret_Balcony_West__Throw_Drone_onto_Tower,
        time: 3800,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Ruins_West__Lower_Ledge__Destroy_Kishib,
        time: 3500,
        price: Currency::Energy(100),
    },
    Action {
        id: ActionId::Giguna__Ruins_West__Lower_Ledge__Hack_Kishib,
        time: 500,
        price: Currency::Energy(100),
    },
    Action {
        id: ActionId::Giguna__Ruins_West__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Separator__Platform__Deploy_to_Switch,
        time: 1312,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Separator__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__Wasteland__Middle_Cliff__Throw_Drone,
        time: 3500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__West_Caverns__East_Susar__Caught,
        time: 3000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Giguna__West_Caverns__East_Susar__Hack,
        time: 500,
        price: Currency::Energy(100),
    },
    Action {
        id: ActionId::Giguna__West_Caverns__Small_Platform__Throw_Drone_Up,
        time: 1500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier_Breach__Angry_Lions__North__Summon_Portal_to_Second_Platform,
        time: 1500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier_Breach__Angry_Lions__North__Summon_Portal_to_Top_Platform,
        time: 2250,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier_Breach__Guarded_Corridor__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier_Breach__Hammonds_Breach__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier_Breach__Save_and_Exit__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier_Breach__South_Save__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier_Breach__West_Save__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier__Dock_Outside__Lower_Platforms__Throw_Drone,
        time: 1500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier__Dock_Outside__Ruins_Platform__Throw_Drone_Up,
        time: 1000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier__Hammonds_End__Switch_Near__Open_Doors,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier__Hammonds_End__Switch_from_Ledge__Open_Doors,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier__Hammonds_End__Upper_Floor__Move_Portal_to_Lower_West,
        time: 3000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier__Hammonds_End__Upper_Floor__Move_Portal_to_Note,
        time: 5500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier__Hammonds_End__Upper_Right_Mid_air__Move_Portal_to_Corner,
        time: 4000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier__Hammonds_End__Upper_Right_Pedestal__Move_Portal_to_Lower_West,
        time: 2500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier__Hammonds_End__Upper_Right_Pedestal__Move_Portal_to_Note,
        time: 5000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier__Hammonds_End__West_11__Open_Doors,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier__Revival__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier__Revival__Save_Point__Throw_Drone_West,
        time: 750,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier__The_Big_Drop__Solid_Rock__Careful_Break,
        time: 1000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier__Vertical_Room__Lower_Switch__Open_Lower_Gatestones,
        time: 1000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Glacier__Vertical_Room__Upper_Switch__Open_Gate,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Global__Become_Drone,
        time: 100,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Global__Become_Indra,
        time: 100,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Global__Deploy_Drone,
        time: 500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Global__Move_Portal_Here,
        time: 100,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Global__Recall_Drone,
        time: 3000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Global__Recall_Fast_Travel,
        time: 2000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Interior__Cave_Behind_Waterfall__Middle__Throw_Drone,
        time: 1100,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Interior__Emergence_Hangar__Freight_Elevator__Exit_Emergence,
        time: 13500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Interior__Facility_Interior__Freight_Elevator__Enter_Emergence,
        time: 11500,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Interior__Observatory__East_Staircase_Top__Infinite_Climb_with_Hook,
        time: 2400,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Irikar_Breach__Basement_Save__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Irikar_Breach__Corridor__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Irikar__Basement_Portal__Moving_Platform_Start__Activate_Platform,
        time: 8000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Irikar__Beach_Save__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Irikar__Hub__Collapsed_Column__Shockwave_Wall,
        time: 3500,
        price: Currency::Energy(100),
    },
    Action {
        id: ActionId::Irikar__Hub__East_Rim__Throw_Drone_Far_East_High,
        time: 6725,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Irikar__Hub__East_Rim__Throw_Drone_Far_East_Low,
        time: 6599,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall,
        time: 3500,
        price: Currency::Energy(100),
    },
    Action {
        id: ActionId::Irikar__Hub__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Irikar__Hub__West_Rim__Throw_Drone_Far_East_High,
        time: 6600,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Irikar__Hub__West_Rim__Throw_Drone_Far_East_Low,
        time: 6600,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Irikar__Hub__West_Rim__Throw_Drone_Further_East_and_Low,
        time: 8100,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Irikar__Midwest__Left_Platform_Start__Hack_and_Ride,
        time: 13000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Irikar__Midwest__Right_Platform_Start__Hack_and_Ride_Platform,
        time: 20000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Irikar__Midwest__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Uhrum_Breach__East_Glitch__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Uhrum__Annuna_Corridor__Between_Two_Flowers__Throw_Drone_Not_As_High,
        time: 1000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Uhrum__Annuna_Corridor__Between_Two_Flowers__Throw_Drone_Up,
        time: 1750,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Uhrum__Annuna_Corridor__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Uhrum__Emergence_Save__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Uhrum__Save_Room__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Uhrum__Waterfalls__Center_Island_Middle__Throw_Drone_Up,
        time: 2000,
        price: Currency::Free,
    },
    Action {
        id: ActionId::Uhrum__West_Entrance__Save_Point__Save,
        time: 1300,
        price: Currency::Free,
    },
];

pub(super) fn build_actions(actions: &mut EnumMap<ActionId, Action>) {
    for (k, act) in ACT_DEFS.iter().enumerate() {
        assert!(k == act.id.into_usize(),
                "Order of location ids does not match: {} defined as {} but expected to be {}",
                act.id, act.id.into_usize(), k);
        actions[act.id] = *act;
    }
}

pub fn get_action_spot(act_id: ActionId) -> SpotId {
    match act_id {
        ActionId::Amagi_Breach__East_Entrance__Save_Point__Save => SpotId::Amagi_Breach__East_Entrance__Save_Point,
        ActionId::Amagi_Breach__East_Ruins__Save_Point__Save => SpotId::Amagi_Breach__East_Ruins__Save_Point,
        ActionId::Amagi_Breach__Upper_Lake__Save_Point__Save => SpotId::Amagi_Breach__Upper_Lake__Save_Point,
        ActionId::Amagi__Main_Area__Carving__Key_Combo => SpotId::Amagi__Main_Area__Carving,
        ActionId::Amagi__Main_Area__Platform_3__Throw_Drone_East | ActionId::Amagi__Main_Area__Platform_3__Throw_Drone_West => SpotId::Amagi__Main_Area__Platform_3,
        ActionId::Amagi__Main_Area__Catwalk_Center__Throw_Drone_East | ActionId::Amagi__Main_Area__Catwalk_Center__Throw_Drone_West => SpotId::Amagi__Main_Area__Catwalk_Center,
        ActionId::Amagi__Main_Area__Save_Point__Save => SpotId::Amagi__Main_Area__Save_Point,
        ActionId::Amagi__Main_Area__Broken_Wall__Throw_Drone_West => SpotId::Amagi__Main_Area__Broken_Wall,
        ActionId::Amagi__Main_Area__Wall_Stuck_Spot__Throw_Drone_West => SpotId::Amagi__Main_Area__Wall_Stuck_Spot,
        ActionId::Amagi__East_Lake__East_15_Flat__Attract_Portal_to_Arch => SpotId::Amagi__East_Lake__East_15_Flat,
        ActionId::Amagi__East_Lake__East_15_Lower__Attract_Portal_to_Arch => SpotId::Amagi__East_Lake__East_15_Lower,
        ActionId::Amagi__East_Lake__East_15_Upper_Hover__Attract_Portal_to_Arch => SpotId::Amagi__East_Lake__East_15_Upper_Hover,
        ActionId::Amagi__East_Lake__East_15_Lower_Hover__Attract_Portal_to_Arch => SpotId::Amagi__East_Lake__East_15_Lower_Hover,
        ActionId::Amagi__East_Lake__Save_Point__Save => SpotId::Amagi__East_Lake__Save_Point,
        ActionId::Annuna__Mirror_Match__Save_Point__Save => SpotId::Annuna__Mirror_Match__Save_Point,
        ActionId::Annuna__East_Bridge__Center_Gap_West__Throw_Drone_into_Tower => SpotId::Annuna__East_Bridge__Center_Gap_West,
        ActionId::Annuna__East_Bridge__Center_Gap_East__Throw_Drone_into_Tower => SpotId::Annuna__East_Bridge__Center_Gap_East,
        ActionId::Annuna__East_Bridge__Tower_Opening__Climb_and_Throw_Drone => SpotId::Annuna__East_Bridge__Tower_Opening,
        ActionId::Annuna__East_Bridge__Tower_West_Ledge__Enter_Combo => SpotId::Annuna__East_Bridge__Tower_West_Ledge,
        ActionId::Annuna__East_Bridge__Tower_East_Ledge__Enter_Combo => SpotId::Annuna__East_Bridge__Tower_East_Ledge,
        ActionId::Annuna__East_Bridge__Tower_Secret__Enter_Combo => SpotId::Annuna__East_Bridge__Tower_Secret,
        ActionId::Annuna__Vertical_Room__Save_Point__Save => SpotId::Annuna__Vertical_Room__Save_Point,
        ActionId::Annuna__Vertical_Room__Door_Switch__Open_Door => SpotId::Annuna__Vertical_Room__Door_Switch,
        ActionId::Annuna__Factory_Entrance__Save_Point__Save => SpotId::Annuna__Factory_Entrance__Save_Point,
        ActionId::Annuna__Filter_Teleporter__Shaft_Top__Throw_Drone => SpotId::Annuna__Filter_Teleporter__Shaft_Top,
        ActionId::Annuna__Filter_Teleporter__Northeast_Ministair__Throw_Drone_Up => SpotId::Annuna__Filter_Teleporter__Northeast_Ministair,
        ActionId::Annuna__Upper_Save__Save_Point__Save => SpotId::Annuna__Upper_Save__Save_Point,
        ActionId::Annuna__Center_Save__Save_Point__Save => SpotId::Annuna__Center_Save__Save_Point,
        ActionId::Annuna__West_Climb__Switch_Ledge__Open_Door => SpotId::Annuna__West_Climb__Switch_Ledge,
        ActionId::Annuna__Final_Save__Save_Point__Save => SpotId::Annuna__Final_Save__Save_Point,
        ActionId::Ebih_Breach__Portals_101__Save_Point__Save => SpotId::Ebih_Breach__Portals_101__Save_Point,
        ActionId::Ebih_Breach__In_n_Out__Save_Point__Save => SpotId::Ebih_Breach__In_n_Out__Save_Point,
        ActionId::Ebih_Breach__Rock_Block__Save_Point__Save => SpotId::Ebih_Breach__Rock_Block__Save_Point,
        ActionId::Ebih__Base_Camp__Save_Point__Save => SpotId::Ebih__Base_Camp__Save_Point,
        ActionId::Ebih__Base_Camp__Left_Platform__Move_Left_Platform => SpotId::Ebih__Base_Camp__Left_Platform,
        ActionId::Ebih__Base_Camp__Left_Platform_Moved__Reset_Left_Platform => SpotId::Ebih__Base_Camp__Left_Platform_Moved,
        ActionId::Ebih__Truck_Gate__Switch__Open_Door => SpotId::Ebih__Truck_Gate__Switch,
        ActionId::Ebih__Truck_Gate__Portal_Stand__Open_Door => SpotId::Ebih__Truck_Gate__Portal_Stand,
        ActionId::Ebih__Grid_25_10_12__Door_Left__Open_Door => SpotId::Ebih__Grid_25_10_12__Door_Left,
        ActionId::Ebih__Grid_25_10_12__East_11__Open_Door => SpotId::Ebih__Grid_25_10_12__East_11,
        ActionId::Ebih__Waterfall__Ledge_Below_Hole__Throw_Drone => SpotId::Ebih__Waterfall__Ledge_Below_Hole,
        ActionId::Ebih__Waterfall__Below_Left_Switch__Open_Door => SpotId::Ebih__Waterfall__Below_Left_Switch,
        ActionId::Ebih__Waterfall__West_8__Open_Door => SpotId::Ebih__Waterfall__West_8,
        ActionId::Ebih__Waterfall__East_Door_Right__Open_Door => SpotId::Ebih__Waterfall__East_Door_Right,
        ActionId::Ebih__Waterfall__East_Switch__Open_Door => SpotId::Ebih__Waterfall__East_Switch,
        ActionId::Ebih__Waterfall__Platform_by_East_Door__Open_Door => SpotId::Ebih__Waterfall__Platform_by_East_Door,
        ActionId::Ebih__Waterfall__East_Horizontal_Door__Open_Door => SpotId::Ebih__Waterfall__East_Horizontal_Door,
        ActionId::Ebih__Waterfall__Ledge_Below_East_Door__Open_Door => SpotId::Ebih__Waterfall__Ledge_Below_East_Door,
        ActionId::Ebih__Ebih_West__Mid_Save__Save => SpotId::Ebih__Ebih_West__Mid_Save,
        ActionId::Ebih__Ebih_West__Upper_Save__Save => SpotId::Ebih__Ebih_West__Upper_Save,
        ActionId::Ebih__Ebih_West__Medium_High_Platform__Throw_Drone_Long => SpotId::Ebih__Ebih_West__Medium_High_Platform,
        ActionId::Ebih__Ebih_West__Below_Door__Open_Door => SpotId::Ebih__Ebih_West__Below_Door,
        ActionId::Ebih__Ebih_West__Left_of_Switch__Open_Door => SpotId::Ebih__Ebih_West__Left_of_Switch,
        ActionId::Ebih__Ebih_West__Lower_Save__Save => SpotId::Ebih__Ebih_West__Lower_Save,
        ActionId::Ebih__Ebih_East__Moving_Platform__Activate_Ride => SpotId::Ebih__Ebih_East__Moving_Platform,
        ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Lift | ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Ride => SpotId::Ebih__Ebih_East__Lower_Moving_Platform,
        ActionId::Ebih__Ebih_East__Dispenser__Activate_Lift => SpotId::Ebih__Ebih_East__Dispenser,
        ActionId::Ebih__Hidden_Portal__Save_Point__Save => SpotId::Ebih__Hidden_Portal__Save_Point,
        ActionId::Ebih__Drone_Room__Pit_Left__Activate_Lift | ActionId::Ebih__Drone_Room__Pit_Left__Activate_Lift_But_Get_Off_Early => SpotId::Ebih__Drone_Room__Pit_Left,
        ActionId::Ebih__Drone_Room__Portal_Exit__Activate_Platform => SpotId::Ebih__Drone_Room__Portal_Exit,
        ActionId::Ebih__Drone_Room__Moving_Platform__Throw_Drone => SpotId::Ebih__Drone_Room__Moving_Platform,
        ActionId::Ebih__Vertical_Interchange__West_13__Open_Door => SpotId::Ebih__Vertical_Interchange__West_13,
        ActionId::Emergence__Camp_Exterior__Save_Point__Save => SpotId::Emergence__Camp_Exterior__Save_Point,
        ActionId::Emergence__Storage__At_Door__Open_Door => SpotId::Emergence__Storage__At_Door,
        ActionId::Emergence__Storage__Portal_Stand__Open_Door => SpotId::Emergence__Storage__Portal_Stand,
        ActionId::Giguna_Breach__Peak__Save_Point__Save => SpotId::Giguna_Breach__Peak__Save_Point,
        ActionId::Giguna_Breach__SW_Save__West_11__Open_Door => SpotId::Giguna_Breach__SW_Save__West_11,
        ActionId::Giguna_Breach__SW_Save__Save_Point__Save => SpotId::Giguna_Breach__SW_Save__Save_Point,
        ActionId::Giguna_Breach__Labyrinth__Save_Point__Save => SpotId::Giguna_Breach__Labyrinth__Save_Point,
        ActionId::Giguna_Breach__East__Save_Point__Save => SpotId::Giguna_Breach__East__Save_Point,
        ActionId::Giguna_Breach__Emergence__Save_Point__Save => SpotId::Giguna_Breach__Emergence__Save_Point,
        ActionId::Giguna_Breach__South__Save_Point__Save => SpotId::Giguna_Breach__South__Save_Point,
        ActionId::Giguna__Giguna_Northeast__Save_Point__Save => SpotId::Giguna__Giguna_Northeast__Save_Point,
        ActionId::Giguna__Giguna_Northeast__Gate_Left__Throw_Drone => SpotId::Giguna__Giguna_Northeast__Gate_Left,
        ActionId::Giguna__Giguna_Northeast__Right_Column__Open_Door_From_Afar => SpotId::Giguna__Giguna_Northeast__Right_Column,
        ActionId::Giguna__Giguna_Northeast__Switch__Open_Door => SpotId::Giguna__Giguna_Northeast__Switch,
        ActionId::Giguna__Carnelian__Upper_Susar__Caught | ActionId::Giguna__Carnelian__Upper_Susar__Hack => SpotId::Giguna__Carnelian__Upper_Susar,
        ActionId::Giguna__Carnelian__Switch__Open_Door => SpotId::Giguna__Carnelian__Switch,
        ActionId::Giguna__Carnelian__Lower_Susar__Caught | ActionId::Giguna__Carnelian__Lower_Susar__Hack => SpotId::Giguna__Carnelian__Lower_Susar,
        ActionId::Giguna__West_Caverns__Small_Platform__Throw_Drone_Up => SpotId::Giguna__West_Caverns__Small_Platform,
        ActionId::Giguna__West_Caverns__East_Susar__Caught | ActionId::Giguna__West_Caverns__East_Susar__Hack => SpotId::Giguna__West_Caverns__East_Susar,
        ActionId::Giguna__Wasteland__Middle_Cliff__Throw_Drone => SpotId::Giguna__Wasteland__Middle_Cliff,
        ActionId::Giguna__Giguna_Base__Stone_Knob__Throw_Drone => SpotId::Giguna__Giguna_Base__Stone_Knob,
        ActionId::Giguna__Giguna_Base__Save_Point__Save => SpotId::Giguna__Giguna_Base__Save_Point,
        ActionId::Giguna__Giguna_Base__Switch_Distance_1__Open_Door => SpotId::Giguna__Giguna_Base__Switch_Distance_1,
        ActionId::Giguna__Giguna_Base__Switch_Distance_2__Open_Door => SpotId::Giguna__Giguna_Base__Switch_Distance_2,
        ActionId::Giguna__Giguna_Base__Switch_Distance_3__Open_Door => SpotId::Giguna__Giguna_Base__Switch_Distance_3,
        ActionId::Giguna__Giguna_Base__Switch_Distance_4__Open_Door => SpotId::Giguna__Giguna_Base__Switch_Distance_4,
        ActionId::Giguna__Ruins_West__Save_Point__Save => SpotId::Giguna__Ruins_West__Save_Point,
        ActionId::Giguna__Ruins_West__Lower_Ledge__Destroy_Kishib | ActionId::Giguna__Ruins_West__Lower_Ledge__Hack_Kishib => SpotId::Giguna__Ruins_West__Lower_Ledge,
        ActionId::Giguna__Ruins_Top__Save_Point__Save => SpotId::Giguna__Ruins_Top__Save_Point,
        ActionId::Giguna__Ruins_Top__Switch__Open_Doors => SpotId::Giguna__Ruins_Top__Switch,
        ActionId::Giguna__Ruins_Top__Turret_Balcony_West__Throw_Drone_onto_Tower => SpotId::Giguna__Ruins_Top__Turret_Balcony_West,
        ActionId::Giguna__Clouds__Platform_Start__Hack_and_Maybe_Get_Off_Early | ActionId::Giguna__Clouds__Platform_Start__Hack_and_Ride_to_Portal | ActionId::Giguna__Clouds__Platform_Start__Hack_Deploy_Ride_to_Portal => SpotId::Giguna__Clouds__Platform_Start,
        ActionId::Giguna__Clouds__Platform_Early__Continue_to_Early_Portal | ActionId::Giguna__Clouds__Platform_Early__Deploy_and_Continue_to_Early_Portal => SpotId::Giguna__Clouds__Platform_Early,
        ActionId::Giguna__East_Caverns__West_14__Enter_Combo => SpotId::Giguna__East_Caverns__West_14,
        ActionId::Giguna__East_Caverns__Upper_Susar__Caught => SpotId::Giguna__East_Caverns__Upper_Susar,
        ActionId::Giguna__East_Caverns__Upper_Susar_Mid_jump__Hack => SpotId::Giguna__East_Caverns__Upper_Susar_Mid_jump,
        ActionId::Giguna__East_Caverns__Upper_Susar_Jump_from_East__Caught | ActionId::Giguna__East_Caverns__Upper_Susar_Jump_from_East__Hack => SpotId::Giguna__East_Caverns__Upper_Susar_Jump_from_East,
        ActionId::Giguna__East_Caverns__Carving__Enter_Combo => SpotId::Giguna__East_Caverns__Carving,
        ActionId::Giguna__East_Caverns__Mid_Susar__Caught | ActionId::Giguna__East_Caverns__Mid_Susar__Hack => SpotId::Giguna__East_Caverns__Mid_Susar,
        ActionId::Giguna__East_Caverns__Statues_Ledge__Enter_Combo | ActionId::Giguna__East_Caverns__Statues_Ledge__Open_Door => SpotId::Giguna__East_Caverns__Statues_Ledge,
        ActionId::Giguna__East_Caverns__Switch__Open_Door => SpotId::Giguna__East_Caverns__Switch,
        ActionId::Giguna__East_Caverns__West_16__Open_Door => SpotId::Giguna__East_Caverns__West_16,
        ActionId::Giguna__East_Caverns__Arc_Passage__Enter_Combo => SpotId::Giguna__East_Caverns__Arc_Passage,
        ActionId::Giguna__East_Caverns__Lower_Susar__Caught | ActionId::Giguna__East_Caverns__Lower_Susar__Hack => SpotId::Giguna__East_Caverns__Lower_Susar,
        ActionId::Giguna__Gateway__One_Jump__Open_Door => SpotId::Giguna__Gateway__One_Jump,
        ActionId::Giguna__Gateway__Flask_Ledge__Open_Door => SpotId::Giguna__Gateway__Flask_Ledge,
        ActionId::Giguna__Labyrinth__Door_Ledge__Open_Door => SpotId::Giguna__Labyrinth__Door_Ledge,
        ActionId::Giguna__Labyrinth__Switch_Ledge__Open_Door => SpotId::Giguna__Labyrinth__Switch_Ledge,
        ActionId::Giguna__Labyrinth__Save_Point__Save => SpotId::Giguna__Labyrinth__Save_Point,
        ActionId::Giguna__Separator__Platform__Deploy_to_Switch => SpotId::Giguna__Separator__Platform,
        ActionId::Giguna__Separator__Save_Point__Save => SpotId::Giguna__Separator__Save_Point,
        ActionId::Glacier_Breach__South_Save__Save_Point__Save => SpotId::Glacier_Breach__South_Save__Save_Point,
        ActionId::Glacier_Breach__West_Save__Save_Point__Save => SpotId::Glacier_Breach__West_Save__Save_Point,
        ActionId::Glacier_Breach__Guarded_Corridor__Save_Point__Save => SpotId::Glacier_Breach__Guarded_Corridor__Save_Point,
        ActionId::Glacier_Breach__Save_and_Exit__Save_Point__Save => SpotId::Glacier_Breach__Save_and_Exit__Save_Point,
        ActionId::Glacier_Breach__Hammonds_Breach__Save_Point__Save => SpotId::Glacier_Breach__Hammonds_Breach__Save_Point,
        ActionId::Glacier_Breach__Angry_Lions__North__Summon_Portal_to_Second_Platform | ActionId::Glacier_Breach__Angry_Lions__North__Summon_Portal_to_Top_Platform => SpotId::Glacier_Breach__Angry_Lions__North,
        ActionId::Glacier__Dock_Outside__Lower_Platforms__Throw_Drone => SpotId::Glacier__Dock_Outside__Lower_Platforms,
        ActionId::Glacier__Dock_Outside__Ruins_Platform__Throw_Drone_Up => SpotId::Glacier__Dock_Outside__Ruins_Platform,
        ActionId::Glacier__Revival__Save_Point__Save | ActionId::Glacier__Revival__Save_Point__Throw_Drone_West => SpotId::Glacier__Revival__Save_Point,
        ActionId::Glacier__The_Big_Drop__Solid_Rock__Careful_Break => SpotId::Glacier__The_Big_Drop__Solid_Rock,
        ActionId::Glacier__Vertical_Room__Upper_Switch__Open_Gate => SpotId::Glacier__Vertical_Room__Upper_Switch,
        ActionId::Glacier__Vertical_Room__Lower_Switch__Open_Lower_Gatestones => SpotId::Glacier__Vertical_Room__Lower_Switch,
        ActionId::Glacier__Hammonds_End__Upper_Floor__Move_Portal_to_Lower_West | ActionId::Glacier__Hammonds_End__Upper_Floor__Move_Portal_to_Note => SpotId::Glacier__Hammonds_End__Upper_Floor,
        ActionId::Glacier__Hammonds_End__Upper_Right_Pedestal__Move_Portal_to_Lower_West | ActionId::Glacier__Hammonds_End__Upper_Right_Pedestal__Move_Portal_to_Note => SpotId::Glacier__Hammonds_End__Upper_Right_Pedestal,
        ActionId::Glacier__Hammonds_End__Upper_Right_Mid_air__Move_Portal_to_Corner => SpotId::Glacier__Hammonds_End__Upper_Right_Mid_air,
        ActionId::Glacier__Hammonds_End__Switch_from_Ledge__Open_Doors => SpotId::Glacier__Hammonds_End__Switch_from_Ledge,
        ActionId::Glacier__Hammonds_End__Switch_Near__Open_Doors => SpotId::Glacier__Hammonds_End__Switch_Near,
        ActionId::Glacier__Hammonds_End__West_11__Open_Doors => SpotId::Glacier__Hammonds_End__West_11,
        ActionId::Interior__Observatory__East_Staircase_Top__Infinite_Climb_with_Hook => SpotId::Interior__Observatory__East_Staircase_Top,
        ActionId::Interior__Cave_Behind_Waterfall__Middle__Throw_Drone => SpotId::Interior__Cave_Behind_Waterfall__Middle,
        ActionId::Interior__Facility_Interior__Freight_Elevator__Enter_Emergence => SpotId::Interior__Facility_Interior__Freight_Elevator,
        ActionId::Interior__Emergence_Hangar__Freight_Elevator__Exit_Emergence => SpotId::Interior__Emergence_Hangar__Freight_Elevator,
        ActionId::Irikar_Breach__Basement_Save__Save_Point__Save => SpotId::Irikar_Breach__Basement_Save__Save_Point,
        ActionId::Irikar_Breach__Corridor__Save_Point__Save => SpotId::Irikar_Breach__Corridor__Save_Point,
        ActionId::Irikar__Hub__West_Rim__Throw_Drone_Far_East_High | ActionId::Irikar__Hub__West_Rim__Throw_Drone_Far_East_Low | ActionId::Irikar__Hub__West_Rim__Throw_Drone_Further_East_and_Low => SpotId::Irikar__Hub__West_Rim,
        ActionId::Irikar__Hub__East_Rim__Throw_Drone_Far_East_High | ActionId::Irikar__Hub__East_Rim__Throw_Drone_Far_East_Low => SpotId::Irikar__Hub__East_Rim,
        ActionId::Irikar__Hub__Save_Point__Save => SpotId::Irikar__Hub__Save_Point,
        ActionId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall => SpotId::Irikar__Hub__Royal_Storage_By_Wall,
        ActionId::Irikar__Hub__Collapsed_Column__Shockwave_Wall => SpotId::Irikar__Hub__Collapsed_Column,
        ActionId::Irikar__Basement_Portal__Moving_Platform_Start__Activate_Platform => SpotId::Irikar__Basement_Portal__Moving_Platform_Start,
        ActionId::Irikar__Midwest__Left_Platform_Start__Hack_and_Ride => SpotId::Irikar__Midwest__Left_Platform_Start,
        ActionId::Irikar__Midwest__Right_Platform_Start__Hack_and_Ride_Platform => SpotId::Irikar__Midwest__Right_Platform_Start,
        ActionId::Irikar__Midwest__Save_Point__Save => SpotId::Irikar__Midwest__Save_Point,
        ActionId::Irikar__Beach_Save__Save_Point__Save => SpotId::Irikar__Beach_Save__Save_Point,
        ActionId::Uhrum_Breach__East_Glitch__Save_Point__Save => SpotId::Uhrum_Breach__East_Glitch__Save_Point,
        ActionId::Uhrum__West_Entrance__Save_Point__Save => SpotId::Uhrum__West_Entrance__Save_Point,
        ActionId::Uhrum__Waterfalls__Center_Island_Middle__Throw_Drone_Up => SpotId::Uhrum__Waterfalls__Center_Island_Middle,
        ActionId::Uhrum__Save_Room__Save_Point__Save => SpotId::Uhrum__Save_Room__Save_Point,
        ActionId::Uhrum__Annuna_Corridor__Save_Point__Save => SpotId::Uhrum__Annuna_Corridor__Save_Point,
        ActionId::Uhrum__Annuna_Corridor__Between_Two_Flowers__Throw_Drone_Not_As_High | ActionId::Uhrum__Annuna_Corridor__Between_Two_Flowers__Throw_Drone_Up => SpotId::Uhrum__Annuna_Corridor__Between_Two_Flowers,
        ActionId::Uhrum__Emergence_Save__Save_Point__Save => SpotId::Uhrum__Emergence_Save__Save_Point,
        _ => SpotId::None,
    }
}

pub fn action_has_visit(act_id: ActionId) -> bool {
    match act_id {
        ActionId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall => true,
        ActionId::Irikar__Hub__Collapsed_Column__Shockwave_Wall => true,
        _ => false,
    }
}
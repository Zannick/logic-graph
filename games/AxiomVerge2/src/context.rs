//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

#![allow(non_snake_case)]
#![allow(unused)]

use crate::graph::{self, *};
use crate::items::Item;
use crate::movements;
use crate::prices::Currency;
use crate::rules;
use analyzer::context;
use analyzer::world::World;
use enum_map::EnumMap;

pub mod enums {
    use std::fmt;
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd, Default)]
    pub enum Mode {
        #[default]
        Indra,
        Drone,
    }
    impl fmt::Display for Mode {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            match self {
                Mode::Indra => write!(f, "{}", "Indra"),
                Mode::Drone => write!(f, "{}", "Drone"),
            }
        }
    }
    impl std::str::FromStr for Mode {
        type Err = String;

        fn from_str(s: &str) -> Result<Self, Self::Err> {
            match s {
                "Drone" => Ok(Mode::Drone),
                "Indra" => Ok(Mode::Indra),
                _ => Err(format!("Could not recognize as a Mode: {}", s)),
            }
        }
    }
}

#[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash)]
pub enum Status {
    #[default]
    None,
    Visited,
    Skipped,
}

#[derive(Clone, Debug, Eq, PartialEq, Hash)]
pub struct Context {
    // context vars
    pub position: SpotId,
    pub save: SpotId,
    pub mode: enums::Mode,
    pub indra: SpotId,
    pub last: SpotId,
    pub prev_area: AreaId,
    pub energy: i32,
    pub flasks: i32,
    pub breach: bool,
    pub water: bool,
    pub amagi__main_area__ctx__combo: bool,
    pub ebih__waterfall__ctx__left_block: bool,
    pub ebih__waterfall__ctx__right_block: bool,
    pub ebih__ebih_east__ctx__platform1_moved: bool,
    pub ebih__ebih_east__ctx__platform2_moved: bool,
    pub ebih__drone_room__ctx__platform_moved: bool,
    // settings
    pub boomerang_steering: bool,
    pub major_glitches: bool,
    pub minor_glitches: bool,
    // items
    pub amashilama: bool,
    pub anuman: bool,
    pub apocalypse_bomb: bool,
    pub boomerang: bool,
    pub dear_ernest: bool,
    pub defeat_ebih_alu: bool,
    pub drone_hover: bool,
    pub drone_melee_damage: i8,
    pub drone_melee_speed: i8,
    pub flask: i8,
    pub health_upgrade: i8,
    pub ice_axe: bool,
    pub infect: i8,
    pub infection_range: i8,
    pub infection_speed: bool,
    pub ledge_grab: bool,
    pub liru: bool,
    pub melee_damage: i8,
    pub melee_speed: i8,
    pub mist_upgrade: bool,
    pub nanite_mist: bool,
    pub nano_points: i8,
    pub ranged_damage: i8,
    pub ranged_speed: i8,
    pub remote_drone: bool,
    pub slingshot_hook: bool,
    pub station_power: bool,
    pub switch_36_11: bool,
    pub switch_40_12: bool,
    pub wall_climb: bool,
    // other
    pub status: EnumMap<LocationId, Status>,
    visits: i32,
    skips: i32,
}

impl Default for Context {
    fn default() -> Context {
        Context {
            position: SpotId::Antarctica__West__Helipad,
            save: SpotId::Antarctica__West__Helipad,
            mode: enums::Mode::Indra,
            indra: SpotId::None,
            last: SpotId::None,
            prev_area: AreaId::Antarctica__West,
            energy: 0,
            flasks: 0,
            breach: false,
            water: false,
            amagi__main_area__ctx__combo: false,
            ebih__waterfall__ctx__left_block: false,
            ebih__waterfall__ctx__right_block: false,
            ebih__ebih_east__ctx__platform1_moved: false,
            ebih__ebih_east__ctx__platform2_moved: false,
            ebih__drone_room__ctx__platform_moved: false,
            // settings
            boomerang_steering: Default::default(),
            major_glitches: Default::default(),
            minor_glitches: Default::default(),
            // items
            amashilama: Default::default(),
            anuman: Default::default(),
            apocalypse_bomb: Default::default(),
            boomerang: Default::default(),
            dear_ernest: Default::default(),
            defeat_ebih_alu: Default::default(),
            drone_hover: Default::default(),
            drone_melee_damage: Default::default(),
            drone_melee_speed: Default::default(),
            flask: Default::default(),
            health_upgrade: Default::default(),
            ice_axe: Default::default(),
            infect: Default::default(),
            infection_range: Default::default(),
            infection_speed: Default::default(),
            ledge_grab: Default::default(),
            liru: Default::default(),
            melee_damage: Default::default(),
            melee_speed: Default::default(),
            mist_upgrade: Default::default(),
            nanite_mist: Default::default(),
            nano_points: Default::default(),
            ranged_damage: Default::default(),
            ranged_speed: Default::default(),
            remote_drone: Default::default(),
            slingshot_hook: Default::default(),
            station_power: Default::default(),
            switch_36_11: Default::default(),
            switch_40_12: Default::default(),
            wall_climb: Default::default(),
            // other
            status: Default::default(),
            visits: Default::default(),
            skips: Default::default(),
        }
    }
}

impl context::Ctx for Context {
    type World = graph::World;
    type ItemId = Item;
    type AreaId = AreaId;
    type RegionId = RegionId;
    const NUM_ITEMS: i32 = 30;

    fn has(&self, item: Item) -> bool {
        match item {
            Item::Amashilama => self.amashilama,
            Item::Anuman => self.anuman,
            Item::Apocalypse_Bomb => self.apocalypse_bomb,
            Item::Boomerang => self.boomerang,
            Item::Dear_Ernest => self.dear_ernest,
            Item::Defeat_Ebih_Alu => self.defeat_ebih_alu,
            Item::Drone_Hover => self.drone_hover,
            Item::Drone_Melee_Damage => self.drone_melee_damage >= 1,
            Item::Drone_Melee_Speed => self.drone_melee_speed >= 1,
            Item::Flask => self.flask >= 1,
            Item::Health_Upgrade => self.health_upgrade >= 1,
            Item::Ice_Axe => self.ice_axe,
            Item::Infect => self.infect >= 1,
            Item::Infection_Range => self.infection_range >= 1,
            Item::Infection_Speed => self.infection_speed,
            Item::Ledge_Grab => self.ledge_grab,
            Item::Liru => self.liru,
            Item::Melee_Damage => self.melee_damage >= 1,
            Item::Melee_Speed => self.melee_speed >= 1,
            Item::Mist_Upgrade => self.mist_upgrade,
            Item::Nanite_Mist => self.nanite_mist,
            Item::Nano_Points => self.nano_points >= 1,
            Item::Ranged_Damage => self.ranged_damage >= 1,
            Item::Ranged_Speed => self.ranged_speed >= 1,
            Item::Remote_Drone => self.remote_drone,
            Item::Slingshot_Hook => self.slingshot_hook,
            Item::Station_Power => self.station_power,
            Item::Switch_36_11 => self.switch_36_11,
            Item::Switch_40_12 => self.switch_40_12,
            Item::Wall_Climb => self.wall_climb,
            _ => false,
        }
    }
    fn count(&self, item: Item) -> i16 {
        match item {
            Item::Amashilama => self.amashilama.into(),
            Item::Anuman => self.anuman.into(),
            Item::Apocalypse_Bomb => self.apocalypse_bomb.into(),
            Item::Boomerang => self.boomerang.into(),
            Item::Dear_Ernest => self.dear_ernest.into(),
            Item::Defeat_Ebih_Alu => self.defeat_ebih_alu.into(),
            Item::Drone_Hover => self.drone_hover.into(),
            Item::Drone_Melee_Damage => self.drone_melee_damage.into(),
            Item::Drone_Melee_Speed => self.drone_melee_speed.into(),
            Item::Flask => self.flask.into(),
            Item::Health_Upgrade => self.health_upgrade.into(),
            Item::Ice_Axe => self.ice_axe.into(),
            Item::Infect => self.infect.into(),
            Item::Infection_Range => self.infection_range.into(),
            Item::Infection_Speed => self.infection_speed.into(),
            Item::Ledge_Grab => self.ledge_grab.into(),
            Item::Liru => self.liru.into(),
            Item::Melee_Damage => self.melee_damage.into(),
            Item::Melee_Speed => self.melee_speed.into(),
            Item::Mist_Upgrade => self.mist_upgrade.into(),
            Item::Nanite_Mist => self.nanite_mist.into(),
            Item::Nano_Points => self.nano_points.into(),
            Item::Ranged_Damage => self.ranged_damage.into(),
            Item::Ranged_Speed => self.ranged_speed.into(),
            Item::Remote_Drone => self.remote_drone.into(),
            Item::Slingshot_Hook => self.slingshot_hook.into(),
            Item::Station_Power => self.station_power.into(),
            Item::Switch_36_11 => self.switch_36_11.into(),
            Item::Switch_40_12 => self.switch_40_12.into(),
            Item::Wall_Climb => self.wall_climb.into(),
            _ => 0,
        }
    }
    fn collect(&mut self, item: Item) {
        match item {
            Item::Amashilama => {
                self.amashilama = true;
                rules::action_save__glacier__revival__save_point(self);
            }
            Item::Anuman => {
                self.anuman = true;
            }
            Item::Apocalypse_Bomb => {
                self.apocalypse_bomb = true;
            }
            Item::Boomerang => {
                self.boomerang = true;
            }
            Item::Dear_Ernest => {
                self.dear_ernest = true;
            }
            Item::Defeat_Ebih_Alu => {
                self.defeat_ebih_alu = true;
            }
            Item::Drone_Hover => {
                self.drone_hover = true;
            }
            Item::Drone_Melee_Damage => {
                self.drone_melee_damage += 1;
            }
            Item::Drone_Melee_Speed => {
                self.drone_melee_speed += 1;
            }
            Item::Flask => {
                self.flask += 1;
                rules::action_flasks__1(self);
            }
            Item::Health_Upgrade => {
                self.health_upgrade += 1;
            }
            Item::Ice_Axe => {
                self.ice_axe = true;
            }
            Item::Infect => {
                self.infect += 1;
                rules::action_energy__max_energy(self);
            }
            Item::Infection_Range => {
                self.infection_range += 1;
            }
            Item::Infection_Speed => {
                self.infection_speed = true;
            }
            Item::Ledge_Grab => {
                self.ledge_grab = true;
            }
            Item::Liru => {
                self.liru = true;
            }
            Item::Melee_Damage => {
                self.melee_damage += 1;
            }
            Item::Melee_Speed => {
                self.melee_speed += 1;
            }
            Item::Mist_Upgrade => {
                self.mist_upgrade = true;
            }
            Item::Nanite_Mist => {
                self.nanite_mist = true;
            }
            Item::Nano_Points => {
                self.nano_points += 1;
            }
            Item::Ranged_Damage => {
                self.ranged_damage += 1;
            }
            Item::Ranged_Speed => {
                self.ranged_speed += 1;
            }
            Item::Remote_Drone => {
                self.remote_drone = true;
            }
            Item::Slingshot_Hook => {
                self.slingshot_hook = true;
            }
            Item::Station_Power => {
                self.station_power = true;
            }
            Item::Switch_36_11 => {
                self.switch_36_11 = true;
            }
            Item::Switch_40_12 => {
                self.switch_40_12 = true;
            }
            Item::Wall_Climb => {
                self.wall_climb = true;
            }
            Item::Health_Node => rules::action_energy__max_energy(self),
            _ => (),
        }
    }

    fn position(&self) -> SpotId {
        self.position
    }
    fn set_position(&mut self, pos: SpotId) {
        let area = get_area(pos);
        match area {
            AreaId::Amagi__Cave_Behind_Waterfall => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Amagi__Grid_31_19 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Amagi__Liru_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Amagi__Main_Area => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Antarctica__East => {
                if get_area(self.position) != area {
                    self.save = SpotId::Antarctica__East__Save_Point;
                }
            }
            AreaId::Ebih__Base_Camp => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Boss_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Building_Interior => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Bunker_Interior => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__By_Garage => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Cave => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Drone_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Ebih_East => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Ebih_West => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Garage => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Grid_21_1_5 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Grid_25_10_12 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Grid_25_2_6 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Tent_Interior => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Waterfall => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Apocalypse_Entry => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Boomerang_Antechamber => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Boomerang_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Compass_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Dock_Outside => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Grid_31_9_12 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Grid_32_7_10 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Grid_37_38_9 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Grid_39_40_7_9 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Grid_42_10 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Grid_43_10_11 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Lake_Main_Entrance => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Ledge_Grab_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Peak => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Revival => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__The_Big_Drop => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Vertical_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            _ => (),
        }
        self.position = pos;
    }

    fn reload_game(&mut self) {
        self.reset_all();
        self.amagi__main_area__ctx__combo = false;
    }

    fn reset_all(&mut self) {
        self.ebih__ebih_east__ctx__platform1_moved = false;
        self.ebih__ebih_east__ctx__platform2_moved = false;
        self.ebih__drone_room__ctx__platform_moved = false;
    }

    fn reset_region(&mut self, region_id: RegionId) {}
    fn reset_area(&mut self, area_id: AreaId) {
        match area_id {
            AreaId::Ebih__Ebih_East => {
                self.ebih__ebih_east__ctx__platform1_moved = false;
                self.ebih__ebih_east__ctx__platform2_moved = false;
            }
            AreaId::Ebih__Drone_Room => {
                self.ebih__drone_room__ctx__platform_moved = false;
            }
            _ => (),
        }
    }
    fn can_afford(&self, cost: &Currency) -> bool {
        match cost {
            Currency::Free => true,
            Currency::Energy(c) => self.energy >= *c,
            Currency::Flasks(c) => self.flasks >= *c,
        }
    }
    fn spend(&mut self, cost: &Currency) {
        match cost {
            Currency::Free => (),
            Currency::Energy(c) => self.energy -= *c,
            Currency::Flasks(c) => self.flasks -= *c,
        }
    }

    fn visit(&mut self, loc_id: LocationId) {
        self.status[loc_id] = Status::Visited;
        self.visits += 1;
    }
    fn skip(&mut self, loc_id: LocationId) {
        self.status[loc_id] = Status::Skipped;
        self.skips += 1;
    }
    fn reset(&mut self, loc_id: LocationId) {
        match self.status[loc_id] {
            Status::Visited => self.visits -= 1,
            Status::Skipped => self.skips -= 1,
            _ => (),
        }
        self.status[loc_id] = Status::None;
    }

    fn todo(&self, loc_id: LocationId) -> bool {
        self.status[loc_id] == Status::None
    }
    fn visited(&self, loc_id: LocationId) -> bool {
        self.status[loc_id] == Status::Visited
    }
    fn skipped(&self, loc_id: LocationId) -> bool {
        self.status[loc_id] == Status::Skipped
    }

    fn all_spot_checks(&self, id: SpotId) -> bool {
        let r = spot_locations(id);
        for status in self.status.as_slice()[r.start..r.end].iter() {
            if status == &Status::None {
                return false;
            }
        }
        true
    }
    fn all_area_checks(&self, id: AreaId) -> bool {
        let r = area_locations(id);
        for status in self.status.as_slice()[r.start..r.end].iter() {
            if status == &Status::None {
                return false;
            }
        }
        true
    }
    fn all_region_checks(&self, id: RegionId) -> bool {
        let r = region_locations(id);
        for status in self.status.as_slice()[r.start..r.end].iter() {
            if status == &Status::None {
                return false;
            }
        }
        true
    }
    fn local_travel_time(&self, dest: SpotId) -> i32 {
        movements::local_travel_time(self, self.position, dest)
    }

    fn count_visits(&self) -> i32 {
        self.visits
    }
    fn count_skips(&self) -> i32 {
        self.skips
    }
    fn progress(&self) -> i32 {
        if self.visits <= 0 {
            0
        } else {
            self.visits * 100 / (Self::World::NUM_LOCATIONS - self.skips)
        }
    }
}

impl Context {
    pub fn position(&self) -> SpotId {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.position,
                },
            },
        }
    }
    pub fn save(&self) -> SpotId {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.save,
                },
            },
        }
    }
    pub fn mode(&self) -> enums::Mode {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.mode,
                },
            },
        }
    }
    pub fn indra(&self) -> SpotId {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.indra,
                },
            },
        }
    }
    pub fn last(&self) -> SpotId {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.last,
                },
            },
        }
    }
    pub fn prev_area(&self) -> AreaId {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.prev_area,
                },
            },
        }
    }
    pub fn energy(&self) -> i32 {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.energy,
                },
            },
        }
    }
    pub fn flasks(&self) -> i32 {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.flasks,
                },
            },
        }
    }
    pub fn breach(&self) -> bool {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.breach,
                },
            },
        }
    }
    pub fn water(&self) -> bool {
        match self.position {
            SpotId::Amagi__Main_Area__East_15 => false,
            SpotId::Amagi__Main_Area__Waters_Edge => false,
            SpotId::Amagi__Main_Area__Carving => false,
            SpotId::Amagi__Main_Area__West_15 => false,
            SpotId::Amagi__Main_Area__Secret_Outcropping => false,
            SpotId::Amagi__Main_Area__Secret_Waterfall => false,
            SpotId::Amagi__Main_Area__Way_Off_To_The_Side => false,
            _ => match get_area(self.position) {
                AreaId::Amagi__Cave_Behind_Waterfall => false,
                _ => match get_region(self.position) {
                    RegionId::Amagi => true,
                    _ => self.water,
                },
            },
        }
    }
    pub fn amagi__main_area__ctx__combo(&self) -> bool {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.amagi__main_area__ctx__combo,
                },
            },
        }
    }
    pub fn ebih__waterfall__ctx__left_block(&self) -> bool {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.ebih__waterfall__ctx__left_block,
                },
            },
        }
    }
    pub fn ebih__waterfall__ctx__right_block(&self) -> bool {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.ebih__waterfall__ctx__right_block,
                },
            },
        }
    }
    pub fn ebih__ebih_east__ctx__platform1_moved(&self) -> bool {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.ebih__ebih_east__ctx__platform1_moved,
                },
            },
        }
    }
    pub fn ebih__ebih_east__ctx__platform2_moved(&self) -> bool {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.ebih__ebih_east__ctx__platform2_moved,
                },
            },
        }
    }
    pub fn ebih__drone_room__ctx__platform_moved(&self) -> bool {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.ebih__drone_room__ctx__platform_moved,
                },
            },
        }
    }
}

//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

#![allow(non_snake_case)]
#![allow(unused)]

use crate::graph::{self, enums::*, graph::*};
use crate::items::Item;
use crate::movements;
use crate::observe::*;
use crate::prices::Currency;
use crate::rules;
use analyzer::context;
use analyzer::matchertrie::IntegerObservation;
use analyzer::world::{Exit, World};
use enum_map::EnumMap;
use serde::{Deserialize, Serialize};
use serde_repr::{Deserialize_repr, Serialize_repr};
use std::str::FromStr;
use yaml_rust::Yaml;

pub mod enums {
    use std::fmt;
    #[derive(
        Debug,
        PartialEq,
        Eq,
        Copy,
        Clone,
        Hash,
        Ord,
        PartialOrd,
        Default,
        serde_repr::Serialize_repr,
        serde_repr::Deserialize_repr,
    )]
    #[repr(u8)]
    pub enum Mode {
        #[default]
        Indra,
        Drone,
    }
    impl fmt::Display for Mode {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            match self {
                Mode::Indra => write!(f, "{}", "Indra"),
                Mode::Drone => write!(f, "{}", "Drone"),
            }
        }
    }
    impl std::str::FromStr for Mode {
        type Err = String;

        fn from_str(s: &str) -> Result<Self, Self::Err> {
            match s {
                "Drone" | "drone" => Ok(Mode::Drone),
                "Indra" | "indra" => Ok(Mode::Indra),
                _ => Err(format!("Could not recognize as a Mode: {}", s)),
            }
        }
    }

    #[derive(
        Debug,
        PartialEq,
        Eq,
        Copy,
        Clone,
        Hash,
        Ord,
        PartialOrd,
        Default,
        serde_repr::Serialize_repr,
        serde_repr::Deserialize_repr,
    )]
    #[repr(u8)]
    pub enum Realm {
        #[default]
        Main,
        Breach,
        Emergence,
        Filter,
        Interior,
        Map,
        Menu,
    }
    impl fmt::Display for Realm {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            match self {
                Realm::Main => write!(f, "{}", "Main"),
                Realm::Breach => write!(f, "{}", "Breach"),
                Realm::Emergence => write!(f, "{}", "Emergence"),
                Realm::Filter => write!(f, "{}", "Filter"),
                Realm::Interior => write!(f, "{}", "Interior"),
                Realm::Map => write!(f, "{}", "Map"),
                Realm::Menu => write!(f, "{}", "Menu"),
            }
        }
    }
    impl std::str::FromStr for Realm {
        type Err = String;

        fn from_str(s: &str) -> Result<Self, Self::Err> {
            match s {
                "Breach" | "breach" => Ok(Realm::Breach),
                "Emergence" | "emergence" => Ok(Realm::Emergence),
                "Filter" | "filter" => Ok(Realm::Filter),
                "Interior" | "interior" => Ok(Realm::Interior),
                "Main" | "main" => Ok(Realm::Main),
                "Map" | "map" => Ok(Realm::Map),
                "Menu" | "menu" => Ok(Realm::Menu),
                _ => Err(format!("Could not recognize as a Realm: {}", s)),
            }
        }
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub enum Expectation {
    Position(SpotId),
    Energy(i16),
    Flasks(i8),
    Refills(i8),
    Mode(enums::Mode),
    Save(SpotId),
    BreachSave(SpotId),
    Indra(SpotId),
    Last(SpotId),
    Portal(SpotId),
    PrevPortal(SpotId),
    PrevArea(AreaId),
    MapAmagiBreachEastEntranceSave(bool),
    MapAmagiMainAreaSave(bool),
    MapAmagiEastLakeSave(bool),
    MapAnnunaMirrorMatchSave(bool),
    MapAnnunaVerticalRoomSave(bool),
    MapAnnunaFactoryEntranceSave(bool),
    MapAnnunaUpperSaveSave(bool),
    MapAnnunaCenterSaveSave(bool),
    MapEbihBaseCampSave(bool),
    MapEbihEbihWestMidSave(bool),
    MapEbihEbihWestUpperSave(bool),
    MapEbihEbihWestLowerSave(bool),
    MapGigunaBreachPeakSave(bool),
    MapGigunaBreachSwSaveSave(bool),
    MapGigunaGigunaNortheastSave(bool),
    MapGigunaGigunaBaseSave(bool),
    MapGigunaRuinsWestSave(bool),
    MapGigunaRuinsTopSave(bool),
    MapGlacierBreachSouthSaveSave(bool),
    MapGlacierBreachWestSaveSave(bool),
    MapGlacierBreachGuardedCorridorSave(bool),
    MapGlacierBreachSaveAndExitSave(bool),
    MapGlacierBreachHammondsBreachSave(bool),
    MapGlacierRevivalSave(bool),
    MapIrikarBreachSaveRoomSave(bool),
    MapIrikarBreachGauntletSave(bool),
    MapIrikarHubSave(bool),
    MapIrikarMidwestSave(bool),
    MapIrikarBeachSaveSave(bool),
    MapUhrumWestEntranceSave(bool),
    MapUhrumSaveRoomSave(bool),
    MapUhrumAnnunaCorridorSave(bool),
    GlacierCtxHammondsDoors(bool),
    AmagiMainAreaCtxCombo(bool),
    AnnunaWestBridgeCtxDoorsOpened(bool),
    AnnunaEastBridgeCtxCombo(bool),
    AnnunaVerticalRoomCtxDoorOpened(bool),
    AnnunaWestClimbCtxDoorOpened(bool),
    EbihBaseCampCtxLeftPlatformMoved(bool),
    EbihTruckGateCtxDoorOpen(bool),
    EbihGrid251012CtxDoorOpen(bool),
    EbihWaterfallCtxWestDoorOpen(bool),
    EbihEbihWestCtxDoorOpen(bool),
    EbihEbihEastCtxPlatform1Moved(bool),
    EbihEbihEastCtxPlatform2Moved(bool),
    EbihDroneRoomCtxPlatformMoved(bool),
    EbihVerticalInterchangeCtxDoorOpen(bool),
    GigunaBreachSwSaveCtxDoorOpened(bool),
    GigunaGigunaNortheastCtxDoorOpened(bool),
    GigunaCarnelianCtxDoorOpened(bool),
    GigunaCarnelianCtxUpperSusar(bool),
    GigunaCarnelianCtxLowerSusar(bool),
    GigunaWestCavernsCtxEastSusar(bool),
    GigunaGigunaBaseCtxDoorOpen(bool),
    GigunaRuinsWestCtxKishibHandled(bool),
    GigunaRuinsTopCtxDoorsOpen(bool),
    GigunaCloudsCtxPlatform(bool),
    GigunaEastCavernsCtxDoorOpened(bool),
    GigunaEastCavernsCtxComboEntered(bool),
    GigunaEastCavernsCtxUpperSusar(bool),
    GigunaEastCavernsCtxMidSusar(bool),
    GigunaEastCavernsCtxLowerSusar(bool),
    GigunaGatewayCtxDoorOpened(bool),
    GlacierTheBigDropCtxBridgeOpen(bool),
    GlacierVerticalRoomCtxUpperGatestone(bool),
    GlacierVerticalRoomCtxLowerGatestones(bool),
    IrikarBasementPortalCtxPlatformMoved(bool),
    IrikarMidwestCtxLeftPlatform(bool),
    IrikarMidwestCtxRightPlatform(bool),
    // items
    AmagiDragonEyePassage(bool),
    AmagiStrongholdBoulder1(bool),
    AmagiStrongholdBoulder2(bool),
    AmagiStrongholdWall1(bool),
    AmagiStrongholdWall2(bool),
    AmagiWestLakeSurfaceWall(bool),
    Amashilama(bool),
    AnnunaEastBridgeGate(bool),
    AnnunaMirrorMatchSwitch(bool),
    AnnunaVerticalRoomGate(bool),
    Anuman(bool),
    ApocalypseBomb(bool),
    ApocalypseSealsWall(bool),
    BewareThePatternmind(bool),
    BigFlask(i8),
    Boomerang(bool),
    BoomerangUpgrade(bool),
    BreachAttractor(bool),
    BreachSight(bool),
    BronzeAxe(bool),
    BuildingOfTheSchool(bool),
    CarnelianRing(bool),
    CommemorativeSpeech(bool),
    CompaniesLayoff(bool),
    Compass(bool),
    DangerousIdeas(bool),
    DearErnest(bool),
    DefeatIndra(bool),
    DefeatMUSAM20(bool),
    DestructionPogrom(bool),
    DoubleAxe(bool),
    DrGloria(bool),
    DroneHover(bool),
    DroneMeleeDamage(bool),
    DroneMeleeDamage2(bool),
    DroneMeleeSpeed(bool),
    DroneMeleeSpeed2(bool),
    EbihAlu(bool),
    EbihInterchangeBlock(bool),
    EbihInterchangeGate(bool),
    EbihWalledOffWall(bool),
    EbihWastelandDoor(bool),
    EbihWastelandPassageH(bool),
    EbihWaterfallBlockLeft(bool),
    EbihWaterfallBlockRight(bool),
    EbihWaterfallWall(bool),
    EbihWestBlock(bool),
    Escape(bool),
    ExitBreach(bool),
    EyeRing(bool),
    FamilyTragedy(bool),
    FastTravel(bool),
    Flask(i8),
    ForbiddenKnowledge(bool),
    FreedomFromAansur(bool),
    GigunaBoulder(bool),
    GigunaDualPathSwitch(bool),
    GigunaDualPathWall(bool),
    GigunaGatewayBlock(bool),
    GigunaGatewayGate(bool),
    GigunaGubi(bool),
    GigunaNortheastGate(bool),
    GlacierBigDropRock(bool),
    GlacierSeaBurialRock(bool),
    Goodbye(bool),
    HammondAuth(bool),
    HealthFragment(i8),
    HealthNode(i8),
    HealthUpgrade(bool),
    HealthUpgrade2(bool),
    HealthUpgrade3(bool),
    HealthUpgrade4(bool),
    HereticsGranddaughter(bool),
    HereticsTablet(bool),
    IceAxe(bool),
    Infect(bool),
    InfectL1(bool),
    InfectL2(bool),
    InfectL3(bool),
    InfectionRange(bool),
    InfectionRange2(bool),
    InfectionRange3(bool),
    InfectionSpeed(bool),
    IrikarGudam(bool),
    IrikarRoyalStorageWall(bool),
    LamentForFools(bool),
    LedgeGrab(bool),
    LetterFromTrace(bool),
    MeleeDamage(bool),
    MeleeDamage2(bool),
    MeleeSpeed(bool),
    MeleeSpeed2(bool),
    MistUpgrade(bool),
    NaniteMist(bool),
    NanoLattice2(bool),
    NanoPoints(bool),
    NanoPoints2(bool),
    Notes20530227(bool),
    PlagueOfThoughts(bool),
    PowerMatrix(i8),
    RangedDamage(bool),
    RangedDamage2(bool),
    RangedSpeed(bool),
    RangedSpeed2(bool),
    RecordLosses(bool),
    RemoteBoomerang(bool),
    RemoteDrone(bool),
    ResearchersMissing(bool),
    RoyalDagger(bool),
    Separation(bool),
    Shockwave(bool),
    SiunaStorageWall(bool),
    SlingshotCharge(bool),
    SlingshotHook(bool),
    SlingshotWeapon(bool),
    SniperValleyRock1(bool),
    SniperValleyRock2(bool),
    StationPower(bool),
    StormBomb(bool),
    SuspensionBridge(bool),
    Switch3611(bool),
    Switch4012(bool),
    TerminalBreakthrough1(bool),
    TerminalBreakthrough2(bool),
    TheEternalArm(bool),
    TheIdealKiengir(bool),
    TheStudent(bool),
    Udusan(bool),
    UhrumAnnunaCorridorBlock(bool),
    UhrumWaterfallWall(bool),
    UhrumWaterfallsBlock(bool),
    UhrumWestEntranceGate(bool),
    UhrumWestEntranceLowerWall(bool),
    UhrumWestEntranceUpperWall(bool),
    UnderSiege(bool),
    UnderwaterMovement(bool),
    WallClimb(bool),
}

pub mod data {
    #[allow(unused_imports)]
    use crate::context::enums;
    use crate::graph::enums::*;
    pub fn realm(spot_id: SpotId) -> enums::Realm {
        match spot_id {
            SpotId::Amagi_Breach__East_Connector__East => enums::Realm::Breach,
            SpotId::Amagi_Breach__East_Connector__West => enums::Realm::Breach,
            SpotId::Amagi_Breach__East_Entrance__East => enums::Realm::Breach,
            SpotId::Amagi_Breach__East_Entrance__Grate_Left => enums::Realm::Breach,
            SpotId::Amagi_Breach__East_Entrance__Grate_Right => enums::Realm::Breach,
            SpotId::Amagi_Breach__East_Entrance__Save_Point => enums::Realm::Breach,
            SpotId::Amagi_Breach__East_Entrance__Upper_Slope => enums::Realm::Breach,
            SpotId::Amagi_Breach__East_Entrance__West => enums::Realm::Breach,
            SpotId::Filter__Core__Bottom => enums::Realm::Filter,
            SpotId::Filter__Core__Catwalk_West => enums::Realm::Filter,
            SpotId::Filter__Core__East => enums::Realm::Filter,
            SpotId::Filter__Core__Terminal_East => enums::Realm::Filter,
            SpotId::Filter__Core__Terminal_West => enums::Realm::Filter,
            SpotId::Filter__Core__West => enums::Realm::Filter,
            SpotId::Filter__Entrance__East => enums::Realm::Filter,
            SpotId::Filter__Entrance__Egg => enums::Realm::Filter,
            SpotId::Filter__Exit__East => enums::Realm::Filter,
            SpotId::Filter__Exit__Egg => enums::Realm::Filter,
            SpotId::Filter__Exit__Ledge => enums::Realm::Filter,
            SpotId::Filter__Lower_Hallway__East => enums::Realm::Filter,
            SpotId::Filter__Lower_Hallway__West => enums::Realm::Filter,
            SpotId::Filter__Scaffolding__Catwalk_Hook_Point => enums::Realm::Filter,
            SpotId::Filter__Scaffolding__Lower_West => enums::Realm::Filter,
            SpotId::Filter__Scaffolding__P1 => enums::Realm::Filter,
            SpotId::Filter__Scaffolding__P2 => enums::Realm::Filter,
            SpotId::Filter__Scaffolding__Upper_West => enums::Realm::Filter,
            SpotId::Filter__Upper_Hallway__Corner => enums::Realm::Filter,
            SpotId::Filter__Upper_Hallway__East => enums::Realm::Filter,
            SpotId::Filter__Upper_Hallway__West => enums::Realm::Filter,
            SpotId::Giguna_Breach__Antechamber__North => enums::Realm::Breach,
            SpotId::Giguna_Breach__Ascent__Bottom => enums::Realm::Breach,
            SpotId::Giguna_Breach__Ascent__Top => enums::Realm::Breach,
            SpotId::Giguna_Breach__Ascent__West_6 => enums::Realm::Breach,
            SpotId::Giguna_Breach__Ascent__West_9 => enums::Realm::Breach,
            SpotId::Giguna_Breach__Below_Chimney__Cubby_Entrance => enums::Realm::Breach,
            SpotId::Giguna_Breach__Below_Chimney__East_Ledge => enums::Realm::Breach,
            SpotId::Giguna_Breach__Below_Chimney__North => enums::Realm::Breach,
            SpotId::Giguna_Breach__Below_Chimney__Passage_Lip => enums::Realm::Breach,
            SpotId::Giguna_Breach__Below_Chimney__Southwest => enums::Realm::Breach,
            SpotId::Giguna_Breach__Below_Chimney__West_Passage => enums::Realm::Breach,
            SpotId::Giguna_Breach__Central__East_9 => enums::Realm::Breach,
            SpotId::Giguna_Breach__Central__East_Brick => enums::Realm::Breach,
            SpotId::Giguna_Breach__Central__Middle_Statue => enums::Realm::Breach,
            SpotId::Giguna_Breach__Central__South => enums::Realm::Breach,
            SpotId::Giguna_Breach__Central__Statuette => enums::Realm::Breach,
            SpotId::Giguna_Breach__Central__Tunnel => enums::Realm::Breach,
            SpotId::Giguna_Breach__Central__Upper_Floating_Brick => enums::Realm::Breach,
            SpotId::Giguna_Breach__Central__Wall => enums::Realm::Breach,
            SpotId::Giguna_Breach__Central__West_8 => enums::Realm::Breach,
            SpotId::Giguna_Breach__Central__West_9 => enums::Realm::Breach,
            SpotId::Giguna_Breach__Central__West_Statue => enums::Realm::Breach,
            SpotId::Giguna_Breach__Chimney__Cache => enums::Realm::Breach,
            SpotId::Giguna_Breach__Chimney__East_7 => enums::Realm::Breach,
            SpotId::Giguna_Breach__Chimney__East_8 => enums::Realm::Breach,
            SpotId::Giguna_Breach__Chimney__East_9 => enums::Realm::Breach,
            SpotId::Giguna_Breach__Chimney__Middle_Platform => enums::Realm::Breach,
            SpotId::Giguna_Breach__Chimney__South => enums::Realm::Breach,
            SpotId::Giguna_Breach__Chimney__Top => enums::Realm::Breach,
            SpotId::Giguna_Breach__Cubby__Entrance => enums::Realm::Breach,
            SpotId::Giguna_Breach__Cubby__Rocks => enums::Realm::Breach,
            SpotId::Giguna_Breach__Fire_Room__Cuesta => enums::Realm::Breach,
            SpotId::Giguna_Breach__Fire_Room__East_11 => enums::Realm::Breach,
            SpotId::Giguna_Breach__Fire_Room__First_Fire => enums::Realm::Breach,
            SpotId::Giguna_Breach__Fire_Room__South => enums::Realm::Breach,
            SpotId::Giguna_Breach__Fire_Room__West_10 => enums::Realm::Breach,
            SpotId::Giguna_Breach__Fire_Room__West_11 => enums::Realm::Breach,
            SpotId::Giguna_Breach__Fire_Room__West_Plateau => enums::Realm::Breach,
            SpotId::Giguna_Breach__Grid_14_10_11__East_10 => enums::Realm::Breach,
            SpotId::Giguna_Breach__Grid_14_10_11__East_11 => enums::Realm::Breach,
            SpotId::Giguna_Breach__Grid_14_10_11__High_Ledge => enums::Realm::Breach,
            SpotId::Giguna_Breach__Grid_14_10_11__North => enums::Realm::Breach,
            SpotId::Giguna_Breach__Grid_14_10_11__South => enums::Realm::Breach,
            SpotId::Giguna_Breach__Peak__Column => enums::Realm::Breach,
            SpotId::Giguna_Breach__Peak__East_6 => enums::Realm::Breach,
            SpotId::Giguna_Breach__Peak__East_Passage => enums::Realm::Breach,
            SpotId::Giguna_Breach__Peak__Portal => enums::Realm::Breach,
            SpotId::Giguna_Breach__Peak__Save_Point => enums::Realm::Breach,
            SpotId::Giguna_Breach__Peak__Upper_East => enums::Realm::Breach,
            SpotId::Giguna_Breach__Peak__Upper_West => enums::Realm::Breach,
            SpotId::Giguna_Breach__Peak__West_7 => enums::Realm::Breach,
            SpotId::Giguna_Breach__Pink_Clouds__Corner => enums::Realm::Breach,
            SpotId::Giguna_Breach__Pink_Clouds__Normal_Entry => enums::Realm::Breach,
            SpotId::Giguna_Breach__Pink_Clouds__Quick_Entry => enums::Realm::Breach,
            SpotId::Giguna_Breach__Robopede__Center => enums::Realm::Breach,
            SpotId::Giguna_Breach__Robopede__North => enums::Realm::Breach,
            SpotId::Giguna_Breach__Robopede__West => enums::Realm::Breach,
            SpotId::Giguna_Breach__SW_Save__East_12 => enums::Realm::Breach,
            SpotId::Giguna_Breach__SW_Save__Lower_Platform => enums::Realm::Breach,
            SpotId::Giguna_Breach__SW_Save__North => enums::Realm::Breach,
            SpotId::Giguna_Breach__SW_Save__Save_Point => enums::Realm::Breach,
            SpotId::Giguna_Breach__SW_Save__Side_Door => enums::Realm::Breach,
            SpotId::Giguna_Breach__SW_Save__West_11 => enums::Realm::Breach,
            SpotId::Giguna_Breach__Slingshot__Column => enums::Realm::Breach,
            SpotId::Giguna_Breach__Slingshot__Ravine => enums::Realm::Breach,
            SpotId::Giguna_Breach__Slingshot__West => enums::Realm::Breach,
            SpotId::Glacier_Breach__Angry_Lions__North => enums::Realm::Breach,
            SpotId::Glacier_Breach__Angry_Lions__Portal_Stand => enums::Realm::Breach,
            SpotId::Glacier_Breach__Angry_Lions__Second_Platform => enums::Realm::Breach,
            SpotId::Glacier_Breach__Angry_Lions__Top_Platform => enums::Realm::Breach,
            SpotId::Glacier_Breach__Control__East => enums::Realm::Breach,
            SpotId::Glacier_Breach__Control__Further_In => enums::Realm::Breach,
            SpotId::Glacier_Breach__Control__Lower_Corner => enums::Realm::Breach,
            SpotId::Glacier_Breach__Control__Upper_Corner => enums::Realm::Breach,
            SpotId::Glacier_Breach__Control__Upper_Gap => enums::Realm::Breach,
            SpotId::Glacier_Breach__Control__West => enums::Realm::Breach,
            SpotId::Glacier_Breach__Crystals__East => enums::Realm::Breach,
            SpotId::Glacier_Breach__Crystals__West => enums::Realm::Breach,
            SpotId::Glacier_Breach__Electric_Arena__East => enums::Realm::Breach,
            SpotId::Glacier_Breach__Electric_Arena__East_Ledge => enums::Realm::Breach,
            SpotId::Glacier_Breach__Electric_Arena__East_Platforms => enums::Realm::Breach,
            SpotId::Glacier_Breach__Electric_Arena__West => enums::Realm::Breach,
            SpotId::Glacier_Breach__Electric_Arena__West_Platforms => enums::Realm::Breach,
            SpotId::Glacier_Breach__Empty_Space__Lower => enums::Realm::Breach,
            SpotId::Glacier_Breach__Empty_Space__North => enums::Realm::Breach,
            SpotId::Glacier_Breach__Empty_Space__West => enums::Realm::Breach,
            SpotId::Glacier_Breach__Floaters__East => enums::Realm::Breach,
            SpotId::Glacier_Breach__Floaters__West => enums::Realm::Breach,
            SpotId::Glacier_Breach__Grate_Work__Below_Grate => enums::Realm::Breach,
            SpotId::Glacier_Breach__Grate_Work__East => enums::Realm::Breach,
            SpotId::Glacier_Breach__Grate_Work__East_Hill => enums::Realm::Breach,
            SpotId::Glacier_Breach__Grate_Work__Grate_Corner => enums::Realm::Breach,
            SpotId::Glacier_Breach__Grate_Work__Grate_East => enums::Realm::Breach,
            SpotId::Glacier_Breach__Grate_Work__Grate_Interior => enums::Realm::Breach,
            SpotId::Glacier_Breach__Grate_Work__Grate_Southeast => enums::Realm::Breach,
            SpotId::Glacier_Breach__Grate_Work__Grate_West => enums::Realm::Breach,
            SpotId::Glacier_Breach__Grate_Work__Southeast => enums::Realm::Breach,
            SpotId::Glacier_Breach__Grate_Work__West_13 => enums::Realm::Breach,
            SpotId::Glacier_Breach__Grate_Work__West_14 => enums::Realm::Breach,
            SpotId::Glacier_Breach__Grate_Work__West_Ledge => enums::Realm::Breach,
            SpotId::Glacier_Breach__Guarded_Corridor__East => enums::Realm::Breach,
            SpotId::Glacier_Breach__Guarded_Corridor__Past_the_Guards => enums::Realm::Breach,
            SpotId::Glacier_Breach__Guarded_Corridor__Save_Point => enums::Realm::Breach,
            SpotId::Glacier_Breach__Guarded_Corridor__West => enums::Realm::Breach,
            SpotId::Glacier_Breach__Hammonds_Breach__East => enums::Realm::Breach,
            SpotId::Glacier_Breach__Hammonds_Breach__East_Side => enums::Realm::Breach,
            SpotId::Glacier_Breach__Hammonds_Breach__First_Step => enums::Realm::Breach,
            SpotId::Glacier_Breach__Hammonds_Breach__Save_Point => enums::Realm::Breach,
            SpotId::Glacier_Breach__Hammonds_Breach__West_Side => enums::Realm::Breach,
            SpotId::Glacier_Breach__Piano_Roll__East_10 => enums::Realm::Breach,
            SpotId::Glacier_Breach__Piano_Roll__East_9 => enums::Realm::Breach,
            SpotId::Glacier_Breach__Piano_Roll__Lower_Ledge => enums::Realm::Breach,
            SpotId::Glacier_Breach__Piano_Roll__Middle_Ledge => enums::Realm::Breach,
            SpotId::Glacier_Breach__Piano_Roll__Upper_Ledge => enums::Realm::Breach,
            SpotId::Glacier_Breach__Piano_Roll__West => enums::Realm::Breach,
            SpotId::Glacier_Breach__Save_and_Exit__Halfway => enums::Realm::Breach,
            SpotId::Glacier_Breach__Save_and_Exit__Portal_Stand => enums::Realm::Breach,
            SpotId::Glacier_Breach__Save_and_Exit__Save_Point => enums::Realm::Breach,
            SpotId::Glacier_Breach__Save_and_Exit__West => enums::Realm::Breach,
            SpotId::Glacier_Breach__South_Save__Brick_Ledge => enums::Realm::Breach,
            SpotId::Glacier_Breach__South_Save__East => enums::Realm::Breach,
            SpotId::Glacier_Breach__South_Save__Save_Point => enums::Realm::Breach,
            SpotId::Glacier_Breach__South_Save__West => enums::Realm::Breach,
            SpotId::Glacier_Breach__Spidery_Connector__East => enums::Realm::Breach,
            SpotId::Glacier_Breach__Stable_Floor__Center => enums::Realm::Breach,
            SpotId::Glacier_Breach__Stable_Floor__East => enums::Realm::Breach,
            SpotId::Glacier_Breach__Stable_Floor__South => enums::Realm::Breach,
            SpotId::Glacier_Breach__Stable_Floor__West => enums::Realm::Breach,
            SpotId::Glacier_Breach__Stacked_Enemies__West => enums::Realm::Breach,
            SpotId::Glacier_Breach__West_Save__East_11 => enums::Realm::Breach,
            SpotId::Glacier_Breach__West_Save__East_12 => enums::Realm::Breach,
            SpotId::Glacier_Breach__West_Save__Save_Point => enums::Realm::Breach,
            SpotId::Glacier_Breach__West_Save__West_11 => enums::Realm::Breach,
            SpotId::Glacier_Breach__West_Save__West_Ledge => enums::Realm::Breach,
            SpotId::Glacier_Breach__West_Save__West_Nub => enums::Realm::Breach,
            SpotId::Glacier_Breach__Zappers__East => enums::Realm::Breach,
            SpotId::Glacier_Breach__Zappers__Hill_East => enums::Realm::Breach,
            SpotId::Glacier_Breach__Zappers__Trough => enums::Realm::Breach,
            SpotId::Glacier_Breach__Zappers__West => enums::Realm::Breach,
            SpotId::Interior__Building_Interior__Corner => enums::Realm::Interior,
            SpotId::Interior__Building_Interior__Entry => enums::Realm::Interior,
            SpotId::Interior__Bunker_Interior__Desk => enums::Realm::Interior,
            SpotId::Interior__Bunker_Interior__Entry => enums::Realm::Interior,
            SpotId::Interior__Cave_Behind_Waterfall__Bottom => enums::Realm::Interior,
            SpotId::Interior__Cave_Behind_Waterfall__Middle => enums::Realm::Interior,
            SpotId::Interior__Cave_Behind_Waterfall__Top => enums::Realm::Interior,
            SpotId::Interior__Dock_Elevator__Connector => enums::Realm::Interior,
            SpotId::Interior__Dock_Elevator__Elevator => enums::Realm::Interior,
            SpotId::Interior__Dock_Interior__Connector => enums::Realm::Interior,
            SpotId::Interior__Dock_Interior__Entry => enums::Realm::Interior,
            SpotId::Interior__Ebih_Cave__Entry => enums::Realm::Interior,
            SpotId::Interior__Garage__Boxes => enums::Realm::Interior,
            SpotId::Interior__Garage__Entry => enums::Realm::Interior,
            SpotId::Interior__Outpost_Interior__Bookshelf => enums::Realm::Interior,
            SpotId::Interior__Outpost_Interior__Entry => enums::Realm::Interior,
            SpotId::Interior__Tent_Interior__Desk => enums::Realm::Interior,
            SpotId::Interior__Tent_Interior__Entry => enums::Realm::Interior,
            SpotId::Irikar_Breach__Basement_Save__Save_Point => enums::Realm::Breach,
            SpotId::Irikar_Breach__Exit_Corridor__East => enums::Realm::Breach,
            SpotId::Irikar_Breach__Exit_Corridor__North_12 => enums::Realm::Breach,
            SpotId::Irikar_Breach__Exit_Corridor__North_13 => enums::Realm::Breach,
            SpotId::Irikar_Breach__Exit_Corridor__Passage => enums::Realm::Breach,
            SpotId::Irikar_Breach__Exit_Corridor__Pillar => enums::Realm::Breach,
            SpotId::Irikar_Breach__Exit_Corridor__Portal_Stand => enums::Realm::Breach,
            SpotId::Irikar_Breach__Exit_Corridor__West => enums::Realm::Breach,
            SpotId::Irikar_Breach__Exit_Corridor__West_of_Pillar => enums::Realm::Breach,
            SpotId::Irikar_Breach__Flappy_Drone__Initial_Drop => enums::Realm::Breach,
            SpotId::Irikar_Breach__Flappy_Drone__Passage_Corner => enums::Realm::Breach,
            SpotId::Irikar_Breach__Flappy_Drone__Pillar_Underside => enums::Realm::Breach,
            SpotId::Irikar_Breach__Flappy_Drone__Side => enums::Realm::Breach,
            SpotId::Irikar_Breach__Flappy_Drone__South => enums::Realm::Breach,
            SpotId::Irikar_Breach__Flappy_Drone__Top_Pillar => enums::Realm::Breach,
            SpotId::Irikar_Breach__Flappy_Drone__Upper_Valley_Left => enums::Realm::Breach,
            SpotId::Irikar_Breach__Flappy_Drone__Upper_Valley_Right => enums::Realm::Breach,
            SpotId::Irikar_Breach__Flappy_Drone__West_Door => enums::Realm::Breach,
            SpotId::Irikar_Breach__Flappy_Drone__Zigzag_Bottom => enums::Realm::Breach,
            SpotId::Irikar_Breach__Four_way__East => enums::Realm::Breach,
            SpotId::Irikar_Breach__Four_way__Ledge => enums::Realm::Breach,
            SpotId::Irikar_Breach__Four_way__North => enums::Realm::Breach,
            SpotId::Irikar_Breach__Four_way__South => enums::Realm::Breach,
            SpotId::Irikar_Breach__Four_way__West => enums::Realm::Breach,
            SpotId::Irikar_Breach__Gauntlet__East_22 => enums::Realm::Breach,
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Bottom => enums::Realm::Breach,
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Lower_Entry => enums::Realm::Breach,
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Reward => enums::Realm::Breach,
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Top_Ledge => enums::Realm::Breach,
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Entry => enums::Realm::Breach,
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Left => enums::Realm::Breach,
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Right => enums::Realm::Breach,
            SpotId::Irikar_Breach__Gauntlet__Save_Point => enums::Realm::Breach,
            SpotId::Irikar_Breach__Hover_Room__Bottom => enums::Realm::Breach,
            SpotId::Irikar_Breach__Hover_Room__East => enums::Realm::Breach,
            SpotId::Irikar_Breach__Hover_Room__West => enums::Realm::Breach,
            SpotId::Irikar_Breach__Neon_Corridor__Center => enums::Realm::Breach,
            SpotId::Irikar_Breach__Neon_Corridor__East => enums::Realm::Breach,
            SpotId::Irikar_Breach__Neon_Corridor__West => enums::Realm::Breach,
            SpotId::Irikar_Breach__Neon_Corridor__West_Basin => enums::Realm::Breach,
            SpotId::Irikar_Breach__Sandy_Lair__East_27 => enums::Realm::Breach,
            SpotId::Irikar_Breach__Sandy_Lair__East_28 => enums::Realm::Breach,
            SpotId::Irikar_Breach__Save_Room__Save_Point => enums::Realm::Breach,
            SpotId::Irikar_Breach__Save_Room__Upper_Area => enums::Realm::Breach,
            SpotId::Irikar_Breach__Save_Room__West => enums::Realm::Breach,
            SpotId::Irikar_Breach__Uhrum_Connector__West => enums::Realm::Breach,
            SpotId::Irikar_Breach__Worm_Rave__Corner => enums::Realm::Breach,
            SpotId::Irikar_Breach__Worm_Rave__East => enums::Realm::Breach,
            SpotId::Irikar_Breach__Worm_Rave__South => enums::Realm::Breach,
            SpotId::Menu__Breach_Map__AGB_Bridge_Lower => enums::Realm::Map,
            SpotId::Menu__Breach_Map__AGB_Bridge_Upper => enums::Realm::Map,
            SpotId::Menu__Breach_Map__AGB_East => enums::Realm::Map,
            SpotId::Menu__Breach_Map__AGB_Enclosed => enums::Realm::Map,
            SpotId::Menu__Breach_Map__AGB_North => enums::Realm::Map,
            SpotId::Menu__Breach_Map__AGB_South => enums::Realm::Map,
            SpotId::Menu__Breach_Map__Drone_Hover => enums::Realm::Map,
            SpotId::Menu__Breach_Map__GSB_Chimney_Flask => enums::Realm::Map,
            SpotId::Menu__Breach_Map__GSB_Cubby_Health => enums::Realm::Map,
            SpotId::Menu__Breach_Map__GSB_East => enums::Realm::Map,
            SpotId::Menu__Breach_Map__GSB_Emergence => enums::Realm::Map,
            SpotId::Menu__Breach_Map__GSB_Labyrinth => enums::Realm::Map,
            SpotId::Menu__Breach_Map__GSB_Peak => enums::Realm::Map,
            SpotId::Menu__Breach_Map__GSB_SW_Save => enums::Realm::Map,
            SpotId::Menu__Breach_Map__GSB_South => enums::Realm::Map,
            SpotId::Menu__Breach_Map__GlB_Arena => enums::Realm::Map,
            SpotId::Menu__Breach_Map__GlB_Center => enums::Realm::Map,
            SpotId::Menu__Breach_Map__GlB_Control_Flask => enums::Realm::Map,
            SpotId::Menu__Breach_Map__GlB_East => enums::Realm::Map,
            SpotId::Menu__Breach_Map__GlB_Grate_Flask => enums::Realm::Map,
            SpotId::Menu__Breach_Map__GlB_South => enums::Realm::Map,
            SpotId::Menu__Breach_Map__GlB_West => enums::Realm::Map,
            SpotId::Menu__Breach_Map__IB_Basement => enums::Realm::Map,
            SpotId::Menu__Breach_Map__IB_Gauntlet => enums::Realm::Map,
            SpotId::Menu__Breach_Map__IB_Gauntlet_Flask => enums::Realm::Map,
            SpotId::Menu__Breach_Map__IB_Save_Room => enums::Realm::Map,
            SpotId::Menu__Breach_Map__IB_West => enums::Realm::Map,
            SpotId::Menu__Breach_Map__IB_Worm_Rave_Flask => enums::Realm::Map,
            SpotId::Menu__Breach_Map__LAB_Center => enums::Realm::Map,
            SpotId::Menu__Breach_Map__LAB_East => enums::Realm::Map,
            SpotId::Menu__Breach_Map__LAB_East_Health => enums::Realm::Map,
            SpotId::Menu__Breach_Map__LAB_Enclosed => enums::Realm::Map,
            SpotId::Menu__Breach_Map__LAB_Southeast => enums::Realm::Map,
            SpotId::Menu__Breach_Map__LAB_Southwest => enums::Realm::Map,
            SpotId::Menu__Breach_Map__MEB_Drone => enums::Realm::Map,
            SpotId::Menu__Breach_Map__MEB_Peak => enums::Realm::Map,
            SpotId::Menu__Breach_Map__MEB_Southeast => enums::Realm::Map,
            SpotId::Menu__Breach_Map__MEB_Southwest => enums::Realm::Map,
            SpotId::Menu__Breach_Map__Slingshot_Hook => enums::Realm::Map,
            SpotId::Menu__Breach_Map__UVB_Center => enums::Realm::Map,
            SpotId::Menu__Breach_Map__UVB_Dead_end => enums::Realm::Map,
            SpotId::Menu__Breach_Map__UVB_East => enums::Realm::Map,
            SpotId::Menu__Breach_Map__UVB_West => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Aansur => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Amagi_Dragon_Eye_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Amagi_East_Lake => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Amagi_Isolation => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Amagi_Main_Area => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Amagi_Main_Area_Cave_Entrance => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Amagi_Main_Area_Cave_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Amagi_Main_Area_Water_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Amagi_West_Lake_Refill_Station => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Annuna_Center_Save => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Annuna_East_Bridge_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Annuna_Egg_Room_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Annuna_Egg_Room_SE => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Annuna_Factory_Entrance => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Annuna_Mirror_Match => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Annuna_Mirror_Match_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Annuna_Sniper_Valley_Core => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Annuna_Sniper_Valley_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Annuna_Spider_Room_Core => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Annuna_Twisty_Passages_Core => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Annuna_Upper => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Annuna_Upper_Hallway_Portal => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Annuna_Vertical_Room => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Annuna_West_Bridge => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Anuman => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Apocalypse => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Apocalypse_Cache => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Beware_the_Patternmind => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Boomerang => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Bounty_List => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Breach_Attractor => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Breach_Sight => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Bronze_Axe => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Building_of_the_School => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Carnelian_Ring => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Commemorative_Speech => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Compass => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Dangerous_Ideas => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Destruction_Pogrom => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Double_Axe => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Dr_Gloria => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_Alu_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_Alu_Health => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_Base_Camp => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_Base_Camp_East => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_Base_Camp_Health => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_Base_Camp_West => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_By_Garage_Health => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_Drone_Pit_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_East_Health => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_East_Waterfall_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_Garage => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_Guarded_Health => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_Observatory => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_Truck_Gate => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_Waterfall_Cave => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_West_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_West_Lower => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_West_Mid => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ebih_West_Upper => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Eye_Ring => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Family_Tragedy => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Filter_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Filter_Spiders => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Forbidden_Knowledge => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Freedom_from_Aansur => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Base => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Breachable_Wall_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Caverns_Core => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Caverns_Matrix => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Clouds_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Dual_Path_Health => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_East_Caverns_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Far_Corner => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Gateway_Block => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Gateway_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Gubi_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Highest_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Labyrinth => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Lamassu_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Northeast => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Northeast_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Northeast_Gate => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top_Portal => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Ruins_West => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Separator => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Core => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Health => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Switch => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Glacier_Dock_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Glacier_East_Revival_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Glacier_Peak_Birds_Eye => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Glacier_Revival => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Glacier_Sea_Burial_Health => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Glacier_Vertical_Room_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Hammond => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Hammonds_Health => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Heretics_Granddaughter => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Heretics_Tablet => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Infect => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Irikar_10_25 => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Irikar_Abandoned_Room => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Irikar_Airy_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Irikar_Basement_Core => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Irikar_Beach_Cache => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Irikar_Beach_Save => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Irikar_Broken_Wall => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Irikar_Fast_Travel => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Irikar_Gudam => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Irikar_Gudam_Health => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Irikar_Hub => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Irikar_Mid_air_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Irikar_Midwest => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Irikar_Royal_Storage => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Irikar_Well => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Journal_10_29_2049 => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Kari => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Lament_for_Fools => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ledge_Grab => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__MUS_A_M20_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Nanite_Mist => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Nano_Lattice_2 => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Plague_of_Thoughts => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Remote_Drone => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Royal_Ring => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Shockwave => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Storm_Bomb => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Suspension_Bridge => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Terminal_Breakthrough_1 => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Terminal_Breakthrough_2 => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__The_Eternal_Arm => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__The_Ideal_Kiengir => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__The_Student => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Udusan => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Uhrum_Annuna_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Uhrum_Center => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Uhrum_East => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Uhrum_Emergence => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Uhrum_Fast_Travel => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Uhrum_Siege_Corridor_Core => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Uhrum_Siege_Corridor_Health => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Uhrum_Waterfalls_Flask => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Uhrum_West => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Uhrum_West_Portal_Entrance => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Uhrum_West_Portal_Exit => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Ul_Gishru => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Under_Siege => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Wall_Climb => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Water_Movement => enums::Realm::Map,
            SpotId::Menu__Kiengir_Map__Weekly_Notes_2_27_2053 => enums::Realm::Map,
            SpotId::Menu__Upgrade_Menu__Combat => enums::Realm::Menu,
            SpotId::Menu__Upgrade_Menu__Drone => enums::Realm::Menu,
            SpotId::Menu__Upgrade_Menu__Infection => enums::Realm::Menu,
            SpotId::Menu__Upgrade_Menu__Physiology => enums::Realm::Menu,
            SpotId::Menu__Warp_Only__Breach => enums::Realm::Breach,
            SpotId::Menu__Warp_Only__Kiengir => enums::Realm::Main,
            _ => enums::Realm::Main,
        }
    }
    pub fn water(spot_id: SpotId) -> bool {
        match spot_id {
            SpotId::Amagi_Breach__East_Connector__East => true,
            SpotId::Amagi_Breach__East_Connector__West => true,
            SpotId::Amagi_Breach__East_Entrance__East => true,
            SpotId::Amagi_Breach__East_Entrance__Grate_Left => true,
            SpotId::Amagi_Breach__East_Entrance__Grate_Right => true,
            SpotId::Amagi_Breach__East_Entrance__Save_Point => true,
            SpotId::Amagi_Breach__East_Entrance__Upper_Slope => true,
            SpotId::Amagi_Breach__East_Entrance__West => true,
            SpotId::Amagi__East_Lake__Arch_East => true,
            SpotId::Amagi__East_Lake__Arch_West => true,
            SpotId::Amagi__East_Lake__Center_East_Water_Surface_Fast => true,
            SpotId::Amagi__East_Lake__Center_East_Water_Surface_Slow => true,
            SpotId::Amagi__East_Lake__Center_Lower_Platform_East => false,
            SpotId::Amagi__East_Lake__Center_Northeast_Platform => false,
            SpotId::Amagi__East_Lake__Center_Upper_Platform => false,
            SpotId::Amagi__East_Lake__Center_Water_Below_Platform_East => true,
            SpotId::Amagi__East_Lake__Center_Water_Below_Platform_West => true,
            SpotId::Amagi__East_Lake__Center_West_Platform => false,
            SpotId::Amagi__East_Lake__Center_West_Water_Surface => true,
            SpotId::Amagi__East_Lake__East_15_Flat => false,
            SpotId::Amagi__East_Lake__East_15_Lower => false,
            SpotId::Amagi__East_Lake__East_15_Lower_Hover => false,
            SpotId::Amagi__East_Lake__East_15_Upper_Hover => false,
            SpotId::Amagi__East_Lake__East_Hill => false,
            SpotId::Amagi__East_Lake__East_Water_Surface => true,
            SpotId::Amagi__East_Lake__Far_West_Water_Surface => true,
            SpotId::Amagi__East_Lake__Foot => true,
            SpotId::Amagi__East_Lake__Kum_Abala => true,
            SpotId::Amagi__East_Lake__Portal_Ledge => true,
            SpotId::Amagi__East_Lake__Portal_Stand => true,
            SpotId::Amagi__East_Lake__Save_Point => true,
            SpotId::Amagi__East_Lake__Southeast_Column => true,
            SpotId::Amagi__East_Lake__Southwest_Brick => true,
            SpotId::Amagi__East_Lake__Southwest_Column_Base => true,
            SpotId::Amagi__East_Lake__Southwest_Column_East => true,
            SpotId::Amagi__East_Lake__Southwest_Column_West => true,
            SpotId::Amagi__East_Lake__Underwater_Hill => true,
            SpotId::Amagi__East_Lake__West_17 => true,
            SpotId::Amagi__East_Lake__West_18 => true,
            SpotId::Amagi__East_Lake__West_Platform_1_East => true,
            SpotId::Amagi__East_Lake__West_Platform_1_West => true,
            SpotId::Amagi__East_Lake__West_Platform_1_West_Hook => true,
            SpotId::Amagi__East_Lake__West_Platform_2_East => true,
            SpotId::Amagi__East_Lake__West_Platform_2_West => true,
            SpotId::Amagi__East_Lake__West_Platform_3 => true,
            SpotId::Amagi__East_Lake__West_Platform_3_Hook => true,
            SpotId::Amagi__East_Lake__West_Water_Surface => false,
            SpotId::Amagi__Gated_Community__East_17 => true,
            SpotId::Amagi__Gated_Community__East_18 => true,
            SpotId::Amagi__Grid_31_19__East => true,
            SpotId::Amagi__Grid_31_19__West => true,
            SpotId::Amagi__Liru_Room__Bottom => true,
            SpotId::Amagi__Liru_Room__East_Passage => true,
            SpotId::Amagi__Liru_Room__East_Platform_1_Left => true,
            SpotId::Amagi__Liru_Room__East_Platform_1_Right => true,
            SpotId::Amagi__Liru_Room__East_Platform_2_Left => true,
            SpotId::Amagi__Liru_Room__East_Platform_2_Right => true,
            SpotId::Amagi__Liru_Room__East_Platform_3_Left => true,
            SpotId::Amagi__Liru_Room__East_Platform_3_Right => true,
            SpotId::Amagi__Liru_Room__Hidden_Enemies => true,
            SpotId::Amagi__Liru_Room__Hidden_Exit => true,
            SpotId::Amagi__Liru_Room__Platform_1_Left => true,
            SpotId::Amagi__Liru_Room__Platform_1_Right => true,
            SpotId::Amagi__Liru_Room__Platform_2_Left => true,
            SpotId::Amagi__Liru_Room__Platform_2_Right => true,
            SpotId::Amagi__Liru_Room__Platform_3_Left => true,
            SpotId::Amagi__Liru_Room__Platform_3_Right => true,
            SpotId::Amagi__Liru_Room__Platform_4_Left => true,
            SpotId::Amagi__Liru_Room__Platform_4_Right => true,
            SpotId::Amagi__Liru_Room__Shrine => true,
            SpotId::Amagi__Liru_Room__West_19 => true,
            SpotId::Amagi__Liru_Room__West_20 => true,
            SpotId::Amagi__Main_Area__Broken_Wall => true,
            SpotId::Amagi__Main_Area__Carving => false,
            SpotId::Amagi__Main_Area__Catwalk_Broken_Part => true,
            SpotId::Amagi__Main_Area__Catwalk_Center => true,
            SpotId::Amagi__Main_Area__Catwalk_East_Edge => true,
            SpotId::Amagi__Main_Area__Cliff => true,
            SpotId::Amagi__Main_Area__East_15 => false,
            SpotId::Amagi__Main_Area__East_19 => true,
            SpotId::Amagi__Main_Area__East_Ledge => true,
            SpotId::Amagi__Main_Area__Enemy_Side => true,
            SpotId::Amagi__Main_Area__Flat_Ruin => true,
            SpotId::Amagi__Main_Area__Half_Pillar => true,
            SpotId::Amagi__Main_Area__Platform_2 => true,
            SpotId::Amagi__Main_Area__Platform_3 => true,
            SpotId::Amagi__Main_Area__Save_Point => true,
            SpotId::Amagi__Main_Area__Secret_Outcropping => false,
            SpotId::Amagi__Main_Area__Secret_Waterfall => false,
            SpotId::Amagi__Main_Area__Shallow_End => true,
            SpotId::Amagi__Main_Area__Small_Cliff => true,
            SpotId::Amagi__Main_Area__Upper_Platform => true,
            SpotId::Amagi__Main_Area__Wall_Stuck_Spot => true,
            SpotId::Amagi__Main_Area__Waters_Edge => false,
            SpotId::Amagi__Main_Area__Way_Off_To_The_Side => false,
            SpotId::Amagi__Main_Area__West_15 => false,
            SpotId::Amagi__Main_Area__West_18 => true,
            SpotId::Amagi__Main_Area__West_19 => true,
            SpotId::Amagi__Main_Area__West_Mini_Hill => true,
            SpotId::Amagi__Main_Area__West_Shelf => true,
            SpotId::Amagi__Main_Area__West_Side => true,
            SpotId::Amagi__Secret_Chamber__West => true,
            SpotId::Amagi__West_Lake__Cavern_Back_Teeth => true,
            SpotId::Amagi__West_Lake__Cavern_Chin => true,
            SpotId::Amagi__West_Lake__Cavern_Eye => true,
            SpotId::Amagi__West_Lake__Cavern_Front_Pillar => true,
            SpotId::Amagi__West_Lake__Cavern_Front_Teeth => true,
            SpotId::Amagi__West_Lake__Cavern_Jaw => true,
            SpotId::Amagi__West_Lake__Cavern_Lower_Trachea => true,
            SpotId::Amagi__West_Lake__Cavern_Middle_Pillar => true,
            SpotId::Amagi__West_Lake__Cavern_Neck => true,
            SpotId::Amagi__West_Lake__Cavern_Rear_Pillar => true,
            SpotId::Amagi__West_Lake__Cavern_Refill_Station => true,
            SpotId::Amagi__West_Lake__Cavern_Tear_Duct => true,
            SpotId::Amagi__West_Lake__East_15 => false,
            SpotId::Amagi__West_Lake__East_18 => true,
            SpotId::Amagi__West_Lake__East_19 => true,
            SpotId::Amagi__West_Lake__East_20 => true,
            SpotId::Amagi__West_Lake__East_Bank => true,
            SpotId::Amagi__West_Lake__East_Platform => true,
            SpotId::Amagi__West_Lake__East_Shore => false,
            SpotId::Amagi__West_Lake__Left_of_Enemy => true,
            SpotId::Amagi__West_Lake__Northeast_Platform => true,
            SpotId::Amagi__West_Lake__Northwest_Platform => true,
            SpotId::Amagi__West_Lake__Pillar => true,
            SpotId::Amagi__West_Lake__Pillar_Platform => true,
            SpotId::Amagi__West_Lake__Small_Hill => true,
            SpotId::Amagi__West_Lake__Some_Rock => true,
            SpotId::Amagi__West_Lake__Somewhat_Central_Platform => true,
            SpotId::Amagi__West_Lake__Stronghold_Ceiling_Left => true,
            SpotId::Amagi__West_Lake__Stronghold_Ceiling_Right => true,
            SpotId::Amagi__West_Lake__Stronghold_Front_Door => true,
            SpotId::Amagi__West_Lake__Stronghold_Front_Room => true,
            SpotId::Amagi__West_Lake__Stronghold_Item => true,
            SpotId::Amagi__West_Lake__Stronghold_Middle_Column => true,
            SpotId::Amagi__West_Lake__Stronghold_Rear_Wall => true,
            SpotId::Amagi__West_Lake__Stronghold_Top => true,
            SpotId::Amagi__West_Lake__Surface_Wall_Left => false,
            SpotId::Amagi__West_Lake__Surface_Wall_Right => false,
            SpotId::Amagi__West_Lake__Tentacle_Gap => true,
            SpotId::Amagi__West_Lake__Upper_Center_Platform => true,
            SpotId::Amagi__West_Lake__Water_Surface => false,
            SpotId::Amagi__West_Lake__West_15 => false,
            SpotId::Amagi__West_Lake__West_Bank => true,
            SpotId::Amagi__West_Lake__West_Cliff => true,
            SpotId::Amagi__West_Lake__West_Platform => true,
            SpotId::Amagi__West_Lake__West_Shore => false,
            SpotId::Glacier__Sea_Burial__Breakable_Rock_Left => true,
            SpotId::Glacier__Sea_Burial__Breakable_Rock_Right => true,
            SpotId::Glacier__Sea_Burial__Collapsing_Ceiling => true,
            SpotId::Glacier__Sea_Burial__Deep_Cache => true,
            SpotId::Glacier__Sea_Burial__East_14 => true,
            SpotId::Glacier__Sea_Burial__Grate_Ledge => true,
            SpotId::Glacier__Sea_Burial__Grate_Left => true,
            SpotId::Glacier__Sea_Burial__Grate_Right => true,
            SpotId::Glacier__Sea_Burial__Inside_the_Grate => true,
            SpotId::Glacier__Sea_Burial__Left_Center_Rock => true,
            SpotId::Glacier__Sea_Burial__Right_Center_Rock => true,
            SpotId::Glacier__Sea_Burial__Underwater_Passage_Center => true,
            SpotId::Glacier__Sea_Burial__West_13 => false,
            SpotId::Glacier__Sea_Burial__West_14 => true,
            SpotId::Glacier__Sea_Burial__West_Basin => true,
            SpotId::Glacier__Sea_Burial__West_Water_Surface => true,
            SpotId::Glacier__The_Big_Drop__Breakable_Rock_Right => true,
            SpotId::Glacier__The_Big_Drop__West_14 => true,
            SpotId::Glacier__Vertical_Room__East_17 => true,
            SpotId::Glacier__Vertical_Room__East_17_while_hovering => true,
            SpotId::Glacier__Vertical_Room__Lower_Gatestone => true,
            SpotId::Glacier__Vertical_Room__Lower_Switch => true,
            SpotId::Glacier__Vertical_Room__Middle_Gatestone => true,
            SpotId::Interior__Cave_Behind_Waterfall__Bottom => false,
            SpotId::Interior__Cave_Behind_Waterfall__Middle => false,
            SpotId::Interior__Cave_Behind_Waterfall__Top => false,
            SpotId::Irikar__Beach__Above_Tunnel => true,
            SpotId::Irikar__Beach__Cache => true,
            SpotId::Irikar__Beach__Tunnel_Entrance => true,
            SpotId::Irikar__Beach__Wet_Feet => true,
            SpotId::Uhrum__East_Lake__West_28 => true,
            SpotId::Uhrum__Waterfalls__East_28 => true,
            SpotId::Uhrum__Waterfalls__East_Water_Surface => true,
            SpotId::Uhrum__Waterfalls__Island_Water_West => true,
            SpotId::Uhrum__Waterfalls__Water_Pillar => true,
            SpotId::Uhrum__Waterfalls__Water_Slope => true,
            SpotId::Uhrum__Waterfalls__West_Shallow_End => true,
            SpotId::Uhrum__Waterfalls__West_Water_Ledge => true,
            SpotId::Uhrum__Waterfalls__West_Water_Nook => true,
            SpotId::Uhrum__Waterfalls__West_Water_Surface => true,
            _ => false,
        }
    }
    pub fn flipside(spot_id: SpotId) -> SpotId {
        match spot_id {
            SpotId::Annuna__Lamassu__Portal_Stand => SpotId::Glacier_Breach__South_Save__Save_Point,
            SpotId::Giguna_Breach__Peak__Portal => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna_Breach__Peak__Save_Point => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna_Breach__Pink_Clouds__Corner => SpotId::Giguna__Clouds__Cache,
            SpotId::Giguna_Breach__Pink_Clouds__Normal_Entry => {
                SpotId::Giguna__Clouds__Platform_Stop
            }
            SpotId::Giguna__Clouds__Cache => SpotId::Giguna_Breach__Pink_Clouds__Corner,
            SpotId::Giguna__Clouds__Platform_Stop => {
                SpotId::Giguna_Breach__Pink_Clouds__Normal_Entry
            }
            SpotId::Giguna__Ruins_Top__Portal => SpotId::Giguna_Breach__Peak__Save_Point,
            SpotId::Giguna__Ruins_Top__Save_Point => SpotId::Giguna_Breach__Peak__Portal,
            SpotId::Glacier_Breach__Angry_Lions__Portal_Stand => {
                SpotId::Annuna__Siuna_Storage__Portal_Entry
            }
            SpotId::Glacier_Breach__Angry_Lions__Second_Platform => {
                SpotId::Annuna__Siuna_Storage__Second_Platform
            }
            SpotId::Glacier_Breach__Angry_Lions__Top_Platform => {
                SpotId::Annuna__Siuna_Storage__Top_Platform
            }
            SpotId::Glacier_Breach__Hammonds_Breach__East_Side => {
                SpotId::Glacier__Hammonds_End__Corner
            }
            SpotId::Glacier_Breach__Hammonds_Breach__First_Step => {
                SpotId::Glacier__Hammonds_End__Hammond
            }
            SpotId::Glacier_Breach__Hammonds_Breach__Save_Point => {
                SpotId::Glacier__Hammonds_End__Lower_Right_Pedestal
            }
            SpotId::Glacier_Breach__Hammonds_Breach__West_Side => {
                SpotId::Glacier__Hammonds_End__Lower_Pedestal_West
            }
            SpotId::Glacier_Breach__Save_and_Exit__Halfway => {
                SpotId::Glacier__Hammonds_End__Upper_Grate_Right
            }
            SpotId::Glacier_Breach__Save_and_Exit__Portal_Stand => {
                SpotId::Glacier__Hammonds_End__Upper_Right_Pedestal
            }
            SpotId::Glacier_Breach__Save_and_Exit__Save_Point => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier_Breach__Stable_Floor__East => SpotId::Glacier__The_Big_Drop__Solid_Rock,
            SpotId::Glacier__Crystals__Middle_Ledge => {
                SpotId::Amagi_Breach__East_Entrance__Upper_Slope
            }
            SpotId::Glacier__Crystals__Portal_Cage => {
                SpotId::Amagi_Breach__East_Entrance__Grate_Right
            }
            SpotId::Glacier__Crystals__Portal_Stand => {
                SpotId::Amagi_Breach__East_Entrance__Save_Point
            }
            SpotId::Glacier__Hammonds_End__Corner => {
                SpotId::Glacier_Breach__Hammonds_Breach__East_Side
            }
            SpotId::Glacier__Hammonds_End__Hammond => {
                SpotId::Glacier_Breach__Hammonds_Breach__First_Step
            }
            SpotId::Glacier__Hammonds_End__Lower_Pedestal_West => {
                SpotId::Glacier_Breach__Hammonds_Breach__West_Side
            }
            SpotId::Glacier__Hammonds_End__Lower_Right_Pedestal => {
                SpotId::Glacier_Breach__Hammonds_Breach__Save_Point
            }
            SpotId::Glacier__Hammonds_End__Upper_Right_Pedestal => {
                SpotId::Glacier_Breach__Save_and_Exit__Portal_Stand
            }
            SpotId::Irikar_Breach__Exit_Corridor__Portal_Stand => {
                SpotId::Irikar__Abandoned_Room__Empty_Pedestal
            }
            SpotId::Irikar_Breach__Gauntlet__Save_Point => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar_Breach__Save_Room__Save_Point => SpotId::Irikar__Sight_Room__Portal,
            SpotId::Irikar__Basement_Portal__Portal_Stand => {
                SpotId::Irikar_Breach__Basement_Save__Save_Point
            }
            SpotId::Irikar__Hub__Portal_Stand => SpotId::Irikar_Breach__Gauntlet__Save_Point,
            SpotId::Irikar__Sight_Room__Portal => SpotId::Irikar_Breach__Save_Room__Save_Point,
            _ => SpotId::None,
        }
    }
    pub fn portal_start(spot_id: SpotId) -> SpotId {
        match spot_id {
            SpotId::Amagi__East_Lake__Arch_East => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__Arch_West => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__Center_East_Water_Surface_Fast => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__Center_East_Water_Surface_Slow => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__Center_Lower_Platform_East => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__Center_Northeast_Platform => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__Center_Upper_Platform => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__Center_Water_Below_Platform_East => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__Center_Water_Below_Platform_West => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__Center_West_Platform => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__Center_West_Water_Surface => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__East_15_Flat => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__East_15_Lower => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__East_15_Lower_Hover => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__East_15_Upper_Hover => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__East_Hill => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__East_Water_Surface => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__Far_West_Water_Surface => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__Foot => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__Kum_Abala => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__Portal_Ledge => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__Portal_Stand => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__Save_Point => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__Southeast_Column => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__Southwest_Brick => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__Southwest_Column_Base => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__Southwest_Column_East => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__Southwest_Column_West => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__Underwater_Hill => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__West_17 => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__West_18 => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__West_Platform_1_East => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__West_Platform_1_West => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__West_Platform_1_West_Hook => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__West_Platform_2_East => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__West_Platform_2_West => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__West_Platform_3 => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Amagi__East_Lake__West_Platform_3_Hook => {
                SpotId::Amagi__East_Lake__Portal_Stand
            }
            SpotId::Amagi__East_Lake__West_Water_Surface => SpotId::Amagi__East_Lake__Portal_Stand,
            SpotId::Annuna__Hidden_Portal__East => SpotId::Annuna__Hidden_Portal__Portal_Stand,
            SpotId::Annuna__Hidden_Portal__Plinth_Left => {
                SpotId::Annuna__Hidden_Portal__Portal_Stand
            }
            SpotId::Annuna__Hidden_Portal__Plinth_Right => {
                SpotId::Annuna__Hidden_Portal__Portal_Stand
            }
            SpotId::Annuna__Hidden_Portal__Portal_Stand => {
                SpotId::Annuna__Hidden_Portal__Portal_Stand
            }
            SpotId::Annuna__Hidden_Portal__West => SpotId::Annuna__Hidden_Portal__Portal_Stand,
            SpotId::Annuna__Lamassu__Above_Flat_Ground => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Annuna__Lamassu__Bottom_East_Ledge => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Annuna__Lamassu__Bottom_Hill => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Annuna__Lamassu__Bottom_Hill_East => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Annuna__Lamassu__Bottom_Hill_West => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Annuna__Lamassu__Bottom_Middle_Ledge => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Annuna__Lamassu__Bottom_West_Ledge => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Annuna__Lamassu__East_14 => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Annuna__Lamassu__East_16 => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Annuna__Lamassu__East_17 => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Annuna__Lamassu__Flat_Ground => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Annuna__Lamassu__Ledge_By_Grate => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Annuna__Lamassu__Lower_Brick_Ledge => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Annuna__Lamassu__Portal_Stand => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Annuna__Lamassu__Upper_Brick_Ledge => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Annuna__Lamassu__West_15 => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Annuna__Lamassu__West_17 => SpotId::Annuna__Lamassu__Portal_Stand,
            SpotId::Ebih__Truck_Gate__Door => SpotId::Ebih__Truck_Gate__Portal_Stand,
            SpotId::Ebih__Truck_Gate__East => SpotId::Ebih__Truck_Gate__Portal_Stand,
            SpotId::Ebih__Truck_Gate__Portal_Stand => SpotId::Ebih__Truck_Gate__Portal_Stand,
            SpotId::Ebih__Truck_Gate__Switch => SpotId::Ebih__Truck_Gate__Portal_Stand,
            SpotId::Giguna_Breach__Peak__Column => SpotId::Giguna_Breach__Peak__Portal,
            SpotId::Giguna_Breach__Peak__East_6 => SpotId::Giguna_Breach__Peak__Portal,
            SpotId::Giguna_Breach__Peak__East_Passage => SpotId::Giguna_Breach__Peak__Portal,
            SpotId::Giguna_Breach__Peak__Portal => SpotId::Giguna_Breach__Peak__Portal,
            SpotId::Giguna_Breach__Peak__Save_Point => SpotId::Giguna_Breach__Peak__Portal,
            SpotId::Giguna_Breach__Peak__Upper_East => SpotId::Giguna_Breach__Peak__Portal,
            SpotId::Giguna_Breach__Peak__Upper_West => SpotId::Giguna_Breach__Peak__Portal,
            SpotId::Giguna_Breach__Peak__West_7 => SpotId::Giguna_Breach__Peak__Portal,
            SpotId::Giguna__Clouds__Cache => SpotId::Giguna__Clouds__Cache,
            SpotId::Giguna__Clouds__North_Left => SpotId::Giguna__Clouds__Cache,
            SpotId::Giguna__Clouds__North_Middle => SpotId::Giguna__Clouds__Cache,
            SpotId::Giguna__Clouds__North_Right => SpotId::Giguna__Clouds__Cache,
            SpotId::Giguna__Clouds__North_Under_Ledge => SpotId::Giguna__Clouds__Cache,
            SpotId::Giguna__Clouds__Platform_Early => SpotId::Giguna__Clouds__Cache,
            SpotId::Giguna__Clouds__Platform_Early_Portal => SpotId::Giguna__Clouds__Cache,
            SpotId::Giguna__Clouds__Platform_Start => SpotId::Giguna__Clouds__Cache,
            SpotId::Giguna__Clouds__Platform_Stop => SpotId::Giguna__Clouds__Cache,
            SpotId::Giguna__Clouds__Pull_Right => SpotId::Giguna__Clouds__Cache,
            SpotId::Giguna__Clouds__Southeast => SpotId::Giguna__Clouds__Cache,
            SpotId::Giguna__Clouds__Southwest => SpotId::Giguna__Clouds__Cache,
            SpotId::Giguna__Clouds__Straight_Down => SpotId::Giguna__Clouds__Cache,
            SpotId::Giguna__Ruins_Top__East_7 => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__East_Door => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__Entryway => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__Flask => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__Interior_Ledge => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__Portal => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__Portal_Left => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__Rooftop_East => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__Rooftop_Gutter => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__Rooftop_West => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__Save_Point => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__Small_Ledge => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__Switch => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__Turret_Balcony_East => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__Turret_Balcony_West => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__Upper_Tunnel => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__West_7 => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__West_Door => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Giguna__Ruins_Top__West_Pillar => SpotId::Giguna__Ruins_Top__Portal,
            SpotId::Glacier_Breach__Angry_Lions__North => {
                SpotId::Glacier_Breach__Angry_Lions__Portal_Stand
            }
            SpotId::Glacier_Breach__Angry_Lions__Portal_Stand => {
                SpotId::Glacier_Breach__Angry_Lions__Portal_Stand
            }
            SpotId::Glacier_Breach__Angry_Lions__Second_Platform => {
                SpotId::Glacier_Breach__Angry_Lions__Portal_Stand
            }
            SpotId::Glacier_Breach__Angry_Lions__Top_Platform => {
                SpotId::Glacier_Breach__Angry_Lions__Portal_Stand
            }
            SpotId::Glacier_Breach__Save_and_Exit__Halfway => {
                SpotId::Glacier_Breach__Save_and_Exit__Portal_Stand
            }
            SpotId::Glacier_Breach__Save_and_Exit__Portal_Stand => {
                SpotId::Glacier_Breach__Save_and_Exit__Portal_Stand
            }
            SpotId::Glacier_Breach__Save_and_Exit__Save_Point => {
                SpotId::Glacier_Breach__Save_and_Exit__Portal_Stand
            }
            SpotId::Glacier_Breach__Save_and_Exit__West => {
                SpotId::Glacier_Breach__Save_and_Exit__Portal_Stand
            }
            SpotId::Glacier__Crystals__East => SpotId::Glacier__Crystals__Portal_Cage,
            SpotId::Glacier__Crystals__Grate_Left => SpotId::Glacier__Crystals__Portal_Cage,
            SpotId::Glacier__Crystals__Lower_Corner => SpotId::Glacier__Crystals__Portal_Cage,
            SpotId::Glacier__Crystals__Lower_Slope => SpotId::Glacier__Crystals__Portal_Cage,
            SpotId::Glacier__Crystals__Middle_Ledge => SpotId::Glacier__Crystals__Portal_Cage,
            SpotId::Glacier__Crystals__Midwest_Slope => SpotId::Glacier__Crystals__Portal_Cage,
            SpotId::Glacier__Crystals__Portal_Cage => SpotId::Glacier__Crystals__Portal_Cage,
            SpotId::Glacier__Crystals__Portal_Stand => SpotId::Glacier__Crystals__Portal_Cage,
            SpotId::Glacier__Crystals__Top_Corner => SpotId::Glacier__Crystals__Portal_Cage,
            SpotId::Glacier__Crystals__Upper_Ledge => SpotId::Glacier__Crystals__Portal_Cage,
            SpotId::Glacier__Crystals__West => SpotId::Glacier__Crystals__Portal_Cage,
            SpotId::Glacier__Hammonds_End__Between_Center_Doors => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Center_Door_Left => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Center_Door_Right => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Corner => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__East_11_Door => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Hammond => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Lower_Grate_Left => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Lower_Grate_Right => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Lower_Pedestal_West => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Lower_Right_Pedestal => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Switch_Near => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Switch_from_Ledge => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Upper_Floor => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Upper_Grate_Left => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Upper_Grate_Right => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Upper_Portal_Stand => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Upper_Right_Mid_air => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Upper_Right_Pedestal => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__Upper_Stair => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__West_10 => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Glacier__Hammonds_End__West_11 => {
                SpotId::Glacier__Hammonds_End__Upper_Portal_Stand
            }
            SpotId::Irikar_Breach__Exit_Corridor__East => {
                SpotId::Irikar_Breach__Exit_Corridor__Portal_Stand
            }
            SpotId::Irikar_Breach__Exit_Corridor__North_12 => {
                SpotId::Irikar_Breach__Exit_Corridor__Portal_Stand
            }
            SpotId::Irikar_Breach__Exit_Corridor__North_13 => {
                SpotId::Irikar_Breach__Exit_Corridor__Portal_Stand
            }
            SpotId::Irikar_Breach__Exit_Corridor__Passage => {
                SpotId::Irikar_Breach__Exit_Corridor__Portal_Stand
            }
            SpotId::Irikar_Breach__Exit_Corridor__Pillar => {
                SpotId::Irikar_Breach__Exit_Corridor__Portal_Stand
            }
            SpotId::Irikar_Breach__Exit_Corridor__Portal_Stand => {
                SpotId::Irikar_Breach__Exit_Corridor__Portal_Stand
            }
            SpotId::Irikar_Breach__Exit_Corridor__West => {
                SpotId::Irikar_Breach__Exit_Corridor__Portal_Stand
            }
            SpotId::Irikar_Breach__Exit_Corridor__West_of_Pillar => {
                SpotId::Irikar_Breach__Exit_Corridor__Portal_Stand
            }
            SpotId::Irikar__Basement_Portal__Bottom_Middle => {
                SpotId::Irikar__Basement_Portal__Portal_Stand
            }
            SpotId::Irikar__Basement_Portal__East_27 => {
                SpotId::Irikar__Basement_Portal__Portal_Stand
            }
            SpotId::Irikar__Basement_Portal__East_28 => {
                SpotId::Irikar__Basement_Portal__Portal_Stand
            }
            SpotId::Irikar__Basement_Portal__East_Platform => {
                SpotId::Irikar__Basement_Portal__Portal_Stand
            }
            SpotId::Irikar__Basement_Portal__Ledge => SpotId::Irikar__Basement_Portal__Portal_Stand,
            SpotId::Irikar__Basement_Portal__Middle_Platform => {
                SpotId::Irikar__Basement_Portal__Portal_Stand
            }
            SpotId::Irikar__Basement_Portal__Moving_Platform_End => {
                SpotId::Irikar__Basement_Portal__Portal_Stand
            }
            SpotId::Irikar__Basement_Portal__Moving_Platform_Start => {
                SpotId::Irikar__Basement_Portal__Portal_Stand
            }
            SpotId::Irikar__Basement_Portal__North => SpotId::Irikar__Basement_Portal__Portal_Stand,
            SpotId::Irikar__Basement_Portal__Portal_Stand => {
                SpotId::Irikar__Basement_Portal__Portal_Stand
            }
            SpotId::Irikar__Basement_Portal__West_28 => {
                SpotId::Irikar__Basement_Portal__Portal_Stand
            }
            SpotId::Irikar__Basement_Portal__Westmost_Platform => {
                SpotId::Irikar__Basement_Portal__Portal_Stand
            }
            SpotId::Irikar__Hub__Bowl_Hole => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Bowl_Middle_Ledge => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Bowl_Middle_Platform_Center => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Bowl_Middle_Platform_West => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Bowl_Platform_3 => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Bowl_Top_Platform => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Collapsed_Column => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Collapsed_Column_Debris => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Dagger_Altar => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__East_Rim => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Exposed_Passage_Center => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Exposed_Passage_Upper_Ledge => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Exposed_Passage_West => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Lower_Hallway_West => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Lower_Well => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__NW_Bowl_Edifice => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__NW_Middle_Building_Broken_Outcrop => {
                SpotId::Irikar__Hub__Portal_Stand
            }
            SpotId::Irikar__Hub__NW_Middle_Building_Corner => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__NW_Middle_Building_East_Entry => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__NW_Middle_Building_Left_Ledge => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__NW_Middle_Building_Lower_Ledge => {
                SpotId::Irikar__Hub__Portal_Stand
            }
            SpotId::Irikar__Hub__NW_Middle_Building_West_Entry => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__NW_Middle_Building_West_Hook_Point => {
                SpotId::Irikar__Hub__Portal_Stand
            }
            SpotId::Irikar__Hub__NW_Roof => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__NW_Staircase_Upper => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__North_Above_Portal => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Northeast_Above_Bowl => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Northwest => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Northwest_Above_Bowl => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Portal_Stand => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Royal_Storage_By_Wall => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Royal_Storage_South => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Royal_Storage_in_Wall => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Ruined_Hallway_Atop_Well => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Ruined_Hallway_By_Well => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Ruined_Hallway_Gap_Left => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Ruined_Hallway_Gap_Right => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__SW_Building_Broken_Wall => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__SW_Building_Hallway_West => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__SW_Building_Lower_Platform => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__SW_Building_NE_Roof => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__SW_Building_Platform_2 => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__SW_Building_Top_Platform => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Sat_Tower_Bottom => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Sat_Tower_East_24 => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Sat_Tower_Floating_Platform => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Sat_Tower_Long_Ledge => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Sat_Tower_Lower_Exterior => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Sat_Tower_Lower_Left_Ledge => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Sat_Tower_Lower_Right_Ledge => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Sat_Tower_Middle_Ledge => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Sat_Tower_Northeast => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Sat_Tower_Roof_East => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Sat_Tower_Roof_West => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Sat_Tower_Top_Ledge => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Sat_Tower_West_Valley => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__Save_Point => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__West_23 => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__West_24_Ground => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__West_24_Rooftop => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__West_25 => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__West_26 => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__West_Rim => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__West_Rooftop_1 => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__West_Rooftop_2 => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__West_Rooftop_3 => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__West_Rooftops_Upper_East => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__West_Rooftops_Upper_Middle => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__West_Rooftops_Upper_Staircase => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Hub__West_Small_Middle_Rooftop => SpotId::Irikar__Hub__Portal_Stand,
            SpotId::Irikar__Sight_Room__Above_Room_East => SpotId::Irikar__Sight_Room__Portal,
            SpotId::Irikar__Sight_Room__Above_Room_North => SpotId::Irikar__Sight_Room__Portal,
            SpotId::Irikar__Sight_Room__Item_Pedestal => SpotId::Irikar__Sight_Room__Portal,
            SpotId::Irikar__Sight_Room__Lower_Ledge => SpotId::Irikar__Sight_Room__Portal,
            SpotId::Irikar__Sight_Room__Northwest => SpotId::Irikar__Sight_Room__Portal,
            SpotId::Irikar__Sight_Room__Portal => SpotId::Irikar__Sight_Room__Portal,
            SpotId::Irikar__Sight_Room__West_24 => SpotId::Irikar__Sight_Room__Portal,
            SpotId::Uhrum__West_Entrance__Clear_Passage => {
                SpotId::Uhrum__West_Entrance__Portal_Stand
            }
            SpotId::Uhrum__West_Entrance__East_26 => SpotId::Uhrum__West_Entrance__Portal_Stand,
            SpotId::Uhrum__West_Entrance__East_28 => SpotId::Uhrum__West_Entrance__Portal_Stand,
            SpotId::Uhrum__West_Entrance__Gate_Switch => SpotId::Uhrum__West_Entrance__Portal_Stand,
            SpotId::Uhrum__West_Entrance__Hidden_Passage_Entry => {
                SpotId::Uhrum__West_Entrance__Portal_Stand
            }
            SpotId::Uhrum__West_Entrance__Hidden_Passage_West => {
                SpotId::Uhrum__West_Entrance__Portal_Stand
            }
            SpotId::Uhrum__West_Entrance__Inner_Dais => SpotId::Uhrum__West_Entrance__Portal_Stand,
            SpotId::Uhrum__West_Entrance__Lower_Path_Gap => {
                SpotId::Uhrum__West_Entrance__Portal_Stand
            }
            SpotId::Uhrum__West_Entrance__Lower_Path_Rock => {
                SpotId::Uhrum__West_Entrance__Portal_Stand
            }
            SpotId::Uhrum__West_Entrance__Lower_Path_Tree_Ledge => {
                SpotId::Uhrum__West_Entrance__Portal_Stand
            }
            SpotId::Uhrum__West_Entrance__Lower_Wall_East => {
                SpotId::Uhrum__West_Entrance__Portal_Stand
            }
            SpotId::Uhrum__West_Entrance__Lower_Wall_West => {
                SpotId::Uhrum__West_Entrance__Portal_Stand
            }
            SpotId::Uhrum__West_Entrance__Middle_West_Ledge => {
                SpotId::Uhrum__West_Entrance__Portal_Stand
            }
            SpotId::Uhrum__West_Entrance__Portal_Exit => SpotId::Uhrum__West_Entrance__Portal_Stand,
            SpotId::Uhrum__West_Entrance__Portal_Stand => {
                SpotId::Uhrum__West_Entrance__Portal_Stand
            }
            SpotId::Uhrum__West_Entrance__Sand => SpotId::Uhrum__West_Entrance__Portal_Stand,
            SpotId::Uhrum__West_Entrance__Save_Point => SpotId::Uhrum__West_Entrance__Portal_Stand,
            SpotId::Uhrum__West_Entrance__South_Platform => {
                SpotId::Uhrum__West_Entrance__Portal_Stand
            }
            SpotId::Uhrum__West_Entrance__Southeast_Tree => {
                SpotId::Uhrum__West_Entrance__Portal_Stand
            }
            SpotId::Uhrum__West_Entrance__Top_West_Ledge => {
                SpotId::Uhrum__West_Entrance__Portal_Stand
            }
            SpotId::Uhrum__West_Entrance__Upper_Fork => SpotId::Uhrum__West_Entrance__Portal_Stand,
            SpotId::Uhrum__West_Entrance__Upper_Wall_East => {
                SpotId::Uhrum__West_Entrance__Portal_Stand
            }
            SpotId::Uhrum__West_Entrance__Upper_Wall_West => {
                SpotId::Uhrum__West_Entrance__Portal_Stand
            }
            SpotId::Uhrum__West_Entrance__West_25 => SpotId::Uhrum__West_Entrance__Portal_Stand,
            SpotId::Uhrum__West_Entrance__West_26 => SpotId::Uhrum__West_Entrance__Portal_Stand,
            SpotId::Uhrum__West_Entrance__West_27 => SpotId::Uhrum__West_Entrance__Portal_Stand,
            SpotId::Uhrum__West_Entrance__West_of_Gate => {
                SpotId::Uhrum__West_Entrance__Portal_Stand
            }
            _ => SpotId::None,
        }
    }
    pub fn portal_hidden(spot_id: SpotId) -> bool {
        match spot_id {
            SpotId::Annuna__Hidden_Portal__East => true,
            SpotId::Annuna__Hidden_Portal__Plinth_Left => true,
            SpotId::Annuna__Hidden_Portal__Plinth_Right => true,
            SpotId::Annuna__Hidden_Portal__Portal_Stand => true,
            SpotId::Annuna__Hidden_Portal__West => true,
            SpotId::Giguna__Clouds__Cache => true,
            SpotId::Giguna__Clouds__North_Left => true,
            SpotId::Giguna__Clouds__North_Middle => true,
            SpotId::Giguna__Clouds__North_Right => true,
            SpotId::Giguna__Clouds__North_Under_Ledge => true,
            SpotId::Giguna__Clouds__Platform_Early => true,
            SpotId::Giguna__Clouds__Platform_Early_Portal => true,
            SpotId::Giguna__Clouds__Platform_Start => true,
            SpotId::Giguna__Clouds__Platform_Stop => true,
            SpotId::Giguna__Clouds__Pull_Right => true,
            SpotId::Giguna__Clouds__Southeast => true,
            SpotId::Giguna__Clouds__Southwest => true,
            SpotId::Giguna__Clouds__Straight_Down => true,
            SpotId::Irikar__Basement_Portal__Bottom_Middle => true,
            SpotId::Irikar__Basement_Portal__East_27 => true,
            SpotId::Irikar__Basement_Portal__East_28 => true,
            SpotId::Irikar__Basement_Portal__East_Platform => true,
            SpotId::Irikar__Basement_Portal__Ledge => true,
            SpotId::Irikar__Basement_Portal__Middle_Platform => true,
            SpotId::Irikar__Basement_Portal__Moving_Platform_End => true,
            SpotId::Irikar__Basement_Portal__Moving_Platform_Start => true,
            SpotId::Irikar__Basement_Portal__North => true,
            SpotId::Irikar__Basement_Portal__Portal_Stand => true,
            SpotId::Irikar__Basement_Portal__West_28 => true,
            SpotId::Irikar__Basement_Portal__Westmost_Platform => true,
            SpotId::Irikar__Hub__Bowl_Hole => true,
            SpotId::Irikar__Hub__Bowl_Middle_Ledge => true,
            SpotId::Irikar__Hub__Bowl_Middle_Platform_Center => true,
            SpotId::Irikar__Hub__Bowl_Middle_Platform_West => true,
            SpotId::Irikar__Hub__Bowl_Platform_3 => true,
            SpotId::Irikar__Hub__Bowl_Top_Platform => true,
            SpotId::Irikar__Hub__Collapsed_Column => true,
            SpotId::Irikar__Hub__Collapsed_Column_Debris => true,
            SpotId::Irikar__Hub__Dagger_Altar => true,
            SpotId::Irikar__Hub__East_Rim => true,
            SpotId::Irikar__Hub__Exposed_Passage_Center => true,
            SpotId::Irikar__Hub__Exposed_Passage_Upper_Ledge => true,
            SpotId::Irikar__Hub__Exposed_Passage_West => true,
            SpotId::Irikar__Hub__Lower_Hallway_West => true,
            SpotId::Irikar__Hub__Lower_Well => true,
            SpotId::Irikar__Hub__NW_Bowl_Edifice => true,
            SpotId::Irikar__Hub__NW_Middle_Building_Broken_Outcrop => true,
            SpotId::Irikar__Hub__NW_Middle_Building_Corner => true,
            SpotId::Irikar__Hub__NW_Middle_Building_East_Entry => true,
            SpotId::Irikar__Hub__NW_Middle_Building_Left_Ledge => true,
            SpotId::Irikar__Hub__NW_Middle_Building_Lower_Ledge => true,
            SpotId::Irikar__Hub__NW_Middle_Building_West_Entry => true,
            SpotId::Irikar__Hub__NW_Middle_Building_West_Hook_Point => true,
            SpotId::Irikar__Hub__NW_Roof => true,
            SpotId::Irikar__Hub__NW_Staircase_Upper => true,
            SpotId::Irikar__Hub__North_Above_Portal => true,
            SpotId::Irikar__Hub__Northeast_Above_Bowl => true,
            SpotId::Irikar__Hub__Northwest => true,
            SpotId::Irikar__Hub__Northwest_Above_Bowl => true,
            SpotId::Irikar__Hub__Portal_Stand => true,
            SpotId::Irikar__Hub__Royal_Storage_By_Wall => true,
            SpotId::Irikar__Hub__Royal_Storage_South => true,
            SpotId::Irikar__Hub__Royal_Storage_in_Wall => true,
            SpotId::Irikar__Hub__Ruined_Hallway_Atop_Well => true,
            SpotId::Irikar__Hub__Ruined_Hallway_By_Well => true,
            SpotId::Irikar__Hub__Ruined_Hallway_Gap_Left => true,
            SpotId::Irikar__Hub__Ruined_Hallway_Gap_Right => true,
            SpotId::Irikar__Hub__SW_Building_Broken_Wall => true,
            SpotId::Irikar__Hub__SW_Building_Hallway_West => true,
            SpotId::Irikar__Hub__SW_Building_Lower_Platform => true,
            SpotId::Irikar__Hub__SW_Building_NE_Roof => true,
            SpotId::Irikar__Hub__SW_Building_Platform_2 => true,
            SpotId::Irikar__Hub__SW_Building_Top_Platform => true,
            SpotId::Irikar__Hub__Sat_Tower_Bottom => true,
            SpotId::Irikar__Hub__Sat_Tower_East_24 => true,
            SpotId::Irikar__Hub__Sat_Tower_Floating_Platform => true,
            SpotId::Irikar__Hub__Sat_Tower_Long_Ledge => true,
            SpotId::Irikar__Hub__Sat_Tower_Lower_Exterior => true,
            SpotId::Irikar__Hub__Sat_Tower_Lower_Left_Ledge => true,
            SpotId::Irikar__Hub__Sat_Tower_Lower_Right_Ledge => true,
            SpotId::Irikar__Hub__Sat_Tower_Middle_Ledge => true,
            SpotId::Irikar__Hub__Sat_Tower_Northeast => true,
            SpotId::Irikar__Hub__Sat_Tower_Roof_East => true,
            SpotId::Irikar__Hub__Sat_Tower_Roof_West => true,
            SpotId::Irikar__Hub__Sat_Tower_Top_Ledge => true,
            SpotId::Irikar__Hub__Sat_Tower_West_Valley => true,
            SpotId::Irikar__Hub__Save_Point => true,
            SpotId::Irikar__Hub__West_23 => true,
            SpotId::Irikar__Hub__West_24_Ground => true,
            SpotId::Irikar__Hub__West_24_Rooftop => true,
            SpotId::Irikar__Hub__West_25 => true,
            SpotId::Irikar__Hub__West_26 => true,
            SpotId::Irikar__Hub__West_Rim => true,
            SpotId::Irikar__Hub__West_Rooftop_1 => true,
            SpotId::Irikar__Hub__West_Rooftop_2 => true,
            SpotId::Irikar__Hub__West_Rooftop_3 => true,
            SpotId::Irikar__Hub__West_Rooftops_Upper_East => true,
            SpotId::Irikar__Hub__West_Rooftops_Upper_Middle => true,
            SpotId::Irikar__Hub__West_Rooftops_Upper_Staircase => true,
            SpotId::Irikar__Hub__West_Small_Middle_Rooftop => true,
            SpotId::Irikar__Sight_Room__Above_Room_East => true,
            SpotId::Irikar__Sight_Room__Above_Room_North => true,
            SpotId::Irikar__Sight_Room__Item_Pedestal => true,
            SpotId::Irikar__Sight_Room__Lower_Ledge => true,
            SpotId::Irikar__Sight_Room__Northwest => true,
            SpotId::Irikar__Sight_Room__Portal => true,
            SpotId::Irikar__Sight_Room__West_24 => true,
            SpotId::Uhrum__West_Entrance__Clear_Passage => true,
            SpotId::Uhrum__West_Entrance__East_26 => true,
            SpotId::Uhrum__West_Entrance__East_28 => true,
            SpotId::Uhrum__West_Entrance__Gate_Switch => true,
            SpotId::Uhrum__West_Entrance__Hidden_Passage_Entry => true,
            SpotId::Uhrum__West_Entrance__Hidden_Passage_West => true,
            SpotId::Uhrum__West_Entrance__Inner_Dais => true,
            SpotId::Uhrum__West_Entrance__Lower_Path_Gap => true,
            SpotId::Uhrum__West_Entrance__Lower_Path_Rock => true,
            SpotId::Uhrum__West_Entrance__Lower_Path_Tree_Ledge => true,
            SpotId::Uhrum__West_Entrance__Lower_Wall_East => true,
            SpotId::Uhrum__West_Entrance__Lower_Wall_West => true,
            SpotId::Uhrum__West_Entrance__Middle_West_Ledge => true,
            SpotId::Uhrum__West_Entrance__Portal_Exit => true,
            SpotId::Uhrum__West_Entrance__Portal_Stand => true,
            SpotId::Uhrum__West_Entrance__Sand => true,
            SpotId::Uhrum__West_Entrance__Save_Point => true,
            SpotId::Uhrum__West_Entrance__South_Platform => true,
            SpotId::Uhrum__West_Entrance__Southeast_Tree => true,
            SpotId::Uhrum__West_Entrance__Top_West_Ledge => true,
            SpotId::Uhrum__West_Entrance__Upper_Fork => true,
            SpotId::Uhrum__West_Entrance__Upper_Wall_East => true,
            SpotId::Uhrum__West_Entrance__Upper_Wall_West => true,
            SpotId::Uhrum__West_Entrance__West_25 => true,
            SpotId::Uhrum__West_Entrance__West_26 => true,
            SpotId::Uhrum__West_Entrance__West_27 => true,
            SpotId::Uhrum__West_Entrance__West_of_Gate => true,
            _ => false,
        }
    }
    pub fn save_point(spot_id: SpotId) -> SpotId {
        match spot_id {
            SpotId::Amagi_Breach__East_Entrance__East => {
                SpotId::Amagi_Breach__East_Entrance__Save_Point
            }
            SpotId::Amagi_Breach__East_Entrance__Grate_Left => {
                SpotId::Amagi_Breach__East_Entrance__Save_Point
            }
            SpotId::Amagi_Breach__East_Entrance__Grate_Right => {
                SpotId::Amagi_Breach__East_Entrance__Save_Point
            }
            SpotId::Amagi_Breach__East_Entrance__Save_Point => {
                SpotId::Amagi_Breach__East_Entrance__Save_Point
            }
            SpotId::Amagi_Breach__East_Entrance__Upper_Slope => {
                SpotId::Amagi_Breach__East_Entrance__Save_Point
            }
            SpotId::Amagi_Breach__East_Entrance__West => {
                SpotId::Amagi_Breach__East_Entrance__Save_Point
            }
            SpotId::Amagi__East_Lake__Arch_East => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__Arch_West => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__Center_East_Water_Surface_Fast => {
                SpotId::Amagi__East_Lake__Save_Point
            }
            SpotId::Amagi__East_Lake__Center_East_Water_Surface_Slow => {
                SpotId::Amagi__East_Lake__Save_Point
            }
            SpotId::Amagi__East_Lake__Center_Lower_Platform_East => {
                SpotId::Amagi__East_Lake__Save_Point
            }
            SpotId::Amagi__East_Lake__Center_Northeast_Platform => {
                SpotId::Amagi__East_Lake__Save_Point
            }
            SpotId::Amagi__East_Lake__Center_Upper_Platform => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__Center_Water_Below_Platform_East => {
                SpotId::Amagi__East_Lake__Save_Point
            }
            SpotId::Amagi__East_Lake__Center_Water_Below_Platform_West => {
                SpotId::Amagi__East_Lake__Save_Point
            }
            SpotId::Amagi__East_Lake__Center_West_Platform => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__Center_West_Water_Surface => {
                SpotId::Amagi__East_Lake__Save_Point
            }
            SpotId::Amagi__East_Lake__East_15_Flat => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__East_15_Lower => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__East_15_Lower_Hover => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__East_15_Upper_Hover => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__East_Hill => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__East_Water_Surface => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__Far_West_Water_Surface => {
                SpotId::Amagi__East_Lake__Save_Point
            }
            SpotId::Amagi__East_Lake__Foot => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__Kum_Abala => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__Portal_Ledge => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__Portal_Stand => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__Save_Point => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__Southeast_Column => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__Southwest_Brick => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__Southwest_Column_Base => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__Southwest_Column_East => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__Southwest_Column_West => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__Underwater_Hill => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__West_17 => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__West_18 => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__West_Platform_1_East => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__West_Platform_1_West => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__West_Platform_1_West_Hook => {
                SpotId::Amagi__East_Lake__Save_Point
            }
            SpotId::Amagi__East_Lake__West_Platform_2_East => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__West_Platform_2_West => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__West_Platform_3 => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__West_Platform_3_Hook => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__East_Lake__West_Water_Surface => SpotId::Amagi__East_Lake__Save_Point,
            SpotId::Amagi__Main_Area__Broken_Wall => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Carving => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Catwalk_Broken_Part => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Catwalk_Center => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Catwalk_East_Edge => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Cliff => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__East_15 => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__East_19 => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__East_Ledge => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Enemy_Side => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Flat_Ruin => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Half_Pillar => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Platform_2 => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Platform_3 => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Save_Point => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Secret_Outcropping => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Secret_Waterfall => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Shallow_End => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Small_Cliff => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Upper_Platform => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Wall_Stuck_Spot => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Waters_Edge => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__Way_Off_To_The_Side => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__West_15 => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__West_18 => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__West_19 => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__West_Mini_Hill => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__West_Shelf => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Amagi__Main_Area__West_Side => SpotId::Amagi__Main_Area__Save_Point,
            SpotId::Annuna__Center_Save__East => SpotId::Annuna__Center_Save__Save_Point,
            SpotId::Annuna__Center_Save__Save_Point => SpotId::Annuna__Center_Save__Save_Point,
            SpotId::Annuna__Center_Save__West_Catwalk => SpotId::Annuna__Center_Save__Save_Point,
            SpotId::Annuna__Center_Save__West_Floor => SpotId::Annuna__Center_Save__Save_Point,
            SpotId::Annuna__Factory_Entrance__East => SpotId::Annuna__Factory_Entrance__Save_Point,
            SpotId::Annuna__Factory_Entrance__Save_Point => {
                SpotId::Annuna__Factory_Entrance__Save_Point
            }
            SpotId::Annuna__Factory_Entrance__West => SpotId::Annuna__Factory_Entrance__Save_Point,
            SpotId::Annuna__Final_Save__East => SpotId::Annuna__Final_Save__Save_Point,
            SpotId::Annuna__Final_Save__Lower_West => SpotId::Annuna__Final_Save__Save_Point,
            SpotId::Annuna__Final_Save__Pillar => SpotId::Annuna__Final_Save__Save_Point,
            SpotId::Annuna__Final_Save__Save_Point => SpotId::Annuna__Final_Save__Save_Point,
            SpotId::Annuna__Final_Save__Upper_West => SpotId::Annuna__Final_Save__Save_Point,
            SpotId::Annuna__Mirror_Match__Below_Switch => SpotId::Annuna__Mirror_Match__Save_Point,
            SpotId::Annuna__Mirror_Match__Central_Pillar => {
                SpotId::Annuna__Mirror_Match__Save_Point
            }
            SpotId::Annuna__Mirror_Match__East_25_Lower => SpotId::Annuna__Mirror_Match__Save_Point,
            SpotId::Annuna__Mirror_Match__East_25_Upper => SpotId::Annuna__Mirror_Match__Save_Point,
            SpotId::Annuna__Mirror_Match__East_26_Lower => SpotId::Annuna__Mirror_Match__Save_Point,
            SpotId::Annuna__Mirror_Match__East_26_Upper => SpotId::Annuna__Mirror_Match__Save_Point,
            SpotId::Annuna__Mirror_Match__Eastward => SpotId::Annuna__Mirror_Match__Save_Point,
            SpotId::Annuna__Mirror_Match__Plinth => SpotId::Annuna__Mirror_Match__Save_Point,
            SpotId::Annuna__Mirror_Match__Save_Point => SpotId::Annuna__Mirror_Match__Save_Point,
            SpotId::Annuna__Mirror_Match__Staircase => SpotId::Annuna__Mirror_Match__Save_Point,
            SpotId::Annuna__Mirror_Match__Waving_Distance => {
                SpotId::Annuna__Mirror_Match__Save_Point
            }
            SpotId::Annuna__Mirror_Match__West_25 => SpotId::Annuna__Mirror_Match__Save_Point,
            SpotId::Annuna__Mirror_Match__West_Gap => SpotId::Annuna__Mirror_Match__Save_Point,
            SpotId::Annuna__Upper_Save__East => SpotId::Annuna__Upper_Save__Save_Point,
            SpotId::Annuna__Upper_Save__Save_Point => SpotId::Annuna__Upper_Save__Save_Point,
            SpotId::Annuna__Upper_Save__West => SpotId::Annuna__Upper_Save__Save_Point,
            SpotId::Annuna__Vertical_Room__Above_Plinth => {
                SpotId::Annuna__Vertical_Room__Save_Point
            }
            SpotId::Annuna__Vertical_Room__Door_Switch => SpotId::Annuna__Vertical_Room__Save_Point,
            SpotId::Annuna__Vertical_Room__East_18 => SpotId::Annuna__Vertical_Room__Save_Point,
            SpotId::Annuna__Vertical_Room__East_20 => SpotId::Annuna__Vertical_Room__Save_Point,
            SpotId::Annuna__Vertical_Room__East_21 => SpotId::Annuna__Vertical_Room__Save_Point,
            SpotId::Annuna__Vertical_Room__East_22 => SpotId::Annuna__Vertical_Room__Save_Point,
            SpotId::Annuna__Vertical_Room__Gate_Button => SpotId::Annuna__Vertical_Room__Save_Point,
            SpotId::Annuna__Vertical_Room__Gate_Ledge => SpotId::Annuna__Vertical_Room__Save_Point,
            SpotId::Annuna__Vertical_Room__Lower_Ledge => SpotId::Annuna__Vertical_Room__Save_Point,
            SpotId::Annuna__Vertical_Room__Lower_Mid => SpotId::Annuna__Vertical_Room__Save_Point,
            SpotId::Annuna__Vertical_Room__Lower_Ministair => {
                SpotId::Annuna__Vertical_Room__Save_Point
            }
            SpotId::Annuna__Vertical_Room__Lower_Platform_1_Left => {
                SpotId::Annuna__Vertical_Room__Save_Point
            }
            SpotId::Annuna__Vertical_Room__Lower_Platform_1_Right => {
                SpotId::Annuna__Vertical_Room__Save_Point
            }
            SpotId::Annuna__Vertical_Room__Lower_Platform_2_Left => {
                SpotId::Annuna__Vertical_Room__Save_Point
            }
            SpotId::Annuna__Vertical_Room__Lower_Platform_2_Right => {
                SpotId::Annuna__Vertical_Room__Save_Point
            }
            SpotId::Annuna__Vertical_Room__Middle_Ministair => {
                SpotId::Annuna__Vertical_Room__Save_Point
            }
            SpotId::Annuna__Vertical_Room__Middle_Overhang => {
                SpotId::Annuna__Vertical_Room__Save_Point
            }
            SpotId::Annuna__Vertical_Room__Middle_Platform_1 => {
                SpotId::Annuna__Vertical_Room__Save_Point
            }
            SpotId::Annuna__Vertical_Room__Middle_Platform_2 => {
                SpotId::Annuna__Vertical_Room__Save_Point
            }
            SpotId::Annuna__Vertical_Room__Middle_West_Shaft => {
                SpotId::Annuna__Vertical_Room__Save_Point
            }
            SpotId::Annuna__Vertical_Room__Near_Upper_Ledge => {
                SpotId::Annuna__Vertical_Room__Save_Point
            }
            SpotId::Annuna__Vertical_Room__Plinth => SpotId::Annuna__Vertical_Room__Save_Point,
            SpotId::Annuna__Vertical_Room__Save_Point => SpotId::Annuna__Vertical_Room__Save_Point,
            SpotId::Annuna__Vertical_Room__Save_Point_Left => {
                SpotId::Annuna__Vertical_Room__Save_Point
            }
            SpotId::Annuna__Vertical_Room__Save_Point_Right => {
                SpotId::Annuna__Vertical_Room__Save_Point
            }
            SpotId::Annuna__Vertical_Room__Upper_Cache => SpotId::Annuna__Vertical_Room__Save_Point,
            SpotId::Annuna__Vertical_Room__Upper_Doorway => {
                SpotId::Annuna__Vertical_Room__Save_Point
            }
            SpotId::Annuna__Vertical_Room__Upper_Platform => {
                SpotId::Annuna__Vertical_Room__Save_Point
            }
            SpotId::Annuna__Vertical_Room__West_17 => SpotId::Annuna__Vertical_Room__Save_Point,
            SpotId::Annuna__Vertical_Room__West_20 => SpotId::Annuna__Vertical_Room__Save_Point,
            SpotId::Annuna__Vertical_Room__West_21 => SpotId::Annuna__Vertical_Room__Save_Point,
            SpotId::Annuna__Vertical_Room__West_22 => SpotId::Annuna__Vertical_Room__Save_Point,
            SpotId::Annuna__West_Bridge__Below_Tunnel => SpotId::Annuna__West_Bridge__Save_Point,
            SpotId::Annuna__West_Bridge__East_22 => SpotId::Annuna__West_Bridge__Save_Point,
            SpotId::Annuna__West_Bridge__East_24 => SpotId::Annuna__West_Bridge__Save_Point,
            SpotId::Annuna__West_Bridge__East_25_Lower => SpotId::Annuna__West_Bridge__Save_Point,
            SpotId::Annuna__West_Bridge__East_25_Upper => SpotId::Annuna__West_Bridge__Save_Point,
            SpotId::Annuna__West_Bridge__Mid_Tunnel => SpotId::Annuna__West_Bridge__Save_Point,
            SpotId::Annuna__West_Bridge__North => SpotId::Annuna__West_Bridge__Save_Point,
            SpotId::Annuna__West_Bridge__Plinth => SpotId::Annuna__West_Bridge__Save_Point,
            SpotId::Annuna__West_Bridge__Save_Point => SpotId::Annuna__West_Bridge__Save_Point,
            SpotId::Annuna__West_Bridge__Tunnel_Wall => SpotId::Annuna__West_Bridge__Save_Point,
            SpotId::Annuna__West_Bridge__West_25_Lower => SpotId::Annuna__West_Bridge__Save_Point,
            SpotId::Annuna__West_Bridge__West_25_Upper => SpotId::Annuna__West_Bridge__Save_Point,
            SpotId::Annuna__West_Bridge__West_26_Lower => SpotId::Annuna__West_Bridge__Save_Point,
            SpotId::Annuna__West_Bridge__West_26_Upper => SpotId::Annuna__West_Bridge__Save_Point,
            SpotId::Annuna__West_Bridge__West_Outcropping => {
                SpotId::Annuna__West_Bridge__Save_Point
            }
            SpotId::Ebih__Base_Camp__Behind_Vehicle => SpotId::Ebih__Base_Camp__Save_Point,
            SpotId::Ebih__Base_Camp__Building_Entry => SpotId::Ebih__Base_Camp__Save_Point,
            SpotId::Ebih__Base_Camp__Bunker_Entry => SpotId::Ebih__Base_Camp__Save_Point,
            SpotId::Ebih__Base_Camp__East_11 => SpotId::Ebih__Base_Camp__Save_Point,
            SpotId::Ebih__Base_Camp__East_12 => SpotId::Ebih__Base_Camp__Save_Point,
            SpotId::Ebih__Base_Camp__Lake_Access => SpotId::Ebih__Base_Camp__Save_Point,
            SpotId::Ebih__Base_Camp__Left_Platform => SpotId::Ebih__Base_Camp__Save_Point,
            SpotId::Ebih__Base_Camp__Left_Platform_Moved => SpotId::Ebih__Base_Camp__Save_Point,
            SpotId::Ebih__Base_Camp__Save_Point => SpotId::Ebih__Base_Camp__Save_Point,
            SpotId::Ebih__Base_Camp__Staircase => SpotId::Ebih__Base_Camp__Save_Point,
            SpotId::Ebih__Base_Camp__Tent_Entry => SpotId::Ebih__Base_Camp__Save_Point,
            SpotId::Ebih__Base_Camp__Top_Platform => SpotId::Ebih__Base_Camp__Save_Point,
            SpotId::Ebih__Base_Camp__West_11 => SpotId::Ebih__Base_Camp__Save_Point,
            SpotId::Ebih__Base_Camp__West_12 => SpotId::Ebih__Base_Camp__Save_Point,
            SpotId::Ebih__Base_Camp__West_13 => SpotId::Ebih__Base_Camp__Save_Point,
            SpotId::Ebih__Base_Camp__West_Midair => SpotId::Ebih__Base_Camp__Save_Point,
            SpotId::Giguna_Breach__Peak__Column => SpotId::Giguna_Breach__Peak__Save_Point,
            SpotId::Giguna_Breach__Peak__East_6 => SpotId::Giguna_Breach__Peak__Save_Point,
            SpotId::Giguna_Breach__Peak__East_Passage => SpotId::Giguna_Breach__Peak__Save_Point,
            SpotId::Giguna_Breach__Peak__Portal => SpotId::Giguna_Breach__Peak__Save_Point,
            SpotId::Giguna_Breach__Peak__Save_Point => SpotId::Giguna_Breach__Peak__Save_Point,
            SpotId::Giguna_Breach__Peak__Upper_East => SpotId::Giguna_Breach__Peak__Save_Point,
            SpotId::Giguna_Breach__Peak__Upper_West => SpotId::Giguna_Breach__Peak__Save_Point,
            SpotId::Giguna_Breach__Peak__West_7 => SpotId::Giguna_Breach__Peak__Save_Point,
            SpotId::Giguna_Breach__SW_Save__East_12 => SpotId::Giguna_Breach__SW_Save__Save_Point,
            SpotId::Giguna_Breach__SW_Save__Lower_Platform => {
                SpotId::Giguna_Breach__SW_Save__Save_Point
            }
            SpotId::Giguna_Breach__SW_Save__North => SpotId::Giguna_Breach__SW_Save__Save_Point,
            SpotId::Giguna_Breach__SW_Save__Save_Point => {
                SpotId::Giguna_Breach__SW_Save__Save_Point
            }
            SpotId::Giguna_Breach__SW_Save__Side_Door => SpotId::Giguna_Breach__SW_Save__Save_Point,
            SpotId::Giguna_Breach__SW_Save__West_11 => SpotId::Giguna_Breach__SW_Save__Save_Point,
            SpotId::Giguna__Giguna_Base__Below_Gate => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__Building_Entry => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__East_14 => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__East_17 => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__Kari => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__Left_Pillar => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__Lower_Fork => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__Middle_Platform => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__Right_Pillar => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__Ruin => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__Save_Point => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__Staircase_Bottom => {
                SpotId::Giguna__Giguna_Base__Save_Point
            }
            SpotId::Giguna__Giguna_Base__Staircase_Top => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__Stone_Knob => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__Switch_Distance_1 => {
                SpotId::Giguna__Giguna_Base__Save_Point
            }
            SpotId::Giguna__Giguna_Base__Switch_Distance_2 => {
                SpotId::Giguna__Giguna_Base__Save_Point
            }
            SpotId::Giguna__Giguna_Base__Switch_Distance_3 => {
                SpotId::Giguna__Giguna_Base__Save_Point
            }
            SpotId::Giguna__Giguna_Base__Switch_Distance_4 => {
                SpotId::Giguna__Giguna_Base__Save_Point
            }
            SpotId::Giguna__Giguna_Base__Table => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__Upper_Cliff => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__West_15 => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__West_16 => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Base__West_Grate => SpotId::Giguna__Giguna_Base__Save_Point,
            SpotId::Giguna__Giguna_Northeast__Crow_Eating => {
                SpotId::Giguna__Giguna_Northeast__Save_Point
            }
            SpotId::Giguna__Giguna_Northeast__Door => SpotId::Giguna__Giguna_Northeast__Save_Point,
            SpotId::Giguna__Giguna_Northeast__East_11 => {
                SpotId::Giguna__Giguna_Northeast__Save_Point
            }
            SpotId::Giguna__Giguna_Northeast__East_9 => {
                SpotId::Giguna__Giguna_Northeast__Save_Point
            }
            SpotId::Giguna__Giguna_Northeast__Gate_Button => {
                SpotId::Giguna__Giguna_Northeast__Save_Point
            }
            SpotId::Giguna__Giguna_Northeast__Gate_Left => {
                SpotId::Giguna__Giguna_Northeast__Save_Point
            }
            SpotId::Giguna__Giguna_Northeast__Gate_Right => {
                SpotId::Giguna__Giguna_Northeast__Save_Point
            }
            SpotId::Giguna__Giguna_Northeast__Gate_Vent => {
                SpotId::Giguna__Giguna_Northeast__Save_Point
            }
            SpotId::Giguna__Giguna_Northeast__Inner_Wall => {
                SpotId::Giguna__Giguna_Northeast__Save_Point
            }
            SpotId::Giguna__Giguna_Northeast__Right_Column => {
                SpotId::Giguna__Giguna_Northeast__Save_Point
            }
            SpotId::Giguna__Giguna_Northeast__Save_Point => {
                SpotId::Giguna__Giguna_Northeast__Save_Point
            }
            SpotId::Giguna__Giguna_Northeast__Shaft_Bottom => {
                SpotId::Giguna__Giguna_Northeast__Save_Point
            }
            SpotId::Giguna__Giguna_Northeast__Step => SpotId::Giguna__Giguna_Northeast__Save_Point,
            SpotId::Giguna__Giguna_Northeast__Switch => {
                SpotId::Giguna__Giguna_Northeast__Save_Point
            }
            SpotId::Giguna__Giguna_Northeast__Vault => SpotId::Giguna__Giguna_Northeast__Save_Point,
            SpotId::Giguna__Giguna_Northeast__West_10 => {
                SpotId::Giguna__Giguna_Northeast__Save_Point
            }
            SpotId::Giguna__Giguna_Northeast__West_9 => {
                SpotId::Giguna__Giguna_Northeast__Save_Point
            }
            SpotId::Giguna__Ruins_Top__East_7 => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__East_Door => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__Entryway => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__Flask => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__Interior_Ledge => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__Portal => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__Portal_Left => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__Rooftop_East => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__Rooftop_Gutter => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__Rooftop_West => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__Save_Point => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__Small_Ledge => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__Switch => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__Turret_Balcony_East => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__Turret_Balcony_West => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__Upper_Tunnel => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__West_7 => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__West_Door => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_Top__West_Pillar => SpotId::Giguna__Ruins_Top__Save_Point,
            SpotId::Giguna__Ruins_West__East_7 => SpotId::Giguna__Ruins_West__Save_Point,
            SpotId::Giguna__Ruins_West__East_9 => SpotId::Giguna__Ruins_West__Save_Point,
            SpotId::Giguna__Ruins_West__Lower_Ledge => SpotId::Giguna__Ruins_West__Save_Point,
            SpotId::Giguna__Ruins_West__Nook => SpotId::Giguna__Ruins_West__Save_Point,
            SpotId::Giguna__Ruins_West__Platform => SpotId::Giguna__Ruins_West__Save_Point,
            SpotId::Giguna__Ruins_West__Rooftop_East_Edge => SpotId::Giguna__Ruins_West__Save_Point,
            SpotId::Giguna__Ruins_West__Rooftop_West_Edge => SpotId::Giguna__Ruins_West__Save_Point,
            SpotId::Giguna__Ruins_West__Save_Point => SpotId::Giguna__Ruins_West__Save_Point,
            SpotId::Giguna__Ruins_West__Upper_Ledge => SpotId::Giguna__Ruins_West__Save_Point,
            SpotId::Giguna__Ruins_West__West_7 => SpotId::Giguna__Ruins_West__Save_Point,
            SpotId::Glacier_Breach__Guarded_Corridor__East => {
                SpotId::Glacier_Breach__Guarded_Corridor__Save_Point
            }
            SpotId::Glacier_Breach__Guarded_Corridor__Past_the_Guards => {
                SpotId::Glacier_Breach__Guarded_Corridor__Save_Point
            }
            SpotId::Glacier_Breach__Guarded_Corridor__Save_Point => {
                SpotId::Glacier_Breach__Guarded_Corridor__Save_Point
            }
            SpotId::Glacier_Breach__Guarded_Corridor__West => {
                SpotId::Glacier_Breach__Guarded_Corridor__Save_Point
            }
            SpotId::Glacier_Breach__Hammonds_Breach__East => {
                SpotId::Glacier_Breach__Hammonds_Breach__Save_Point
            }
            SpotId::Glacier_Breach__Hammonds_Breach__East_Side => {
                SpotId::Glacier_Breach__Hammonds_Breach__Save_Point
            }
            SpotId::Glacier_Breach__Hammonds_Breach__First_Step => {
                SpotId::Glacier_Breach__Hammonds_Breach__Save_Point
            }
            SpotId::Glacier_Breach__Hammonds_Breach__Save_Point => {
                SpotId::Glacier_Breach__Hammonds_Breach__Save_Point
            }
            SpotId::Glacier_Breach__Hammonds_Breach__West_Side => {
                SpotId::Glacier_Breach__Hammonds_Breach__Save_Point
            }
            SpotId::Glacier_Breach__Save_and_Exit__Halfway => {
                SpotId::Glacier_Breach__Save_and_Exit__Save_Point
            }
            SpotId::Glacier_Breach__Save_and_Exit__Portal_Stand => {
                SpotId::Glacier_Breach__Save_and_Exit__Save_Point
            }
            SpotId::Glacier_Breach__Save_and_Exit__Save_Point => {
                SpotId::Glacier_Breach__Save_and_Exit__Save_Point
            }
            SpotId::Glacier_Breach__Save_and_Exit__West => {
                SpotId::Glacier_Breach__Save_and_Exit__Save_Point
            }
            SpotId::Glacier_Breach__South_Save__Brick_Ledge => {
                SpotId::Glacier_Breach__South_Save__Save_Point
            }
            SpotId::Glacier_Breach__South_Save__East => {
                SpotId::Glacier_Breach__South_Save__Save_Point
            }
            SpotId::Glacier_Breach__South_Save__Save_Point => {
                SpotId::Glacier_Breach__South_Save__Save_Point
            }
            SpotId::Glacier_Breach__South_Save__West => {
                SpotId::Glacier_Breach__South_Save__Save_Point
            }
            SpotId::Glacier_Breach__West_Save__East_11 => {
                SpotId::Glacier_Breach__West_Save__Save_Point
            }
            SpotId::Glacier_Breach__West_Save__East_12 => {
                SpotId::Glacier_Breach__West_Save__Save_Point
            }
            SpotId::Glacier_Breach__West_Save__Save_Point => {
                SpotId::Glacier_Breach__West_Save__Save_Point
            }
            SpotId::Glacier_Breach__West_Save__West_11 => {
                SpotId::Glacier_Breach__West_Save__Save_Point
            }
            SpotId::Glacier_Breach__West_Save__West_Ledge => {
                SpotId::Glacier_Breach__West_Save__Save_Point
            }
            SpotId::Glacier_Breach__West_Save__West_Nub => {
                SpotId::Glacier_Breach__West_Save__Save_Point
            }
            SpotId::Glacier__Revival__East_9 => SpotId::Glacier__Revival__Save_Point,
            SpotId::Glacier__Revival__Just_Thrown => SpotId::Glacier__Revival__Save_Point,
            SpotId::Glacier__Revival__Ledge => SpotId::Glacier__Revival__Save_Point,
            SpotId::Glacier__Revival__Lower_East => SpotId::Glacier__Revival__Save_Point,
            SpotId::Glacier__Revival__Mid_air => SpotId::Glacier__Revival__Save_Point,
            SpotId::Glacier__Revival__Overhang => SpotId::Glacier__Revival__Save_Point,
            SpotId::Glacier__Revival__Pillar => SpotId::Glacier__Revival__Save_Point,
            SpotId::Glacier__Revival__Pillar_Step => SpotId::Glacier__Revival__Save_Point,
            SpotId::Glacier__Revival__Save_Point => SpotId::Glacier__Revival__Save_Point,
            SpotId::Glacier__Revival__West_8 => SpotId::Glacier__Revival__Save_Point,
            SpotId::Glacier__Revival__West_9 => SpotId::Glacier__Revival__Save_Point,
            SpotId::Irikar_Breach__Basement_Save__Save_Point => {
                SpotId::Irikar_Breach__Basement_Save__Save_Point
            }
            SpotId::Irikar_Breach__Gauntlet__East_22 => SpotId::Irikar_Breach__Gauntlet__Save_Point,
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Bottom => {
                SpotId::Irikar_Breach__Gauntlet__Save_Point
            }
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Lower_Entry => {
                SpotId::Irikar_Breach__Gauntlet__Save_Point
            }
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Reward => {
                SpotId::Irikar_Breach__Gauntlet__Save_Point
            }
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Top_Ledge => {
                SpotId::Irikar_Breach__Gauntlet__Save_Point
            }
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Entry => {
                SpotId::Irikar_Breach__Gauntlet__Save_Point
            }
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Left => {
                SpotId::Irikar_Breach__Gauntlet__Save_Point
            }
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Right => {
                SpotId::Irikar_Breach__Gauntlet__Save_Point
            }
            SpotId::Irikar_Breach__Gauntlet__Save_Point => {
                SpotId::Irikar_Breach__Gauntlet__Save_Point
            }
            SpotId::Irikar_Breach__Save_Room__Save_Point => {
                SpotId::Irikar_Breach__Save_Room__Save_Point
            }
            SpotId::Irikar_Breach__Save_Room__Upper_Area => {
                SpotId::Irikar_Breach__Save_Room__Save_Point
            }
            SpotId::Irikar_Breach__Save_Room__West => SpotId::Irikar_Breach__Save_Room__Save_Point,
            SpotId::Irikar__Hub__Bowl_Hole => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Bowl_Middle_Ledge => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Bowl_Middle_Platform_Center => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Bowl_Middle_Platform_West => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Bowl_Platform_3 => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Bowl_Top_Platform => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Collapsed_Column => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Collapsed_Column_Debris => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Dagger_Altar => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__East_Rim => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Exposed_Passage_Center => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Exposed_Passage_Upper_Ledge => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Exposed_Passage_West => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Lower_Hallway_West => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Lower_Well => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__NW_Bowl_Edifice => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__NW_Middle_Building_Broken_Outcrop => {
                SpotId::Irikar__Hub__Save_Point
            }
            SpotId::Irikar__Hub__NW_Middle_Building_Corner => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__NW_Middle_Building_East_Entry => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__NW_Middle_Building_Left_Ledge => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__NW_Middle_Building_Lower_Ledge => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__NW_Middle_Building_West_Entry => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__NW_Middle_Building_West_Hook_Point => {
                SpotId::Irikar__Hub__Save_Point
            }
            SpotId::Irikar__Hub__NW_Roof => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__NW_Staircase_Upper => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__North_Above_Portal => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Northeast_Above_Bowl => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Northwest => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Northwest_Above_Bowl => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Portal_Stand => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Royal_Storage_By_Wall => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Royal_Storage_South => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Royal_Storage_in_Wall => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Ruined_Hallway_Atop_Well => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Ruined_Hallway_By_Well => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Ruined_Hallway_Gap_Left => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Ruined_Hallway_Gap_Right => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__SW_Building_Broken_Wall => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__SW_Building_Hallway_West => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__SW_Building_Lower_Platform => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__SW_Building_NE_Roof => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__SW_Building_Platform_2 => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__SW_Building_Top_Platform => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Sat_Tower_Bottom => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Sat_Tower_East_24 => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Sat_Tower_Floating_Platform => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Sat_Tower_Long_Ledge => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Sat_Tower_Lower_Exterior => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Sat_Tower_Lower_Left_Ledge => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Sat_Tower_Lower_Right_Ledge => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Sat_Tower_Middle_Ledge => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Sat_Tower_Northeast => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Sat_Tower_Roof_East => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Sat_Tower_Roof_West => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Sat_Tower_Top_Ledge => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Sat_Tower_West_Valley => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__Save_Point => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__West_23 => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__West_24_Ground => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__West_24_Rooftop => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__West_25 => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__West_26 => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__West_Rim => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__West_Rooftop_1 => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__West_Rooftop_2 => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__West_Rooftop_3 => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__West_Rooftops_Upper_East => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__West_Rooftops_Upper_Middle => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__West_Rooftops_Upper_Staircase => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Hub__West_Small_Middle_Rooftop => SpotId::Irikar__Hub__Save_Point,
            SpotId::Irikar__Midwest__Center_Rock_1_East => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Center_Rock_1_West => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Center_Rock_2_East => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Center_Rock_2_West => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Center_Rock_3_East => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Center_Rock_3_West => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Center_Small_Rock => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__East_23 => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__East_24_on_Building => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__East_24_on_Floor => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__East_25 => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__East_26 => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__East_27 => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__East_28 => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__East_Rock_1 => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__East_Rock_2 => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__East_Rock_3 => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Ground_Center => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Left_Platform_Dest => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Left_Platform_Start => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Lower_Center_Platform => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Lower_East_Platform => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Lower_Rock_East => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Lower_Rock_West => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__NE_Ledge => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Right_Platform_Dest => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Right_Platform_Start => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__SE_Rock_West => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__SW_Platform => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Save_Ledge => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Save_Point => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Small_Rooftop => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__Tablet_Platform => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__The_Long_Rock_East => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__The_Long_Rock_Middle => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__The_Long_Rock_West => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__West_28_Ground => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__West_28_Platform => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Irikar__Midwest__West_Platform => SpotId::Irikar__Midwest__Save_Point,
            SpotId::Uhrum__Annuna_Corridor__Between_Two_Flowers => {
                SpotId::Uhrum__Annuna_Corridor__Save_Point
            }
            SpotId::Uhrum__Annuna_Corridor__Block_East => {
                SpotId::Uhrum__Annuna_Corridor__Save_Point
            }
            SpotId::Uhrum__Annuna_Corridor__Block_West => {
                SpotId::Uhrum__Annuna_Corridor__Save_Point
            }
            SpotId::Uhrum__Annuna_Corridor__East_25 => SpotId::Uhrum__Annuna_Corridor__Save_Point,
            SpotId::Uhrum__Annuna_Corridor__East_Cubby => {
                SpotId::Uhrum__Annuna_Corridor__Save_Point
            }
            SpotId::Uhrum__Annuna_Corridor__Lower_Platform => {
                SpotId::Uhrum__Annuna_Corridor__Save_Point
            }
            SpotId::Uhrum__Annuna_Corridor__Middle_Platform => {
                SpotId::Uhrum__Annuna_Corridor__Save_Point
            }
            SpotId::Uhrum__Annuna_Corridor__Open_Pillar => {
                SpotId::Uhrum__Annuna_Corridor__Save_Point
            }
            SpotId::Uhrum__Annuna_Corridor__Pedestal => SpotId::Uhrum__Annuna_Corridor__Save_Point,
            SpotId::Uhrum__Annuna_Corridor__Save_Point => {
                SpotId::Uhrum__Annuna_Corridor__Save_Point
            }
            SpotId::Uhrum__Annuna_Corridor__Statue => SpotId::Uhrum__Annuna_Corridor__Save_Point,
            SpotId::Uhrum__Annuna_Corridor__Upper_Ledge => {
                SpotId::Uhrum__Annuna_Corridor__Save_Point
            }
            SpotId::Uhrum__Annuna_Corridor__Upper_Platform => {
                SpotId::Uhrum__Annuna_Corridor__Save_Point
            }
            SpotId::Uhrum__Annuna_Corridor__Upper_Trees => {
                SpotId::Uhrum__Annuna_Corridor__Save_Point
            }
            SpotId::Uhrum__Annuna_Corridor__Wall_Remnant => {
                SpotId::Uhrum__Annuna_Corridor__Save_Point
            }
            SpotId::Uhrum__Annuna_Corridor__West_25 => SpotId::Uhrum__Annuna_Corridor__Save_Point,
            SpotId::Uhrum__Annuna_Corridor__West_26 => SpotId::Uhrum__Annuna_Corridor__Save_Point,
            SpotId::Uhrum__Save_Room__East => SpotId::Uhrum__Save_Room__Save_Point,
            SpotId::Uhrum__Save_Room__Save_Point => SpotId::Uhrum__Save_Room__Save_Point,
            SpotId::Uhrum__Save_Room__West => SpotId::Uhrum__Save_Room__Save_Point,
            SpotId::Uhrum__West_Entrance__Clear_Passage => SpotId::Uhrum__West_Entrance__Save_Point,
            SpotId::Uhrum__West_Entrance__East_26 => SpotId::Uhrum__West_Entrance__Save_Point,
            SpotId::Uhrum__West_Entrance__East_28 => SpotId::Uhrum__West_Entrance__Save_Point,
            SpotId::Uhrum__West_Entrance__Gate_Switch => SpotId::Uhrum__West_Entrance__Save_Point,
            SpotId::Uhrum__West_Entrance__Hidden_Passage_Entry => {
                SpotId::Uhrum__West_Entrance__Save_Point
            }
            SpotId::Uhrum__West_Entrance__Hidden_Passage_West => {
                SpotId::Uhrum__West_Entrance__Save_Point
            }
            SpotId::Uhrum__West_Entrance__Inner_Dais => SpotId::Uhrum__West_Entrance__Save_Point,
            SpotId::Uhrum__West_Entrance__Lower_Path_Gap => {
                SpotId::Uhrum__West_Entrance__Save_Point
            }
            SpotId::Uhrum__West_Entrance__Lower_Path_Rock => {
                SpotId::Uhrum__West_Entrance__Save_Point
            }
            SpotId::Uhrum__West_Entrance__Lower_Path_Tree_Ledge => {
                SpotId::Uhrum__West_Entrance__Save_Point
            }
            SpotId::Uhrum__West_Entrance__Lower_Wall_East => {
                SpotId::Uhrum__West_Entrance__Save_Point
            }
            SpotId::Uhrum__West_Entrance__Lower_Wall_West => {
                SpotId::Uhrum__West_Entrance__Save_Point
            }
            SpotId::Uhrum__West_Entrance__Middle_West_Ledge => {
                SpotId::Uhrum__West_Entrance__Save_Point
            }
            SpotId::Uhrum__West_Entrance__Portal_Exit => SpotId::Uhrum__West_Entrance__Save_Point,
            SpotId::Uhrum__West_Entrance__Portal_Stand => SpotId::Uhrum__West_Entrance__Save_Point,
            SpotId::Uhrum__West_Entrance__Sand => SpotId::Uhrum__West_Entrance__Save_Point,
            SpotId::Uhrum__West_Entrance__Save_Point => SpotId::Uhrum__West_Entrance__Save_Point,
            SpotId::Uhrum__West_Entrance__South_Platform => {
                SpotId::Uhrum__West_Entrance__Save_Point
            }
            SpotId::Uhrum__West_Entrance__Southeast_Tree => {
                SpotId::Uhrum__West_Entrance__Save_Point
            }
            SpotId::Uhrum__West_Entrance__Top_West_Ledge => {
                SpotId::Uhrum__West_Entrance__Save_Point
            }
            SpotId::Uhrum__West_Entrance__Upper_Fork => SpotId::Uhrum__West_Entrance__Save_Point,
            SpotId::Uhrum__West_Entrance__Upper_Wall_East => {
                SpotId::Uhrum__West_Entrance__Save_Point
            }
            SpotId::Uhrum__West_Entrance__Upper_Wall_West => {
                SpotId::Uhrum__West_Entrance__Save_Point
            }
            SpotId::Uhrum__West_Entrance__West_25 => SpotId::Uhrum__West_Entrance__Save_Point,
            SpotId::Uhrum__West_Entrance__West_26 => SpotId::Uhrum__West_Entrance__Save_Point,
            SpotId::Uhrum__West_Entrance__West_27 => SpotId::Uhrum__West_Entrance__Save_Point,
            SpotId::Uhrum__West_Entrance__West_of_Gate => SpotId::Uhrum__West_Entrance__Save_Point,
            _ => SpotId::None,
        }
    }
    pub fn map_spot(spot_id: SpotId) -> SpotId {
        match spot_id {
            SpotId::Amagi_Breach__East_Entrance__East => SpotId::Menu__Breach_Map__LAB_East_Health,
            SpotId::Amagi_Breach__East_Entrance__Grate_Left => {
                SpotId::Menu__Breach_Map__LAB_East_Health
            }
            SpotId::Amagi_Breach__East_Entrance__Grate_Right => {
                SpotId::Menu__Breach_Map__LAB_East_Health
            }
            SpotId::Amagi_Breach__East_Entrance__Save_Point => SpotId::Menu__Breach_Map__LAB_East,
            SpotId::Amagi_Breach__East_Entrance__Upper_Slope => {
                SpotId::Menu__Breach_Map__LAB_East_Health
            }
            SpotId::Amagi_Breach__East_Entrance__West => SpotId::Menu__Breach_Map__LAB_East,
            SpotId::Amagi__East_Lake__Foot => SpotId::Menu__Kiengir_Map__Forbidden_Knowledge,
            SpotId::Amagi__East_Lake__Kum_Abala => SpotId::Menu__Kiengir_Map__Forbidden_Knowledge,
            SpotId::Amagi__East_Lake__Save_Point => SpotId::Menu__Kiengir_Map__Amagi_East_Lake,
            SpotId::Amagi__East_Lake__Southeast_Column => {
                SpotId::Menu__Kiengir_Map__Amagi_East_Lake
            }
            SpotId::Amagi__East_Lake__Southwest_Column_East => {
                SpotId::Menu__Kiengir_Map__Amagi_East_Lake
            }
            SpotId::Amagi__Liru_Room__Bottom => SpotId::Menu__Kiengir_Map__Water_Movement,
            SpotId::Amagi__Liru_Room__Shrine => SpotId::Menu__Kiengir_Map__Water_Movement,
            SpotId::Amagi__Main_Area__Carving => {
                SpotId::Menu__Kiengir_Map__Amagi_Main_Area_Cave_Entrance
            }
            SpotId::Amagi__Main_Area__Enemy_Side => SpotId::Menu__Kiengir_Map__Amagi_Main_Area,
            SpotId::Amagi__Main_Area__Save_Point => SpotId::Menu__Kiengir_Map__Amagi_Main_Area,
            SpotId::Amagi__Main_Area__Secret_Outcropping => {
                SpotId::Menu__Kiengir_Map__Amagi_Main_Area_Cave_Entrance
            }
            SpotId::Amagi__Main_Area__Way_Off_To_The_Side => {
                SpotId::Menu__Kiengir_Map__Amagi_Main_Area_Cave_Flask
            }
            SpotId::Amagi__Main_Area__West_15 => {
                SpotId::Menu__Kiengir_Map__Amagi_Main_Area_Cave_Entrance
            }
            SpotId::Amagi__West_Lake__Cavern_Eye => {
                SpotId::Menu__Kiengir_Map__Amagi_Dragon_Eye_Flask
            }
            SpotId::Amagi__West_Lake__Cavern_Front_Pillar => {
                SpotId::Menu__Kiengir_Map__Amagi_West_Lake_Refill_Station
            }
            SpotId::Amagi__West_Lake__Cavern_Middle_Pillar => {
                SpotId::Menu__Kiengir_Map__Amagi_West_Lake_Refill_Station
            }
            SpotId::Amagi__West_Lake__Cavern_Rear_Pillar => {
                SpotId::Menu__Kiengir_Map__MUS_A_M20_Flask
            }
            SpotId::Amagi__West_Lake__Cavern_Refill_Station => {
                SpotId::Menu__Kiengir_Map__Amagi_West_Lake_Refill_Station
            }
            SpotId::Amagi__West_Lake__Cavern_Tear_Duct => {
                SpotId::Menu__Kiengir_Map__Amagi_Dragon_Eye_Flask
            }
            SpotId::Amagi__West_Lake__Stronghold_Ceiling_Left => {
                SpotId::Menu__Kiengir_Map__Shockwave
            }
            SpotId::Amagi__West_Lake__Stronghold_Item => SpotId::Menu__Kiengir_Map__Shockwave,
            SpotId::Amagi__West_Lake__Stronghold_Middle_Column => {
                SpotId::Menu__Kiengir_Map__Shockwave
            }
            SpotId::Amagi__West_Lake__Stronghold_Rear_Wall => SpotId::Menu__Kiengir_Map__Shockwave,
            SpotId::Amagi__West_Lake__Stronghold_Top => SpotId::Menu__Kiengir_Map__Shockwave,
            SpotId::Annuna__Center_Save__East => SpotId::Menu__Kiengir_Map__Annuna_Center_Save,
            SpotId::Annuna__Center_Save__Save_Point => {
                SpotId::Menu__Kiengir_Map__Annuna_Center_Save
            }
            SpotId::Annuna__Center_Save__West_Catwalk => {
                SpotId::Menu__Kiengir_Map__Annuna_Center_Save
            }
            SpotId::Annuna__Center_Save__West_Floor => {
                SpotId::Menu__Kiengir_Map__Annuna_Center_Save
            }
            SpotId::Annuna__East_Bridge__Below_Cavern => {
                SpotId::Menu__Kiengir_Map__Annuna_East_Bridge_Flask
            }
            SpotId::Annuna__East_Bridge__Cavern_Cache => {
                SpotId::Menu__Kiengir_Map__Annuna_East_Bridge_Flask
            }
            SpotId::Annuna__East_Bridge__Cavern_Foyer => {
                SpotId::Menu__Kiengir_Map__Annuna_East_Bridge_Flask
            }
            SpotId::Annuna__East_Bridge__Cavern_Right => {
                SpotId::Menu__Kiengir_Map__Annuna_East_Bridge_Flask
            }
            SpotId::Annuna__East_Bridge__Flung_West => {
                SpotId::Menu__Kiengir_Map__Annuna_East_Bridge_Flask
            }
            SpotId::Annuna__East_Bridge__Gate_Button_Gap => {
                SpotId::Menu__Kiengir_Map__Lament_for_Fools
            }
            SpotId::Annuna__East_Bridge__Tower_Base_East => {
                SpotId::Menu__Kiengir_Map__Lament_for_Fools
            }
            SpotId::Annuna__East_Bridge__Tower_Base_West => {
                SpotId::Menu__Kiengir_Map__Lament_for_Fools
            }
            SpotId::Annuna__East_Bridge__Tower_Core => SpotId::Menu__Kiengir_Map__Lament_for_Fools,
            SpotId::Annuna__East_Bridge__Tower_East_Ledge => SpotId::Menu__Kiengir_Map__Royal_Ring,
            SpotId::Annuna__East_Bridge__Tower_Gate => SpotId::Menu__Kiengir_Map__Lament_for_Fools,
            SpotId::Annuna__East_Bridge__Tower_Opening => {
                SpotId::Menu__Kiengir_Map__Lament_for_Fools
            }
            SpotId::Annuna__East_Bridge__Tower_Secret => SpotId::Menu__Kiengir_Map__Royal_Ring,
            SpotId::Annuna__East_Bridge__Tower_West_Ledge => SpotId::Menu__Kiengir_Map__Royal_Ring,
            SpotId::Annuna__East_Bridge__Upper_West_Partway_East => {
                SpotId::Menu__Kiengir_Map__Lament_for_Fools
            }
            SpotId::Annuna__East_Bridge__West_22 => {
                SpotId::Menu__Kiengir_Map__Annuna_East_Bridge_Flask
            }
            SpotId::Annuna__Egg_Room__Cache => SpotId::Menu__Kiengir_Map__Annuna_Egg_Room_Flask,
            SpotId::Annuna__Egg_Room__Corner_Platform => {
                SpotId::Menu__Kiengir_Map__Annuna_Egg_Room_Flask
            }
            SpotId::Annuna__Egg_Room__East => SpotId::Menu__Kiengir_Map__Annuna_Egg_Room_Flask,
            SpotId::Annuna__Egg_Room__Passage_Entrance => {
                SpotId::Menu__Kiengir_Map__Annuna_Egg_Room_Flask
            }
            SpotId::Annuna__Egg_Room__Second_Egg => SpotId::Menu__Kiengir_Map__Annuna_Egg_Room_SE,
            SpotId::Annuna__Egg_Room__Third_Egg => SpotId::Menu__Kiengir_Map__Annuna_Egg_Room_Flask,
            SpotId::Annuna__Factory_Entrance__East => {
                SpotId::Menu__Kiengir_Map__Annuna_Factory_Entrance
            }
            SpotId::Annuna__Factory_Entrance__Save_Point => {
                SpotId::Menu__Kiengir_Map__Annuna_Factory_Entrance
            }
            SpotId::Annuna__Factory_Entrance__West => {
                SpotId::Menu__Kiengir_Map__Annuna_Factory_Entrance
            }
            SpotId::Annuna__Filter_Teleporter__Door_Ledge => {
                SpotId::Menu__Kiengir_Map__Filter_Flask
            }
            SpotId::Annuna__Filter_Teleporter__Egg => SpotId::Menu__Kiengir_Map__Filter_Flask,
            SpotId::Annuna__Filter_Teleporter__Northeast_Cubby => {
                SpotId::Menu__Kiengir_Map__The_Eternal_Arm
            }
            SpotId::Annuna__Filter_Teleporter__Northeast_Ministair => {
                SpotId::Menu__Kiengir_Map__The_Eternal_Arm
            }
            SpotId::Annuna__Filter_Teleporter__Shaft_Bottom => {
                SpotId::Menu__Kiengir_Map__Filter_Flask
            }
            SpotId::Annuna__Filter_Teleporter__Shaft_Top => {
                SpotId::Menu__Kiengir_Map__Filter_Spiders
            }
            SpotId::Annuna__Filter_Teleporter__Stair_Top => SpotId::Menu__Kiengir_Map__Filter_Flask,
            SpotId::Annuna__Filter_Teleporter__West_19 => SpotId::Menu__Kiengir_Map__Filter_Spiders,
            SpotId::Annuna__Filter_Teleporter__West_19_Mid_flight => {
                SpotId::Menu__Kiengir_Map__Filter_Spiders
            }
            SpotId::Annuna__Filter_Teleporter__West_21 => SpotId::Menu__Kiengir_Map__Filter_Flask,
            SpotId::Annuna__Final_Save__East => SpotId::Menu__Kiengir_Map__Apocalypse,
            SpotId::Annuna__Final_Save__Lower_West => SpotId::Menu__Kiengir_Map__Apocalypse,
            SpotId::Annuna__Final_Save__Pillar => SpotId::Menu__Kiengir_Map__Apocalypse,
            SpotId::Annuna__Final_Save__Save_Point => SpotId::Menu__Kiengir_Map__Apocalypse,
            SpotId::Annuna__Final_Save__Upper_West => SpotId::Menu__Kiengir_Map__Apocalypse,
            SpotId::Annuna__Mirror_Match__East_26_Lower => {
                SpotId::Menu__Kiengir_Map__Annuna_Mirror_Match_Flask
            }
            SpotId::Annuna__Mirror_Match__East_26_Upper => {
                SpotId::Menu__Kiengir_Map__Annuna_Mirror_Match_Flask
            }
            SpotId::Annuna__Mirror_Match__Eastward => {
                SpotId::Menu__Kiengir_Map__Annuna_Mirror_Match
            }
            SpotId::Annuna__Mirror_Match__Plinth => {
                SpotId::Menu__Kiengir_Map__Annuna_Mirror_Match_Flask
            }
            SpotId::Annuna__Mirror_Match__Save_Point => {
                SpotId::Menu__Kiengir_Map__Annuna_Mirror_Match
            }
            SpotId::Annuna__Mirror_Match__Staircase => {
                SpotId::Menu__Kiengir_Map__Annuna_Mirror_Match_Flask
            }
            SpotId::Annuna__Mirror_Match__Waving_Distance => {
                SpotId::Menu__Kiengir_Map__Annuna_Mirror_Match_Flask
            }
            SpotId::Annuna__Mirror_Match__West_Gap => {
                SpotId::Menu__Kiengir_Map__Annuna_Mirror_Match
            }
            SpotId::Annuna__Siuna_Storage__Cache => SpotId::Menu__Kiengir_Map__Nanite_Mist,
            SpotId::Annuna__Siuna_Storage__Wall_Left => SpotId::Menu__Kiengir_Map__Nanite_Mist,
            SpotId::Annuna__Siuna_Storage__Wall_Right => SpotId::Menu__Kiengir_Map__Nanite_Mist,
            SpotId::Annuna__Siuna_Storage__Within_Range => SpotId::Menu__Kiengir_Map__Nanite_Mist,
            SpotId::Annuna__Sniper_Valley__Bridge_End => {
                SpotId::Menu__Kiengir_Map__Annuna_Sniper_Valley_Core
            }
            SpotId::Annuna__Sniper_Valley__Cavern_Cache => {
                SpotId::Menu__Kiengir_Map__Annuna_Sniper_Valley_Flask
            }
            SpotId::Annuna__Sniper_Valley__Cavern_Tight_Corner => {
                SpotId::Menu__Kiengir_Map__Annuna_Sniper_Valley_Flask
            }
            SpotId::Annuna__Sniper_Valley__East => SpotId::Menu__Kiengir_Map__Family_Tragedy,
            SpotId::Annuna__Sniper_Valley__Table => {
                SpotId::Menu__Kiengir_Map__Annuna_Sniper_Valley_Core
            }
            SpotId::Annuna__Spider_Room__Center => {
                SpotId::Menu__Kiengir_Map__Annuna_Spider_Room_Core
            }
            SpotId::Annuna__Spider_Room__Healthy_Corner => {
                SpotId::Menu__Kiengir_Map__Annuna_Spider_Room_Core
            }
            SpotId::Annuna__Spider_Room__Northeast_Ledge => {
                SpotId::Menu__Kiengir_Map__Annuna_Spider_Room_Core
            }
            SpotId::Annuna__Spider_Room__Upper_Seam => {
                SpotId::Menu__Kiengir_Map__Annuna_Spider_Room_Core
            }
            SpotId::Annuna__Twisty_Passages__Northeast_C => {
                SpotId::Menu__Kiengir_Map__Destruction_Pogrom
            }
            SpotId::Annuna__Twisty_Passages__Northeast_D => {
                SpotId::Menu__Kiengir_Map__Destruction_Pogrom
            }
            SpotId::Annuna__Twisty_Passages__Northwest_Alcove => {
                SpotId::Menu__Kiengir_Map__Annuna_Twisty_Passages_Core
            }
            SpotId::Annuna__Twisty_Passages__Top => {
                SpotId::Menu__Kiengir_Map__Annuna_Twisty_Passages_Core
            }
            SpotId::Annuna__Twisty_Passages__West => {
                SpotId::Menu__Kiengir_Map__Annuna_Twisty_Passages_Core
            }
            SpotId::Annuna__Twisty_Passages__West_Dip => {
                SpotId::Menu__Kiengir_Map__Annuna_Twisty_Passages_Core
            }
            SpotId::Annuna__Twisty_Passages__West_Hill_Left => {
                SpotId::Menu__Kiengir_Map__Destruction_Pogrom
            }
            SpotId::Annuna__Twisty_Passages__West_Hill_Right => {
                SpotId::Menu__Kiengir_Map__Annuna_Twisty_Passages_Core
            }
            SpotId::Annuna__Twisty_Passages__West_Ledge => {
                SpotId::Menu__Kiengir_Map__Annuna_Twisty_Passages_Core
            }
            SpotId::Annuna__Upper_Hallway__Behind_Pedestal => {
                SpotId::Menu__Kiengir_Map__Annuna_Upper_Hallway_Portal
            }
            SpotId::Annuna__Upper_Hallway__Portal_Stand => {
                SpotId::Menu__Kiengir_Map__Annuna_Upper_Hallway_Portal
            }
            SpotId::Annuna__Upper_Save__East => SpotId::Menu__Kiengir_Map__Annuna_Upper,
            SpotId::Annuna__Upper_Save__Save_Point => SpotId::Menu__Kiengir_Map__Annuna_Upper,
            SpotId::Annuna__Upper_Save__West => SpotId::Menu__Kiengir_Map__Annuna_Upper,
            SpotId::Annuna__Vertical_Room__Above_Plinth => SpotId::Menu__Kiengir_Map__Ul_Gishru,
            SpotId::Annuna__Vertical_Room__East_20 => {
                SpotId::Menu__Kiengir_Map__Annuna_Vertical_Room
            }
            SpotId::Annuna__Vertical_Room__East_21 => SpotId::Menu__Kiengir_Map__Ul_Gishru,
            SpotId::Annuna__Vertical_Room__Gate_Button => SpotId::Menu__Kiengir_Map__Ul_Gishru,
            SpotId::Annuna__Vertical_Room__Gate_Ledge => SpotId::Menu__Kiengir_Map__Ul_Gishru,
            SpotId::Annuna__Vertical_Room__Lower_Ministair => SpotId::Menu__Kiengir_Map__Ul_Gishru,
            SpotId::Annuna__Vertical_Room__Middle_Ministair => {
                SpotId::Menu__Kiengir_Map__Annuna_Vertical_Room
            }
            SpotId::Annuna__Vertical_Room__Middle_Overhang => SpotId::Menu__Kiengir_Map__Ul_Gishru,
            SpotId::Annuna__Vertical_Room__Middle_West_Shaft => {
                SpotId::Menu__Kiengir_Map__Ul_Gishru
            }
            SpotId::Annuna__Vertical_Room__Plinth => SpotId::Menu__Kiengir_Map__Ul_Gishru,
            SpotId::Annuna__Vertical_Room__Save_Point => {
                SpotId::Menu__Kiengir_Map__Annuna_Vertical_Room
            }
            SpotId::Annuna__Vertical_Room__Save_Point_Left => {
                SpotId::Menu__Kiengir_Map__Annuna_Vertical_Room
            }
            SpotId::Annuna__Vertical_Room__Save_Point_Right => {
                SpotId::Menu__Kiengir_Map__Annuna_Vertical_Room
            }
            SpotId::Annuna__Vertical_Room__Upper_Cache => {
                SpotId::Menu__Kiengir_Map__Beware_the_Patternmind
            }
            SpotId::Annuna__Vertical_Room__West_17 => {
                SpotId::Menu__Kiengir_Map__Beware_the_Patternmind
            }
            SpotId::Annuna__Vertical_Room__West_20 => {
                SpotId::Menu__Kiengir_Map__Annuna_Vertical_Room
            }
            SpotId::Annuna__Vertical_Room__West_21 => SpotId::Menu__Kiengir_Map__Ul_Gishru,
            SpotId::Annuna__West_Bridge__Plinth => SpotId::Menu__Kiengir_Map__Nano_Lattice_2,
            SpotId::Annuna__West_Bridge__Save_Point => {
                SpotId::Menu__Kiengir_Map__Annuna_West_Bridge
            }
            SpotId::Annuna__West_Climb__Cache => SpotId::Menu__Kiengir_Map__Eye_Ring,
            SpotId::Annuna__West_Climb__East_20 => SpotId::Menu__Kiengir_Map__Eye_Ring,
            SpotId::Annuna__West_Climb__Platform_2 => SpotId::Menu__Kiengir_Map__Eye_Ring,
            SpotId::Annuna__West_Climb__Switch_Ledge => SpotId::Menu__Kiengir_Map__Eye_Ring,
            SpotId::Ebih__Base_Camp__Behind_Vehicle => {
                SpotId::Menu__Kiengir_Map__Ebih_Base_Camp_West
            }
            SpotId::Ebih__Base_Camp__Building_Entry => {
                SpotId::Menu__Kiengir_Map__Ebih_Base_Camp_West
            }
            SpotId::Ebih__Base_Camp__Bunker_Entry => SpotId::Menu__Kiengir_Map__Ebih_Base_Camp_East,
            SpotId::Ebih__Base_Camp__Lake_Access => SpotId::Menu__Kiengir_Map__Ebih_Base_Camp_East,
            SpotId::Ebih__Base_Camp__Left_Platform_Moved => {
                SpotId::Menu__Kiengir_Map__Ebih_Base_Camp_Health
            }
            SpotId::Ebih__Base_Camp__Save_Point => SpotId::Menu__Kiengir_Map__Ebih_Base_Camp,
            SpotId::Ebih__Base_Camp__Tent_Entry => SpotId::Menu__Kiengir_Map__Ebih_Base_Camp_West,
            SpotId::Ebih__Base_Camp__Top_Platform => {
                SpotId::Menu__Kiengir_Map__Ebih_Base_Camp_Health
            }
            SpotId::Ebih__Base_Camp__West_13 => SpotId::Menu__Kiengir_Map__Ebih_Base_Camp_West,
            SpotId::Ebih__Boss_Room__Boss => SpotId::Menu__Kiengir_Map__Ebih_Alu_Flask,
            SpotId::Ebih__Boss_Room__East_6 => SpotId::Menu__Kiengir_Map__Ebih_Alu_Health,
            SpotId::Ebih__Boss_Room__East_Ledge => SpotId::Menu__Kiengir_Map__Ebih_Alu_Health,
            SpotId::Ebih__Boss_Room__High_Platform => SpotId::Menu__Kiengir_Map__Ebih_Alu_Health,
            SpotId::Ebih__Boss_Room__Lower_Ledge => SpotId::Menu__Kiengir_Map__Ebih_Alu_Health,
            SpotId::Ebih__Boss_Room__Upper_Tree => SpotId::Menu__Kiengir_Map__Ebih_Alu_Health,
            SpotId::Ebih__Boss_Room__West_5 => SpotId::Menu__Kiengir_Map__Ebih_Alu_Flask,
            SpotId::Ebih__By_Garage__Crawlspace => SpotId::Menu__Kiengir_Map__Ebih_By_Garage_Health,
            SpotId::Ebih__By_Garage__Crawlspace_Opening => {
                SpotId::Menu__Kiengir_Map__Ebih_By_Garage_Health
            }
            SpotId::Ebih__By_Garage__East_12 => SpotId::Menu__Kiengir_Map__Ebih_By_Garage_Health,
            SpotId::Ebih__By_Garage__East_13 => SpotId::Menu__Kiengir_Map__Ebih_Garage,
            SpotId::Ebih__By_Garage__East_Below_Platforms => SpotId::Menu__Kiengir_Map__Ebih_Garage,
            SpotId::Ebih__By_Garage__East_Platform => SpotId::Menu__Kiengir_Map__Ebih_Garage,
            SpotId::Ebih__By_Garage__Garage_Entry => SpotId::Menu__Kiengir_Map__Ebih_Garage,
            SpotId::Ebih__By_Garage__Outcropping => {
                SpotId::Menu__Kiengir_Map__Ebih_By_Garage_Health
            }
            SpotId::Ebih__Drone_Room__Item => SpotId::Menu__Kiengir_Map__Remote_Drone,
            SpotId::Ebih__Drone_Room__Middle_Platform => SpotId::Menu__Kiengir_Map__Remote_Drone,
            SpotId::Ebih__Drone_Room__Pit_Left => SpotId::Menu__Kiengir_Map__Remote_Drone,
            SpotId::Ebih__Drone_Room__Portal => SpotId::Menu__Kiengir_Map__Remote_Drone,
            SpotId::Ebih__Drone_Room__West_6 => SpotId::Menu__Kiengir_Map__Remote_Drone,
            SpotId::Ebih__Ebih_East__Corner => SpotId::Menu__Kiengir_Map__Infect,
            SpotId::Ebih__Ebih_East__Dispenser => SpotId::Menu__Kiengir_Map__Ebih_East_Health,
            SpotId::Ebih__Ebih_East__East_9 => SpotId::Menu__Kiengir_Map__Infect,
            SpotId::Ebih__Ebih_East__East_Hill => SpotId::Menu__Kiengir_Map__Under_Siege,
            SpotId::Ebih__Ebih_East__East_Ledge => SpotId::Menu__Kiengir_Map__Under_Siege,
            SpotId::Ebih__Ebih_East__Ledge_End => SpotId::Menu__Kiengir_Map__Ebih_East_Health,
            SpotId::Ebih__Ebih_East__Lower_Moving_Platform => SpotId::Menu__Kiengir_Map__Infect,
            SpotId::Ebih__Ebih_West__Above_Alcove => SpotId::Menu__Kiengir_Map__Heretics_Tablet,
            SpotId::Ebih__Ebih_West__Above_Chute => SpotId::Menu__Kiengir_Map__Ebih_West_Upper,
            SpotId::Ebih__Ebih_West__Alcove => SpotId::Menu__Kiengir_Map__Heretics_Tablet,
            SpotId::Ebih__Ebih_West__Alcove_Entrance => SpotId::Menu__Kiengir_Map__Heretics_Tablet,
            SpotId::Ebih__Ebih_West__East_10 => SpotId::Menu__Kiengir_Map__Ebih_West_Mid,
            SpotId::Ebih__Ebih_West__East_7 => SpotId::Menu__Kiengir_Map__Ebih_West_Upper,
            SpotId::Ebih__Ebih_West__Lower_Platform => SpotId::Menu__Kiengir_Map__Ebih_West_Lower,
            SpotId::Ebih__Ebih_West__Lower_Save => SpotId::Menu__Kiengir_Map__Ebih_West_Lower,
            SpotId::Ebih__Ebih_West__Medium_High_Platform => {
                SpotId::Menu__Kiengir_Map__Ebih_West_Upper
            }
            SpotId::Ebih__Ebih_West__Mid_Save => SpotId::Menu__Kiengir_Map__Ebih_West_Mid,
            SpotId::Ebih__Ebih_West__Upper_Save => SpotId::Menu__Kiengir_Map__Ebih_West_Upper,
            SpotId::Ebih__Ebih_West__West_13 => SpotId::Menu__Kiengir_Map__Ebih_West_Lower,
            SpotId::Ebih__Grid_25_10_12__East_10 => {
                SpotId::Menu__Kiengir_Map__Ebih_East_Waterfall_Flask
            }
            SpotId::Ebih__Grid_25_10_12__Hidden_Bush => {
                SpotId::Menu__Kiengir_Map__Ebih_East_Waterfall_Flask
            }
            SpotId::Ebih__Grid_25_10_12__West_10 => {
                SpotId::Menu__Kiengir_Map__Ebih_East_Waterfall_Flask
            }
            SpotId::Ebih__Grid_25_2_6__Pit => SpotId::Menu__Kiengir_Map__Ebih_Drone_Pit_Flask,
            SpotId::Ebih__Grid_26_10_11__Ledge => {
                SpotId::Menu__Kiengir_Map__Terminal_Breakthrough_1
            }
            SpotId::Ebih__Grid_26_10_11__Middle_Bottom => {
                SpotId::Menu__Kiengir_Map__Terminal_Breakthrough_1
            }
            SpotId::Ebih__Grid_26_10_11__Middle_Platform => {
                SpotId::Menu__Kiengir_Map__Terminal_Breakthrough_1
            }
            SpotId::Ebih__Grid_26_10_11__Under_Ledge => {
                SpotId::Menu__Kiengir_Map__Terminal_Breakthrough_1
            }
            SpotId::Ebih__Grid_26_10_11__Upper_Platform => {
                SpotId::Menu__Kiengir_Map__Terminal_Breakthrough_1
            }
            SpotId::Ebih__Grid_26_10_11__West_11 => {
                SpotId::Menu__Kiengir_Map__Terminal_Breakthrough_1
            }
            SpotId::Ebih__Guarded_Health__Far_West => {
                SpotId::Menu__Kiengir_Map__Ebih_Guarded_Health
            }
            SpotId::Ebih__Guarded_Health__West_Basin => {
                SpotId::Menu__Kiengir_Map__Ebih_Guarded_Health
            }
            SpotId::Ebih__Truck_Gate__Door => SpotId::Menu__Kiengir_Map__Ebih_Truck_Gate,
            SpotId::Ebih__Truck_Gate__East => SpotId::Menu__Kiengir_Map__Ebih_Truck_Gate,
            SpotId::Ebih__Truck_Gate__Portal_Stand => SpotId::Menu__Kiengir_Map__Ebih_Truck_Gate,
            SpotId::Ebih__Truck_Gate__Switch => SpotId::Menu__Kiengir_Map__Ebih_Truck_Gate,
            SpotId::Ebih__Waterfall__Alcove => SpotId::Menu__Kiengir_Map__Bronze_Axe,
            SpotId::Ebih__Waterfall__Alcove_Left => SpotId::Menu__Kiengir_Map__Bronze_Axe,
            SpotId::Ebih__Waterfall__Cave_Entrance => {
                SpotId::Menu__Kiengir_Map__Ebih_Waterfall_Cave
            }
            SpotId::Ebih__Waterfall__Under_Waterfall => SpotId::Menu__Kiengir_Map__Bronze_Axe,
            SpotId::Ebih__Waterfall__Waterfall_Center_Center => {
                SpotId::Menu__Kiengir_Map__Bronze_Axe
            }
            SpotId::Ebih__Waterfall__Waterfall_Center_Left => SpotId::Menu__Kiengir_Map__Bronze_Axe,
            SpotId::Ebih__Waterfall__Waterfall_Left => SpotId::Menu__Kiengir_Map__Bronze_Axe,
            SpotId::Giguna_Breach__Chimney__Cache => SpotId::Menu__Breach_Map__GSB_Chimney_Flask,
            SpotId::Giguna_Breach__Chimney__East_8 => SpotId::Menu__Breach_Map__GSB_Chimney_Flask,
            SpotId::Giguna_Breach__Cubby__Entrance => SpotId::Menu__Breach_Map__GSB_Cubby_Health,
            SpotId::Giguna_Breach__Cubby__Rocks => SpotId::Menu__Breach_Map__GSB_Cubby_Health,
            SpotId::Giguna_Breach__Peak__Save_Point => SpotId::Menu__Breach_Map__GSB_Peak,
            SpotId::Giguna_Breach__SW_Save__East_12 => SpotId::Menu__Breach_Map__GSB_SW_Save,
            SpotId::Giguna_Breach__SW_Save__Lower_Platform => SpotId::Menu__Breach_Map__GSB_SW_Save,
            SpotId::Giguna_Breach__SW_Save__Save_Point => SpotId::Menu__Breach_Map__GSB_SW_Save,
            SpotId::Giguna_Breach__Slingshot__Column => SpotId::Menu__Breach_Map__Slingshot_Hook,
            SpotId::Giguna_Breach__Slingshot__Ravine => SpotId::Menu__Breach_Map__Slingshot_Hook,
            SpotId::Giguna_Breach__Slingshot__West => SpotId::Menu__Breach_Map__Slingshot_Hook,
            SpotId::Giguna__Antechamber__Middle_Bricks_Left => {
                SpotId::Menu__Kiengir_Map__Dangerous_Ideas
            }
            SpotId::Giguna__Antechamber__Middle_Bricks_Right => {
                SpotId::Menu__Kiengir_Map__Dangerous_Ideas
            }
            SpotId::Giguna__Antechamber__Statue_Head => SpotId::Menu__Kiengir_Map__Dangerous_Ideas,
            SpotId::Giguna__Antechamber__West_15 => SpotId::Menu__Kiengir_Map__Dangerous_Ideas,
            SpotId::Giguna__Breachable_Wall__Above_the_Hole => {
                SpotId::Menu__Kiengir_Map__Giguna_Breachable_Wall_Flask
            }
            SpotId::Giguna__Breachable_Wall__Cave_Mouth_East => {
                SpotId::Menu__Kiengir_Map__Giguna_Breachable_Wall_Flask
            }
            SpotId::Giguna__Breachable_Wall__Cave_Mouth_West => {
                SpotId::Menu__Kiengir_Map__Giguna_Breachable_Wall_Flask
            }
            SpotId::Giguna__Breachable_Wall__Wall_Interior => {
                SpotId::Menu__Kiengir_Map__Giguna_Breachable_Wall_Flask
            }
            SpotId::Giguna__Breachable_Wall__West_Ledge => {
                SpotId::Menu__Kiengir_Map__Giguna_Breachable_Wall_Flask
            }
            SpotId::Giguna__Breachable_Wall__West_Mid_air => {
                SpotId::Menu__Kiengir_Map__Giguna_Breachable_Wall_Flask
            }
            SpotId::Giguna__Carnelian__Door => SpotId::Menu__Kiengir_Map__Carnelian_Ring,
            SpotId::Giguna__Carnelian__Middle_Platforms => {
                SpotId::Menu__Kiengir_Map__Carnelian_Ring
            }
            SpotId::Giguna__Carnelian__Rock => SpotId::Menu__Kiengir_Map__Carnelian_Ring,
            SpotId::Giguna__Carnelian__Switch => SpotId::Menu__Kiengir_Map__Carnelian_Ring,
            SpotId::Giguna__Carnelian__Vault => SpotId::Menu__Kiengir_Map__Carnelian_Ring,
            SpotId::Giguna__Clouds__Cache => SpotId::Menu__Kiengir_Map__Giguna_Clouds_Flask,
            SpotId::Giguna__Clouds__North_Under_Ledge => {
                SpotId::Menu__Kiengir_Map__Giguna_Clouds_Flask
            }
            SpotId::Giguna__Clouds__Platform_Early_Portal => {
                SpotId::Menu__Kiengir_Map__Giguna_Clouds_Flask
            }
            SpotId::Giguna__Clouds__Platform_Stop => SpotId::Menu__Kiengir_Map__Giguna_Clouds_Flask,
            SpotId::Giguna__Dual_Path__Base_of_Wall => {
                SpotId::Menu__Kiengir_Map__Giguna_Dual_Path_Health
            }
            SpotId::Giguna__Dual_Path__In_the_Grass => {
                SpotId::Menu__Kiengir_Map__Giguna_Dual_Path_Health
            }
            SpotId::Giguna__Dual_Path__Wall_Secret => {
                SpotId::Menu__Kiengir_Map__Giguna_Dual_Path_Health
            }
            SpotId::Giguna__Dual_Path__Wall_Top => {
                SpotId::Menu__Kiengir_Map__Giguna_Dual_Path_Health
            }
            SpotId::Giguna__East_Caverns__Arc_Passage => {
                SpotId::Menu__Kiengir_Map__Giguna_East_Caverns_Flask
            }
            SpotId::Giguna__East_Caverns__Carving => {
                SpotId::Menu__Kiengir_Map__Giguna_East_Caverns_Flask
            }
            SpotId::Giguna__East_Caverns__Hidden_Passage_Center => {
                SpotId::Menu__Kiengir_Map__Giguna_East_Caverns_Flask
            }
            SpotId::Giguna__East_Caverns__Hidden_Passage_East => {
                SpotId::Menu__Kiengir_Map__Giguna_East_Caverns_Flask
            }
            SpotId::Giguna__Far_Corner__East_13 => SpotId::Menu__Kiengir_Map__Giguna_Far_Corner,
            SpotId::Giguna__Far_Corner__Grass => SpotId::Menu__Kiengir_Map__Giguna_Far_Corner,
            SpotId::Giguna__Far_Corner__South => SpotId::Menu__Kiengir_Map__Giguna_Far_Corner,
            SpotId::Giguna__Gateway__Block_Lowered => {
                SpotId::Menu__Kiengir_Map__Giguna_Gateway_Block
            }
            SpotId::Giguna__Gateway__Block_Right => SpotId::Menu__Kiengir_Map__Giguna_Gateway_Block,
            SpotId::Giguna__Gateway__Button => SpotId::Menu__Kiengir_Map__Giguna_Gateway_Block,
            SpotId::Giguna__Gateway__East_19 => SpotId::Menu__Kiengir_Map__Giguna_Gateway_Block,
            SpotId::Giguna__Gateway__Far_Ledge => SpotId::Menu__Kiengir_Map__Giguna_Gateway_Flask,
            SpotId::Giguna__Gateway__Flask_Ledge => SpotId::Menu__Kiengir_Map__Giguna_Gateway_Flask,
            SpotId::Giguna__Gateway__Left_Platform => {
                SpotId::Menu__Kiengir_Map__Giguna_Gateway_Flask
            }
            SpotId::Giguna__Gateway__One_Jump => SpotId::Menu__Kiengir_Map__Giguna_Gateway_Flask,
            SpotId::Giguna__Gateway__Refill_Station => {
                SpotId::Menu__Kiengir_Map__Giguna_Gateway_Block
            }
            SpotId::Giguna__Gateway__Right_Platform => {
                SpotId::Menu__Kiengir_Map__Giguna_Gateway_Flask
            }
            SpotId::Giguna__Giguna_Base__Building_Entry => SpotId::Menu__Kiengir_Map__Kari,
            SpotId::Giguna__Giguna_Base__Kari => SpotId::Menu__Kiengir_Map__Kari,
            SpotId::Giguna__Giguna_Base__Ruin => SpotId::Menu__Kiengir_Map__Wall_Climb,
            SpotId::Giguna__Giguna_Base__Save_Point => SpotId::Menu__Kiengir_Map__Giguna_Base,
            SpotId::Giguna__Giguna_Base__Staircase_Bottom => SpotId::Menu__Kiengir_Map__Giguna_Base,
            SpotId::Giguna__Giguna_Base__Staircase_Top => SpotId::Menu__Kiengir_Map__Wall_Climb,
            SpotId::Giguna__Giguna_Base__Table => SpotId::Menu__Kiengir_Map__Giguna_Base,
            SpotId::Giguna__Giguna_Base__West_15 => SpotId::Menu__Kiengir_Map__Wall_Climb,
            SpotId::Giguna__Giguna_Base__West_16 => SpotId::Menu__Kiengir_Map__Giguna_Base,
            SpotId::Giguna__Giguna_Base__West_Grate => SpotId::Menu__Kiengir_Map__Wall_Climb,
            SpotId::Giguna__Giguna_Northeast__Door => {
                SpotId::Menu__Kiengir_Map__Giguna_Northeast_Flask
            }
            SpotId::Giguna__Giguna_Northeast__Gate_Button => {
                SpotId::Menu__Kiengir_Map__Giguna_Northeast_Gate
            }
            SpotId::Giguna__Giguna_Northeast__Gate_Left => {
                SpotId::Menu__Kiengir_Map__Giguna_Northeast
            }
            SpotId::Giguna__Giguna_Northeast__Gate_Right => {
                SpotId::Menu__Kiengir_Map__Giguna_Northeast_Gate
            }
            SpotId::Giguna__Giguna_Northeast__Gate_Vent => {
                SpotId::Menu__Kiengir_Map__Giguna_Northeast_Gate
            }
            SpotId::Giguna__Giguna_Northeast__Right_Column => {
                SpotId::Menu__Kiengir_Map__Giguna_Northeast_Flask
            }
            SpotId::Giguna__Giguna_Northeast__Save_Point => {
                SpotId::Menu__Kiengir_Map__Giguna_Northeast
            }
            SpotId::Giguna__Giguna_Northeast__Step => SpotId::Menu__Kiengir_Map__Giguna_Northeast,
            SpotId::Giguna__Giguna_Northeast__Switch => {
                SpotId::Menu__Kiengir_Map__Giguna_Northeast_Flask
            }
            SpotId::Giguna__Giguna_Northeast__Vault => {
                SpotId::Menu__Kiengir_Map__Giguna_Northeast_Flask
            }
            SpotId::Giguna__Giguna_Northeast__West_10 => {
                SpotId::Menu__Kiengir_Map__Giguna_Northeast
            }
            SpotId::Giguna__Gubi_Lair__Center_Platform => {
                SpotId::Menu__Kiengir_Map__Giguna_Gubi_Flask
            }
            SpotId::Giguna__Gubi_Lair__East_15 => SpotId::Menu__Kiengir_Map__Giguna_Gubi_Flask,
            SpotId::Giguna__Gubi_Lair__East_Tree => SpotId::Menu__Kiengir_Map__Giguna_Gubi_Flask,
            SpotId::Giguna__Gubi_Lair__Pedestal => SpotId::Menu__Kiengir_Map__Double_Axe,
            SpotId::Giguna__Hard_Rock__East_17 => SpotId::Menu__Kiengir_Map__Building_of_the_School,
            SpotId::Giguna__Hard_Rock__Rock_Center => {
                SpotId::Menu__Kiengir_Map__Building_of_the_School
            }
            SpotId::Giguna__Hard_Rock__Rock_Left => {
                SpotId::Menu__Kiengir_Map__Building_of_the_School
            }
            SpotId::Giguna__Hard_Rock__Rock_Right => {
                SpotId::Menu__Kiengir_Map__Building_of_the_School
            }
            SpotId::Giguna__Hard_Rock__West_17 => SpotId::Menu__Kiengir_Map__Building_of_the_School,
            SpotId::Giguna__Helipad__So_Close => SpotId::Menu__Kiengir_Map__Journal_10_29_2049,
            SpotId::Giguna__Helipad__Tablet_Ledge => SpotId::Menu__Kiengir_Map__Journal_10_29_2049,
            SpotId::Giguna__Helipad__Wall_Bottom => SpotId::Menu__Kiengir_Map__Journal_10_29_2049,
            SpotId::Giguna__Lamassu__Deposit => SpotId::Menu__Kiengir_Map__Giguna_Lamassu_Flask,
            SpotId::Giguna__Ruins_Center__Center_Top => SpotId::Menu__Kiengir_Map__Aansur,
            SpotId::Giguna__Ruins_Center__East_8 => SpotId::Menu__Kiengir_Map__Aansur,
            SpotId::Giguna__Ruins_Center__Tablet => SpotId::Menu__Kiengir_Map__Aansur,
            SpotId::Giguna__Ruins_East__Way_Up_High => {
                SpotId::Menu__Kiengir_Map__Giguna_Highest_Flask
            }
            SpotId::Giguna__Ruins_Top__East_7 => SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top_Portal,
            SpotId::Giguna__Ruins_Top__East_Door => {
                SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top_Portal
            }
            SpotId::Giguna__Ruins_Top__Flask => SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top_Flask,
            SpotId::Giguna__Ruins_Top__Interior_Ledge => {
                SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top_Portal
            }
            SpotId::Giguna__Ruins_Top__Portal => SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top_Portal,
            SpotId::Giguna__Ruins_Top__Portal_Left => {
                SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top_Portal
            }
            SpotId::Giguna__Ruins_Top__Rooftop_East => {
                SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top_Flask
            }
            SpotId::Giguna__Ruins_Top__Rooftop_Gutter => {
                SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top_Flask
            }
            SpotId::Giguna__Ruins_Top__Rooftop_West => {
                SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top_Flask
            }
            SpotId::Giguna__Ruins_Top__Save_Point => SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top,
            SpotId::Giguna__Ruins_Top__Small_Ledge => {
                SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top_Portal
            }
            SpotId::Giguna__Ruins_Top__Switch => SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top,
            SpotId::Giguna__Ruins_Top__Turret_Balcony_East => {
                SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top
            }
            SpotId::Giguna__Ruins_Top__Turret_Balcony_West => {
                SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top
            }
            SpotId::Giguna__Ruins_Top__Upper_Tunnel => {
                SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top_Flask
            }
            SpotId::Giguna__Ruins_Top__West_Pillar => SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top,
            SpotId::Giguna__Ruins_West__East_9 => SpotId::Menu__Kiengir_Map__Giguna_Ruins_West,
            SpotId::Giguna__Ruins_West__Nook => SpotId::Menu__Kiengir_Map__Giguna_Ruins_West,
            SpotId::Giguna__Ruins_West__Platform => SpotId::Menu__Kiengir_Map__Giguna_Ruins_West,
            SpotId::Giguna__Ruins_West__Save_Point => SpotId::Menu__Kiengir_Map__Giguna_Ruins_West,
            SpotId::Giguna__Wasteland__Bluff_by_Door => {
                SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Health
            }
            SpotId::Giguna__Wasteland__Cache_Ledge => {
                SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Flask
            }
            SpotId::Giguna__Wasteland__Door_Left => {
                SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Health
            }
            SpotId::Giguna__Wasteland__Door_Right => {
                SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Health
            }
            SpotId::Giguna__Wasteland__East_12 => {
                SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Switch
            }
            SpotId::Giguna__Wasteland__East_14 => {
                SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Health
            }
            SpotId::Giguna__Wasteland__Left_Platform_East => {
                SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Flask
            }
            SpotId::Giguna__Wasteland__Left_Platform_West => {
                SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Flask
            }
            SpotId::Giguna__Wasteland__Lower_Path_Left => {
                SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Core
            }
            SpotId::Giguna__Wasteland__Lower_Path_Right => {
                SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Core
            }
            SpotId::Giguna__Wasteland__Lower_Platform_East => {
                SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Health
            }
            SpotId::Giguna__Wasteland__Passage_Cache => {
                SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Core
            }
            SpotId::Giguna__Wasteland__Switch => SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Switch,
            SpotId::Giguna__Wasteland__Switch_Approach => {
                SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Switch
            }
            SpotId::Giguna__Wasteland__Switch_Ledge => {
                SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Switch
            }
            SpotId::Giguna__Wasteland__Tiny_Hill => {
                SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Health
            }
            SpotId::Giguna__Wasteland__Upper_Cache => {
                SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Flask
            }
            SpotId::Giguna__Wasteland__West_14 => SpotId::Menu__Kiengir_Map__Giguna_Wasteland_Core,
            SpotId::Giguna__West_Caverns__Bush => SpotId::Menu__Kiengir_Map__Giguna_Caverns_Core,
            SpotId::Giguna__West_Caverns__Cache => SpotId::Menu__Kiengir_Map__Giguna_Caverns_Matrix,
            SpotId::Giguna__West_Caverns__Column_1_Top_Left => {
                SpotId::Menu__Kiengir_Map__Giguna_Caverns_Core
            }
            SpotId::Giguna__West_Caverns__Column_1_Top_Right => {
                SpotId::Menu__Kiengir_Map__Giguna_Caverns_Matrix
            }
            SpotId::Giguna__West_Caverns__Column_2_Top => {
                SpotId::Menu__Kiengir_Map__Giguna_Caverns_Matrix
            }
            SpotId::Giguna__West_Caverns__Northwest => {
                SpotId::Menu__Kiengir_Map__Giguna_Caverns_Core
            }
            SpotId::Giguna__West_Caverns__Top_Gap_Left => {
                SpotId::Menu__Kiengir_Map__Giguna_Caverns_Matrix
            }
            SpotId::Giguna__West_Caverns__Top_Gap_Right => {
                SpotId::Menu__Kiengir_Map__Giguna_Caverns_Matrix
            }
            SpotId::Giguna__West_Tower__Top => SpotId::Menu__Kiengir_Map__The_Ideal_Kiengir,
            SpotId::Glacier_Breach__Control__East => SpotId::Menu__Breach_Map__GlB_Control_Flask,
            SpotId::Glacier_Breach__Control__Further_In => {
                SpotId::Menu__Breach_Map__GlB_Control_Flask
            }
            SpotId::Glacier_Breach__Control__Upper_Corner => {
                SpotId::Menu__Breach_Map__GlB_Control_Flask
            }
            SpotId::Glacier_Breach__Control__Upper_Gap => {
                SpotId::Menu__Breach_Map__GlB_Control_Flask
            }
            SpotId::Glacier_Breach__Grate_Work__Grate_East => {
                SpotId::Menu__Breach_Map__GlB_Grate_Flask
            }
            SpotId::Glacier_Breach__Grate_Work__Grate_Interior => {
                SpotId::Menu__Breach_Map__GlB_Grate_Flask
            }
            SpotId::Glacier_Breach__Grate_Work__Grate_West => {
                SpotId::Menu__Breach_Map__GlB_Grate_Flask
            }
            SpotId::Glacier_Breach__Grate_Work__West_13 => {
                SpotId::Menu__Breach_Map__GlB_Grate_Flask
            }
            SpotId::Glacier_Breach__Guarded_Corridor__East => SpotId::Menu__Breach_Map__GlB_Center,
            SpotId::Glacier_Breach__Guarded_Corridor__Past_the_Guards => {
                SpotId::Menu__Breach_Map__GlB_Center
            }
            SpotId::Glacier_Breach__Guarded_Corridor__Save_Point => {
                SpotId::Menu__Breach_Map__GlB_Center
            }
            SpotId::Glacier_Breach__Hammonds_Breach__East => SpotId::Menu__Breach_Map__GlB_East,
            SpotId::Glacier_Breach__Hammonds_Breach__East_Side => {
                SpotId::Menu__Breach_Map__GlB_East
            }
            SpotId::Glacier_Breach__Hammonds_Breach__First_Step => {
                SpotId::Menu__Breach_Map__GlB_East
            }
            SpotId::Glacier_Breach__Hammonds_Breach__Save_Point => {
                SpotId::Menu__Breach_Map__GlB_East
            }
            SpotId::Glacier_Breach__Hammonds_Breach__West_Side => {
                SpotId::Menu__Breach_Map__GlB_East
            }
            SpotId::Glacier_Breach__Save_and_Exit__Save_Point => {
                SpotId::Menu__Breach_Map__GlB_Arena
            }
            SpotId::Glacier_Breach__Save_and_Exit__West => SpotId::Menu__Breach_Map__GlB_Arena,
            SpotId::Glacier_Breach__South_Save__Brick_Ledge => SpotId::Menu__Breach_Map__GlB_South,
            SpotId::Glacier_Breach__South_Save__Save_Point => SpotId::Menu__Breach_Map__GlB_South,
            SpotId::Glacier_Breach__South_Save__West => SpotId::Menu__Breach_Map__GlB_South,
            SpotId::Glacier_Breach__West_Save__East_12 => SpotId::Menu__Breach_Map__GlB_West,
            SpotId::Glacier_Breach__West_Save__Save_Point => SpotId::Menu__Breach_Map__GlB_West,
            SpotId::Glacier_Breach__West_Save__West_Ledge => SpotId::Menu__Breach_Map__GlB_West,
            SpotId::Glacier_Breach__West_Save__West_Nub => SpotId::Menu__Breach_Map__GlB_West,
            SpotId::Glacier__Boomerang_Room__Center_Ledge => SpotId::Menu__Kiengir_Map__Boomerang,
            SpotId::Glacier__Boomerang_Room__Pedestal => SpotId::Menu__Kiengir_Map__Boomerang,
            SpotId::Glacier__Boomerang_Room__Upper_Gate_East => {
                SpotId::Menu__Kiengir_Map__Boomerang
            }
            SpotId::Glacier__Compass_Room__Center => SpotId::Menu__Kiengir_Map__Compass,
            SpotId::Glacier__Compass_Room__East => SpotId::Menu__Kiengir_Map__Compass,
            SpotId::Glacier__Compass_Room__West => SpotId::Menu__Kiengir_Map__Compass,
            SpotId::Glacier__Crystals__Lower_Corner => SpotId::Menu__Kiengir_Map__Breach_Attractor,
            SpotId::Glacier__Crystals__Lower_Slope => SpotId::Menu__Kiengir_Map__Breach_Attractor,
            SpotId::Glacier__Crystals__Portal_Stand => SpotId::Menu__Kiengir_Map__Breach_Attractor,
            SpotId::Glacier__Crystals__Top_Corner => SpotId::Menu__Kiengir_Map__Bounty_List,
            SpotId::Glacier__Crystals__Upper_Ledge => SpotId::Menu__Kiengir_Map__Bounty_List,
            SpotId::Glacier__Crystals__West => SpotId::Menu__Kiengir_Map__Bounty_List,
            SpotId::Glacier__Dock_Outside__Above_Ruins => {
                SpotId::Menu__Kiengir_Map__Weekly_Notes_2_27_2053
            }
            SpotId::Glacier__Dock_Outside__Cave_Treasure => {
                SpotId::Menu__Kiengir_Map__Glacier_Dock_Flask
            }
            SpotId::Glacier__Dock_Outside__Ruins_Platform => {
                SpotId::Menu__Kiengir_Map__Weekly_Notes_2_27_2053
            }
            SpotId::Glacier__Dock_Outside__Ruins_Stairs => {
                SpotId::Menu__Kiengir_Map__Weekly_Notes_2_27_2053
            }
            SpotId::Glacier__Dock_Outside__Upper_Ledge => {
                SpotId::Menu__Kiengir_Map__Weekly_Notes_2_27_2053
            }
            SpotId::Glacier__Dock_Outside__Upper_West_Hill => {
                SpotId::Menu__Kiengir_Map__Weekly_Notes_2_27_2053
            }
            SpotId::Glacier__Grid_39_40_7_9__Floating_Rock => {
                SpotId::Menu__Kiengir_Map__Glacier_East_Revival_Flask
            }
            SpotId::Glacier__Grid_39_40_7_9__Fortress_Ledge => {
                SpotId::Menu__Kiengir_Map__Glacier_East_Revival_Flask
            }
            SpotId::Glacier__Grid_39_40_7_9__Third_Upper_Platform => {
                SpotId::Menu__Kiengir_Map__Glacier_East_Revival_Flask
            }
            SpotId::Glacier__Hammonds_End__Between_Center_Doors => {
                SpotId::Menu__Kiengir_Map__Hammonds_Health
            }
            SpotId::Glacier__Hammonds_End__Center_Door_Left => {
                SpotId::Menu__Kiengir_Map__Hammonds_Health
            }
            SpotId::Glacier__Hammonds_End__Center_Door_Right => SpotId::Menu__Kiengir_Map__Hammond,
            SpotId::Glacier__Hammonds_End__Corner => SpotId::Menu__Kiengir_Map__Hammond,
            SpotId::Glacier__Hammonds_End__East_11_Door => SpotId::Menu__Kiengir_Map__Hammond,
            SpotId::Glacier__Hammonds_End__Hammond => SpotId::Menu__Kiengir_Map__Hammond,
            SpotId::Glacier__Hammonds_End__Lower_Grate_Left => {
                SpotId::Menu__Kiengir_Map__Hammonds_Health
            }
            SpotId::Glacier__Hammonds_End__Lower_Grate_Right => {
                SpotId::Menu__Kiengir_Map__Hammonds_Health
            }
            SpotId::Glacier__Hammonds_End__Lower_Pedestal_West => {
                SpotId::Menu__Kiengir_Map__Hammond
            }
            SpotId::Glacier__Hammonds_End__Lower_Right_Pedestal => {
                SpotId::Menu__Kiengir_Map__Hammond
            }
            SpotId::Glacier__Hammonds_End__Switch_Near => {
                SpotId::Menu__Kiengir_Map__Hammonds_Health
            }
            SpotId::Glacier__Hammonds_End__Switch_from_Ledge => {
                SpotId::Menu__Kiengir_Map__Hammonds_Health
            }
            SpotId::Glacier__Hammonds_End__Upper_Right_Mid_air => {
                SpotId::Menu__Kiengir_Map__Hammond
            }
            SpotId::Glacier__Hammonds_End__West_11 => SpotId::Menu__Kiengir_Map__Hammonds_Health,
            SpotId::Glacier__Ledge_Grab_Room__Cliff_Bottom => SpotId::Menu__Kiengir_Map__Ledge_Grab,
            SpotId::Glacier__Ledge_Grab_Room__Gate => SpotId::Menu__Kiengir_Map__Ledge_Grab,
            SpotId::Glacier__Ledge_Grab_Room__Pedestal => SpotId::Menu__Kiengir_Map__Ledge_Grab,
            SpotId::Glacier__Peak__Birds_Eye => SpotId::Menu__Kiengir_Map__Glacier_Peak_Birds_Eye,
            SpotId::Glacier__Peak__South => SpotId::Menu__Kiengir_Map__Glacier_Peak_Birds_Eye,
            SpotId::Glacier__Revival__Just_Thrown => SpotId::Menu__Kiengir_Map__Glacier_Revival,
            SpotId::Glacier__Revival__Mid_air => SpotId::Menu__Kiengir_Map__Glacier_Revival,
            SpotId::Glacier__Revival__Pillar => SpotId::Menu__Kiengir_Map__Glacier_Revival,
            SpotId::Glacier__Revival__Pillar_Step => SpotId::Menu__Kiengir_Map__Glacier_Revival,
            SpotId::Glacier__Revival__Save_Point => SpotId::Menu__Kiengir_Map__Glacier_Revival,
            SpotId::Glacier__Revival__West_8 => SpotId::Menu__Kiengir_Map__Glacier_Revival,
            SpotId::Glacier__Sea_Burial__Breakable_Rock_Left => {
                SpotId::Menu__Kiengir_Map__Glacier_Sea_Burial_Health
            }
            SpotId::Glacier__Sea_Burial__Breakable_Rock_Right => {
                SpotId::Menu__Kiengir_Map__Glacier_Sea_Burial_Health
            }
            SpotId::Glacier__Sea_Burial__Deep_Cache => {
                SpotId::Menu__Kiengir_Map__Glacier_Sea_Burial_Health
            }
            SpotId::Glacier__Sea_Burial__East_14 => {
                SpotId::Menu__Kiengir_Map__Glacier_Sea_Burial_Health
            }
            SpotId::Glacier__Sea_Burial__Grate_Ledge => SpotId::Menu__Kiengir_Map__Dr_Gloria,
            SpotId::Glacier__Sea_Burial__Grate_Left => SpotId::Menu__Kiengir_Map__Dr_Gloria,
            SpotId::Glacier__Sea_Burial__Grate_Right => SpotId::Menu__Kiengir_Map__Dr_Gloria,
            SpotId::Glacier__Sea_Burial__Inside_the_Grate => SpotId::Menu__Kiengir_Map__Dr_Gloria,
            SpotId::Glacier__Sea_Burial__Left_Center_Rock => {
                SpotId::Menu__Kiengir_Map__Glacier_Sea_Burial_Health
            }
            SpotId::Glacier__Sea_Burial__Right_Center_Rock => {
                SpotId::Menu__Kiengir_Map__Glacier_Sea_Burial_Health
            }
            SpotId::Glacier__Sea_Burial__Underwater_Passage_Center => {
                SpotId::Menu__Kiengir_Map__Glacier_Sea_Burial_Health
            }
            SpotId::Glacier__Sea_Burial__West_14 => SpotId::Menu__Kiengir_Map__Dr_Gloria,
            SpotId::Glacier__Sea_Burial__West_Basin => SpotId::Menu__Kiengir_Map__Dr_Gloria,
            SpotId::Glacier__Sea_Burial__West_Water_Surface => SpotId::Menu__Kiengir_Map__Dr_Gloria,
            SpotId::Glacier__Vertical_Room__East_9 => {
                SpotId::Menu__Kiengir_Map__Glacier_Vertical_Room_Flask
            }
            SpotId::Glacier__Vertical_Room__Mid_9 => {
                SpotId::Menu__Kiengir_Map__Glacier_Vertical_Room_Flask
            }
            SpotId::Glacier__Vertical_Room__Peak => {
                SpotId::Menu__Kiengir_Map__Glacier_Vertical_Room_Flask
            }
            SpotId::Glacier__Vertical_Room__West_9 => {
                SpotId::Menu__Kiengir_Map__Glacier_Vertical_Room_Flask
            }
            SpotId::Irikar_Breach__Gauntlet__East_22 => SpotId::Menu__Breach_Map__IB_Gauntlet,
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Reward => {
                SpotId::Menu__Breach_Map__IB_Gauntlet_Flask
            }
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Entry => {
                SpotId::Menu__Breach_Map__IB_Gauntlet
            }
            SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Right => {
                SpotId::Menu__Breach_Map__IB_Gauntlet
            }
            SpotId::Irikar_Breach__Gauntlet__Save_Point => SpotId::Menu__Breach_Map__IB_Gauntlet,
            SpotId::Irikar_Breach__Hover_Room__Bottom => SpotId::Menu__Breach_Map__Drone_Hover,
            SpotId::Irikar_Breach__Save_Room__Save_Point => SpotId::Menu__Breach_Map__IB_Save_Room,
            SpotId::Irikar_Breach__Save_Room__Upper_Area => SpotId::Menu__Breach_Map__IB_Save_Room,
            SpotId::Irikar_Breach__Save_Room__West => SpotId::Menu__Breach_Map__IB_Save_Room,
            SpotId::Irikar_Breach__Worm_Rave__Corner => {
                SpotId::Menu__Breach_Map__IB_Worm_Rave_Flask
            }
            SpotId::Irikar_Breach__Worm_Rave__East => SpotId::Menu__Breach_Map__IB_Worm_Rave_Flask,
            SpotId::Irikar_Breach__Worm_Rave__South => SpotId::Menu__Breach_Map__IB_Worm_Rave_Flask,
            SpotId::Irikar__Abandoned_Room__Corner_Core => {
                SpotId::Menu__Kiengir_Map__Irikar_Abandoned_Room
            }
            SpotId::Irikar__Abandoned_Room__Empty_Pedestal => {
                SpotId::Menu__Kiengir_Map__Irikar_Abandoned_Room
            }
            SpotId::Irikar__Abandoned_Room__West => {
                SpotId::Menu__Kiengir_Map__Irikar_Abandoned_Room
            }
            SpotId::Irikar__Airy__Cavern_Cache => SpotId::Menu__Kiengir_Map__Irikar_Airy_Flask,
            SpotId::Irikar__Airy__Cavern_Side => SpotId::Menu__Kiengir_Map__Irikar_Airy_Flask,
            SpotId::Irikar__Basement_Pipes__Double_Pipe_Left => {
                SpotId::Menu__Kiengir_Map__The_Student
            }
            SpotId::Irikar__Basement_Pipes__High_Pipe => SpotId::Menu__Kiengir_Map__The_Student,
            SpotId::Irikar__Basement_Pipes__Left_Vertical_Pipe => {
                SpotId::Menu__Kiengir_Map__Irikar_Basement_Core
            }
            SpotId::Irikar__Basement_Pipes__Right_Vertical_Pipe => {
                SpotId::Menu__Kiengir_Map__Irikar_Basement_Core
            }
            SpotId::Irikar__Basement_Pipes__West_27 => SpotId::Menu__Kiengir_Map__The_Student,
            SpotId::Irikar__Basement_Pipes__West_28 => {
                SpotId::Menu__Kiengir_Map__Irikar_Basement_Core
            }
            SpotId::Irikar__Beach_Save__Save_Point => SpotId::Menu__Kiengir_Map__Irikar_Beach_Save,
            SpotId::Irikar__Beach_Save__Top_Platform => {
                SpotId::Menu__Kiengir_Map__Irikar_Fast_Travel
            }
            SpotId::Irikar__Beach__Cache => SpotId::Menu__Kiengir_Map__Irikar_Beach_Cache,
            SpotId::Irikar__Boss_Room__Bulls_Feet => SpotId::Menu__Kiengir_Map__Irikar_Gudam,
            SpotId::Irikar__Boss_Room__Healthy_Rooftop => {
                SpotId::Menu__Kiengir_Map__Irikar_Gudam_Health
            }
            SpotId::Irikar__Boss_Room__West_28 => SpotId::Menu__Kiengir_Map__Irikar_Gudam,
            SpotId::Irikar__East_Rooftops__Directly_Down => {
                SpotId::Menu__Kiengir_Map__Heretics_Granddaughter
            }
            SpotId::Irikar__East_Rooftops__East_Mid_air => {
                SpotId::Menu__Kiengir_Map__Heretics_Granddaughter
            }
            SpotId::Irikar__East_Rooftops__Off_the_Edge => {
                SpotId::Menu__Kiengir_Map__Heretics_Granddaughter
            }
            SpotId::Irikar__East_Rooftops__Top_Rooftop => {
                SpotId::Menu__Kiengir_Map__Heretics_Granddaughter
            }
            SpotId::Irikar__Hub__Bowl_Hole => SpotId::Menu__Kiengir_Map__Irikar_Hub,
            SpotId::Irikar__Hub__Bowl_Middle_Platform_Center => {
                SpotId::Menu__Kiengir_Map__Irikar_Hub
            }
            SpotId::Irikar__Hub__Bowl_Middle_Platform_West => SpotId::Menu__Kiengir_Map__Irikar_Hub,
            SpotId::Irikar__Hub__Bowl_Platform_3 => SpotId::Menu__Kiengir_Map__Irikar_Hub,
            SpotId::Irikar__Hub__Collapsed_Column => SpotId::Menu__Kiengir_Map__Irikar_Broken_Wall,
            SpotId::Irikar__Hub__Collapsed_Column_Debris => {
                SpotId::Menu__Kiengir_Map__Irikar_Broken_Wall
            }
            SpotId::Irikar__Hub__Dagger_Altar => SpotId::Menu__Kiengir_Map__Irikar_Royal_Storage,
            SpotId::Irikar__Hub__Lower_Well => SpotId::Menu__Kiengir_Map__Irikar_Broken_Wall,
            SpotId::Irikar__Hub__Royal_Storage_By_Wall => {
                SpotId::Menu__Kiengir_Map__Irikar_Royal_Storage
            }
            SpotId::Irikar__Hub__Royal_Storage_in_Wall => {
                SpotId::Menu__Kiengir_Map__Irikar_Royal_Storage
            }
            SpotId::Irikar__Hub__Ruined_Hallway_Atop_Well => SpotId::Menu__Kiengir_Map__Irikar_Well,
            SpotId::Irikar__Hub__Ruined_Hallway_By_Well => SpotId::Menu__Kiengir_Map__Irikar_Well,
            SpotId::Irikar__Hub__Ruined_Hallway_Gap_Left => SpotId::Menu__Kiengir_Map__Irikar_Well,
            SpotId::Irikar__Hub__Ruined_Hallway_Gap_Right => SpotId::Menu__Kiengir_Map__Irikar_Well,
            SpotId::Irikar__Hub__SW_Building_Top_Platform => {
                SpotId::Menu__Kiengir_Map__Irikar_10_25
            }
            SpotId::Irikar__Hub__Sat_Tower_Top_Ledge => {
                SpotId::Menu__Kiengir_Map__Commemorative_Speech
            }
            SpotId::Irikar__Hub__Sat_Tower_West_Valley => {
                SpotId::Menu__Kiengir_Map__Commemorative_Speech
            }
            SpotId::Irikar__Hub__Save_Point => SpotId::Menu__Kiengir_Map__Irikar_Hub,
            SpotId::Irikar__Hub__West_25 => SpotId::Menu__Kiengir_Map__Irikar_10_25,
            SpotId::Irikar__Hub__West_Rooftop_1 => SpotId::Menu__Kiengir_Map__Irikar_10_25,
            SpotId::Irikar__Lamassu__Desk => SpotId::Menu__Kiengir_Map__Terminal_Breakthrough_2,
            SpotId::Irikar__Lamassu__East_26 => SpotId::Menu__Kiengir_Map__Terminal_Breakthrough_2,
            SpotId::Irikar__Lamassu__Hidden_Passage_East => {
                SpotId::Menu__Kiengir_Map__Terminal_Breakthrough_2
            }
            SpotId::Irikar__Midwest__East_25 => SpotId::Menu__Kiengir_Map__Irikar_Midwest,
            SpotId::Irikar__Midwest__Left_Platform_Dest => {
                SpotId::Menu__Kiengir_Map__Irikar_Mid_air_Flask
            }
            SpotId::Irikar__Midwest__Right_Platform_Start => {
                SpotId::Menu__Kiengir_Map__Irikar_Mid_air_Flask
            }
            SpotId::Irikar__Midwest__Save_Ledge => SpotId::Menu__Kiengir_Map__Irikar_Midwest,
            SpotId::Irikar__Midwest__Save_Point => SpotId::Menu__Kiengir_Map__Irikar_Midwest,
            SpotId::Irikar__Midwest__Tablet_Platform => {
                SpotId::Menu__Kiengir_Map__Freedom_from_Aansur
            }
            SpotId::Irikar__Sight_Room__Item_Pedestal => SpotId::Menu__Kiengir_Map__Breach_Sight,
            SpotId::Irikar__Sight_Room__Portal => SpotId::Menu__Kiengir_Map__Breach_Sight,
            SpotId::Uhrum__Annuna_Corridor__Block_West => SpotId::Menu__Kiengir_Map__Uhrum_East,
            SpotId::Uhrum__Annuna_Corridor__East_25 => {
                SpotId::Menu__Kiengir_Map__Uhrum_Annuna_Flask
            }
            SpotId::Uhrum__Annuna_Corridor__East_Cubby => {
                SpotId::Menu__Kiengir_Map__Plague_of_Thoughts
            }
            SpotId::Uhrum__Annuna_Corridor__Pedestal => SpotId::Menu__Kiengir_Map__Anuman,
            SpotId::Uhrum__Annuna_Corridor__Save_Point => SpotId::Menu__Kiengir_Map__Uhrum_East,
            SpotId::Uhrum__Annuna_Corridor__Statue => SpotId::Menu__Kiengir_Map__Uhrum_Annuna_Flask,
            SpotId::Uhrum__Annuna_Corridor__Upper_Ledge => {
                SpotId::Menu__Kiengir_Map__Plague_of_Thoughts
            }
            SpotId::Uhrum__Annuna_Corridor__Upper_Platform => {
                SpotId::Menu__Kiengir_Map__Plague_of_Thoughts
            }
            SpotId::Uhrum__Annuna_Corridor__Upper_Trees => SpotId::Menu__Kiengir_Map__Anuman,
            SpotId::Uhrum__Annuna_Corridor__West_26 => SpotId::Menu__Kiengir_Map__Uhrum_East,
            SpotId::Uhrum__Save_Room__East => SpotId::Menu__Kiengir_Map__Uhrum_Center,
            SpotId::Uhrum__Save_Room__Save_Point => SpotId::Menu__Kiengir_Map__Uhrum_Center,
            SpotId::Uhrum__Save_Room__West => SpotId::Menu__Kiengir_Map__Uhrum_Center,
            SpotId::Uhrum__Siege_Corridor__Center_Box => {
                SpotId::Menu__Kiengir_Map__Uhrum_Siege_Corridor_Health
            }
            SpotId::Uhrum__Siege_Corridor__East_25 => SpotId::Menu__Kiengir_Map__Uhrum_Fast_Travel,
            SpotId::Uhrum__Siege_Corridor__East_Hill => {
                SpotId::Menu__Kiengir_Map__Uhrum_Fast_Travel
            }
            SpotId::Uhrum__Siege_Corridor__Northwest_Door => {
                SpotId::Menu__Kiengir_Map__Uhrum_Siege_Corridor_Core
            }
            SpotId::Uhrum__Siege_Corridor__Northwest_Platform => {
                SpotId::Menu__Kiengir_Map__Uhrum_Siege_Corridor_Core
            }
            SpotId::Uhrum__Siege_Corridor__Pond => SpotId::Menu__Kiengir_Map__Storm_Bomb,
            SpotId::Uhrum__Siege_Corridor__Upper_Rock_East => {
                SpotId::Menu__Kiengir_Map__Uhrum_Fast_Travel
            }
            SpotId::Uhrum__Siege_Corridor__Upper_Rock_Item => {
                SpotId::Menu__Kiengir_Map__Uhrum_Fast_Travel
            }
            SpotId::Uhrum__Siege_Corridor__Upper_Rock_West => {
                SpotId::Menu__Kiengir_Map__Uhrum_Fast_Travel
            }
            SpotId::Uhrum__Siege_Corridor__West_Loop => {
                SpotId::Menu__Kiengir_Map__Uhrum_Siege_Corridor_Health
            }
            SpotId::Uhrum__Siege_Corridor__Western_Cache => {
                SpotId::Menu__Kiengir_Map__Uhrum_Siege_Corridor_Core
            }
            SpotId::Uhrum__Siege_Corridor__Western_Rock => {
                SpotId::Menu__Kiengir_Map__Uhrum_Siege_Corridor_Core
            }
            SpotId::Uhrum__Waterfalls__Ceiling_Cache => {
                SpotId::Menu__Kiengir_Map__Uhrum_Waterfalls_Flask
            }
            SpotId::Uhrum__Waterfalls__Island_Water_West => {
                SpotId::Menu__Kiengir_Map__Suspension_Bridge
            }
            SpotId::Uhrum__Waterfalls__Water_Slope => SpotId::Menu__Kiengir_Map__Suspension_Bridge,
            SpotId::Uhrum__Waterfalls__West_24 => SpotId::Menu__Kiengir_Map__Uhrum_Waterfalls_Flask,
            SpotId::Uhrum__Waterfalls__West_Shallow_End => {
                SpotId::Menu__Kiengir_Map__Suspension_Bridge
            }
            SpotId::Uhrum__Waterfalls__West_Water_Ledge => {
                SpotId::Menu__Kiengir_Map__Suspension_Bridge
            }
            SpotId::Uhrum__Waterfalls__West_Water_Nook => {
                SpotId::Menu__Kiengir_Map__Suspension_Bridge
            }
            SpotId::Uhrum__Waterfalls__West_Water_Surface => {
                SpotId::Menu__Kiengir_Map__Suspension_Bridge
            }
            SpotId::Uhrum__West_Entrance__Clear_Passage => {
                SpotId::Menu__Kiengir_Map__Uhrum_West_Portal_Entrance
            }
            SpotId::Uhrum__West_Entrance__Gate_Switch => {
                SpotId::Menu__Kiengir_Map__Uhrum_West_Portal_Exit
            }
            SpotId::Uhrum__West_Entrance__Hidden_Passage_Entry => {
                SpotId::Menu__Kiengir_Map__Uhrum_West_Portal_Entrance
            }
            SpotId::Uhrum__West_Entrance__Hidden_Passage_West => {
                SpotId::Menu__Kiengir_Map__Uhrum_West_Portal_Entrance
            }
            SpotId::Uhrum__West_Entrance__Inner_Dais => SpotId::Menu__Kiengir_Map__Udusan,
            SpotId::Uhrum__West_Entrance__Portal_Exit => {
                SpotId::Menu__Kiengir_Map__Uhrum_West_Portal_Exit
            }
            SpotId::Uhrum__West_Entrance__Portal_Stand => {
                SpotId::Menu__Kiengir_Map__Uhrum_West_Portal_Entrance
            }
            SpotId::Uhrum__West_Entrance__Sand => SpotId::Menu__Kiengir_Map__Uhrum_West,
            SpotId::Uhrum__West_Entrance__Save_Point => SpotId::Menu__Kiengir_Map__Uhrum_West,
            SpotId::Uhrum__West_Entrance__Southeast_Tree => SpotId::Menu__Kiengir_Map__Uhrum_West,
            SpotId::Uhrum__West_Entrance__Top_West_Ledge => SpotId::Menu__Kiengir_Map__Udusan,
            SpotId::Uhrum__West_Entrance__West_25 => SpotId::Menu__Kiengir_Map__Udusan,
            SpotId::Uhrum__West_Entrance__West_26 => {
                SpotId::Menu__Kiengir_Map__Uhrum_West_Portal_Entrance
            }
            SpotId::Uhrum__West_Entrance__West_of_Gate => {
                SpotId::Menu__Kiengir_Map__Uhrum_West_Portal_Entrance
            }
            _ => SpotId::None,
        }
    }
}

pub mod flags {
    use bitflags::bitflags;
    use serde::{self, Deserialize, Serialize};

    bitflags! {
        #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
        pub struct ContextBits1 : u64 {
            const MAP__AMAGI_BREACH__EAST_ENTRANCE__SAVE = 0x1;
            const MAP__AMAGI__MAIN_AREA__SAVE = 0x2;
            const MAP__AMAGI__EAST_LAKE__SAVE = 0x4;
            const MAP__ANNUNA__MIRROR_MATCH__SAVE = 0x8;
            const MAP__ANNUNA__VERTICAL_ROOM__SAVE = 0x10;
            const MAP__ANNUNA__FACTORY_ENTRANCE__SAVE = 0x20;
            const MAP__ANNUNA__UPPER_SAVE__SAVE = 0x40;
            const MAP__ANNUNA__CENTER_SAVE__SAVE = 0x80;
            const MAP__EBIH__BASE_CAMP__SAVE = 0x100;
            const MAP__EBIH__EBIH_WEST__MID_SAVE = 0x200;
            const MAP__EBIH__EBIH_WEST__UPPER_SAVE = 0x400;
            const MAP__EBIH__EBIH_WEST__LOWER_SAVE = 0x800;
            const MAP__GIGUNA_BREACH__PEAK__SAVE = 0x1000;
            const MAP__GIGUNA_BREACH__SW_SAVE__SAVE = 0x2000;
            const MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE = 0x4000;
            const MAP__GIGUNA__GIGUNA_BASE__SAVE = 0x8000;
            const MAP__GIGUNA__RUINS_WEST__SAVE = 0x10000;
            const MAP__GIGUNA__RUINS_TOP__SAVE = 0x20000;
            const MAP__GLACIER_BREACH__SOUTH_SAVE__SAVE = 0x40000;
            const MAP__GLACIER_BREACH__WEST_SAVE__SAVE = 0x80000;
            const MAP__GLACIER_BREACH__GUARDED_CORRIDOR__SAVE = 0x100000;
            const MAP__GLACIER_BREACH__SAVE_AND_EXIT__SAVE = 0x200000;
            const MAP__GLACIER_BREACH__HAMMONDS_BREACH__SAVE = 0x400000;
            const MAP__GLACIER__REVIVAL__SAVE = 0x800000;
            const MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE = 0x1000000;
            const MAP__IRIKAR_BREACH__GAUNTLET__SAVE = 0x2000000;
            const MAP__IRIKAR__HUB__SAVE = 0x4000000;
            const MAP__IRIKAR__MIDWEST__SAVE = 0x8000000;
            const MAP__IRIKAR__BEACH_SAVE__SAVE = 0x10000000;
            const MAP__UHRUM__WEST_ENTRANCE__SAVE = 0x20000000;
            const MAP__UHRUM__SAVE_ROOM__SAVE = 0x40000000;
            const MAP__UHRUM__ANNUNA_CORRIDOR__SAVE = 0x80000000;
            const GLACIER__CTX__HAMMONDS_DOORS = 0x100000000;
            const AMAGI__MAIN_AREA__CTX__COMBO = 0x200000000;
            const ANNUNA__WEST_BRIDGE__CTX__DOORS_OPENED = 0x400000000;
            const ANNUNA__EAST_BRIDGE__CTX__COMBO = 0x800000000;
            const ANNUNA__VERTICAL_ROOM__CTX__DOOR_OPENED = 0x1000000000;
            const ANNUNA__WEST_CLIMB__CTX__DOOR_OPENED = 0x2000000000;
            const EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED = 0x4000000000;
            const EBIH__TRUCK_GATE__CTX__DOOR_OPEN = 0x8000000000;
            const EBIH__GRID_25_10_12__CTX__DOOR_OPEN = 0x10000000000;
            const EBIH__WATERFALL__CTX__WEST_DOOR_OPEN = 0x20000000000;
            const EBIH__EBIH_WEST__CTX__DOOR_OPEN = 0x40000000000;
            const EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED = 0x80000000000;
            const EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED = 0x100000000000;
            const EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED = 0x200000000000;
            const EBIH__VERTICAL_INTERCHANGE__CTX__DOOR_OPEN = 0x400000000000;
            const GIGUNA_BREACH__SW_SAVE__CTX__DOOR_OPENED = 0x800000000000;
            const GIGUNA__GIGUNA_NORTHEAST__CTX__DOOR_OPENED = 0x1000000000000;
            const GIGUNA__CARNELIAN__CTX__DOOR_OPENED = 0x2000000000000;
            const GIGUNA__CARNELIAN__CTX__UPPER_SUSAR = 0x4000000000000;
            const GIGUNA__CARNELIAN__CTX__LOWER_SUSAR = 0x8000000000000;
            const GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR = 0x10000000000000;
            const GIGUNA__GIGUNA_BASE__CTX__DOOR_OPEN = 0x20000000000000;
            const GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED = 0x40000000000000;
            const GIGUNA__RUINS_TOP__CTX__DOORS_OPEN = 0x80000000000000;
            const GIGUNA__CLOUDS__CTX__PLATFORM = 0x100000000000000;
            const GIGUNA__EAST_CAVERNS__CTX__DOOR_OPENED = 0x200000000000000;
            const GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED = 0x400000000000000;
            const GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR = 0x800000000000000;
            const GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR = 0x1000000000000000;
            const GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR = 0x2000000000000000;
            const GIGUNA__GATEWAY__CTX__DOOR_OPENED = 0x4000000000000000;
            const GLACIER__THE_BIG_DROP__CTX__BRIDGE_OPEN = 0x8000000000000000;
        }
    }
    bitflags! {
        #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
        pub struct ContextBits2 : u64 {
            const GLACIER__VERTICAL_ROOM__CTX__UPPER_GATESTONE = 0x1;
            const GLACIER__VERTICAL_ROOM__CTX__LOWER_GATESTONES = 0x2;
            const IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED = 0x4;
            const IRIKAR__MIDWEST__CTX__LEFT_PLATFORM = 0x8;
            const IRIKAR__MIDWEST__CTX__RIGHT_PLATFORM = 0x10;
            const AMAGI_DRAGON_EYE_PASSAGE = 0x20;
            const AMAGI_STRONGHOLD_BOULDER_1 = 0x40;
            const AMAGI_STRONGHOLD_BOULDER_2 = 0x80;
            const AMAGI_STRONGHOLD_WALL_1 = 0x100;
            const AMAGI_STRONGHOLD_WALL_2 = 0x200;
            const AMAGI_WEST_LAKE_SURFACE_WALL = 0x400;
            const AMASHILAMA = 0x800;
            const ANNUNA_EAST_BRIDGE_GATE = 0x1000;
            const ANNUNA_MIRROR_MATCH_SWITCH = 0x2000;
            const ANNUNA_VERTICAL_ROOM_GATE = 0x4000;
            const ANUMAN = 0x8000;
            const APOCALYPSE_BOMB = 0x10000;
            const APOCALYPSE_SEALS_WALL = 0x20000;
            const BEWARE_THE_PATTERNMIND = 0x40000;
            const BOOMERANG = 0x80000;
            const BOOMERANG_UPGRADE = 0x100000;
            const BREACH_ATTRACTOR = 0x200000;
            const BREACH_SIGHT = 0x400000;
            const BRONZE_AXE = 0x800000;
            const BUILDING_OF_THE_SCHOOL = 0x1000000;
            const CARNELIAN_RING = 0x2000000;
            const COMMEMORATIVE_SPEECH = 0x4000000;
            const COMPANIES_LAYOFF = 0x8000000;
            const COMPASS = 0x10000000;
            const DANGEROUS_IDEAS = 0x20000000;
            const DEAR_ERNEST = 0x40000000;
            const DEFEAT_INDRA = 0x80000000;
            const DEFEAT_MUS_A_M20 = 0x100000000;
            const DESTRUCTION_POGROM = 0x200000000;
            const DOUBLE_AXE = 0x400000000;
            const DR_GLORIA = 0x800000000;
            const DRONE_HOVER = 0x1000000000;
            const DRONE_MELEE_DAMAGE = 0x2000000000;
            const DRONE_MELEE_DAMAGE_2 = 0x4000000000;
            const DRONE_MELEE_SPEED = 0x8000000000;
            const DRONE_MELEE_SPEED_2 = 0x10000000000;
            const EBIH_ALU = 0x20000000000;
            const EBIH_INTERCHANGE_BLOCK = 0x40000000000;
            const EBIH_INTERCHANGE_GATE = 0x80000000000;
            const EBIH_WALLED_OFF_WALL = 0x100000000000;
            const EBIH_WASTELAND_DOOR = 0x200000000000;
            const EBIH_WASTELAND_PASSAGE_H = 0x400000000000;
            const EBIH_WATERFALL_BLOCK_LEFT = 0x800000000000;
            const EBIH_WATERFALL_BLOCK_RIGHT = 0x1000000000000;
            const EBIH_WATERFALL_WALL = 0x2000000000000;
            const EBIH_WEST_BLOCK = 0x4000000000000;
            const ESCAPE = 0x8000000000000;
            const EXIT_BREACH = 0x10000000000000;
            const EYE_RING = 0x20000000000000;
            const FAMILY_TRAGEDY = 0x40000000000000;
            const FAST_TRAVEL = 0x80000000000000;
            const FORBIDDEN_KNOWLEDGE = 0x100000000000000;
            const FREEDOM_FROM_AANSUR = 0x200000000000000;
            const GIGUNA_BOULDER = 0x400000000000000;
            const GIGUNA_DUAL_PATH_SWITCH = 0x800000000000000;
            const GIGUNA_DUAL_PATH_WALL = 0x1000000000000000;
            const GIGUNA_GATEWAY_BLOCK = 0x2000000000000000;
            const GIGUNA_GATEWAY_GATE = 0x4000000000000000;
            const GIGUNA_GUBI = 0x8000000000000000;
        }
    }
    bitflags! {
        #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
        pub struct ContextBits3 : u64 {
            const GIGUNA_NORTHEAST_GATE = 0x1;
            const GLACIER_BIG_DROP_ROCK = 0x2;
            const GLACIER_SEA_BURIAL_ROCK = 0x4;
            const GOODBYE = 0x8;
            const HAMMOND_AUTH = 0x10;
            const HEALTH_UPGRADE = 0x20;
            const HEALTH_UPGRADE_2 = 0x40;
            const HEALTH_UPGRADE_3 = 0x80;
            const HEALTH_UPGRADE_4 = 0x100;
            const HERETICS_GRANDDAUGHTER = 0x200;
            const HERETICS_TABLET = 0x400;
            const ICE_AXE = 0x800;
            const INFECT = 0x1000;
            const INFECT_L1 = 0x2000;
            const INFECT_L2 = 0x4000;
            const INFECT_L3 = 0x8000;
            const INFECTION_RANGE = 0x10000;
            const INFECTION_RANGE_2 = 0x20000;
            const INFECTION_RANGE_3 = 0x40000;
            const INFECTION_SPEED = 0x80000;
            const IRIKAR_GUDAM = 0x100000;
            const IRIKAR_ROYAL_STORAGE_WALL = 0x200000;
            const LAMENT_FOR_FOOLS = 0x400000;
            const LEDGE_GRAB = 0x800000;
            const LETTER_FROM_TRACE = 0x1000000;
            const MELEE_DAMAGE = 0x2000000;
            const MELEE_DAMAGE_2 = 0x4000000;
            const MELEE_SPEED = 0x8000000;
            const MELEE_SPEED_2 = 0x10000000;
            const MIST_UPGRADE = 0x20000000;
            const NANITE_MIST = 0x40000000;
            const NANO_LATTICE_2 = 0x80000000;
            const NANO_POINTS = 0x100000000;
            const NANO_POINTS_2 = 0x200000000;
            const NOTES_2053_02_27 = 0x400000000;
            const PLAGUE_OF_THOUGHTS = 0x800000000;
            const RANGED_DAMAGE = 0x1000000000;
            const RANGED_DAMAGE_2 = 0x2000000000;
            const RANGED_SPEED = 0x4000000000;
            const RANGED_SPEED_2 = 0x8000000000;
            const RECORD_LOSSES = 0x10000000000;
            const REMOTE_BOOMERANG = 0x20000000000;
            const REMOTE_DRONE = 0x40000000000;
            const RESEARCHERS_MISSING = 0x80000000000;
            const ROYAL_DAGGER = 0x100000000000;
            const SEPARATION = 0x200000000000;
            const SHOCKWAVE = 0x400000000000;
            const SIUNA_STORAGE_WALL = 0x800000000000;
            const SLINGSHOT_CHARGE = 0x1000000000000;
            const SLINGSHOT_HOOK = 0x2000000000000;
            const SLINGSHOT_WEAPON = 0x4000000000000;
            const SNIPER_VALLEY_ROCK_1 = 0x8000000000000;
            const SNIPER_VALLEY_ROCK_2 = 0x10000000000000;
            const STATION_POWER = 0x20000000000000;
            const STORM_BOMB = 0x40000000000000;
            const SUSPENSION_BRIDGE = 0x80000000000000;
            const SWITCH_36_11 = 0x100000000000000;
            const SWITCH_40_12 = 0x200000000000000;
            const TERMINAL_BREAKTHROUGH_1 = 0x400000000000000;
            const TERMINAL_BREAKTHROUGH_2 = 0x800000000000000;
            const THE_ETERNAL_ARM = 0x1000000000000000;
            const THE_IDEAL_KIENGIR = 0x2000000000000000;
            const THE_STUDENT = 0x4000000000000000;
            const UDUSAN = 0x8000000000000000;
        }
    }
    bitflags! {
        #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
        pub struct ContextBits4 : u64 {
            const UHRUM_ANNUNA_CORRIDOR_BLOCK = 0x1;
            const UHRUM_WATERFALL_WALL = 0x2;
            const UHRUM_WATERFALLS_BLOCK = 0x4;
            const UHRUM_WEST_ENTRANCE_GATE = 0x8;
            const UHRUM_WEST_ENTRANCE_LOWER_WALL = 0x10;
            const UHRUM_WEST_ENTRANCE_UPPER_WALL = 0x20;
            const UNDER_SIEGE = 0x40;
            const UNDERWATER_MOVEMENT = 0x80;
            const WALL_CLIMB = 0x100;
            const VISITED_AMAGI_DRAGON_EYE_FLASK = 0x200;
            const VISITED_AMAGI_STRONGHOLD_BOULDER_2 = 0x400;
            const VISITED_AMAGI_STRONGHOLD_LEFT_WALL = 0x800;
            const VISITED_AMAGI_STRONGHOLD_WALL_1 = 0x1000;
            const VISITED_AMAGI_STRONGHOLD_WALL_2 = 0x2000;
            const VISITED_AMAGI_WEST_LAKE_SURFACE_WALL = 0x4000;
            const VISITED_ANNUNA_EAST_BRIDGE_GATE = 0x8000;
            const VISITED_ANNUNA_MIRROR_MATCH_FLASK = 0x10000;
            const VISITED_ANUMAN = 0x20000;
            const VISITED_APOCALYPSE_BOMB = 0x40000;
            const VISITED_APOCALYPSE_SEALS_WALL = 0x80000;
            const VISITED_BREACH_SIGHT = 0x100000;
            const VISITED_EBIH_ALU = 0x200000;
            const VISITED_EBIH_BASE_CAMP_FRAGMENT = 0x400000;
            const VISITED_EBIH_BUSH_FLASK = 0x800000;
            const VISITED_EBIH_WALLED_OFF_WALL = 0x1000000;
            const VISITED_EBIH_WASTELAND_PASSAGE_H = 0x2000000;
            const VISITED_EBIH_WATERFALL_BLOCK_LEFT = 0x4000000;
            const VISITED_EBIH_WATERFALL_BLOCK_RIGHT = 0x8000000;
            const VISITED_EBIH_WATERFALL_WALL = 0x10000000;
            const VISITED_EBIH_WEST_BLOCK = 0x20000000;
            const VISITED_EGG_ROOM_FLASK = 0x40000000;
            const VISITED_ESCAPE = 0x80000000;
            const VISITED_FAST_TRAVEL = 0x100000000;
            const VISITED_FILTER_TELEPORTER_FLASK = 0x200000000;
            const VISITED_GIGUNA_BOULDER = 0x400000000;
            const VISITED_GIGUNA_BREACHABLE_WALL_FLASK = 0x800000000;
            const VISITED_GIGUNA_DUAL_PATH_SWITCH = 0x1000000000;
            const VISITED_GIGUNA_DUAL_PATH_WALL = 0x2000000000;
            const VISITED_GIGUNA_GATEWAY_BLOCK = 0x4000000000;
            const VISITED_GIGUNA_GUBI = 0x8000000000;
            const VISITED_GIGUNA_NORTHEAST_FLASK = 0x10000000000;
            const VISITED_GIGUNA_NORTHEAST_GATE = 0x20000000000;
            const VISITED_GIGUNA_TOP_FLASK = 0x40000000000;
            const VISITED_GLACIER_40_8_FLASK = 0x80000000000;
            const VISITED_GLACIER_BIG_DROP_ROCK = 0x100000000000;
            const VISITED_GLACIER_DOCK_FLASK = 0x200000000000;
            const VISITED_GLACIER_SEA_BURIAL_ROCK = 0x400000000000;
            const VISITED_HAMMONDS_NOTE = 0x800000000000;
            const VISITED_INFECT = 0x1000000000000;
            const VISITED_IRIKAR_AIRY_FLASK = 0x2000000000000;
            const VISITED_IRIKAR_GUDAM = 0x4000000000000;
            const VISITED_IRIKAR_MIDWEST_FLASK = 0x8000000000000;
            const VISITED_IRIKAR_ROYAL_STORAGE_FLASK = 0x10000000000000;
            const VISITED_IRIKAR_ROYAL_STORAGE_WALL = 0x20000000000000;
            const VISITED_IRIKAR_WELL_FLASK = 0x40000000000000;
            const VISITED_LEDGE_GRAB = 0x80000000000000;
            const VISITED_LOC_AMAGI_BREACH__EAST_ENTRANCE__UPPER_SLOPE__ITEM = 0x100000000000000;
            const VISITED_LOC_AMAGI__EAST_LAKE__FOOT__TABLET = 0x200000000000000;
            const VISITED_LOC_AMAGI__LIRU_ROOM__SHRINE__ITEM = 0x400000000000000;
            const VISITED_LOC_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM = 0x800000000000000;
            const VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD = 0x1000000000000000;
            const VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL = 0x2000000000000000;
            const VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20 = 0x4000000000000000;
            const VISITED_LOC_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER = 0x8000000000000000;
            const ALL_VISIT_FLAGS = 0xfffffffffffffe00;
        }
    }
    bitflags! {
        #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
        pub struct ContextBits5 : u64 {
            const VISITED_LOC_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW = 0x1;
            const VISITED_LOC_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET = 0x2;
            const VISITED_LOC_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM = 0x4;
            const VISITED_LOC_ANNUNA__FILTER_TELEPORTER__NORTHEAST_CUBBY__TABLET = 0x8;
            const VISITED_LOC_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH = 0x10;
            const VISITED_LOC_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT = 0x20;
            const VISITED_LOC_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP = 0x40;
            const VISITED_LOC_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM = 0x80;
            const VISITED_LOC_ANNUNA__SNIPER_VALLEY__TABLE__ITEM = 0x100;
            const VISITED_LOC_ANNUNA__SPIDER_ROOM__HEALTHY_CORNER__HEALTH_REFILL = 0x200;
            const VISITED_LOC_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL = 0x400;
            const VISITED_LOC_ANNUNA__TWISTY_PASSAGES__TOP__TABLET = 0x800;
            const VISITED_LOC_ANNUNA__UPPER_HALLWAY__BEHIND_PEDESTAL__HEALTH_PICKUP = 0x1000;
            const VISITED_LOC_ANNUNA__VERTICAL_ROOM__GATE_BUTTON__HIT_BUTTON = 0x2000;
            const VISITED_LOC_ANNUNA__VERTICAL_ROOM__PLINTH__ITEM = 0x4000;
            const VISITED_LOC_ANNUNA__VERTICAL_ROOM__UPPER_CACHE__TABLET = 0x8000;
            const VISITED_LOC_ANNUNA__WEST_BRIDGE__PLINTH__ITEM = 0x10000;
            const VISITED_LOC_ANNUNA__WEST_CLIMB__CACHE__ITEM = 0x20000;
            const VISITED_LOC_ANTARCTICA__POWER_ROOM__SWITCH__FLIP = 0x40000;
            const VISITED_LOC_ANTARCTICA__SHED__INTERIOR__SHELF = 0x80000;
            const VISITED_LOC_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD = 0x100000;
            const VISITED_LOC_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM = 0x200000;
            const VISITED_LOC_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT = 0x400000;
            const VISITED_LOC_EBIH__EBIH_EAST__DISPENSER__VEND = 0x800000;
            const VISITED_LOC_EBIH__EBIH_EAST__EAST_LEDGE__NOTE = 0x1000000;
            const VISITED_LOC_EBIH__EBIH_WEST__ALCOVE__TABLET = 0x2000000;
            const VISITED_LOC_EBIH__GRID_25_2_6__PIT__ITEM = 0x4000000;
            const VISITED_LOC_EBIH__GRID_26_10_11__LEDGE__NOTE = 0x8000000;
            const VISITED_LOC_EBIH__GUARDED_HEALTH__FAR_WEST__REFILL = 0x10000000;
            const VISITED_LOC_EBIH__GUARDED_HEALTH__WEST_BASIN__HEALTH = 0x20000000;
            const VISITED_LOC_EBIH__VERTICAL_INTERCHANGE__BLOCK_CUBBY__SHOCKWAVE_BLOCK = 0x40000000;
            const VISITED_LOC_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH = 0x80000000;
            const VISITED_LOC_EBIH__WATERFALL__ALCOVE__PEDESTAL = 0x100000000;
            const VISITED_LOC_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS = 0x200000000;
            const VISITED_LOC_FILTER__CORE__TERMINAL_EAST__AUTHORIZE_HAMMOND = 0x400000000;
            const VISITED_LOC_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK = 0x800000000;
            const VISITED_LOC_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH = 0x1000000000;
            const VISITED_LOC_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN = 0x2000000000;
            const VISITED_LOC_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET = 0x4000000000;
            const VISITED_LOC_GIGUNA__CARNELIAN__VAULT__ITEM = 0x8000000000;
            const VISITED_LOC_GIGUNA__CLOUDS__CACHE__ITEM = 0x10000000000;
            const VISITED_LOC_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH = 0x20000000000;
            const VISITED_LOC_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK = 0x40000000000;
            const VISITED_LOC_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM = 0x80000000000;
            const VISITED_LOC_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH = 0x100000000000;
            const VISITED_LOC_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM = 0x200000000000;
            const VISITED_LOC_GIGUNA__GIGUNA_BASE__RUIN__ITEM = 0x400000000000;
            const VISITED_LOC_GIGUNA__GIGUNA_BASE__TABLE__NEWS = 0x800000000000;
            const VISITED_LOC_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD = 0x1000000000000;
            const VISITED_LOC_GIGUNA__GUBI_LAIR__PEDESTAL__AXE = 0x2000000000000;
            const VISITED_LOC_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET = 0x4000000000000;
            const VISITED_LOC_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET = 0x8000000000000;
            const VISITED_LOC_GIGUNA__LAMASSU__DEPOSIT__FLASK = 0x10000000000000;
            const VISITED_LOC_GIGUNA__RUINS_CENTER__TABLET__ITEM = 0x20000000000000;
            const VISITED_LOC_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM = 0x40000000000000;
            const VISITED_LOC_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH = 0x80000000000000;
            const VISITED_LOC_GIGUNA__WEST_CAVERNS__BUSH__ITEM = 0x100000000000000;
            const VISITED_LOC_GIGUNA__WEST_CAVERNS__CACHE__ITEM = 0x200000000000000;
            const VISITED_LOC_GIGUNA__WEST_TOWER__TOP__TABLET = 0x400000000000000;
            const VISITED_LOC_GLACIER_BREACH__GRATE_WORK__GRATE_INTERIOR__ITEM = 0x800000000000000;
            const VISITED_LOC_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM = 0x1000000000000000;
            const VISITED_LOC_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH = 0x2000000000000000;
            const VISITED_LOC_GLACIER__COMPASS_ROOM__CENTER__TABLE = 0x4000000000000000;
            const VISITED_LOC_GLACIER__CRYSTALS__LOWER_CORNER__ITEM = 0x8000000000000000;
            const ALL_VISIT_FLAGS = 0xffffffffffffffff;
        }
    }
    bitflags! {
        #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
        pub struct ContextBits6 : u64 {
            const VISITED_LOC_GLACIER__CRYSTALS__TOP_CORNER__TABLET = 0x1;
            const VISITED_LOC_GLACIER__HAMMONDS_END__BETWEEN_CENTER_DOORS__HEALTH = 0x2;
            const VISITED_LOC_GLACIER__PEAK__BIRDS_EYE__ITEM = 0x4;
            const VISITED_LOC_GLACIER__SEA_BURIAL__COLLAPSING_CEILING__DROWN = 0x8;
            const VISITED_LOC_GLACIER__SEA_BURIAL__DEEP_CACHE__HEALTH = 0x10;
            const VISITED_LOC_GLACIER__SEA_BURIAL__INSIDE_THE_GRATE__NOTES = 0x20;
            const VISITED_LOC_GLACIER__VERTICAL_ROOM__PEAK__FLASK = 0x40;
            const VISITED_LOC_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH = 0x80;
            const VISITED_LOC_INTERIOR__BUNKER_INTERIOR__DESK__NOTE = 0x100;
            const VISITED_LOC_INTERIOR__EBIH_CAVE__ENTRY__HEALTH = 0x200;
            const VISITED_LOC_INTERIOR__GARAGE__BOXES__UNDER_BOXES = 0x400;
            const VISITED_LOC_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE = 0x800;
            const VISITED_LOC_INTERIOR__TENT_INTERIOR__DESK__NOTE = 0x1000;
            const VISITED_LOC_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM = 0x2000;
            const VISITED_LOC_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM = 0x4000;
            const VISITED_LOC_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM = 0x8000;
            const VISITED_LOC_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE = 0x10000;
            const VISITED_LOC_IRIKAR__BASEMENT_PIPES__HIGH_PIPE__TABLET = 0x20000;
            const VISITED_LOC_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP = 0x40000;
            const VISITED_LOC_IRIKAR__BEACH__CACHE__ITEM = 0x80000;
            const VISITED_LOC_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD = 0x100000;
            const VISITED_LOC_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH = 0x200000;
            const VISITED_LOC_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET = 0x400000;
            const VISITED_LOC_IRIKAR__HUB__DAGGER_ALTAR__WEAPON = 0x800000;
            const VISITED_LOC_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL = 0x1000000;
            const VISITED_LOC_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__UPGRADED_MIST_INTO_WALL = 0x2000000;
            const VISITED_LOC_IRIKAR__HUB__SW_BUILDING_TOP_PLATFORM__POWER_CORE = 0x4000000;
            const VISITED_LOC_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET = 0x8000000;
            const VISITED_LOC_IRIKAR__LAMASSU__DESK__ITEM = 0x10000000;
            const VISITED_LOC_IRIKAR__MIDWEST__TABLET_PLATFORM__TABLET = 0x20000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1 = 0x40000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2 = 0x80000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3 = 0x100000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1 = 0x200000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2 = 0x400000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3 = 0x800000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1 = 0x1000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2 = 0x2000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3 = 0x4000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1 = 0x8000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2 = 0x10000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3 = 0x20000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1 = 0x40000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2 = 0x80000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3 = 0x100000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1 = 0x200000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2 = 0x400000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3 = 0x800000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1 = 0x1000000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2 = 0x2000000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3 = 0x4000000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1 = 0x8000000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2 = 0x10000000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3 = 0x20000000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1 = 0x40000000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2 = 0x80000000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1 = 0x100000000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2 = 0x200000000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3 = 0x400000000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1 = 0x800000000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2 = 0x1000000000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3 = 0x2000000000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4 = 0x4000000000000000;
            const VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5 = 0x8000000000000000;
            const ALL_VISIT_FLAGS = 0xffffffffffffffff;
        }
    }
    bitflags! {
        #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
        pub struct ContextBits7 : u32 {
            const VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE = 0x1;
            const VISITED_LOC_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET = 0x2;
            const VISITED_LOC_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM = 0x4;
            const VISITED_LOC_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX = 0x8;
            const VISITED_LOC_UHRUM__SIEGE_CORRIDOR__POND__ITEM = 0x10;
            const VISITED_LOC_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE = 0x20;
            const VISITED_LOC_UHRUM__WATERFALLS__CEILING_CACHE__FLASK = 0x40;
            const VISITED_LOC_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET = 0x80;
            const VISITED_LOC_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE = 0x100;
            const VISITED_LOC_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM = 0x200;
            const VISITED_LOC_UHRUM__WEST_ENTRANCE__SAND__REFILL = 0x400;
            const VISITED_MELEE_CHARGE = 0x800;
            const VISITED_NANITE_MIST = 0x1000;
            const VISITED_NOTES_2053_02_27 = 0x2000;
            const VISITED_REMOTE_DRONE = 0x4000;
            const VISITED_REVIVAL_HEALTH_NODE = 0x8000;
            const VISITED_SHOCKWAVE = 0x10000;
            const VISITED_SIUNA_STORAGE_WALL = 0x20000;
            const VISITED_SNIPER_VALLEY_ROCK_1 = 0x40000;
            const VISITED_SNIPER_VALLEY_ROCK_2 = 0x80000;
            const VISITED_SYNC_FLASK = 0x100000;
            const VISITED_UHRUM_ANNUNA_CORRIDOR_BLOCK = 0x200000;
            const VISITED_UHRUM_WATERFALL_WALL = 0x400000;
            const VISITED_UHRUM_WATERFALLS_BLOCK = 0x800000;
            const VISITED_UHRUM_WEST_ENTRANCE_LOWER_WALL = 0x1000000;
            const VISITED_UHRUM_WEST_ENTRANCE_UPPER_WALL = 0x2000000;
            const ALL_VISIT_FLAGS = 0x3ffffff;
        }
    }
}

#[derive(Clone, Debug, Eq, PartialEq, Hash, Serialize, Deserialize)]
pub struct Context {
    // context vars
    pub position: SpotId,
    pub energy: i16,
    pub flasks: i8,
    pub refills: i8,
    pub mode: enums::Mode,
    pub save: SpotId,
    pub breach_save: SpotId,
    pub indra: SpotId,
    pub last: SpotId,
    pub portal: SpotId,
    pub prev_portal: SpotId,
    pub prev_area: AreaId,
    // items
    pub big_flask: i8,
    pub flask: i8,
    pub health_fragment: i8,
    pub health_node: i8,
    pub power_matrix: i8,
    // bitflags
    pub cbits1: flags::ContextBits1,
    pub cbits2: flags::ContextBits2,
    pub cbits3: flags::ContextBits3,
    pub cbits4: flags::ContextBits4,
    pub cbits5: flags::ContextBits5,
    pub cbits6: flags::ContextBits6,
    pub cbits7: flags::ContextBits7,
}

impl Default for Context {
    fn default() -> Context {
        Context {
            position: SpotId::Antarctica__West__Helipad,
            save: SpotId::Antarctica__West__Helipad,
            breach_save: SpotId::None,
            indra: SpotId::None,
            last: SpotId::None,
            portal: SpotId::None,
            prev_portal: SpotId::None,
            prev_area: AreaId::Antarctica__West,
            energy: 0,
            flasks: 0,
            refills: 0,
            mode: enums::Mode::Indra,
            // items
            big_flask: Default::default(),
            flask: Default::default(),
            health_fragment: Default::default(),
            health_node: Default::default(),
            power_matrix: Default::default(),
            // bitflags
            cbits1: Default::default(),
            cbits2: Default::default(),
            cbits3: Default::default(),
            cbits4: Default::default(),
            cbits5: Default::default(),
            cbits6: Default::default(),
            cbits7: Default::default(),
        }
    }
}

impl analyzer::matchertrie::Observable for Context {
    type PropertyObservation = OneObservation;
}

impl context::Ctx for Context {
    type World = graph::World;
    type ItemId = Item;
    type AreaId = AreaId;
    type RegionId = RegionId;
    type MovementState = movements::MovementState;
    type Observer = FullObservation;
    type Expectation = Expectation;
    const NUM_ITEMS: u32 = 137;

    fn has(&self, item: Item) -> bool {
        match item {
            Item::Amagi_Dragon_Eye_Passage => self
                .cbits2
                .contains(flags::ContextBits2::AMAGI_DRAGON_EYE_PASSAGE),
            Item::Amagi_Stronghold_Boulder_1 => self
                .cbits2
                .contains(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_1),
            Item::Amagi_Stronghold_Boulder_2 => self
                .cbits2
                .contains(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_2),
            Item::Amagi_Stronghold_Wall_1 => self
                .cbits2
                .contains(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_1),
            Item::Amagi_Stronghold_Wall_2 => self
                .cbits2
                .contains(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_2),
            Item::Amagi_West_Lake_Surface_Wall => self
                .cbits2
                .contains(flags::ContextBits2::AMAGI_WEST_LAKE_SURFACE_WALL),
            Item::Amashilama => self.cbits2.contains(flags::ContextBits2::AMASHILAMA),
            Item::Annuna_East_Bridge_Gate => self
                .cbits2
                .contains(flags::ContextBits2::ANNUNA_EAST_BRIDGE_GATE),
            Item::Annuna_Mirror_Match_Switch => self
                .cbits2
                .contains(flags::ContextBits2::ANNUNA_MIRROR_MATCH_SWITCH),
            Item::Annuna_Vertical_Room_Gate => self
                .cbits2
                .contains(flags::ContextBits2::ANNUNA_VERTICAL_ROOM_GATE),
            Item::Anuman => self.cbits2.contains(flags::ContextBits2::ANUMAN),
            Item::Apocalypse_Bomb => self.cbits2.contains(flags::ContextBits2::APOCALYPSE_BOMB),
            Item::Apocalypse_Seals_Wall => self
                .cbits2
                .contains(flags::ContextBits2::APOCALYPSE_SEALS_WALL),
            Item::Beware_the_Patternmind => self
                .cbits2
                .contains(flags::ContextBits2::BEWARE_THE_PATTERNMIND),
            Item::Big_Flask => self.big_flask >= 1,
            Item::Boomerang => self.cbits2.contains(flags::ContextBits2::BOOMERANG),
            Item::Boomerang_Upgrade => self.cbits2.contains(flags::ContextBits2::BOOMERANG_UPGRADE),
            Item::Breach_Attractor => self.cbits2.contains(flags::ContextBits2::BREACH_ATTRACTOR),
            Item::Breach_Sight => self.cbits2.contains(flags::ContextBits2::BREACH_SIGHT),
            Item::Bronze_Axe => self.cbits2.contains(flags::ContextBits2::BRONZE_AXE),
            Item::Building_of_the_School => self
                .cbits2
                .contains(flags::ContextBits2::BUILDING_OF_THE_SCHOOL),
            Item::Carnelian_Ring => self.cbits2.contains(flags::ContextBits2::CARNELIAN_RING),
            Item::Commemorative_Speech => self
                .cbits2
                .contains(flags::ContextBits2::COMMEMORATIVE_SPEECH),
            Item::Companies_Layoff => self.cbits2.contains(flags::ContextBits2::COMPANIES_LAYOFF),
            Item::Compass => self.cbits2.contains(flags::ContextBits2::COMPASS),
            Item::Dangerous_Ideas => self.cbits2.contains(flags::ContextBits2::DANGEROUS_IDEAS),
            Item::Dear_Ernest => self.cbits2.contains(flags::ContextBits2::DEAR_ERNEST),
            Item::Defeat_Indra => self.cbits2.contains(flags::ContextBits2::DEFEAT_INDRA),
            Item::Defeat_MUS_A_M20 => self.cbits2.contains(flags::ContextBits2::DEFEAT_MUS_A_M20),
            Item::Destruction_Pogrom => self
                .cbits2
                .contains(flags::ContextBits2::DESTRUCTION_POGROM),
            Item::Double_Axe => self.cbits2.contains(flags::ContextBits2::DOUBLE_AXE),
            Item::Dr_Gloria => self.cbits2.contains(flags::ContextBits2::DR_GLORIA),
            Item::Drone_Hover => self.cbits2.contains(flags::ContextBits2::DRONE_HOVER),
            Item::Drone_Melee_Damage => self
                .cbits2
                .contains(flags::ContextBits2::DRONE_MELEE_DAMAGE),
            Item::Drone_Melee_Damage_2 => self
                .cbits2
                .contains(flags::ContextBits2::DRONE_MELEE_DAMAGE_2),
            Item::Drone_Melee_Speed => self.cbits2.contains(flags::ContextBits2::DRONE_MELEE_SPEED),
            Item::Drone_Melee_Speed_2 => self
                .cbits2
                .contains(flags::ContextBits2::DRONE_MELEE_SPEED_2),
            Item::Ebih_Alu => self.cbits2.contains(flags::ContextBits2::EBIH_ALU),
            Item::Ebih_Interchange_Block => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_INTERCHANGE_BLOCK),
            Item::Ebih_Interchange_Gate => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_INTERCHANGE_GATE),
            Item::Ebih_Walled_Off_Wall => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_WALLED_OFF_WALL),
            Item::Ebih_Wasteland_Door => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_WASTELAND_DOOR),
            Item::Ebih_Wasteland_Passage_H => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_WASTELAND_PASSAGE_H),
            Item::Ebih_Waterfall_Block_Left => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_WATERFALL_BLOCK_LEFT),
            Item::Ebih_Waterfall_Block_Right => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_WATERFALL_BLOCK_RIGHT),
            Item::Ebih_Waterfall_Wall => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_WATERFALL_WALL),
            Item::Ebih_West_Block => self.cbits2.contains(flags::ContextBits2::EBIH_WEST_BLOCK),
            Item::Escape => self.cbits2.contains(flags::ContextBits2::ESCAPE),
            Item::Exit_Breach => self.cbits2.contains(flags::ContextBits2::EXIT_BREACH),
            Item::Eye_Ring => self.cbits2.contains(flags::ContextBits2::EYE_RING),
            Item::Family_Tragedy => self.cbits2.contains(flags::ContextBits2::FAMILY_TRAGEDY),
            Item::Fast_Travel => self.cbits2.contains(flags::ContextBits2::FAST_TRAVEL),
            Item::Flask => self.flask >= 1,
            Item::Forbidden_Knowledge => self
                .cbits2
                .contains(flags::ContextBits2::FORBIDDEN_KNOWLEDGE),
            Item::Freedom_from_Aansur => self
                .cbits2
                .contains(flags::ContextBits2::FREEDOM_FROM_AANSUR),
            Item::Giguna_Boulder => self.cbits2.contains(flags::ContextBits2::GIGUNA_BOULDER),
            Item::Giguna_Dual_Path_Switch => self
                .cbits2
                .contains(flags::ContextBits2::GIGUNA_DUAL_PATH_SWITCH),
            Item::Giguna_Dual_Path_Wall => self
                .cbits2
                .contains(flags::ContextBits2::GIGUNA_DUAL_PATH_WALL),
            Item::Giguna_Gateway_Block => self
                .cbits2
                .contains(flags::ContextBits2::GIGUNA_GATEWAY_BLOCK),
            Item::Giguna_Gateway_Gate => self
                .cbits2
                .contains(flags::ContextBits2::GIGUNA_GATEWAY_GATE),
            Item::Giguna_Gubi => self.cbits2.contains(flags::ContextBits2::GIGUNA_GUBI),
            Item::Giguna_Northeast_Gate => self
                .cbits3
                .contains(flags::ContextBits3::GIGUNA_NORTHEAST_GATE),
            Item::Glacier_Big_Drop_Rock => self
                .cbits3
                .contains(flags::ContextBits3::GLACIER_BIG_DROP_ROCK),
            Item::Glacier_Sea_Burial_Rock => self
                .cbits3
                .contains(flags::ContextBits3::GLACIER_SEA_BURIAL_ROCK),
            Item::Goodbye => self.cbits3.contains(flags::ContextBits3::GOODBYE),
            Item::Hammond_Auth => self.cbits3.contains(flags::ContextBits3::HAMMOND_AUTH),
            Item::Health_Fragment => self.health_fragment >= 1,
            Item::Health_Node => self.health_node >= 1,
            Item::Health_Upgrade => self.cbits3.contains(flags::ContextBits3::HEALTH_UPGRADE),
            Item::Health_Upgrade_2 => self.cbits3.contains(flags::ContextBits3::HEALTH_UPGRADE_2),
            Item::Health_Upgrade_3 => self.cbits3.contains(flags::ContextBits3::HEALTH_UPGRADE_3),
            Item::Health_Upgrade_4 => self.cbits3.contains(flags::ContextBits3::HEALTH_UPGRADE_4),
            Item::Heretics_Granddaughter => self
                .cbits3
                .contains(flags::ContextBits3::HERETICS_GRANDDAUGHTER),
            Item::Heretics_Tablet => self.cbits3.contains(flags::ContextBits3::HERETICS_TABLET),
            Item::Ice_Axe => self.cbits3.contains(flags::ContextBits3::ICE_AXE),
            Item::Infect => self.cbits3.contains(flags::ContextBits3::INFECT),
            Item::Infect_L1 => self.cbits3.contains(flags::ContextBits3::INFECT_L1),
            Item::Infect_L2 => self.cbits3.contains(flags::ContextBits3::INFECT_L2),
            Item::Infect_L3 => self.cbits3.contains(flags::ContextBits3::INFECT_L3),
            Item::Infection_Range => self.cbits3.contains(flags::ContextBits3::INFECTION_RANGE),
            Item::Infection_Range_2 => self.cbits3.contains(flags::ContextBits3::INFECTION_RANGE_2),
            Item::Infection_Range_3 => self.cbits3.contains(flags::ContextBits3::INFECTION_RANGE_3),
            Item::Infection_Speed => self.cbits3.contains(flags::ContextBits3::INFECTION_SPEED),
            Item::Irikar_Gudam => self.cbits3.contains(flags::ContextBits3::IRIKAR_GUDAM),
            Item::Irikar_Royal_Storage_Wall => self
                .cbits3
                .contains(flags::ContextBits3::IRIKAR_ROYAL_STORAGE_WALL),
            Item::Lament_for_Fools => self.cbits3.contains(flags::ContextBits3::LAMENT_FOR_FOOLS),
            Item::Ledge_Grab => self.cbits3.contains(flags::ContextBits3::LEDGE_GRAB),
            Item::Letter_from_Trace => self.cbits3.contains(flags::ContextBits3::LETTER_FROM_TRACE),
            Item::Melee_Damage => self.cbits3.contains(flags::ContextBits3::MELEE_DAMAGE),
            Item::Melee_Damage_2 => self.cbits3.contains(flags::ContextBits3::MELEE_DAMAGE_2),
            Item::Melee_Speed => self.cbits3.contains(flags::ContextBits3::MELEE_SPEED),
            Item::Melee_Speed_2 => self.cbits3.contains(flags::ContextBits3::MELEE_SPEED_2),
            Item::Mist_Upgrade => self.cbits3.contains(flags::ContextBits3::MIST_UPGRADE),
            Item::Nanite_Mist => self.cbits3.contains(flags::ContextBits3::NANITE_MIST),
            Item::Nano_Lattice_2 => self.cbits3.contains(flags::ContextBits3::NANO_LATTICE_2),
            Item::Nano_Points => self.cbits3.contains(flags::ContextBits3::NANO_POINTS),
            Item::Nano_Points_2 => self.cbits3.contains(flags::ContextBits3::NANO_POINTS_2),
            Item::Notes_2053_02_27 => self.cbits3.contains(flags::ContextBits3::NOTES_2053_02_27),
            Item::Plague_of_Thoughts => self
                .cbits3
                .contains(flags::ContextBits3::PLAGUE_OF_THOUGHTS),
            Item::Power_Matrix => self.power_matrix >= 1,
            Item::Ranged_Damage => self.cbits3.contains(flags::ContextBits3::RANGED_DAMAGE),
            Item::Ranged_Damage_2 => self.cbits3.contains(flags::ContextBits3::RANGED_DAMAGE_2),
            Item::Ranged_Speed => self.cbits3.contains(flags::ContextBits3::RANGED_SPEED),
            Item::Ranged_Speed_2 => self.cbits3.contains(flags::ContextBits3::RANGED_SPEED_2),
            Item::Record_Losses => self.cbits3.contains(flags::ContextBits3::RECORD_LOSSES),
            Item::Remote_Boomerang => self.cbits3.contains(flags::ContextBits3::REMOTE_BOOMERANG),
            Item::Remote_Drone => self.cbits3.contains(flags::ContextBits3::REMOTE_DRONE),
            Item::Researchers_Missing => self
                .cbits3
                .contains(flags::ContextBits3::RESEARCHERS_MISSING),
            Item::Royal_Dagger => self.cbits3.contains(flags::ContextBits3::ROYAL_DAGGER),
            Item::Separation => self.cbits3.contains(flags::ContextBits3::SEPARATION),
            Item::Shockwave => self.cbits3.contains(flags::ContextBits3::SHOCKWAVE),
            Item::Siuna_Storage_Wall => self
                .cbits3
                .contains(flags::ContextBits3::SIUNA_STORAGE_WALL),
            Item::Slingshot_Charge => self.cbits3.contains(flags::ContextBits3::SLINGSHOT_CHARGE),
            Item::Slingshot_Hook => self.cbits3.contains(flags::ContextBits3::SLINGSHOT_HOOK),
            Item::Slingshot_Weapon => self.cbits3.contains(flags::ContextBits3::SLINGSHOT_WEAPON),
            Item::Sniper_Valley_Rock_1 => self
                .cbits3
                .contains(flags::ContextBits3::SNIPER_VALLEY_ROCK_1),
            Item::Sniper_Valley_Rock_2 => self
                .cbits3
                .contains(flags::ContextBits3::SNIPER_VALLEY_ROCK_2),
            Item::Station_Power => self.cbits3.contains(flags::ContextBits3::STATION_POWER),
            Item::Storm_Bomb => self.cbits3.contains(flags::ContextBits3::STORM_BOMB),
            Item::Suspension_Bridge => self.cbits3.contains(flags::ContextBits3::SUSPENSION_BRIDGE),
            Item::Switch_36_11 => self.cbits3.contains(flags::ContextBits3::SWITCH_36_11),
            Item::Switch_40_12 => self.cbits3.contains(flags::ContextBits3::SWITCH_40_12),
            Item::Terminal_Breakthrough_1 => self
                .cbits3
                .contains(flags::ContextBits3::TERMINAL_BREAKTHROUGH_1),
            Item::Terminal_Breakthrough_2 => self
                .cbits3
                .contains(flags::ContextBits3::TERMINAL_BREAKTHROUGH_2),
            Item::The_Eternal_Arm => self.cbits3.contains(flags::ContextBits3::THE_ETERNAL_ARM),
            Item::The_Ideal_Kiengir => self.cbits3.contains(flags::ContextBits3::THE_IDEAL_KIENGIR),
            Item::The_Student => self.cbits3.contains(flags::ContextBits3::THE_STUDENT),
            Item::Udusan => self.cbits3.contains(flags::ContextBits3::UDUSAN),
            Item::Uhrum_Annuna_Corridor_Block => self
                .cbits4
                .contains(flags::ContextBits4::UHRUM_ANNUNA_CORRIDOR_BLOCK),
            Item::Uhrum_Waterfall_Wall => self
                .cbits4
                .contains(flags::ContextBits4::UHRUM_WATERFALL_WALL),
            Item::Uhrum_Waterfalls_Block => self
                .cbits4
                .contains(flags::ContextBits4::UHRUM_WATERFALLS_BLOCK),
            Item::Uhrum_West_Entrance_Gate => self
                .cbits4
                .contains(flags::ContextBits4::UHRUM_WEST_ENTRANCE_GATE),
            Item::Uhrum_West_Entrance_Lower_Wall => self
                .cbits4
                .contains(flags::ContextBits4::UHRUM_WEST_ENTRANCE_LOWER_WALL),
            Item::Uhrum_West_Entrance_Upper_Wall => self
                .cbits4
                .contains(flags::ContextBits4::UHRUM_WEST_ENTRANCE_UPPER_WALL),
            Item::Under_Siege => self.cbits4.contains(flags::ContextBits4::UNDER_SIEGE),
            Item::Underwater_Movement => self
                .cbits4
                .contains(flags::ContextBits4::UNDERWATER_MOVEMENT),
            Item::Wall_Climb => self.cbits4.contains(flags::ContextBits4::WALL_CLIMB),
            _ => false,
        }
    }
    fn count(&self, item: Item) -> i16 {
        match item {
            Item::Amagi_Dragon_Eye_Passage => self
                .cbits2
                .contains(flags::ContextBits2::AMAGI_DRAGON_EYE_PASSAGE)
                .into(),
            Item::Amagi_Stronghold_Boulder_1 => self
                .cbits2
                .contains(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_1)
                .into(),
            Item::Amagi_Stronghold_Boulder_2 => self
                .cbits2
                .contains(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_2)
                .into(),
            Item::Amagi_Stronghold_Wall_1 => self
                .cbits2
                .contains(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_1)
                .into(),
            Item::Amagi_Stronghold_Wall_2 => self
                .cbits2
                .contains(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_2)
                .into(),
            Item::Amagi_West_Lake_Surface_Wall => self
                .cbits2
                .contains(flags::ContextBits2::AMAGI_WEST_LAKE_SURFACE_WALL)
                .into(),
            Item::Amashilama => self.cbits2.contains(flags::ContextBits2::AMASHILAMA).into(),
            Item::Annuna_East_Bridge_Gate => self
                .cbits2
                .contains(flags::ContextBits2::ANNUNA_EAST_BRIDGE_GATE)
                .into(),
            Item::Annuna_Mirror_Match_Switch => self
                .cbits2
                .contains(flags::ContextBits2::ANNUNA_MIRROR_MATCH_SWITCH)
                .into(),
            Item::Annuna_Vertical_Room_Gate => self
                .cbits2
                .contains(flags::ContextBits2::ANNUNA_VERTICAL_ROOM_GATE)
                .into(),
            Item::Anuman => self.cbits2.contains(flags::ContextBits2::ANUMAN).into(),
            Item::Apocalypse_Bomb => self
                .cbits2
                .contains(flags::ContextBits2::APOCALYPSE_BOMB)
                .into(),
            Item::Apocalypse_Seals_Wall => self
                .cbits2
                .contains(flags::ContextBits2::APOCALYPSE_SEALS_WALL)
                .into(),
            Item::Beware_the_Patternmind => self
                .cbits2
                .contains(flags::ContextBits2::BEWARE_THE_PATTERNMIND)
                .into(),
            Item::Big_Flask => self.big_flask.into(),
            Item::Boomerang => self.cbits2.contains(flags::ContextBits2::BOOMERANG).into(),
            Item::Boomerang_Upgrade => self
                .cbits2
                .contains(flags::ContextBits2::BOOMERANG_UPGRADE)
                .into(),
            Item::Breach_Attractor => self
                .cbits2
                .contains(flags::ContextBits2::BREACH_ATTRACTOR)
                .into(),
            Item::Breach_Sight => self
                .cbits2
                .contains(flags::ContextBits2::BREACH_SIGHT)
                .into(),
            Item::Bronze_Axe => self.cbits2.contains(flags::ContextBits2::BRONZE_AXE).into(),
            Item::Building_of_the_School => self
                .cbits2
                .contains(flags::ContextBits2::BUILDING_OF_THE_SCHOOL)
                .into(),
            Item::Carnelian_Ring => self
                .cbits2
                .contains(flags::ContextBits2::CARNELIAN_RING)
                .into(),
            Item::Commemorative_Speech => self
                .cbits2
                .contains(flags::ContextBits2::COMMEMORATIVE_SPEECH)
                .into(),
            Item::Companies_Layoff => self
                .cbits2
                .contains(flags::ContextBits2::COMPANIES_LAYOFF)
                .into(),
            Item::Compass => self.cbits2.contains(flags::ContextBits2::COMPASS).into(),
            Item::Dangerous_Ideas => self
                .cbits2
                .contains(flags::ContextBits2::DANGEROUS_IDEAS)
                .into(),
            Item::Dear_Ernest => self
                .cbits2
                .contains(flags::ContextBits2::DEAR_ERNEST)
                .into(),
            Item::Defeat_Indra => self
                .cbits2
                .contains(flags::ContextBits2::DEFEAT_INDRA)
                .into(),
            Item::Defeat_MUS_A_M20 => self
                .cbits2
                .contains(flags::ContextBits2::DEFEAT_MUS_A_M20)
                .into(),
            Item::Destruction_Pogrom => self
                .cbits2
                .contains(flags::ContextBits2::DESTRUCTION_POGROM)
                .into(),
            Item::Double_Axe => self.cbits2.contains(flags::ContextBits2::DOUBLE_AXE).into(),
            Item::Dr_Gloria => self.cbits2.contains(flags::ContextBits2::DR_GLORIA).into(),
            Item::Drone_Hover => self
                .cbits2
                .contains(flags::ContextBits2::DRONE_HOVER)
                .into(),
            Item::Drone_Melee_Damage => self
                .cbits2
                .contains(flags::ContextBits2::DRONE_MELEE_DAMAGE)
                .into(),
            Item::Drone_Melee_Damage_2 => self
                .cbits2
                .contains(flags::ContextBits2::DRONE_MELEE_DAMAGE_2)
                .into(),
            Item::Drone_Melee_Speed => self
                .cbits2
                .contains(flags::ContextBits2::DRONE_MELEE_SPEED)
                .into(),
            Item::Drone_Melee_Speed_2 => self
                .cbits2
                .contains(flags::ContextBits2::DRONE_MELEE_SPEED_2)
                .into(),
            Item::Ebih_Alu => self.cbits2.contains(flags::ContextBits2::EBIH_ALU).into(),
            Item::Ebih_Interchange_Block => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_INTERCHANGE_BLOCK)
                .into(),
            Item::Ebih_Interchange_Gate => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_INTERCHANGE_GATE)
                .into(),
            Item::Ebih_Walled_Off_Wall => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_WALLED_OFF_WALL)
                .into(),
            Item::Ebih_Wasteland_Door => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_WASTELAND_DOOR)
                .into(),
            Item::Ebih_Wasteland_Passage_H => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_WASTELAND_PASSAGE_H)
                .into(),
            Item::Ebih_Waterfall_Block_Left => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_WATERFALL_BLOCK_LEFT)
                .into(),
            Item::Ebih_Waterfall_Block_Right => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_WATERFALL_BLOCK_RIGHT)
                .into(),
            Item::Ebih_Waterfall_Wall => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_WATERFALL_WALL)
                .into(),
            Item::Ebih_West_Block => self
                .cbits2
                .contains(flags::ContextBits2::EBIH_WEST_BLOCK)
                .into(),
            Item::Escape => self.cbits2.contains(flags::ContextBits2::ESCAPE).into(),
            Item::Exit_Breach => self
                .cbits2
                .contains(flags::ContextBits2::EXIT_BREACH)
                .into(),
            Item::Eye_Ring => self.cbits2.contains(flags::ContextBits2::EYE_RING).into(),
            Item::Family_Tragedy => self
                .cbits2
                .contains(flags::ContextBits2::FAMILY_TRAGEDY)
                .into(),
            Item::Fast_Travel => self
                .cbits2
                .contains(flags::ContextBits2::FAST_TRAVEL)
                .into(),
            Item::Flask => self.flask.into(),
            Item::Forbidden_Knowledge => self
                .cbits2
                .contains(flags::ContextBits2::FORBIDDEN_KNOWLEDGE)
                .into(),
            Item::Freedom_from_Aansur => self
                .cbits2
                .contains(flags::ContextBits2::FREEDOM_FROM_AANSUR)
                .into(),
            Item::Giguna_Boulder => self
                .cbits2
                .contains(flags::ContextBits2::GIGUNA_BOULDER)
                .into(),
            Item::Giguna_Dual_Path_Switch => self
                .cbits2
                .contains(flags::ContextBits2::GIGUNA_DUAL_PATH_SWITCH)
                .into(),
            Item::Giguna_Dual_Path_Wall => self
                .cbits2
                .contains(flags::ContextBits2::GIGUNA_DUAL_PATH_WALL)
                .into(),
            Item::Giguna_Gateway_Block => self
                .cbits2
                .contains(flags::ContextBits2::GIGUNA_GATEWAY_BLOCK)
                .into(),
            Item::Giguna_Gateway_Gate => self
                .cbits2
                .contains(flags::ContextBits2::GIGUNA_GATEWAY_GATE)
                .into(),
            Item::Giguna_Gubi => self
                .cbits2
                .contains(flags::ContextBits2::GIGUNA_GUBI)
                .into(),
            Item::Giguna_Northeast_Gate => self
                .cbits3
                .contains(flags::ContextBits3::GIGUNA_NORTHEAST_GATE)
                .into(),
            Item::Glacier_Big_Drop_Rock => self
                .cbits3
                .contains(flags::ContextBits3::GLACIER_BIG_DROP_ROCK)
                .into(),
            Item::Glacier_Sea_Burial_Rock => self
                .cbits3
                .contains(flags::ContextBits3::GLACIER_SEA_BURIAL_ROCK)
                .into(),
            Item::Goodbye => self.cbits3.contains(flags::ContextBits3::GOODBYE).into(),
            Item::Hammond_Auth => self
                .cbits3
                .contains(flags::ContextBits3::HAMMOND_AUTH)
                .into(),
            Item::Health_Fragment => self.health_fragment.into(),
            Item::Health_Node => self.health_node.into(),
            Item::Health_Upgrade => self
                .cbits3
                .contains(flags::ContextBits3::HEALTH_UPGRADE)
                .into(),
            Item::Health_Upgrade_2 => self
                .cbits3
                .contains(flags::ContextBits3::HEALTH_UPGRADE_2)
                .into(),
            Item::Health_Upgrade_3 => self
                .cbits3
                .contains(flags::ContextBits3::HEALTH_UPGRADE_3)
                .into(),
            Item::Health_Upgrade_4 => self
                .cbits3
                .contains(flags::ContextBits3::HEALTH_UPGRADE_4)
                .into(),
            Item::Heretics_Granddaughter => self
                .cbits3
                .contains(flags::ContextBits3::HERETICS_GRANDDAUGHTER)
                .into(),
            Item::Heretics_Tablet => self
                .cbits3
                .contains(flags::ContextBits3::HERETICS_TABLET)
                .into(),
            Item::Ice_Axe => self.cbits3.contains(flags::ContextBits3::ICE_AXE).into(),
            Item::Infect => self.cbits3.contains(flags::ContextBits3::INFECT).into(),
            Item::Infect_L1 => self.cbits3.contains(flags::ContextBits3::INFECT_L1).into(),
            Item::Infect_L2 => self.cbits3.contains(flags::ContextBits3::INFECT_L2).into(),
            Item::Infect_L3 => self.cbits3.contains(flags::ContextBits3::INFECT_L3).into(),
            Item::Infection_Range => self
                .cbits3
                .contains(flags::ContextBits3::INFECTION_RANGE)
                .into(),
            Item::Infection_Range_2 => self
                .cbits3
                .contains(flags::ContextBits3::INFECTION_RANGE_2)
                .into(),
            Item::Infection_Range_3 => self
                .cbits3
                .contains(flags::ContextBits3::INFECTION_RANGE_3)
                .into(),
            Item::Infection_Speed => self
                .cbits3
                .contains(flags::ContextBits3::INFECTION_SPEED)
                .into(),
            Item::Irikar_Gudam => self
                .cbits3
                .contains(flags::ContextBits3::IRIKAR_GUDAM)
                .into(),
            Item::Irikar_Royal_Storage_Wall => self
                .cbits3
                .contains(flags::ContextBits3::IRIKAR_ROYAL_STORAGE_WALL)
                .into(),
            Item::Lament_for_Fools => self
                .cbits3
                .contains(flags::ContextBits3::LAMENT_FOR_FOOLS)
                .into(),
            Item::Ledge_Grab => self.cbits3.contains(flags::ContextBits3::LEDGE_GRAB).into(),
            Item::Letter_from_Trace => self
                .cbits3
                .contains(flags::ContextBits3::LETTER_FROM_TRACE)
                .into(),
            Item::Melee_Damage => self
                .cbits3
                .contains(flags::ContextBits3::MELEE_DAMAGE)
                .into(),
            Item::Melee_Damage_2 => self
                .cbits3
                .contains(flags::ContextBits3::MELEE_DAMAGE_2)
                .into(),
            Item::Melee_Speed => self
                .cbits3
                .contains(flags::ContextBits3::MELEE_SPEED)
                .into(),
            Item::Melee_Speed_2 => self
                .cbits3
                .contains(flags::ContextBits3::MELEE_SPEED_2)
                .into(),
            Item::Mist_Upgrade => self
                .cbits3
                .contains(flags::ContextBits3::MIST_UPGRADE)
                .into(),
            Item::Nanite_Mist => self
                .cbits3
                .contains(flags::ContextBits3::NANITE_MIST)
                .into(),
            Item::Nano_Lattice_2 => self
                .cbits3
                .contains(flags::ContextBits3::NANO_LATTICE_2)
                .into(),
            Item::Nano_Points => self
                .cbits3
                .contains(flags::ContextBits3::NANO_POINTS)
                .into(),
            Item::Nano_Points_2 => self
                .cbits3
                .contains(flags::ContextBits3::NANO_POINTS_2)
                .into(),
            Item::Notes_2053_02_27 => self
                .cbits3
                .contains(flags::ContextBits3::NOTES_2053_02_27)
                .into(),
            Item::Plague_of_Thoughts => self
                .cbits3
                .contains(flags::ContextBits3::PLAGUE_OF_THOUGHTS)
                .into(),
            Item::Power_Matrix => self.power_matrix.into(),
            Item::Ranged_Damage => self
                .cbits3
                .contains(flags::ContextBits3::RANGED_DAMAGE)
                .into(),
            Item::Ranged_Damage_2 => self
                .cbits3
                .contains(flags::ContextBits3::RANGED_DAMAGE_2)
                .into(),
            Item::Ranged_Speed => self
                .cbits3
                .contains(flags::ContextBits3::RANGED_SPEED)
                .into(),
            Item::Ranged_Speed_2 => self
                .cbits3
                .contains(flags::ContextBits3::RANGED_SPEED_2)
                .into(),
            Item::Record_Losses => self
                .cbits3
                .contains(flags::ContextBits3::RECORD_LOSSES)
                .into(),
            Item::Remote_Boomerang => self
                .cbits3
                .contains(flags::ContextBits3::REMOTE_BOOMERANG)
                .into(),
            Item::Remote_Drone => self
                .cbits3
                .contains(flags::ContextBits3::REMOTE_DRONE)
                .into(),
            Item::Researchers_Missing => self
                .cbits3
                .contains(flags::ContextBits3::RESEARCHERS_MISSING)
                .into(),
            Item::Royal_Dagger => self
                .cbits3
                .contains(flags::ContextBits3::ROYAL_DAGGER)
                .into(),
            Item::Separation => self.cbits3.contains(flags::ContextBits3::SEPARATION).into(),
            Item::Shockwave => self.cbits3.contains(flags::ContextBits3::SHOCKWAVE).into(),
            Item::Siuna_Storage_Wall => self
                .cbits3
                .contains(flags::ContextBits3::SIUNA_STORAGE_WALL)
                .into(),
            Item::Slingshot_Charge => self
                .cbits3
                .contains(flags::ContextBits3::SLINGSHOT_CHARGE)
                .into(),
            Item::Slingshot_Hook => self
                .cbits3
                .contains(flags::ContextBits3::SLINGSHOT_HOOK)
                .into(),
            Item::Slingshot_Weapon => self
                .cbits3
                .contains(flags::ContextBits3::SLINGSHOT_WEAPON)
                .into(),
            Item::Sniper_Valley_Rock_1 => self
                .cbits3
                .contains(flags::ContextBits3::SNIPER_VALLEY_ROCK_1)
                .into(),
            Item::Sniper_Valley_Rock_2 => self
                .cbits3
                .contains(flags::ContextBits3::SNIPER_VALLEY_ROCK_2)
                .into(),
            Item::Station_Power => self
                .cbits3
                .contains(flags::ContextBits3::STATION_POWER)
                .into(),
            Item::Storm_Bomb => self.cbits3.contains(flags::ContextBits3::STORM_BOMB).into(),
            Item::Suspension_Bridge => self
                .cbits3
                .contains(flags::ContextBits3::SUSPENSION_BRIDGE)
                .into(),
            Item::Switch_36_11 => self
                .cbits3
                .contains(flags::ContextBits3::SWITCH_36_11)
                .into(),
            Item::Switch_40_12 => self
                .cbits3
                .contains(flags::ContextBits3::SWITCH_40_12)
                .into(),
            Item::Terminal_Breakthrough_1 => self
                .cbits3
                .contains(flags::ContextBits3::TERMINAL_BREAKTHROUGH_1)
                .into(),
            Item::Terminal_Breakthrough_2 => self
                .cbits3
                .contains(flags::ContextBits3::TERMINAL_BREAKTHROUGH_2)
                .into(),
            Item::The_Eternal_Arm => self
                .cbits3
                .contains(flags::ContextBits3::THE_ETERNAL_ARM)
                .into(),
            Item::The_Ideal_Kiengir => self
                .cbits3
                .contains(flags::ContextBits3::THE_IDEAL_KIENGIR)
                .into(),
            Item::The_Student => self
                .cbits3
                .contains(flags::ContextBits3::THE_STUDENT)
                .into(),
            Item::Udusan => self.cbits3.contains(flags::ContextBits3::UDUSAN).into(),
            Item::Uhrum_Annuna_Corridor_Block => self
                .cbits4
                .contains(flags::ContextBits4::UHRUM_ANNUNA_CORRIDOR_BLOCK)
                .into(),
            Item::Uhrum_Waterfall_Wall => self
                .cbits4
                .contains(flags::ContextBits4::UHRUM_WATERFALL_WALL)
                .into(),
            Item::Uhrum_Waterfalls_Block => self
                .cbits4
                .contains(flags::ContextBits4::UHRUM_WATERFALLS_BLOCK)
                .into(),
            Item::Uhrum_West_Entrance_Gate => self
                .cbits4
                .contains(flags::ContextBits4::UHRUM_WEST_ENTRANCE_GATE)
                .into(),
            Item::Uhrum_West_Entrance_Lower_Wall => self
                .cbits4
                .contains(flags::ContextBits4::UHRUM_WEST_ENTRANCE_LOWER_WALL)
                .into(),
            Item::Uhrum_West_Entrance_Upper_Wall => self
                .cbits4
                .contains(flags::ContextBits4::UHRUM_WEST_ENTRANCE_UPPER_WALL)
                .into(),
            Item::Under_Siege => self
                .cbits4
                .contains(flags::ContextBits4::UNDER_SIEGE)
                .into(),
            Item::Underwater_Movement => self
                .cbits4
                .contains(flags::ContextBits4::UNDERWATER_MOVEMENT)
                .into(),
            Item::Wall_Climb => self.cbits4.contains(flags::ContextBits4::WALL_CLIMB).into(),
            _ => 0,
        }
    }
    fn collect(&mut self, item: Item, world: &graph::World) {
        match item {
            Item::Amagi_Dragon_Eye_Passage => {
                self.cbits2.insert(flags::ContextBits2::AMAGI_DRAGON_EYE_PASSAGE);
            }
            Item::Amagi_Stronghold_Boulder_1 => {
                self.cbits2.insert(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_1);
            }
            Item::Amagi_Stronghold_Boulder_2 => {
                self.cbits2.insert(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_2);
            }
            Item::Amagi_Stronghold_Wall_1 => {
                self.cbits2.insert(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_1);
            }
            Item::Amagi_Stronghold_Wall_2 => {
                self.cbits2.insert(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_2);
            }
            Item::Amagi_West_Lake_Surface_Wall => {
                self.cbits2.insert(flags::ContextBits2::AMAGI_WEST_LAKE_SURFACE_WALL);
            }
            Item::Amashilama => {
                self.cbits2.insert(flags::ContextBits2::AMASHILAMA);
                rules::action_save_set_glacier_gt_revival_gt_save_point(self, world);
            }
            Item::Annuna_East_Bridge_Gate => {
                self.cbits2.insert(flags::ContextBits2::ANNUNA_EAST_BRIDGE_GATE);
            }
            Item::Annuna_Mirror_Match_Switch => {
                self.cbits2.insert(flags::ContextBits2::ANNUNA_MIRROR_MATCH_SWITCH);
            }
            Item::Annuna_Vertical_Room_Gate => {
                self.cbits2.insert(flags::ContextBits2::ANNUNA_VERTICAL_ROOM_GATE);
            }
            Item::Anuman => {
                self.cbits2.insert(flags::ContextBits2::ANUMAN);
                rules::action_indra_set_invoke_default(self, world);
            }
            Item::Apocalypse_Bomb => {
                self.cbits2.insert(flags::ContextBits2::APOCALYPSE_BOMB);
            }
            Item::Apocalypse_Seals_Wall => {
                self.cbits2.insert(flags::ContextBits2::APOCALYPSE_SEALS_WALL);
            }
            Item::Beware_the_Patternmind => {
                self.cbits2.insert(flags::ContextBits2::BEWARE_THE_PATTERNMIND);
            }
            Item::Big_Flask => {
                self.big_flask += 1;
                rules::action_flasks_incr_2(self, world);
            }
            Item::Boomerang => {
                self.cbits2.insert(flags::ContextBits2::BOOMERANG);
            }
            Item::Boomerang_Upgrade => {
                self.cbits2.insert(flags::ContextBits2::BOOMERANG_UPGRADE);
            }
            Item::Breach_Attractor => {
                self.cbits2.insert(flags::ContextBits2::BREACH_ATTRACTOR);
            }
            Item::Breach_Sight => {
                self.cbits2.insert(flags::ContextBits2::BREACH_SIGHT);
            }
            Item::Bronze_Axe => {
                self.cbits2.insert(flags::ContextBits2::BRONZE_AXE);
            }
            Item::Building_of_the_School => {
                self.cbits2.insert(flags::ContextBits2::BUILDING_OF_THE_SCHOOL);
            }
            Item::Carnelian_Ring => {
                self.cbits2.insert(flags::ContextBits2::CARNELIAN_RING);
            }
            Item::Commemorative_Speech => {
                self.cbits2.insert(flags::ContextBits2::COMMEMORATIVE_SPEECH);
            }
            Item::Companies_Layoff => {
                self.cbits2.insert(flags::ContextBits2::COMPANIES_LAYOFF);
            }
            Item::Compass => {
                self.cbits2.insert(flags::ContextBits2::COMPASS);
            }
            Item::Dangerous_Ideas => {
                self.cbits2.insert(flags::ContextBits2::DANGEROUS_IDEAS);
            }
            Item::Dear_Ernest => {
                self.cbits2.insert(flags::ContextBits2::DEAR_ERNEST);
            }
            Item::Defeat_Indra => {
                self.cbits2.insert(flags::ContextBits2::DEFEAT_INDRA);
            }
            Item::Defeat_MUS_A_M20 => {
                self.cbits2.insert(flags::ContextBits2::DEFEAT_MUS_A_M20);
                rules::action_invoke_visit__amagi_gt_west_lake_gt_cavern_refill_station_gt_break_wall_invoke_add_item__amagi_dragon_eye_passage(self, world);
            }
            Item::Destruction_Pogrom => {
                self.cbits2.insert(flags::ContextBits2::DESTRUCTION_POGROM);
            }
            Item::Double_Axe => {
                self.cbits2.insert(flags::ContextBits2::DOUBLE_AXE);
            }
            Item::Dr_Gloria => {
                self.cbits2.insert(flags::ContextBits2::DR_GLORIA);
            }
            Item::Drone_Hover => {
                self.cbits2.insert(flags::ContextBits2::DRONE_HOVER);
            }
            Item::Drone_Melee_Damage => {
                self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_DAMAGE);
            }
            Item::Drone_Melee_Damage_2 => {
                self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_DAMAGE_2);
            }
            Item::Drone_Melee_Speed => {
                self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_SPEED);
            }
            Item::Drone_Melee_Speed_2 => {
                self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_SPEED_2);
            }
            Item::Ebih_Alu => {
                self.cbits2.insert(flags::ContextBits2::EBIH_ALU);
            }
            Item::Ebih_Interchange_Block => {
                self.cbits2.insert(flags::ContextBits2::EBIH_INTERCHANGE_BLOCK);
            }
            Item::Ebih_Interchange_Gate => {
                self.cbits2.insert(flags::ContextBits2::EBIH_INTERCHANGE_GATE);
            }
            Item::Ebih_Walled_Off_Wall => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WALLED_OFF_WALL);
            }
            Item::Ebih_Wasteland_Door => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WASTELAND_DOOR);
            }
            Item::Ebih_Wasteland_Passage_H => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WASTELAND_PASSAGE_H);
            }
            Item::Ebih_Waterfall_Block_Left => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WATERFALL_BLOCK_LEFT);
            }
            Item::Ebih_Waterfall_Block_Right => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WATERFALL_BLOCK_RIGHT);
            }
            Item::Ebih_Waterfall_Wall => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WATERFALL_WALL);
            }
            Item::Ebih_West_Block => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WEST_BLOCK);
            }
            Item::Escape => {
                self.cbits2.insert(flags::ContextBits2::ESCAPE);
            }
            Item::Exit_Breach => {
                self.cbits2.insert(flags::ContextBits2::EXIT_BREACH);
            }
            Item::Eye_Ring => {
                self.cbits2.insert(flags::ContextBits2::EYE_RING);
            }
            Item::Family_Tragedy => {
                self.cbits2.insert(flags::ContextBits2::FAMILY_TRAGEDY);
            }
            Item::Fast_Travel => {
                self.cbits2.insert(flags::ContextBits2::FAST_TRAVEL);
            }
            Item::Flask => {
                self.flask += 1;
                rules::action_flasks_incr_1(self, world);
            }
            Item::Forbidden_Knowledge => {
                self.cbits2.insert(flags::ContextBits2::FORBIDDEN_KNOWLEDGE);
            }
            Item::Freedom_from_Aansur => {
                self.cbits2.insert(flags::ContextBits2::FREEDOM_FROM_AANSUR);
            }
            Item::Giguna_Boulder => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_BOULDER);
            }
            Item::Giguna_Dual_Path_Switch => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_DUAL_PATH_SWITCH);
            }
            Item::Giguna_Dual_Path_Wall => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_DUAL_PATH_WALL);
            }
            Item::Giguna_Gateway_Block => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_GATEWAY_BLOCK);
            }
            Item::Giguna_Gateway_Gate => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_GATEWAY_GATE);
            }
            Item::Giguna_Gubi => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_GUBI);
            }
            Item::Giguna_Northeast_Gate => {
                self.cbits3.insert(flags::ContextBits3::GIGUNA_NORTHEAST_GATE);
            }
            Item::Glacier_Big_Drop_Rock => {
                self.cbits3.insert(flags::ContextBits3::GLACIER_BIG_DROP_ROCK);
            }
            Item::Glacier_Sea_Burial_Rock => {
                self.cbits3.insert(flags::ContextBits3::GLACIER_SEA_BURIAL_ROCK);
            }
            Item::Goodbye => {
                self.cbits3.insert(flags::ContextBits3::GOODBYE);
            }
            Item::Hammond_Auth => {
                self.cbits3.insert(flags::ContextBits3::HAMMOND_AUTH);
            }
            Item::Health_Fragment => {
                self.health_fragment += 1;
                rules::action_invoke_refill_energy(self, world);
            }
            Item::Health_Node => {
                self.health_node += 1;
                rules::action_invoke_refill_energy(self, world);
            }
            Item::Health_Upgrade => {
                self.cbits3.insert(flags::ContextBits3::HEALTH_UPGRADE);
            }
            Item::Health_Upgrade_2 => {
                self.cbits3.insert(flags::ContextBits3::HEALTH_UPGRADE_2);
            }
            Item::Health_Upgrade_3 => {
                self.cbits3.insert(flags::ContextBits3::HEALTH_UPGRADE_3);
            }
            Item::Health_Upgrade_4 => {
                self.cbits3.insert(flags::ContextBits3::HEALTH_UPGRADE_4);
            }
            Item::Heretics_Granddaughter => {
                self.cbits3.insert(flags::ContextBits3::HERETICS_GRANDDAUGHTER);
            }
            Item::Heretics_Tablet => {
                self.cbits3.insert(flags::ContextBits3::HERETICS_TABLET);
            }
            Item::Ice_Axe => {
                self.cbits3.insert(flags::ContextBits3::ICE_AXE);
            }
            Item::Infect => {
                self.cbits3.insert(flags::ContextBits3::INFECT);
                rules::action_invoke_refill_energy(self, world);
            }
            Item::Infect_L1 => {
                self.cbits3.insert(flags::ContextBits3::INFECT_L1);
            }
            Item::Infect_L2 => {
                self.cbits3.insert(flags::ContextBits3::INFECT_L2);
            }
            Item::Infect_L3 => {
                self.cbits3.insert(flags::ContextBits3::INFECT_L3);
            }
            Item::Infection_Range => {
                self.cbits3.insert(flags::ContextBits3::INFECTION_RANGE);
            }
            Item::Infection_Range_2 => {
                self.cbits3.insert(flags::ContextBits3::INFECTION_RANGE_2);
            }
            Item::Infection_Range_3 => {
                self.cbits3.insert(flags::ContextBits3::INFECTION_RANGE_3);
            }
            Item::Infection_Speed => {
                self.cbits3.insert(flags::ContextBits3::INFECTION_SPEED);
            }
            Item::Irikar_Gudam => {
                self.cbits3.insert(flags::ContextBits3::IRIKAR_GUDAM);
            }
            Item::Irikar_Royal_Storage_Wall => {
                self.cbits3.insert(flags::ContextBits3::IRIKAR_ROYAL_STORAGE_WALL);
            }
            Item::Lament_for_Fools => {
                self.cbits3.insert(flags::ContextBits3::LAMENT_FOR_FOOLS);
            }
            Item::Ledge_Grab => {
                self.cbits3.insert(flags::ContextBits3::LEDGE_GRAB);
            }
            Item::Letter_from_Trace => {
                self.cbits3.insert(flags::ContextBits3::LETTER_FROM_TRACE);
            }
            Item::Melee_Damage => {
                self.cbits3.insert(flags::ContextBits3::MELEE_DAMAGE);
            }
            Item::Melee_Damage_2 => {
                self.cbits3.insert(flags::ContextBits3::MELEE_DAMAGE_2);
            }
            Item::Melee_Speed => {
                self.cbits3.insert(flags::ContextBits3::MELEE_SPEED);
            }
            Item::Melee_Speed_2 => {
                self.cbits3.insert(flags::ContextBits3::MELEE_SPEED_2);
            }
            Item::Mist_Upgrade => {
                self.cbits3.insert(flags::ContextBits3::MIST_UPGRADE);
            }
            Item::Nanite_Mist => {
                self.cbits3.insert(flags::ContextBits3::NANITE_MIST);
            }
            Item::Nano_Lattice_2 => {
                self.cbits3.insert(flags::ContextBits3::NANO_LATTICE_2);
            }
            Item::Nano_Points => {
                self.cbits3.insert(flags::ContextBits3::NANO_POINTS);
            }
            Item::Nano_Points_2 => {
                self.cbits3.insert(flags::ContextBits3::NANO_POINTS_2);
            }
            Item::Notes_2053_02_27 => {
                self.cbits3.insert(flags::ContextBits3::NOTES_2053_02_27);
            }
            Item::Plague_of_Thoughts => {
                self.cbits3.insert(flags::ContextBits3::PLAGUE_OF_THOUGHTS);
            }
            Item::Power_Matrix => {
                self.power_matrix += 1;
            }
            Item::Ranged_Damage => {
                self.cbits3.insert(flags::ContextBits3::RANGED_DAMAGE);
            }
            Item::Ranged_Damage_2 => {
                self.cbits3.insert(flags::ContextBits3::RANGED_DAMAGE_2);
            }
            Item::Ranged_Speed => {
                self.cbits3.insert(flags::ContextBits3::RANGED_SPEED);
            }
            Item::Ranged_Speed_2 => {
                self.cbits3.insert(flags::ContextBits3::RANGED_SPEED_2);
            }
            Item::Record_Losses => {
                self.cbits3.insert(flags::ContextBits3::RECORD_LOSSES);
            }
            Item::Remote_Boomerang => {
                self.cbits3.insert(flags::ContextBits3::REMOTE_BOOMERANG);
            }
            Item::Remote_Drone => {
                self.cbits3.insert(flags::ContextBits3::REMOTE_DRONE);
            }
            Item::Researchers_Missing => {
                self.cbits3.insert(flags::ContextBits3::RESEARCHERS_MISSING);
            }
            Item::Royal_Dagger => {
                self.cbits3.insert(flags::ContextBits3::ROYAL_DAGGER);
            }
            Item::Separation => {
                self.cbits3.insert(flags::ContextBits3::SEPARATION);
            }
            Item::Shockwave => {
                self.cbits3.insert(flags::ContextBits3::SHOCKWAVE);
            }
            Item::Siuna_Storage_Wall => {
                self.cbits3.insert(flags::ContextBits3::SIUNA_STORAGE_WALL);
            }
            Item::Slingshot_Charge => {
                self.cbits3.insert(flags::ContextBits3::SLINGSHOT_CHARGE);
            }
            Item::Slingshot_Hook => {
                self.cbits3.insert(flags::ContextBits3::SLINGSHOT_HOOK);
            }
            Item::Slingshot_Weapon => {
                self.cbits3.insert(flags::ContextBits3::SLINGSHOT_WEAPON);
            }
            Item::Sniper_Valley_Rock_1 => {
                self.cbits3.insert(flags::ContextBits3::SNIPER_VALLEY_ROCK_1);
            }
            Item::Sniper_Valley_Rock_2 => {
                self.cbits3.insert(flags::ContextBits3::SNIPER_VALLEY_ROCK_2);
            }
            Item::Station_Power => {
                self.cbits3.insert(flags::ContextBits3::STATION_POWER);
            }
            Item::Storm_Bomb => {
                self.cbits3.insert(flags::ContextBits3::STORM_BOMB);
            }
            Item::Suspension_Bridge => {
                self.cbits3.insert(flags::ContextBits3::SUSPENSION_BRIDGE);
            }
            Item::Switch_36_11 => {
                self.cbits3.insert(flags::ContextBits3::SWITCH_36_11);
            }
            Item::Switch_40_12 => {
                self.cbits3.insert(flags::ContextBits3::SWITCH_40_12);
            }
            Item::Terminal_Breakthrough_1 => {
                self.cbits3.insert(flags::ContextBits3::TERMINAL_BREAKTHROUGH_1);
            }
            Item::Terminal_Breakthrough_2 => {
                self.cbits3.insert(flags::ContextBits3::TERMINAL_BREAKTHROUGH_2);
            }
            Item::The_Eternal_Arm => {
                self.cbits3.insert(flags::ContextBits3::THE_ETERNAL_ARM);
            }
            Item::The_Ideal_Kiengir => {
                self.cbits3.insert(flags::ContextBits3::THE_IDEAL_KIENGIR);
            }
            Item::The_Student => {
                self.cbits3.insert(flags::ContextBits3::THE_STUDENT);
            }
            Item::Udusan => {
                self.cbits3.insert(flags::ContextBits3::UDUSAN);
            }
            Item::Uhrum_Annuna_Corridor_Block => {
                self.cbits4.insert(flags::ContextBits4::UHRUM_ANNUNA_CORRIDOR_BLOCK);
            }
            Item::Uhrum_Waterfall_Wall => {
                self.cbits4.insert(flags::ContextBits4::UHRUM_WATERFALL_WALL);
            }
            Item::Uhrum_Waterfalls_Block => {
                self.cbits4.insert(flags::ContextBits4::UHRUM_WATERFALLS_BLOCK);
            }
            Item::Uhrum_West_Entrance_Gate => {
                self.cbits4.insert(flags::ContextBits4::UHRUM_WEST_ENTRANCE_GATE);
            }
            Item::Uhrum_West_Entrance_Lower_Wall => {
                self.cbits4.insert(flags::ContextBits4::UHRUM_WEST_ENTRANCE_LOWER_WALL);
            }
            Item::Uhrum_West_Entrance_Upper_Wall => {
                self.cbits4.insert(flags::ContextBits4::UHRUM_WEST_ENTRANCE_UPPER_WALL);
            }
            Item::Under_Siege => {
                self.cbits4.insert(flags::ContextBits4::UNDER_SIEGE);
            }
            Item::Underwater_Movement => {
                self.cbits4.insert(flags::ContextBits4::UNDERWATER_MOVEMENT);
            }
            Item::Wall_Climb => {
                self.cbits4.insert(flags::ContextBits4::WALL_CLIMB);
            }
            Item::Power_Core => rules::action_refills_incr_1(self, world),
            Item::Amagi_Stronghold_Wall_And_Boulder_1 => rules::action_invoke_visit__amagi_gt_west_lake_gt_stronghold_ceiling_left_gt_knock_down_left_boulder_invoke_add_item__amagi_stronghold_wall_1_invoke_add_item__amagi_stronghold_boulder_1(self, world),
            Item::Amagi_Stronghold_Boulder_And_Wall_2 => rules::action_invoke_visit__amagi_gt_west_lake_gt_stronghold_ceiling_right_gt_knock_down_right_boulder_invoke_add_item__amagi_stronghold_wall_2_invoke_add_item__amagi_stronghold_boulder_2(self, world),
            Item::Ebih_Waterfall_Both_Blocks => rules::action_invoke_visit__ebih_gt_waterfall_gt_alcove_gt_block_left_invoke_visit__ebih_gt_waterfall_gt_alcove_gt_block_right_invoke_add_item__ebih_waterfall_block_right_invoke_add_item__ebih_waterfall_block_left(self, world),
            _ => (),
        }
    }

    // test helper for items
    fn add_item(&mut self, item: Item) {
        match item {
            Item::Amagi_Dragon_Eye_Passage => {
                self.cbits2
                    .insert(flags::ContextBits2::AMAGI_DRAGON_EYE_PASSAGE);
            }
            Item::Amagi_Stronghold_Boulder_1 => {
                self.cbits2
                    .insert(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_1);
            }
            Item::Amagi_Stronghold_Boulder_2 => {
                self.cbits2
                    .insert(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_2);
            }
            Item::Amagi_Stronghold_Wall_1 => {
                self.cbits2
                    .insert(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_1);
            }
            Item::Amagi_Stronghold_Wall_2 => {
                self.cbits2
                    .insert(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_2);
            }
            Item::Amagi_West_Lake_Surface_Wall => {
                self.cbits2
                    .insert(flags::ContextBits2::AMAGI_WEST_LAKE_SURFACE_WALL);
            }
            Item::Amashilama => {
                self.cbits2.insert(flags::ContextBits2::AMASHILAMA);
            }
            Item::Annuna_East_Bridge_Gate => {
                self.cbits2
                    .insert(flags::ContextBits2::ANNUNA_EAST_BRIDGE_GATE);
            }
            Item::Annuna_Mirror_Match_Switch => {
                self.cbits2
                    .insert(flags::ContextBits2::ANNUNA_MIRROR_MATCH_SWITCH);
            }
            Item::Annuna_Vertical_Room_Gate => {
                self.cbits2
                    .insert(flags::ContextBits2::ANNUNA_VERTICAL_ROOM_GATE);
            }
            Item::Anuman => {
                self.cbits2.insert(flags::ContextBits2::ANUMAN);
            }
            Item::Apocalypse_Bomb => {
                self.cbits2.insert(flags::ContextBits2::APOCALYPSE_BOMB);
            }
            Item::Apocalypse_Seals_Wall => {
                self.cbits2
                    .insert(flags::ContextBits2::APOCALYPSE_SEALS_WALL);
            }
            Item::Beware_the_Patternmind => {
                self.cbits2
                    .insert(flags::ContextBits2::BEWARE_THE_PATTERNMIND);
            }
            Item::Big_Flask => {
                self.big_flask += 1;
            }
            Item::Boomerang => {
                self.cbits2.insert(flags::ContextBits2::BOOMERANG);
            }
            Item::Boomerang_Upgrade => {
                self.cbits2.insert(flags::ContextBits2::BOOMERANG_UPGRADE);
            }
            Item::Breach_Attractor => {
                self.cbits2.insert(flags::ContextBits2::BREACH_ATTRACTOR);
            }
            Item::Breach_Sight => {
                self.cbits2.insert(flags::ContextBits2::BREACH_SIGHT);
            }
            Item::Bronze_Axe => {
                self.cbits2.insert(flags::ContextBits2::BRONZE_AXE);
            }
            Item::Building_of_the_School => {
                self.cbits2
                    .insert(flags::ContextBits2::BUILDING_OF_THE_SCHOOL);
            }
            Item::Carnelian_Ring => {
                self.cbits2.insert(flags::ContextBits2::CARNELIAN_RING);
            }
            Item::Commemorative_Speech => {
                self.cbits2
                    .insert(flags::ContextBits2::COMMEMORATIVE_SPEECH);
            }
            Item::Companies_Layoff => {
                self.cbits2.insert(flags::ContextBits2::COMPANIES_LAYOFF);
            }
            Item::Compass => {
                self.cbits2.insert(flags::ContextBits2::COMPASS);
            }
            Item::Dangerous_Ideas => {
                self.cbits2.insert(flags::ContextBits2::DANGEROUS_IDEAS);
            }
            Item::Dear_Ernest => {
                self.cbits2.insert(flags::ContextBits2::DEAR_ERNEST);
            }
            Item::Defeat_Indra => {
                self.cbits2.insert(flags::ContextBits2::DEFEAT_INDRA);
            }
            Item::Defeat_MUS_A_M20 => {
                self.cbits2.insert(flags::ContextBits2::DEFEAT_MUS_A_M20);
            }
            Item::Destruction_Pogrom => {
                self.cbits2.insert(flags::ContextBits2::DESTRUCTION_POGROM);
            }
            Item::Double_Axe => {
                self.cbits2.insert(flags::ContextBits2::DOUBLE_AXE);
            }
            Item::Dr_Gloria => {
                self.cbits2.insert(flags::ContextBits2::DR_GLORIA);
            }
            Item::Drone_Hover => {
                self.cbits2.insert(flags::ContextBits2::DRONE_HOVER);
            }
            Item::Drone_Melee_Damage => {
                self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_DAMAGE);
            }
            Item::Drone_Melee_Damage_2 => {
                self.cbits2
                    .insert(flags::ContextBits2::DRONE_MELEE_DAMAGE_2);
            }
            Item::Drone_Melee_Speed => {
                self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_SPEED);
            }
            Item::Drone_Melee_Speed_2 => {
                self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_SPEED_2);
            }
            Item::Ebih_Alu => {
                self.cbits2.insert(flags::ContextBits2::EBIH_ALU);
            }
            Item::Ebih_Interchange_Block => {
                self.cbits2
                    .insert(flags::ContextBits2::EBIH_INTERCHANGE_BLOCK);
            }
            Item::Ebih_Interchange_Gate => {
                self.cbits2
                    .insert(flags::ContextBits2::EBIH_INTERCHANGE_GATE);
            }
            Item::Ebih_Walled_Off_Wall => {
                self.cbits2
                    .insert(flags::ContextBits2::EBIH_WALLED_OFF_WALL);
            }
            Item::Ebih_Wasteland_Door => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WASTELAND_DOOR);
            }
            Item::Ebih_Wasteland_Passage_H => {
                self.cbits2
                    .insert(flags::ContextBits2::EBIH_WASTELAND_PASSAGE_H);
            }
            Item::Ebih_Waterfall_Block_Left => {
                self.cbits2
                    .insert(flags::ContextBits2::EBIH_WATERFALL_BLOCK_LEFT);
            }
            Item::Ebih_Waterfall_Block_Right => {
                self.cbits2
                    .insert(flags::ContextBits2::EBIH_WATERFALL_BLOCK_RIGHT);
            }
            Item::Ebih_Waterfall_Wall => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WATERFALL_WALL);
            }
            Item::Ebih_West_Block => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WEST_BLOCK);
            }
            Item::Escape => {
                self.cbits2.insert(flags::ContextBits2::ESCAPE);
            }
            Item::Exit_Breach => {
                self.cbits2.insert(flags::ContextBits2::EXIT_BREACH);
            }
            Item::Eye_Ring => {
                self.cbits2.insert(flags::ContextBits2::EYE_RING);
            }
            Item::Family_Tragedy => {
                self.cbits2.insert(flags::ContextBits2::FAMILY_TRAGEDY);
            }
            Item::Fast_Travel => {
                self.cbits2.insert(flags::ContextBits2::FAST_TRAVEL);
            }
            Item::Flask => {
                self.flask += 1;
            }
            Item::Forbidden_Knowledge => {
                self.cbits2.insert(flags::ContextBits2::FORBIDDEN_KNOWLEDGE);
            }
            Item::Freedom_from_Aansur => {
                self.cbits2.insert(flags::ContextBits2::FREEDOM_FROM_AANSUR);
            }
            Item::Giguna_Boulder => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_BOULDER);
            }
            Item::Giguna_Dual_Path_Switch => {
                self.cbits2
                    .insert(flags::ContextBits2::GIGUNA_DUAL_PATH_SWITCH);
            }
            Item::Giguna_Dual_Path_Wall => {
                self.cbits2
                    .insert(flags::ContextBits2::GIGUNA_DUAL_PATH_WALL);
            }
            Item::Giguna_Gateway_Block => {
                self.cbits2
                    .insert(flags::ContextBits2::GIGUNA_GATEWAY_BLOCK);
            }
            Item::Giguna_Gateway_Gate => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_GATEWAY_GATE);
            }
            Item::Giguna_Gubi => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_GUBI);
            }
            Item::Giguna_Northeast_Gate => {
                self.cbits3
                    .insert(flags::ContextBits3::GIGUNA_NORTHEAST_GATE);
            }
            Item::Glacier_Big_Drop_Rock => {
                self.cbits3
                    .insert(flags::ContextBits3::GLACIER_BIG_DROP_ROCK);
            }
            Item::Glacier_Sea_Burial_Rock => {
                self.cbits3
                    .insert(flags::ContextBits3::GLACIER_SEA_BURIAL_ROCK);
            }
            Item::Goodbye => {
                self.cbits3.insert(flags::ContextBits3::GOODBYE);
            }
            Item::Hammond_Auth => {
                self.cbits3.insert(flags::ContextBits3::HAMMOND_AUTH);
            }
            Item::Health_Fragment => {
                self.health_fragment += 1;
            }
            Item::Health_Node => {
                self.health_node += 1;
            }
            Item::Health_Upgrade => {
                self.cbits3.insert(flags::ContextBits3::HEALTH_UPGRADE);
            }
            Item::Health_Upgrade_2 => {
                self.cbits3.insert(flags::ContextBits3::HEALTH_UPGRADE_2);
            }
            Item::Health_Upgrade_3 => {
                self.cbits3.insert(flags::ContextBits3::HEALTH_UPGRADE_3);
            }
            Item::Health_Upgrade_4 => {
                self.cbits3.insert(flags::ContextBits3::HEALTH_UPGRADE_4);
            }
            Item::Heretics_Granddaughter => {
                self.cbits3
                    .insert(flags::ContextBits3::HERETICS_GRANDDAUGHTER);
            }
            Item::Heretics_Tablet => {
                self.cbits3.insert(flags::ContextBits3::HERETICS_TABLET);
            }
            Item::Ice_Axe => {
                self.cbits3.insert(flags::ContextBits3::ICE_AXE);
            }
            Item::Infect => {
                self.cbits3.insert(flags::ContextBits3::INFECT);
            }
            Item::Infect_L1 => {
                self.cbits3.insert(flags::ContextBits3::INFECT_L1);
            }
            Item::Infect_L2 => {
                self.cbits3.insert(flags::ContextBits3::INFECT_L2);
            }
            Item::Infect_L3 => {
                self.cbits3.insert(flags::ContextBits3::INFECT_L3);
            }
            Item::Infection_Range => {
                self.cbits3.insert(flags::ContextBits3::INFECTION_RANGE);
            }
            Item::Infection_Range_2 => {
                self.cbits3.insert(flags::ContextBits3::INFECTION_RANGE_2);
            }
            Item::Infection_Range_3 => {
                self.cbits3.insert(flags::ContextBits3::INFECTION_RANGE_3);
            }
            Item::Infection_Speed => {
                self.cbits3.insert(flags::ContextBits3::INFECTION_SPEED);
            }
            Item::Irikar_Gudam => {
                self.cbits3.insert(flags::ContextBits3::IRIKAR_GUDAM);
            }
            Item::Irikar_Royal_Storage_Wall => {
                self.cbits3
                    .insert(flags::ContextBits3::IRIKAR_ROYAL_STORAGE_WALL);
            }
            Item::Lament_for_Fools => {
                self.cbits3.insert(flags::ContextBits3::LAMENT_FOR_FOOLS);
            }
            Item::Ledge_Grab => {
                self.cbits3.insert(flags::ContextBits3::LEDGE_GRAB);
            }
            Item::Letter_from_Trace => {
                self.cbits3.insert(flags::ContextBits3::LETTER_FROM_TRACE);
            }
            Item::Melee_Damage => {
                self.cbits3.insert(flags::ContextBits3::MELEE_DAMAGE);
            }
            Item::Melee_Damage_2 => {
                self.cbits3.insert(flags::ContextBits3::MELEE_DAMAGE_2);
            }
            Item::Melee_Speed => {
                self.cbits3.insert(flags::ContextBits3::MELEE_SPEED);
            }
            Item::Melee_Speed_2 => {
                self.cbits3.insert(flags::ContextBits3::MELEE_SPEED_2);
            }
            Item::Mist_Upgrade => {
                self.cbits3.insert(flags::ContextBits3::MIST_UPGRADE);
            }
            Item::Nanite_Mist => {
                self.cbits3.insert(flags::ContextBits3::NANITE_MIST);
            }
            Item::Nano_Lattice_2 => {
                self.cbits3.insert(flags::ContextBits3::NANO_LATTICE_2);
            }
            Item::Nano_Points => {
                self.cbits3.insert(flags::ContextBits3::NANO_POINTS);
            }
            Item::Nano_Points_2 => {
                self.cbits3.insert(flags::ContextBits3::NANO_POINTS_2);
            }
            Item::Notes_2053_02_27 => {
                self.cbits3.insert(flags::ContextBits3::NOTES_2053_02_27);
            }
            Item::Plague_of_Thoughts => {
                self.cbits3.insert(flags::ContextBits3::PLAGUE_OF_THOUGHTS);
            }
            Item::Power_Matrix => {
                self.power_matrix += 1;
            }
            Item::Ranged_Damage => {
                self.cbits3.insert(flags::ContextBits3::RANGED_DAMAGE);
            }
            Item::Ranged_Damage_2 => {
                self.cbits3.insert(flags::ContextBits3::RANGED_DAMAGE_2);
            }
            Item::Ranged_Speed => {
                self.cbits3.insert(flags::ContextBits3::RANGED_SPEED);
            }
            Item::Ranged_Speed_2 => {
                self.cbits3.insert(flags::ContextBits3::RANGED_SPEED_2);
            }
            Item::Record_Losses => {
                self.cbits3.insert(flags::ContextBits3::RECORD_LOSSES);
            }
            Item::Remote_Boomerang => {
                self.cbits3.insert(flags::ContextBits3::REMOTE_BOOMERANG);
            }
            Item::Remote_Drone => {
                self.cbits3.insert(flags::ContextBits3::REMOTE_DRONE);
            }
            Item::Researchers_Missing => {
                self.cbits3.insert(flags::ContextBits3::RESEARCHERS_MISSING);
            }
            Item::Royal_Dagger => {
                self.cbits3.insert(flags::ContextBits3::ROYAL_DAGGER);
            }
            Item::Separation => {
                self.cbits3.insert(flags::ContextBits3::SEPARATION);
            }
            Item::Shockwave => {
                self.cbits3.insert(flags::ContextBits3::SHOCKWAVE);
            }
            Item::Siuna_Storage_Wall => {
                self.cbits3.insert(flags::ContextBits3::SIUNA_STORAGE_WALL);
            }
            Item::Slingshot_Charge => {
                self.cbits3.insert(flags::ContextBits3::SLINGSHOT_CHARGE);
            }
            Item::Slingshot_Hook => {
                self.cbits3.insert(flags::ContextBits3::SLINGSHOT_HOOK);
            }
            Item::Slingshot_Weapon => {
                self.cbits3.insert(flags::ContextBits3::SLINGSHOT_WEAPON);
            }
            Item::Sniper_Valley_Rock_1 => {
                self.cbits3
                    .insert(flags::ContextBits3::SNIPER_VALLEY_ROCK_1);
            }
            Item::Sniper_Valley_Rock_2 => {
                self.cbits3
                    .insert(flags::ContextBits3::SNIPER_VALLEY_ROCK_2);
            }
            Item::Station_Power => {
                self.cbits3.insert(flags::ContextBits3::STATION_POWER);
            }
            Item::Storm_Bomb => {
                self.cbits3.insert(flags::ContextBits3::STORM_BOMB);
            }
            Item::Suspension_Bridge => {
                self.cbits3.insert(flags::ContextBits3::SUSPENSION_BRIDGE);
            }
            Item::Switch_36_11 => {
                self.cbits3.insert(flags::ContextBits3::SWITCH_36_11);
            }
            Item::Switch_40_12 => {
                self.cbits3.insert(flags::ContextBits3::SWITCH_40_12);
            }
            Item::Terminal_Breakthrough_1 => {
                self.cbits3
                    .insert(flags::ContextBits3::TERMINAL_BREAKTHROUGH_1);
            }
            Item::Terminal_Breakthrough_2 => {
                self.cbits3
                    .insert(flags::ContextBits3::TERMINAL_BREAKTHROUGH_2);
            }
            Item::The_Eternal_Arm => {
                self.cbits3.insert(flags::ContextBits3::THE_ETERNAL_ARM);
            }
            Item::The_Ideal_Kiengir => {
                self.cbits3.insert(flags::ContextBits3::THE_IDEAL_KIENGIR);
            }
            Item::The_Student => {
                self.cbits3.insert(flags::ContextBits3::THE_STUDENT);
            }
            Item::Udusan => {
                self.cbits3.insert(flags::ContextBits3::UDUSAN);
            }
            Item::Uhrum_Annuna_Corridor_Block => {
                self.cbits4
                    .insert(flags::ContextBits4::UHRUM_ANNUNA_CORRIDOR_BLOCK);
            }
            Item::Uhrum_Waterfall_Wall => {
                self.cbits4
                    .insert(flags::ContextBits4::UHRUM_WATERFALL_WALL);
            }
            Item::Uhrum_Waterfalls_Block => {
                self.cbits4
                    .insert(flags::ContextBits4::UHRUM_WATERFALLS_BLOCK);
            }
            Item::Uhrum_West_Entrance_Gate => {
                self.cbits4
                    .insert(flags::ContextBits4::UHRUM_WEST_ENTRANCE_GATE);
            }
            Item::Uhrum_West_Entrance_Lower_Wall => {
                self.cbits4
                    .insert(flags::ContextBits4::UHRUM_WEST_ENTRANCE_LOWER_WALL);
            }
            Item::Uhrum_West_Entrance_Upper_Wall => {
                self.cbits4
                    .insert(flags::ContextBits4::UHRUM_WEST_ENTRANCE_UPPER_WALL);
            }
            Item::Under_Siege => {
                self.cbits4.insert(flags::ContextBits4::UNDER_SIEGE);
            }
            Item::Underwater_Movement => {
                self.cbits4.insert(flags::ContextBits4::UNDERWATER_MOVEMENT);
            }
            Item::Wall_Climb => {
                self.cbits4.insert(flags::ContextBits4::WALL_CLIMB);
            }
            _ => (),
        }
    }

    // test helper for context vars
    fn parse_set_context(&mut self, ckey: &str, cval: &Yaml) -> Result<(), String> {
        match (ckey, cval) {
            ("position", Yaml::String(s)) => {
                self.set_position_raw(SpotId::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("position", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("energy", Yaml::Integer(i)) => {
                self.set_energy(i16::try_from(*i).map_err(|e| format!("{}", e))?)
            }
            ("energy", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("flasks", Yaml::Integer(i)) => {
                self.set_flasks(i8::try_from(*i).map_err(|e| format!("{}", e))?)
            }
            ("flasks", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("refills", Yaml::Integer(i)) => {
                self.set_refills(i8::try_from(*i).map_err(|e| format!("{}", e))?)
            }
            ("refills", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("mode", Yaml::String(s)) => {
                self.set_mode(enums::Mode::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("mode", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("save", Yaml::String(s)) => {
                self.set_save(SpotId::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("breach_save", Yaml::String(s)) => {
                self.set_breach_save(SpotId::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("breach_save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("indra", Yaml::String(s)) => {
                self.set_indra(SpotId::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("indra", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("last", Yaml::String(s)) => {
                self.set_last(SpotId::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("last", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("portal", Yaml::String(s)) => {
                self.set_portal(SpotId::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("portal", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("prev_portal", Yaml::String(s)) => {
                self.set_prev_portal(SpotId::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("prev_portal", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("prev_area", Yaml::String(s)) => {
                self.set_prev_area(AreaId::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("prev_area", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__amagi_breach__east_entrance__save", Yaml::Boolean(b)) => {
                self.set_map__amagi_breach__east_entrance__save(*b)
            }
            ("map__amagi_breach__east_entrance__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__amagi__main_area__save", Yaml::Boolean(b)) => {
                self.set_map__amagi__main_area__save(*b)
            }
            ("map__amagi__main_area__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__amagi__east_lake__save", Yaml::Boolean(b)) => {
                self.set_map__amagi__east_lake__save(*b)
            }
            ("map__amagi__east_lake__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__annuna__mirror_match__save", Yaml::Boolean(b)) => {
                self.set_map__annuna__mirror_match__save(*b)
            }
            ("map__annuna__mirror_match__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__annuna__vertical_room__save", Yaml::Boolean(b)) => {
                self.set_map__annuna__vertical_room__save(*b)
            }
            ("map__annuna__vertical_room__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__annuna__factory_entrance__save", Yaml::Boolean(b)) => {
                self.set_map__annuna__factory_entrance__save(*b)
            }
            ("map__annuna__factory_entrance__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__annuna__upper_save__save", Yaml::Boolean(b)) => {
                self.set_map__annuna__upper_save__save(*b)
            }
            ("map__annuna__upper_save__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__annuna__center_save__save", Yaml::Boolean(b)) => {
                self.set_map__annuna__center_save__save(*b)
            }
            ("map__annuna__center_save__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__ebih__base_camp__save", Yaml::Boolean(b)) => {
                self.set_map__ebih__base_camp__save(*b)
            }
            ("map__ebih__base_camp__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__ebih__ebih_west__mid_save", Yaml::Boolean(b)) => {
                self.set_map__ebih__ebih_west__mid_save(*b)
            }
            ("map__ebih__ebih_west__mid_save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__ebih__ebih_west__upper_save", Yaml::Boolean(b)) => {
                self.set_map__ebih__ebih_west__upper_save(*b)
            }
            ("map__ebih__ebih_west__upper_save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__ebih__ebih_west__lower_save", Yaml::Boolean(b)) => {
                self.set_map__ebih__ebih_west__lower_save(*b)
            }
            ("map__ebih__ebih_west__lower_save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__giguna_breach__peak__save", Yaml::Boolean(b)) => {
                self.set_map__giguna_breach__peak__save(*b)
            }
            ("map__giguna_breach__peak__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__giguna_breach__sw_save__save", Yaml::Boolean(b)) => {
                self.set_map__giguna_breach__sw_save__save(*b)
            }
            ("map__giguna_breach__sw_save__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__giguna__giguna_northeast__save", Yaml::Boolean(b)) => {
                self.set_map__giguna__giguna_northeast__save(*b)
            }
            ("map__giguna__giguna_northeast__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__giguna__giguna_base__save", Yaml::Boolean(b)) => {
                self.set_map__giguna__giguna_base__save(*b)
            }
            ("map__giguna__giguna_base__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__giguna__ruins_west__save", Yaml::Boolean(b)) => {
                self.set_map__giguna__ruins_west__save(*b)
            }
            ("map__giguna__ruins_west__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__giguna__ruins_top__save", Yaml::Boolean(b)) => {
                self.set_map__giguna__ruins_top__save(*b)
            }
            ("map__giguna__ruins_top__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__glacier_breach__south_save__save", Yaml::Boolean(b)) => {
                self.set_map__glacier_breach__south_save__save(*b)
            }
            ("map__glacier_breach__south_save__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__glacier_breach__west_save__save", Yaml::Boolean(b)) => {
                self.set_map__glacier_breach__west_save__save(*b)
            }
            ("map__glacier_breach__west_save__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__glacier_breach__guarded_corridor__save", Yaml::Boolean(b)) => {
                self.set_map__glacier_breach__guarded_corridor__save(*b)
            }
            ("map__glacier_breach__guarded_corridor__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__glacier_breach__save_and_exit__save", Yaml::Boolean(b)) => {
                self.set_map__glacier_breach__save_and_exit__save(*b)
            }
            ("map__glacier_breach__save_and_exit__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__glacier_breach__hammonds_breach__save", Yaml::Boolean(b)) => {
                self.set_map__glacier_breach__hammonds_breach__save(*b)
            }
            ("map__glacier_breach__hammonds_breach__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__glacier__revival__save", Yaml::Boolean(b)) => {
                self.set_map__glacier__revival__save(*b)
            }
            ("map__glacier__revival__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__irikar_breach__save_room__save", Yaml::Boolean(b)) => {
                self.set_map__irikar_breach__save_room__save(*b)
            }
            ("map__irikar_breach__save_room__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__irikar_breach__gauntlet__save", Yaml::Boolean(b)) => {
                self.set_map__irikar_breach__gauntlet__save(*b)
            }
            ("map__irikar_breach__gauntlet__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__irikar__hub__save", Yaml::Boolean(b)) => self.set_map__irikar__hub__save(*b),
            ("map__irikar__hub__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__irikar__midwest__save", Yaml::Boolean(b)) => {
                self.set_map__irikar__midwest__save(*b)
            }
            ("map__irikar__midwest__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__irikar__beach_save__save", Yaml::Boolean(b)) => {
                self.set_map__irikar__beach_save__save(*b)
            }
            ("map__irikar__beach_save__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__uhrum__west_entrance__save", Yaml::Boolean(b)) => {
                self.set_map__uhrum__west_entrance__save(*b)
            }
            ("map__uhrum__west_entrance__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__uhrum__save_room__save", Yaml::Boolean(b)) => {
                self.set_map__uhrum__save_room__save(*b)
            }
            ("map__uhrum__save_room__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__uhrum__annuna_corridor__save", Yaml::Boolean(b)) => {
                self.set_map__uhrum__annuna_corridor__save(*b)
            }
            ("map__uhrum__annuna_corridor__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("glacier__ctx__hammonds_doors", Yaml::Boolean(b)) => {
                self.set_glacier__ctx__hammonds_doors(*b)
            }
            ("glacier__ctx__hammonds_doors", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("amagi__main_area__ctx__combo", Yaml::Boolean(b)) => {
                self.set_amagi__main_area__ctx__combo(*b)
            }
            ("amagi__main_area__ctx__combo", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("annuna__west_bridge__ctx__doors_opened", Yaml::Boolean(b)) => {
                self.set_annuna__west_bridge__ctx__doors_opened(*b)
            }
            ("annuna__west_bridge__ctx__doors_opened", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("annuna__east_bridge__ctx__combo", Yaml::Boolean(b)) => {
                self.set_annuna__east_bridge__ctx__combo(*b)
            }
            ("annuna__east_bridge__ctx__combo", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("annuna__vertical_room__ctx__door_opened", Yaml::Boolean(b)) => {
                self.set_annuna__vertical_room__ctx__door_opened(*b)
            }
            ("annuna__vertical_room__ctx__door_opened", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("annuna__west_climb__ctx__door_opened", Yaml::Boolean(b)) => {
                self.set_annuna__west_climb__ctx__door_opened(*b)
            }
            ("annuna__west_climb__ctx__door_opened", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__base_camp__ctx__left_platform_moved", Yaml::Boolean(b)) => {
                self.set_ebih__base_camp__ctx__left_platform_moved(*b)
            }
            ("ebih__base_camp__ctx__left_platform_moved", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__truck_gate__ctx__door_open", Yaml::Boolean(b)) => {
                self.set_ebih__truck_gate__ctx__door_open(*b)
            }
            ("ebih__truck_gate__ctx__door_open", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__grid_25_10_12__ctx__door_open", Yaml::Boolean(b)) => {
                self.set_ebih__grid_25_10_12__ctx__door_open(*b)
            }
            ("ebih__grid_25_10_12__ctx__door_open", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__waterfall__ctx__west_door_open", Yaml::Boolean(b)) => {
                self.set_ebih__waterfall__ctx__west_door_open(*b)
            }
            ("ebih__waterfall__ctx__west_door_open", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__ebih_west__ctx__door_open", Yaml::Boolean(b)) => {
                self.set_ebih__ebih_west__ctx__door_open(*b)
            }
            ("ebih__ebih_west__ctx__door_open", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__ebih_east__ctx__platform1_moved", Yaml::Boolean(b)) => {
                self.set_ebih__ebih_east__ctx__platform1_moved(*b)
            }
            ("ebih__ebih_east__ctx__platform1_moved", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__ebih_east__ctx__platform2_moved", Yaml::Boolean(b)) => {
                self.set_ebih__ebih_east__ctx__platform2_moved(*b)
            }
            ("ebih__ebih_east__ctx__platform2_moved", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__drone_room__ctx__platform_moved", Yaml::Boolean(b)) => {
                self.set_ebih__drone_room__ctx__platform_moved(*b)
            }
            ("ebih__drone_room__ctx__platform_moved", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__vertical_interchange__ctx__door_open", Yaml::Boolean(b)) => {
                self.set_ebih__vertical_interchange__ctx__door_open(*b)
            }
            ("ebih__vertical_interchange__ctx__door_open", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna_breach__sw_save__ctx__door_opened", Yaml::Boolean(b)) => {
                self.set_giguna_breach__sw_save__ctx__door_opened(*b)
            }
            ("giguna_breach__sw_save__ctx__door_opened", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__giguna_northeast__ctx__door_opened", Yaml::Boolean(b)) => {
                self.set_giguna__giguna_northeast__ctx__door_opened(*b)
            }
            ("giguna__giguna_northeast__ctx__door_opened", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__carnelian__ctx__door_opened", Yaml::Boolean(b)) => {
                self.set_giguna__carnelian__ctx__door_opened(*b)
            }
            ("giguna__carnelian__ctx__door_opened", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__carnelian__ctx__upper_susar", Yaml::Boolean(b)) => {
                self.set_giguna__carnelian__ctx__upper_susar(*b)
            }
            ("giguna__carnelian__ctx__upper_susar", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__carnelian__ctx__lower_susar", Yaml::Boolean(b)) => {
                self.set_giguna__carnelian__ctx__lower_susar(*b)
            }
            ("giguna__carnelian__ctx__lower_susar", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__west_caverns__ctx__east_susar", Yaml::Boolean(b)) => {
                self.set_giguna__west_caverns__ctx__east_susar(*b)
            }
            ("giguna__west_caverns__ctx__east_susar", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__giguna_base__ctx__door_open", Yaml::Boolean(b)) => {
                self.set_giguna__giguna_base__ctx__door_open(*b)
            }
            ("giguna__giguna_base__ctx__door_open", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__ruins_west__ctx__kishib_handled", Yaml::Boolean(b)) => {
                self.set_giguna__ruins_west__ctx__kishib_handled(*b)
            }
            ("giguna__ruins_west__ctx__kishib_handled", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__ruins_top__ctx__doors_open", Yaml::Boolean(b)) => {
                self.set_giguna__ruins_top__ctx__doors_open(*b)
            }
            ("giguna__ruins_top__ctx__doors_open", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__clouds__ctx__platform", Yaml::Boolean(b)) => {
                self.set_giguna__clouds__ctx__platform(*b)
            }
            ("giguna__clouds__ctx__platform", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__east_caverns__ctx__door_opened", Yaml::Boolean(b)) => {
                self.set_giguna__east_caverns__ctx__door_opened(*b)
            }
            ("giguna__east_caverns__ctx__door_opened", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__east_caverns__ctx__combo_entered", Yaml::Boolean(b)) => {
                self.set_giguna__east_caverns__ctx__combo_entered(*b)
            }
            ("giguna__east_caverns__ctx__combo_entered", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__east_caverns__ctx__upper_susar", Yaml::Boolean(b)) => {
                self.set_giguna__east_caverns__ctx__upper_susar(*b)
            }
            ("giguna__east_caverns__ctx__upper_susar", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__east_caverns__ctx__mid_susar", Yaml::Boolean(b)) => {
                self.set_giguna__east_caverns__ctx__mid_susar(*b)
            }
            ("giguna__east_caverns__ctx__mid_susar", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__east_caverns__ctx__lower_susar", Yaml::Boolean(b)) => {
                self.set_giguna__east_caverns__ctx__lower_susar(*b)
            }
            ("giguna__east_caverns__ctx__lower_susar", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__gateway__ctx__door_opened", Yaml::Boolean(b)) => {
                self.set_giguna__gateway__ctx__door_opened(*b)
            }
            ("giguna__gateway__ctx__door_opened", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("glacier__the_big_drop__ctx__bridge_open", Yaml::Boolean(b)) => {
                self.set_glacier__the_big_drop__ctx__bridge_open(*b)
            }
            ("glacier__the_big_drop__ctx__bridge_open", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("glacier__vertical_room__ctx__upper_gatestone", Yaml::Boolean(b)) => {
                self.set_glacier__vertical_room__ctx__upper_gatestone(*b)
            }
            ("glacier__vertical_room__ctx__upper_gatestone", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("glacier__vertical_room__ctx__lower_gatestones", Yaml::Boolean(b)) => {
                self.set_glacier__vertical_room__ctx__lower_gatestones(*b)
            }
            ("glacier__vertical_room__ctx__lower_gatestones", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("irikar__basement_portal__ctx__platform_moved", Yaml::Boolean(b)) => {
                self.set_irikar__basement_portal__ctx__platform_moved(*b)
            }
            ("irikar__basement_portal__ctx__platform_moved", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("irikar__midwest__ctx__left_platform", Yaml::Boolean(b)) => {
                self.set_irikar__midwest__ctx__left_platform(*b)
            }
            ("irikar__midwest__ctx__left_platform", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("irikar__midwest__ctx__right_platform", Yaml::Boolean(b)) => {
                self.set_irikar__midwest__ctx__right_platform(*b)
            }
            ("irikar__midwest__ctx__right_platform", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            _ => {
                return Err(format!("Unrecognized context key: {:?}", ckey));
            }
        }
        Ok(())
    }

    fn parse_expect_context(ckey: &str, cval: &Yaml) -> Result<Expectation, String> {
        Ok(match (ckey, cval) {
            ("position", Yaml::String(s)) => {
                Expectation::Position(SpotId::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("position", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("energy", Yaml::Integer(i)) => {
                Expectation::Energy(i16::try_from(*i).map_err(|e| format!("{}", e))?)
            }
            ("energy", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("flasks", Yaml::Integer(i)) => {
                Expectation::Flasks(i8::try_from(*i).map_err(|e| format!("{}", e))?)
            }
            ("flasks", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("refills", Yaml::Integer(i)) => {
                Expectation::Refills(i8::try_from(*i).map_err(|e| format!("{}", e))?)
            }
            ("refills", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("mode", Yaml::String(s)) => {
                Expectation::Mode(enums::Mode::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("mode", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("save", Yaml::String(s)) => {
                Expectation::Save(SpotId::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("breach_save", Yaml::String(s)) => {
                Expectation::BreachSave(SpotId::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("breach_save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("indra", Yaml::String(s)) => {
                Expectation::Indra(SpotId::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("indra", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("last", Yaml::String(s)) => {
                Expectation::Last(SpotId::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("last", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("portal", Yaml::String(s)) => {
                Expectation::Portal(SpotId::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("portal", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("prev_portal", Yaml::String(s)) => {
                Expectation::PrevPortal(SpotId::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("prev_portal", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("prev_area", Yaml::String(s)) => {
                Expectation::PrevArea(AreaId::from_str(s).map_err(|e| format!("{}", e))?)
            }
            ("prev_area", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__amagi_breach__east_entrance__save", Yaml::Boolean(b)) => {
                Expectation::MapAmagiBreachEastEntranceSave(*b)
            }
            ("map__amagi_breach__east_entrance__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__amagi__main_area__save", Yaml::Boolean(b)) => {
                Expectation::MapAmagiMainAreaSave(*b)
            }
            ("map__amagi__main_area__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__amagi__east_lake__save", Yaml::Boolean(b)) => {
                Expectation::MapAmagiEastLakeSave(*b)
            }
            ("map__amagi__east_lake__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__annuna__mirror_match__save", Yaml::Boolean(b)) => {
                Expectation::MapAnnunaMirrorMatchSave(*b)
            }
            ("map__annuna__mirror_match__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__annuna__vertical_room__save", Yaml::Boolean(b)) => {
                Expectation::MapAnnunaVerticalRoomSave(*b)
            }
            ("map__annuna__vertical_room__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__annuna__factory_entrance__save", Yaml::Boolean(b)) => {
                Expectation::MapAnnunaFactoryEntranceSave(*b)
            }
            ("map__annuna__factory_entrance__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__annuna__upper_save__save", Yaml::Boolean(b)) => {
                Expectation::MapAnnunaUpperSaveSave(*b)
            }
            ("map__annuna__upper_save__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__annuna__center_save__save", Yaml::Boolean(b)) => {
                Expectation::MapAnnunaCenterSaveSave(*b)
            }
            ("map__annuna__center_save__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__ebih__base_camp__save", Yaml::Boolean(b)) => {
                Expectation::MapEbihBaseCampSave(*b)
            }
            ("map__ebih__base_camp__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__ebih__ebih_west__mid_save", Yaml::Boolean(b)) => {
                Expectation::MapEbihEbihWestMidSave(*b)
            }
            ("map__ebih__ebih_west__mid_save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__ebih__ebih_west__upper_save", Yaml::Boolean(b)) => {
                Expectation::MapEbihEbihWestUpperSave(*b)
            }
            ("map__ebih__ebih_west__upper_save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__ebih__ebih_west__lower_save", Yaml::Boolean(b)) => {
                Expectation::MapEbihEbihWestLowerSave(*b)
            }
            ("map__ebih__ebih_west__lower_save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__giguna_breach__peak__save", Yaml::Boolean(b)) => {
                Expectation::MapGigunaBreachPeakSave(*b)
            }
            ("map__giguna_breach__peak__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__giguna_breach__sw_save__save", Yaml::Boolean(b)) => {
                Expectation::MapGigunaBreachSwSaveSave(*b)
            }
            ("map__giguna_breach__sw_save__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__giguna__giguna_northeast__save", Yaml::Boolean(b)) => {
                Expectation::MapGigunaGigunaNortheastSave(*b)
            }
            ("map__giguna__giguna_northeast__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__giguna__giguna_base__save", Yaml::Boolean(b)) => {
                Expectation::MapGigunaGigunaBaseSave(*b)
            }
            ("map__giguna__giguna_base__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__giguna__ruins_west__save", Yaml::Boolean(b)) => {
                Expectation::MapGigunaRuinsWestSave(*b)
            }
            ("map__giguna__ruins_west__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__giguna__ruins_top__save", Yaml::Boolean(b)) => {
                Expectation::MapGigunaRuinsTopSave(*b)
            }
            ("map__giguna__ruins_top__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__glacier_breach__south_save__save", Yaml::Boolean(b)) => {
                Expectation::MapGlacierBreachSouthSaveSave(*b)
            }
            ("map__glacier_breach__south_save__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__glacier_breach__west_save__save", Yaml::Boolean(b)) => {
                Expectation::MapGlacierBreachWestSaveSave(*b)
            }
            ("map__glacier_breach__west_save__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__glacier_breach__guarded_corridor__save", Yaml::Boolean(b)) => {
                Expectation::MapGlacierBreachGuardedCorridorSave(*b)
            }
            ("map__glacier_breach__guarded_corridor__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__glacier_breach__save_and_exit__save", Yaml::Boolean(b)) => {
                Expectation::MapGlacierBreachSaveAndExitSave(*b)
            }
            ("map__glacier_breach__save_and_exit__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__glacier_breach__hammonds_breach__save", Yaml::Boolean(b)) => {
                Expectation::MapGlacierBreachHammondsBreachSave(*b)
            }
            ("map__glacier_breach__hammonds_breach__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__glacier__revival__save", Yaml::Boolean(b)) => {
                Expectation::MapGlacierRevivalSave(*b)
            }
            ("map__glacier__revival__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__irikar_breach__save_room__save", Yaml::Boolean(b)) => {
                Expectation::MapIrikarBreachSaveRoomSave(*b)
            }
            ("map__irikar_breach__save_room__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__irikar_breach__gauntlet__save", Yaml::Boolean(b)) => {
                Expectation::MapIrikarBreachGauntletSave(*b)
            }
            ("map__irikar_breach__gauntlet__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__irikar__hub__save", Yaml::Boolean(b)) => Expectation::MapIrikarHubSave(*b),
            ("map__irikar__hub__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__irikar__midwest__save", Yaml::Boolean(b)) => {
                Expectation::MapIrikarMidwestSave(*b)
            }
            ("map__irikar__midwest__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__irikar__beach_save__save", Yaml::Boolean(b)) => {
                Expectation::MapIrikarBeachSaveSave(*b)
            }
            ("map__irikar__beach_save__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__uhrum__west_entrance__save", Yaml::Boolean(b)) => {
                Expectation::MapUhrumWestEntranceSave(*b)
            }
            ("map__uhrum__west_entrance__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__uhrum__save_room__save", Yaml::Boolean(b)) => {
                Expectation::MapUhrumSaveRoomSave(*b)
            }
            ("map__uhrum__save_room__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("map__uhrum__annuna_corridor__save", Yaml::Boolean(b)) => {
                Expectation::MapUhrumAnnunaCorridorSave(*b)
            }
            ("map__uhrum__annuna_corridor__save", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("glacier__ctx__hammonds_doors", Yaml::Boolean(b)) => {
                Expectation::GlacierCtxHammondsDoors(*b)
            }
            ("glacier__ctx__hammonds_doors", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("amagi__main_area__ctx__combo", Yaml::Boolean(b)) => {
                Expectation::AmagiMainAreaCtxCombo(*b)
            }
            ("amagi__main_area__ctx__combo", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("annuna__west_bridge__ctx__doors_opened", Yaml::Boolean(b)) => {
                Expectation::AnnunaWestBridgeCtxDoorsOpened(*b)
            }
            ("annuna__west_bridge__ctx__doors_opened", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("annuna__east_bridge__ctx__combo", Yaml::Boolean(b)) => {
                Expectation::AnnunaEastBridgeCtxCombo(*b)
            }
            ("annuna__east_bridge__ctx__combo", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("annuna__vertical_room__ctx__door_opened", Yaml::Boolean(b)) => {
                Expectation::AnnunaVerticalRoomCtxDoorOpened(*b)
            }
            ("annuna__vertical_room__ctx__door_opened", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("annuna__west_climb__ctx__door_opened", Yaml::Boolean(b)) => {
                Expectation::AnnunaWestClimbCtxDoorOpened(*b)
            }
            ("annuna__west_climb__ctx__door_opened", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__base_camp__ctx__left_platform_moved", Yaml::Boolean(b)) => {
                Expectation::EbihBaseCampCtxLeftPlatformMoved(*b)
            }
            ("ebih__base_camp__ctx__left_platform_moved", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__truck_gate__ctx__door_open", Yaml::Boolean(b)) => {
                Expectation::EbihTruckGateCtxDoorOpen(*b)
            }
            ("ebih__truck_gate__ctx__door_open", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__grid_25_10_12__ctx__door_open", Yaml::Boolean(b)) => {
                Expectation::EbihGrid251012CtxDoorOpen(*b)
            }
            ("ebih__grid_25_10_12__ctx__door_open", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__waterfall__ctx__west_door_open", Yaml::Boolean(b)) => {
                Expectation::EbihWaterfallCtxWestDoorOpen(*b)
            }
            ("ebih__waterfall__ctx__west_door_open", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__ebih_west__ctx__door_open", Yaml::Boolean(b)) => {
                Expectation::EbihEbihWestCtxDoorOpen(*b)
            }
            ("ebih__ebih_west__ctx__door_open", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__ebih_east__ctx__platform1_moved", Yaml::Boolean(b)) => {
                Expectation::EbihEbihEastCtxPlatform1Moved(*b)
            }
            ("ebih__ebih_east__ctx__platform1_moved", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__ebih_east__ctx__platform2_moved", Yaml::Boolean(b)) => {
                Expectation::EbihEbihEastCtxPlatform2Moved(*b)
            }
            ("ebih__ebih_east__ctx__platform2_moved", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__drone_room__ctx__platform_moved", Yaml::Boolean(b)) => {
                Expectation::EbihDroneRoomCtxPlatformMoved(*b)
            }
            ("ebih__drone_room__ctx__platform_moved", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("ebih__vertical_interchange__ctx__door_open", Yaml::Boolean(b)) => {
                Expectation::EbihVerticalInterchangeCtxDoorOpen(*b)
            }
            ("ebih__vertical_interchange__ctx__door_open", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna_breach__sw_save__ctx__door_opened", Yaml::Boolean(b)) => {
                Expectation::GigunaBreachSwSaveCtxDoorOpened(*b)
            }
            ("giguna_breach__sw_save__ctx__door_opened", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__giguna_northeast__ctx__door_opened", Yaml::Boolean(b)) => {
                Expectation::GigunaGigunaNortheastCtxDoorOpened(*b)
            }
            ("giguna__giguna_northeast__ctx__door_opened", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__carnelian__ctx__door_opened", Yaml::Boolean(b)) => {
                Expectation::GigunaCarnelianCtxDoorOpened(*b)
            }
            ("giguna__carnelian__ctx__door_opened", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__carnelian__ctx__upper_susar", Yaml::Boolean(b)) => {
                Expectation::GigunaCarnelianCtxUpperSusar(*b)
            }
            ("giguna__carnelian__ctx__upper_susar", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__carnelian__ctx__lower_susar", Yaml::Boolean(b)) => {
                Expectation::GigunaCarnelianCtxLowerSusar(*b)
            }
            ("giguna__carnelian__ctx__lower_susar", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__west_caverns__ctx__east_susar", Yaml::Boolean(b)) => {
                Expectation::GigunaWestCavernsCtxEastSusar(*b)
            }
            ("giguna__west_caverns__ctx__east_susar", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__giguna_base__ctx__door_open", Yaml::Boolean(b)) => {
                Expectation::GigunaGigunaBaseCtxDoorOpen(*b)
            }
            ("giguna__giguna_base__ctx__door_open", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__ruins_west__ctx__kishib_handled", Yaml::Boolean(b)) => {
                Expectation::GigunaRuinsWestCtxKishibHandled(*b)
            }
            ("giguna__ruins_west__ctx__kishib_handled", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__ruins_top__ctx__doors_open", Yaml::Boolean(b)) => {
                Expectation::GigunaRuinsTopCtxDoorsOpen(*b)
            }
            ("giguna__ruins_top__ctx__doors_open", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__clouds__ctx__platform", Yaml::Boolean(b)) => {
                Expectation::GigunaCloudsCtxPlatform(*b)
            }
            ("giguna__clouds__ctx__platform", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__east_caverns__ctx__door_opened", Yaml::Boolean(b)) => {
                Expectation::GigunaEastCavernsCtxDoorOpened(*b)
            }
            ("giguna__east_caverns__ctx__door_opened", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__east_caverns__ctx__combo_entered", Yaml::Boolean(b)) => {
                Expectation::GigunaEastCavernsCtxComboEntered(*b)
            }
            ("giguna__east_caverns__ctx__combo_entered", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__east_caverns__ctx__upper_susar", Yaml::Boolean(b)) => {
                Expectation::GigunaEastCavernsCtxUpperSusar(*b)
            }
            ("giguna__east_caverns__ctx__upper_susar", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__east_caverns__ctx__mid_susar", Yaml::Boolean(b)) => {
                Expectation::GigunaEastCavernsCtxMidSusar(*b)
            }
            ("giguna__east_caverns__ctx__mid_susar", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__east_caverns__ctx__lower_susar", Yaml::Boolean(b)) => {
                Expectation::GigunaEastCavernsCtxLowerSusar(*b)
            }
            ("giguna__east_caverns__ctx__lower_susar", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("giguna__gateway__ctx__door_opened", Yaml::Boolean(b)) => {
                Expectation::GigunaGatewayCtxDoorOpened(*b)
            }
            ("giguna__gateway__ctx__door_opened", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("glacier__the_big_drop__ctx__bridge_open", Yaml::Boolean(b)) => {
                Expectation::GlacierTheBigDropCtxBridgeOpen(*b)
            }
            ("glacier__the_big_drop__ctx__bridge_open", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("glacier__vertical_room__ctx__upper_gatestone", Yaml::Boolean(b)) => {
                Expectation::GlacierVerticalRoomCtxUpperGatestone(*b)
            }
            ("glacier__vertical_room__ctx__upper_gatestone", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("glacier__vertical_room__ctx__lower_gatestones", Yaml::Boolean(b)) => {
                Expectation::GlacierVerticalRoomCtxLowerGatestones(*b)
            }
            ("glacier__vertical_room__ctx__lower_gatestones", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("irikar__basement_portal__ctx__platform_moved", Yaml::Boolean(b)) => {
                Expectation::IrikarBasementPortalCtxPlatformMoved(*b)
            }
            ("irikar__basement_portal__ctx__platform_moved", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("irikar__midwest__ctx__left_platform", Yaml::Boolean(b)) => {
                Expectation::IrikarMidwestCtxLeftPlatform(*b)
            }
            ("irikar__midwest__ctx__left_platform", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("irikar__midwest__ctx__right_platform", Yaml::Boolean(b)) => {
                Expectation::IrikarMidwestCtxRightPlatform(*b)
            }
            ("irikar__midwest__ctx__right_platform", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Amagi_Dragon_Eye_Passage", Yaml::Boolean(b)) => {
                Expectation::AmagiDragonEyePassage(*b)
            }
            ("Amagi_Dragon_Eye_Passage", Yaml::Integer(i)) => {
                Expectation::AmagiDragonEyePassage(*i > 0)
            }
            ("Amagi_Dragon_Eye_Passage", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Amagi_Stronghold_Boulder_1", Yaml::Boolean(b)) => {
                Expectation::AmagiStrongholdBoulder1(*b)
            }
            ("Amagi_Stronghold_Boulder_1", Yaml::Integer(i)) => {
                Expectation::AmagiStrongholdBoulder1(*i > 0)
            }
            ("Amagi_Stronghold_Boulder_1", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Amagi_Stronghold_Boulder_2", Yaml::Boolean(b)) => {
                Expectation::AmagiStrongholdBoulder2(*b)
            }
            ("Amagi_Stronghold_Boulder_2", Yaml::Integer(i)) => {
                Expectation::AmagiStrongholdBoulder2(*i > 0)
            }
            ("Amagi_Stronghold_Boulder_2", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Amagi_Stronghold_Wall_1", Yaml::Boolean(b)) => Expectation::AmagiStrongholdWall1(*b),
            ("Amagi_Stronghold_Wall_1", Yaml::Integer(i)) => {
                Expectation::AmagiStrongholdWall1(*i > 0)
            }
            ("Amagi_Stronghold_Wall_1", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Amagi_Stronghold_Wall_2", Yaml::Boolean(b)) => Expectation::AmagiStrongholdWall2(*b),
            ("Amagi_Stronghold_Wall_2", Yaml::Integer(i)) => {
                Expectation::AmagiStrongholdWall2(*i > 0)
            }
            ("Amagi_Stronghold_Wall_2", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Amagi_West_Lake_Surface_Wall", Yaml::Boolean(b)) => {
                Expectation::AmagiWestLakeSurfaceWall(*b)
            }
            ("Amagi_West_Lake_Surface_Wall", Yaml::Integer(i)) => {
                Expectation::AmagiWestLakeSurfaceWall(*i > 0)
            }
            ("Amagi_West_Lake_Surface_Wall", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Amashilama", Yaml::Boolean(b)) => Expectation::Amashilama(*b),
            ("Amashilama", Yaml::Integer(i)) => Expectation::Amashilama(*i > 0),
            ("Amashilama", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Annuna_East_Bridge_Gate", Yaml::Boolean(b)) => Expectation::AnnunaEastBridgeGate(*b),
            ("Annuna_East_Bridge_Gate", Yaml::Integer(i)) => {
                Expectation::AnnunaEastBridgeGate(*i > 0)
            }
            ("Annuna_East_Bridge_Gate", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Annuna_Mirror_Match_Switch", Yaml::Boolean(b)) => {
                Expectation::AnnunaMirrorMatchSwitch(*b)
            }
            ("Annuna_Mirror_Match_Switch", Yaml::Integer(i)) => {
                Expectation::AnnunaMirrorMatchSwitch(*i > 0)
            }
            ("Annuna_Mirror_Match_Switch", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Annuna_Vertical_Room_Gate", Yaml::Boolean(b)) => {
                Expectation::AnnunaVerticalRoomGate(*b)
            }
            ("Annuna_Vertical_Room_Gate", Yaml::Integer(i)) => {
                Expectation::AnnunaVerticalRoomGate(*i > 0)
            }
            ("Annuna_Vertical_Room_Gate", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Anuman", Yaml::Boolean(b)) => Expectation::Anuman(*b),
            ("Anuman", Yaml::Integer(i)) => Expectation::Anuman(*i > 0),
            ("Anuman", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Apocalypse_Bomb", Yaml::Boolean(b)) => Expectation::ApocalypseBomb(*b),
            ("Apocalypse_Bomb", Yaml::Integer(i)) => Expectation::ApocalypseBomb(*i > 0),
            ("Apocalypse_Bomb", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Apocalypse_Seals_Wall", Yaml::Boolean(b)) => Expectation::ApocalypseSealsWall(*b),
            ("Apocalypse_Seals_Wall", Yaml::Integer(i)) => Expectation::ApocalypseSealsWall(*i > 0),
            ("Apocalypse_Seals_Wall", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Beware_the_Patternmind", Yaml::Boolean(b)) => Expectation::BewareThePatternmind(*b),
            ("Beware_the_Patternmind", Yaml::Integer(i)) => {
                Expectation::BewareThePatternmind(*i > 0)
            }
            ("Beware_the_Patternmind", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Big_Flask", Yaml::Integer(i)) => {
                Expectation::BigFlask(i8::try_from(*i).map_err(|e| format!("{}", e))?)
            }
            ("Big_Flask", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Boomerang", Yaml::Boolean(b)) => Expectation::Boomerang(*b),
            ("Boomerang", Yaml::Integer(i)) => Expectation::Boomerang(*i > 0),
            ("Boomerang", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Boomerang_Upgrade", Yaml::Boolean(b)) => Expectation::BoomerangUpgrade(*b),
            ("Boomerang_Upgrade", Yaml::Integer(i)) => Expectation::BoomerangUpgrade(*i > 0),
            ("Boomerang_Upgrade", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Breach_Attractor", Yaml::Boolean(b)) => Expectation::BreachAttractor(*b),
            ("Breach_Attractor", Yaml::Integer(i)) => Expectation::BreachAttractor(*i > 0),
            ("Breach_Attractor", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Breach_Sight", Yaml::Boolean(b)) => Expectation::BreachSight(*b),
            ("Breach_Sight", Yaml::Integer(i)) => Expectation::BreachSight(*i > 0),
            ("Breach_Sight", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Bronze_Axe", Yaml::Boolean(b)) => Expectation::BronzeAxe(*b),
            ("Bronze_Axe", Yaml::Integer(i)) => Expectation::BronzeAxe(*i > 0),
            ("Bronze_Axe", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Building_of_the_School", Yaml::Boolean(b)) => Expectation::BuildingOfTheSchool(*b),
            ("Building_of_the_School", Yaml::Integer(i)) => {
                Expectation::BuildingOfTheSchool(*i > 0)
            }
            ("Building_of_the_School", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Carnelian_Ring", Yaml::Boolean(b)) => Expectation::CarnelianRing(*b),
            ("Carnelian_Ring", Yaml::Integer(i)) => Expectation::CarnelianRing(*i > 0),
            ("Carnelian_Ring", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Commemorative_Speech", Yaml::Boolean(b)) => Expectation::CommemorativeSpeech(*b),
            ("Commemorative_Speech", Yaml::Integer(i)) => Expectation::CommemorativeSpeech(*i > 0),
            ("Commemorative_Speech", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Companies_Layoff", Yaml::Boolean(b)) => Expectation::CompaniesLayoff(*b),
            ("Companies_Layoff", Yaml::Integer(i)) => Expectation::CompaniesLayoff(*i > 0),
            ("Companies_Layoff", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Compass", Yaml::Boolean(b)) => Expectation::Compass(*b),
            ("Compass", Yaml::Integer(i)) => Expectation::Compass(*i > 0),
            ("Compass", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Dangerous_Ideas", Yaml::Boolean(b)) => Expectation::DangerousIdeas(*b),
            ("Dangerous_Ideas", Yaml::Integer(i)) => Expectation::DangerousIdeas(*i > 0),
            ("Dangerous_Ideas", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Dear_Ernest", Yaml::Boolean(b)) => Expectation::DearErnest(*b),
            ("Dear_Ernest", Yaml::Integer(i)) => Expectation::DearErnest(*i > 0),
            ("Dear_Ernest", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Defeat_Indra", Yaml::Boolean(b)) => Expectation::DefeatIndra(*b),
            ("Defeat_Indra", Yaml::Integer(i)) => Expectation::DefeatIndra(*i > 0),
            ("Defeat_Indra", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Defeat_MUS_A_M20", Yaml::Boolean(b)) => Expectation::DefeatMUSAM20(*b),
            ("Defeat_MUS_A_M20", Yaml::Integer(i)) => Expectation::DefeatMUSAM20(*i > 0),
            ("Defeat_MUS_A_M20", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Destruction_Pogrom", Yaml::Boolean(b)) => Expectation::DestructionPogrom(*b),
            ("Destruction_Pogrom", Yaml::Integer(i)) => Expectation::DestructionPogrom(*i > 0),
            ("Destruction_Pogrom", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Double_Axe", Yaml::Boolean(b)) => Expectation::DoubleAxe(*b),
            ("Double_Axe", Yaml::Integer(i)) => Expectation::DoubleAxe(*i > 0),
            ("Double_Axe", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Dr_Gloria", Yaml::Boolean(b)) => Expectation::DrGloria(*b),
            ("Dr_Gloria", Yaml::Integer(i)) => Expectation::DrGloria(*i > 0),
            ("Dr_Gloria", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Drone_Hover", Yaml::Boolean(b)) => Expectation::DroneHover(*b),
            ("Drone_Hover", Yaml::Integer(i)) => Expectation::DroneHover(*i > 0),
            ("Drone_Hover", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Drone_Melee_Damage", Yaml::Boolean(b)) => Expectation::DroneMeleeDamage(*b),
            ("Drone_Melee_Damage", Yaml::Integer(i)) => Expectation::DroneMeleeDamage(*i > 0),
            ("Drone_Melee_Damage", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Drone_Melee_Damage_2", Yaml::Boolean(b)) => Expectation::DroneMeleeDamage2(*b),
            ("Drone_Melee_Damage_2", Yaml::Integer(i)) => Expectation::DroneMeleeDamage2(*i > 0),
            ("Drone_Melee_Damage_2", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Drone_Melee_Speed", Yaml::Boolean(b)) => Expectation::DroneMeleeSpeed(*b),
            ("Drone_Melee_Speed", Yaml::Integer(i)) => Expectation::DroneMeleeSpeed(*i > 0),
            ("Drone_Melee_Speed", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Drone_Melee_Speed_2", Yaml::Boolean(b)) => Expectation::DroneMeleeSpeed2(*b),
            ("Drone_Melee_Speed_2", Yaml::Integer(i)) => Expectation::DroneMeleeSpeed2(*i > 0),
            ("Drone_Melee_Speed_2", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Ebih_Alu", Yaml::Boolean(b)) => Expectation::EbihAlu(*b),
            ("Ebih_Alu", Yaml::Integer(i)) => Expectation::EbihAlu(*i > 0),
            ("Ebih_Alu", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Ebih_Interchange_Block", Yaml::Boolean(b)) => Expectation::EbihInterchangeBlock(*b),
            ("Ebih_Interchange_Block", Yaml::Integer(i)) => {
                Expectation::EbihInterchangeBlock(*i > 0)
            }
            ("Ebih_Interchange_Block", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Ebih_Interchange_Gate", Yaml::Boolean(b)) => Expectation::EbihInterchangeGate(*b),
            ("Ebih_Interchange_Gate", Yaml::Integer(i)) => Expectation::EbihInterchangeGate(*i > 0),
            ("Ebih_Interchange_Gate", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Ebih_Walled_Off_Wall", Yaml::Boolean(b)) => Expectation::EbihWalledOffWall(*b),
            ("Ebih_Walled_Off_Wall", Yaml::Integer(i)) => Expectation::EbihWalledOffWall(*i > 0),
            ("Ebih_Walled_Off_Wall", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Ebih_Wasteland_Door", Yaml::Boolean(b)) => Expectation::EbihWastelandDoor(*b),
            ("Ebih_Wasteland_Door", Yaml::Integer(i)) => Expectation::EbihWastelandDoor(*i > 0),
            ("Ebih_Wasteland_Door", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Ebih_Wasteland_Passage_H", Yaml::Boolean(b)) => {
                Expectation::EbihWastelandPassageH(*b)
            }
            ("Ebih_Wasteland_Passage_H", Yaml::Integer(i)) => {
                Expectation::EbihWastelandPassageH(*i > 0)
            }
            ("Ebih_Wasteland_Passage_H", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Ebih_Waterfall_Block_Left", Yaml::Boolean(b)) => {
                Expectation::EbihWaterfallBlockLeft(*b)
            }
            ("Ebih_Waterfall_Block_Left", Yaml::Integer(i)) => {
                Expectation::EbihWaterfallBlockLeft(*i > 0)
            }
            ("Ebih_Waterfall_Block_Left", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Ebih_Waterfall_Block_Right", Yaml::Boolean(b)) => {
                Expectation::EbihWaterfallBlockRight(*b)
            }
            ("Ebih_Waterfall_Block_Right", Yaml::Integer(i)) => {
                Expectation::EbihWaterfallBlockRight(*i > 0)
            }
            ("Ebih_Waterfall_Block_Right", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Ebih_Waterfall_Wall", Yaml::Boolean(b)) => Expectation::EbihWaterfallWall(*b),
            ("Ebih_Waterfall_Wall", Yaml::Integer(i)) => Expectation::EbihWaterfallWall(*i > 0),
            ("Ebih_Waterfall_Wall", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Ebih_West_Block", Yaml::Boolean(b)) => Expectation::EbihWestBlock(*b),
            ("Ebih_West_Block", Yaml::Integer(i)) => Expectation::EbihWestBlock(*i > 0),
            ("Ebih_West_Block", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Escape", Yaml::Boolean(b)) => Expectation::Escape(*b),
            ("Escape", Yaml::Integer(i)) => Expectation::Escape(*i > 0),
            ("Escape", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Exit_Breach", Yaml::Boolean(b)) => Expectation::ExitBreach(*b),
            ("Exit_Breach", Yaml::Integer(i)) => Expectation::ExitBreach(*i > 0),
            ("Exit_Breach", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Eye_Ring", Yaml::Boolean(b)) => Expectation::EyeRing(*b),
            ("Eye_Ring", Yaml::Integer(i)) => Expectation::EyeRing(*i > 0),
            ("Eye_Ring", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Family_Tragedy", Yaml::Boolean(b)) => Expectation::FamilyTragedy(*b),
            ("Family_Tragedy", Yaml::Integer(i)) => Expectation::FamilyTragedy(*i > 0),
            ("Family_Tragedy", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Fast_Travel", Yaml::Boolean(b)) => Expectation::FastTravel(*b),
            ("Fast_Travel", Yaml::Integer(i)) => Expectation::FastTravel(*i > 0),
            ("Fast_Travel", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Flask", Yaml::Integer(i)) => {
                Expectation::Flask(i8::try_from(*i).map_err(|e| format!("{}", e))?)
            }
            ("Flask", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Forbidden_Knowledge", Yaml::Boolean(b)) => Expectation::ForbiddenKnowledge(*b),
            ("Forbidden_Knowledge", Yaml::Integer(i)) => Expectation::ForbiddenKnowledge(*i > 0),
            ("Forbidden_Knowledge", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Freedom_from_Aansur", Yaml::Boolean(b)) => Expectation::FreedomFromAansur(*b),
            ("Freedom_from_Aansur", Yaml::Integer(i)) => Expectation::FreedomFromAansur(*i > 0),
            ("Freedom_from_Aansur", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Giguna_Boulder", Yaml::Boolean(b)) => Expectation::GigunaBoulder(*b),
            ("Giguna_Boulder", Yaml::Integer(i)) => Expectation::GigunaBoulder(*i > 0),
            ("Giguna_Boulder", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Giguna_Dual_Path_Switch", Yaml::Boolean(b)) => Expectation::GigunaDualPathSwitch(*b),
            ("Giguna_Dual_Path_Switch", Yaml::Integer(i)) => {
                Expectation::GigunaDualPathSwitch(*i > 0)
            }
            ("Giguna_Dual_Path_Switch", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Giguna_Dual_Path_Wall", Yaml::Boolean(b)) => Expectation::GigunaDualPathWall(*b),
            ("Giguna_Dual_Path_Wall", Yaml::Integer(i)) => Expectation::GigunaDualPathWall(*i > 0),
            ("Giguna_Dual_Path_Wall", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Giguna_Gateway_Block", Yaml::Boolean(b)) => Expectation::GigunaGatewayBlock(*b),
            ("Giguna_Gateway_Block", Yaml::Integer(i)) => Expectation::GigunaGatewayBlock(*i > 0),
            ("Giguna_Gateway_Block", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Giguna_Gateway_Gate", Yaml::Boolean(b)) => Expectation::GigunaGatewayGate(*b),
            ("Giguna_Gateway_Gate", Yaml::Integer(i)) => Expectation::GigunaGatewayGate(*i > 0),
            ("Giguna_Gateway_Gate", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Giguna_Gubi", Yaml::Boolean(b)) => Expectation::GigunaGubi(*b),
            ("Giguna_Gubi", Yaml::Integer(i)) => Expectation::GigunaGubi(*i > 0),
            ("Giguna_Gubi", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Giguna_Northeast_Gate", Yaml::Boolean(b)) => Expectation::GigunaNortheastGate(*b),
            ("Giguna_Northeast_Gate", Yaml::Integer(i)) => Expectation::GigunaNortheastGate(*i > 0),
            ("Giguna_Northeast_Gate", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Glacier_Big_Drop_Rock", Yaml::Boolean(b)) => Expectation::GlacierBigDropRock(*b),
            ("Glacier_Big_Drop_Rock", Yaml::Integer(i)) => Expectation::GlacierBigDropRock(*i > 0),
            ("Glacier_Big_Drop_Rock", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Glacier_Sea_Burial_Rock", Yaml::Boolean(b)) => Expectation::GlacierSeaBurialRock(*b),
            ("Glacier_Sea_Burial_Rock", Yaml::Integer(i)) => {
                Expectation::GlacierSeaBurialRock(*i > 0)
            }
            ("Glacier_Sea_Burial_Rock", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Goodbye", Yaml::Boolean(b)) => Expectation::Goodbye(*b),
            ("Goodbye", Yaml::Integer(i)) => Expectation::Goodbye(*i > 0),
            ("Goodbye", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Hammond_Auth", Yaml::Boolean(b)) => Expectation::HammondAuth(*b),
            ("Hammond_Auth", Yaml::Integer(i)) => Expectation::HammondAuth(*i > 0),
            ("Hammond_Auth", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Health_Fragment", Yaml::Integer(i)) => {
                Expectation::HealthFragment(i8::try_from(*i).map_err(|e| format!("{}", e))?)
            }
            ("Health_Fragment", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Health_Node", Yaml::Integer(i)) => {
                Expectation::HealthNode(i8::try_from(*i).map_err(|e| format!("{}", e))?)
            }
            ("Health_Node", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Health_Upgrade", Yaml::Boolean(b)) => Expectation::HealthUpgrade(*b),
            ("Health_Upgrade", Yaml::Integer(i)) => Expectation::HealthUpgrade(*i > 0),
            ("Health_Upgrade", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Health_Upgrade_2", Yaml::Boolean(b)) => Expectation::HealthUpgrade2(*b),
            ("Health_Upgrade_2", Yaml::Integer(i)) => Expectation::HealthUpgrade2(*i > 0),
            ("Health_Upgrade_2", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Health_Upgrade_3", Yaml::Boolean(b)) => Expectation::HealthUpgrade3(*b),
            ("Health_Upgrade_3", Yaml::Integer(i)) => Expectation::HealthUpgrade3(*i > 0),
            ("Health_Upgrade_3", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Health_Upgrade_4", Yaml::Boolean(b)) => Expectation::HealthUpgrade4(*b),
            ("Health_Upgrade_4", Yaml::Integer(i)) => Expectation::HealthUpgrade4(*i > 0),
            ("Health_Upgrade_4", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Heretics_Granddaughter", Yaml::Boolean(b)) => Expectation::HereticsGranddaughter(*b),
            ("Heretics_Granddaughter", Yaml::Integer(i)) => {
                Expectation::HereticsGranddaughter(*i > 0)
            }
            ("Heretics_Granddaughter", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Heretics_Tablet", Yaml::Boolean(b)) => Expectation::HereticsTablet(*b),
            ("Heretics_Tablet", Yaml::Integer(i)) => Expectation::HereticsTablet(*i > 0),
            ("Heretics_Tablet", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Ice_Axe", Yaml::Boolean(b)) => Expectation::IceAxe(*b),
            ("Ice_Axe", Yaml::Integer(i)) => Expectation::IceAxe(*i > 0),
            ("Ice_Axe", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Infect", Yaml::Boolean(b)) => Expectation::Infect(*b),
            ("Infect", Yaml::Integer(i)) => Expectation::Infect(*i > 0),
            ("Infect", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Infect_L1", Yaml::Boolean(b)) => Expectation::InfectL1(*b),
            ("Infect_L1", Yaml::Integer(i)) => Expectation::InfectL1(*i > 0),
            ("Infect_L1", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Infect_L2", Yaml::Boolean(b)) => Expectation::InfectL2(*b),
            ("Infect_L2", Yaml::Integer(i)) => Expectation::InfectL2(*i > 0),
            ("Infect_L2", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Infect_L3", Yaml::Boolean(b)) => Expectation::InfectL3(*b),
            ("Infect_L3", Yaml::Integer(i)) => Expectation::InfectL3(*i > 0),
            ("Infect_L3", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Infection_Range", Yaml::Boolean(b)) => Expectation::InfectionRange(*b),
            ("Infection_Range", Yaml::Integer(i)) => Expectation::InfectionRange(*i > 0),
            ("Infection_Range", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Infection_Range_2", Yaml::Boolean(b)) => Expectation::InfectionRange2(*b),
            ("Infection_Range_2", Yaml::Integer(i)) => Expectation::InfectionRange2(*i > 0),
            ("Infection_Range_2", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Infection_Range_3", Yaml::Boolean(b)) => Expectation::InfectionRange3(*b),
            ("Infection_Range_3", Yaml::Integer(i)) => Expectation::InfectionRange3(*i > 0),
            ("Infection_Range_3", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Infection_Speed", Yaml::Boolean(b)) => Expectation::InfectionSpeed(*b),
            ("Infection_Speed", Yaml::Integer(i)) => Expectation::InfectionSpeed(*i > 0),
            ("Infection_Speed", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Irikar_Gudam", Yaml::Boolean(b)) => Expectation::IrikarGudam(*b),
            ("Irikar_Gudam", Yaml::Integer(i)) => Expectation::IrikarGudam(*i > 0),
            ("Irikar_Gudam", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Irikar_Royal_Storage_Wall", Yaml::Boolean(b)) => {
                Expectation::IrikarRoyalStorageWall(*b)
            }
            ("Irikar_Royal_Storage_Wall", Yaml::Integer(i)) => {
                Expectation::IrikarRoyalStorageWall(*i > 0)
            }
            ("Irikar_Royal_Storage_Wall", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Lament_for_Fools", Yaml::Boolean(b)) => Expectation::LamentForFools(*b),
            ("Lament_for_Fools", Yaml::Integer(i)) => Expectation::LamentForFools(*i > 0),
            ("Lament_for_Fools", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Ledge_Grab", Yaml::Boolean(b)) => Expectation::LedgeGrab(*b),
            ("Ledge_Grab", Yaml::Integer(i)) => Expectation::LedgeGrab(*i > 0),
            ("Ledge_Grab", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Letter_from_Trace", Yaml::Boolean(b)) => Expectation::LetterFromTrace(*b),
            ("Letter_from_Trace", Yaml::Integer(i)) => Expectation::LetterFromTrace(*i > 0),
            ("Letter_from_Trace", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Melee_Damage", Yaml::Boolean(b)) => Expectation::MeleeDamage(*b),
            ("Melee_Damage", Yaml::Integer(i)) => Expectation::MeleeDamage(*i > 0),
            ("Melee_Damage", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Melee_Damage_2", Yaml::Boolean(b)) => Expectation::MeleeDamage2(*b),
            ("Melee_Damage_2", Yaml::Integer(i)) => Expectation::MeleeDamage2(*i > 0),
            ("Melee_Damage_2", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Melee_Speed", Yaml::Boolean(b)) => Expectation::MeleeSpeed(*b),
            ("Melee_Speed", Yaml::Integer(i)) => Expectation::MeleeSpeed(*i > 0),
            ("Melee_Speed", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Melee_Speed_2", Yaml::Boolean(b)) => Expectation::MeleeSpeed2(*b),
            ("Melee_Speed_2", Yaml::Integer(i)) => Expectation::MeleeSpeed2(*i > 0),
            ("Melee_Speed_2", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Mist_Upgrade", Yaml::Boolean(b)) => Expectation::MistUpgrade(*b),
            ("Mist_Upgrade", Yaml::Integer(i)) => Expectation::MistUpgrade(*i > 0),
            ("Mist_Upgrade", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Nanite_Mist", Yaml::Boolean(b)) => Expectation::NaniteMist(*b),
            ("Nanite_Mist", Yaml::Integer(i)) => Expectation::NaniteMist(*i > 0),
            ("Nanite_Mist", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Nano_Lattice_2", Yaml::Boolean(b)) => Expectation::NanoLattice2(*b),
            ("Nano_Lattice_2", Yaml::Integer(i)) => Expectation::NanoLattice2(*i > 0),
            ("Nano_Lattice_2", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Nano_Points", Yaml::Boolean(b)) => Expectation::NanoPoints(*b),
            ("Nano_Points", Yaml::Integer(i)) => Expectation::NanoPoints(*i > 0),
            ("Nano_Points", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Nano_Points_2", Yaml::Boolean(b)) => Expectation::NanoPoints2(*b),
            ("Nano_Points_2", Yaml::Integer(i)) => Expectation::NanoPoints2(*i > 0),
            ("Nano_Points_2", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Notes_2053_02_27", Yaml::Boolean(b)) => Expectation::Notes20530227(*b),
            ("Notes_2053_02_27", Yaml::Integer(i)) => Expectation::Notes20530227(*i > 0),
            ("Notes_2053_02_27", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Plague_of_Thoughts", Yaml::Boolean(b)) => Expectation::PlagueOfThoughts(*b),
            ("Plague_of_Thoughts", Yaml::Integer(i)) => Expectation::PlagueOfThoughts(*i > 0),
            ("Plague_of_Thoughts", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Power_Matrix", Yaml::Integer(i)) => {
                Expectation::PowerMatrix(i8::try_from(*i).map_err(|e| format!("{}", e))?)
            }
            ("Power_Matrix", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Ranged_Damage", Yaml::Boolean(b)) => Expectation::RangedDamage(*b),
            ("Ranged_Damage", Yaml::Integer(i)) => Expectation::RangedDamage(*i > 0),
            ("Ranged_Damage", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Ranged_Damage_2", Yaml::Boolean(b)) => Expectation::RangedDamage2(*b),
            ("Ranged_Damage_2", Yaml::Integer(i)) => Expectation::RangedDamage2(*i > 0),
            ("Ranged_Damage_2", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Ranged_Speed", Yaml::Boolean(b)) => Expectation::RangedSpeed(*b),
            ("Ranged_Speed", Yaml::Integer(i)) => Expectation::RangedSpeed(*i > 0),
            ("Ranged_Speed", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Ranged_Speed_2", Yaml::Boolean(b)) => Expectation::RangedSpeed2(*b),
            ("Ranged_Speed_2", Yaml::Integer(i)) => Expectation::RangedSpeed2(*i > 0),
            ("Ranged_Speed_2", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Record_Losses", Yaml::Boolean(b)) => Expectation::RecordLosses(*b),
            ("Record_Losses", Yaml::Integer(i)) => Expectation::RecordLosses(*i > 0),
            ("Record_Losses", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Remote_Boomerang", Yaml::Boolean(b)) => Expectation::RemoteBoomerang(*b),
            ("Remote_Boomerang", Yaml::Integer(i)) => Expectation::RemoteBoomerang(*i > 0),
            ("Remote_Boomerang", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Remote_Drone", Yaml::Boolean(b)) => Expectation::RemoteDrone(*b),
            ("Remote_Drone", Yaml::Integer(i)) => Expectation::RemoteDrone(*i > 0),
            ("Remote_Drone", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Researchers_Missing", Yaml::Boolean(b)) => Expectation::ResearchersMissing(*b),
            ("Researchers_Missing", Yaml::Integer(i)) => Expectation::ResearchersMissing(*i > 0),
            ("Researchers_Missing", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Royal_Dagger", Yaml::Boolean(b)) => Expectation::RoyalDagger(*b),
            ("Royal_Dagger", Yaml::Integer(i)) => Expectation::RoyalDagger(*i > 0),
            ("Royal_Dagger", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Separation", Yaml::Boolean(b)) => Expectation::Separation(*b),
            ("Separation", Yaml::Integer(i)) => Expectation::Separation(*i > 0),
            ("Separation", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Shockwave", Yaml::Boolean(b)) => Expectation::Shockwave(*b),
            ("Shockwave", Yaml::Integer(i)) => Expectation::Shockwave(*i > 0),
            ("Shockwave", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Siuna_Storage_Wall", Yaml::Boolean(b)) => Expectation::SiunaStorageWall(*b),
            ("Siuna_Storage_Wall", Yaml::Integer(i)) => Expectation::SiunaStorageWall(*i > 0),
            ("Siuna_Storage_Wall", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Slingshot_Charge", Yaml::Boolean(b)) => Expectation::SlingshotCharge(*b),
            ("Slingshot_Charge", Yaml::Integer(i)) => Expectation::SlingshotCharge(*i > 0),
            ("Slingshot_Charge", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Slingshot_Hook", Yaml::Boolean(b)) => Expectation::SlingshotHook(*b),
            ("Slingshot_Hook", Yaml::Integer(i)) => Expectation::SlingshotHook(*i > 0),
            ("Slingshot_Hook", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Slingshot_Weapon", Yaml::Boolean(b)) => Expectation::SlingshotWeapon(*b),
            ("Slingshot_Weapon", Yaml::Integer(i)) => Expectation::SlingshotWeapon(*i > 0),
            ("Slingshot_Weapon", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Sniper_Valley_Rock_1", Yaml::Boolean(b)) => Expectation::SniperValleyRock1(*b),
            ("Sniper_Valley_Rock_1", Yaml::Integer(i)) => Expectation::SniperValleyRock1(*i > 0),
            ("Sniper_Valley_Rock_1", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Sniper_Valley_Rock_2", Yaml::Boolean(b)) => Expectation::SniperValleyRock2(*b),
            ("Sniper_Valley_Rock_2", Yaml::Integer(i)) => Expectation::SniperValleyRock2(*i > 0),
            ("Sniper_Valley_Rock_2", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Station_Power", Yaml::Boolean(b)) => Expectation::StationPower(*b),
            ("Station_Power", Yaml::Integer(i)) => Expectation::StationPower(*i > 0),
            ("Station_Power", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Storm_Bomb", Yaml::Boolean(b)) => Expectation::StormBomb(*b),
            ("Storm_Bomb", Yaml::Integer(i)) => Expectation::StormBomb(*i > 0),
            ("Storm_Bomb", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Suspension_Bridge", Yaml::Boolean(b)) => Expectation::SuspensionBridge(*b),
            ("Suspension_Bridge", Yaml::Integer(i)) => Expectation::SuspensionBridge(*i > 0),
            ("Suspension_Bridge", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Switch_36_11", Yaml::Boolean(b)) => Expectation::Switch3611(*b),
            ("Switch_36_11", Yaml::Integer(i)) => Expectation::Switch3611(*i > 0),
            ("Switch_36_11", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Switch_40_12", Yaml::Boolean(b)) => Expectation::Switch4012(*b),
            ("Switch_40_12", Yaml::Integer(i)) => Expectation::Switch4012(*i > 0),
            ("Switch_40_12", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Terminal_Breakthrough_1", Yaml::Boolean(b)) => Expectation::TerminalBreakthrough1(*b),
            ("Terminal_Breakthrough_1", Yaml::Integer(i)) => {
                Expectation::TerminalBreakthrough1(*i > 0)
            }
            ("Terminal_Breakthrough_1", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Terminal_Breakthrough_2", Yaml::Boolean(b)) => Expectation::TerminalBreakthrough2(*b),
            ("Terminal_Breakthrough_2", Yaml::Integer(i)) => {
                Expectation::TerminalBreakthrough2(*i > 0)
            }
            ("Terminal_Breakthrough_2", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("The_Eternal_Arm", Yaml::Boolean(b)) => Expectation::TheEternalArm(*b),
            ("The_Eternal_Arm", Yaml::Integer(i)) => Expectation::TheEternalArm(*i > 0),
            ("The_Eternal_Arm", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("The_Ideal_Kiengir", Yaml::Boolean(b)) => Expectation::TheIdealKiengir(*b),
            ("The_Ideal_Kiengir", Yaml::Integer(i)) => Expectation::TheIdealKiengir(*i > 0),
            ("The_Ideal_Kiengir", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("The_Student", Yaml::Boolean(b)) => Expectation::TheStudent(*b),
            ("The_Student", Yaml::Integer(i)) => Expectation::TheStudent(*i > 0),
            ("The_Student", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Udusan", Yaml::Boolean(b)) => Expectation::Udusan(*b),
            ("Udusan", Yaml::Integer(i)) => Expectation::Udusan(*i > 0),
            ("Udusan", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Uhrum_Annuna_Corridor_Block", Yaml::Boolean(b)) => {
                Expectation::UhrumAnnunaCorridorBlock(*b)
            }
            ("Uhrum_Annuna_Corridor_Block", Yaml::Integer(i)) => {
                Expectation::UhrumAnnunaCorridorBlock(*i > 0)
            }
            ("Uhrum_Annuna_Corridor_Block", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Uhrum_Waterfall_Wall", Yaml::Boolean(b)) => Expectation::UhrumWaterfallWall(*b),
            ("Uhrum_Waterfall_Wall", Yaml::Integer(i)) => Expectation::UhrumWaterfallWall(*i > 0),
            ("Uhrum_Waterfall_Wall", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Uhrum_Waterfalls_Block", Yaml::Boolean(b)) => Expectation::UhrumWaterfallsBlock(*b),
            ("Uhrum_Waterfalls_Block", Yaml::Integer(i)) => {
                Expectation::UhrumWaterfallsBlock(*i > 0)
            }
            ("Uhrum_Waterfalls_Block", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Uhrum_West_Entrance_Gate", Yaml::Boolean(b)) => {
                Expectation::UhrumWestEntranceGate(*b)
            }
            ("Uhrum_West_Entrance_Gate", Yaml::Integer(i)) => {
                Expectation::UhrumWestEntranceGate(*i > 0)
            }
            ("Uhrum_West_Entrance_Gate", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Uhrum_West_Entrance_Lower_Wall", Yaml::Boolean(b)) => {
                Expectation::UhrumWestEntranceLowerWall(*b)
            }
            ("Uhrum_West_Entrance_Lower_Wall", Yaml::Integer(i)) => {
                Expectation::UhrumWestEntranceLowerWall(*i > 0)
            }
            ("Uhrum_West_Entrance_Lower_Wall", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Uhrum_West_Entrance_Upper_Wall", Yaml::Boolean(b)) => {
                Expectation::UhrumWestEntranceUpperWall(*b)
            }
            ("Uhrum_West_Entrance_Upper_Wall", Yaml::Integer(i)) => {
                Expectation::UhrumWestEntranceUpperWall(*i > 0)
            }
            ("Uhrum_West_Entrance_Upper_Wall", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Under_Siege", Yaml::Boolean(b)) => Expectation::UnderSiege(*b),
            ("Under_Siege", Yaml::Integer(i)) => Expectation::UnderSiege(*i > 0),
            ("Under_Siege", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Underwater_Movement", Yaml::Boolean(b)) => Expectation::UnderwaterMovement(*b),
            ("Underwater_Movement", Yaml::Integer(i)) => Expectation::UnderwaterMovement(*i > 0),
            ("Underwater_Movement", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            ("Wall_Climb", Yaml::Boolean(b)) => Expectation::WallClimb(*b),
            ("Wall_Climb", Yaml::Integer(i)) => Expectation::WallClimb(*i > 0),
            ("Wall_Climb", _) => {
                return Err(format!(
                    "Key {:?} has value of disallowed type: {:?}",
                    ckey, cval
                ));
            }
            _ => {
                return Err(format!(
                    "Unrecognized/disallowed expect context key: {:?}",
                    ckey
                ));
            }
        })
    }

    fn assert_expectations(&self, exps: &Vec<Expectation>) -> Result<(), String> {
        let mut errs = Vec::new();
        for exp in exps {
            match exp {
                Expectation::Position(e) => {
                    let v = self.position();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "position", e, v));
                    }
                }
                Expectation::Energy(e) => {
                    let v = self.energy();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "energy", e, v));
                    }
                }
                Expectation::Flasks(e) => {
                    let v = self.flasks();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "flasks", e, v));
                    }
                }
                Expectation::Refills(e) => {
                    let v = self.refills();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "refills", e, v));
                    }
                }
                Expectation::Mode(e) => {
                    let v = self.mode();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "mode", e, v));
                    }
                }
                Expectation::Save(e) => {
                    let v = self.save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "save", e, v));
                    }
                }
                Expectation::BreachSave(e) => {
                    let v = self.breach_save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "breach_save", e, v));
                    }
                }
                Expectation::Indra(e) => {
                    let v = self.indra();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "indra", e, v));
                    }
                }
                Expectation::Last(e) => {
                    let v = self.last();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "last", e, v));
                    }
                }
                Expectation::Portal(e) => {
                    let v = self.portal();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "portal", e, v));
                    }
                }
                Expectation::PrevPortal(e) => {
                    let v = self.prev_portal();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "prev_portal", e, v));
                    }
                }
                Expectation::PrevArea(e) => {
                    let v = self.prev_area();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "prev_area", e, v));
                    }
                }
                Expectation::MapAmagiBreachEastEntranceSave(e) => {
                    let v = self.map__amagi_breach__east_entrance__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__amagi_breach__east_entrance__save", e, v
                        ));
                    }
                }
                Expectation::MapAmagiMainAreaSave(e) => {
                    let v = self.map__amagi__main_area__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__amagi__main_area__save", e, v
                        ));
                    }
                }
                Expectation::MapAmagiEastLakeSave(e) => {
                    let v = self.map__amagi__east_lake__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__amagi__east_lake__save", e, v
                        ));
                    }
                }
                Expectation::MapAnnunaMirrorMatchSave(e) => {
                    let v = self.map__annuna__mirror_match__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__annuna__mirror_match__save", e, v
                        ));
                    }
                }
                Expectation::MapAnnunaVerticalRoomSave(e) => {
                    let v = self.map__annuna__vertical_room__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__annuna__vertical_room__save", e, v
                        ));
                    }
                }
                Expectation::MapAnnunaFactoryEntranceSave(e) => {
                    let v = self.map__annuna__factory_entrance__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__annuna__factory_entrance__save", e, v
                        ));
                    }
                }
                Expectation::MapAnnunaUpperSaveSave(e) => {
                    let v = self.map__annuna__upper_save__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__annuna__upper_save__save", e, v
                        ));
                    }
                }
                Expectation::MapAnnunaCenterSaveSave(e) => {
                    let v = self.map__annuna__center_save__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__annuna__center_save__save", e, v
                        ));
                    }
                }
                Expectation::MapEbihBaseCampSave(e) => {
                    let v = self.map__ebih__base_camp__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__ebih__base_camp__save", e, v
                        ));
                    }
                }
                Expectation::MapEbihEbihWestMidSave(e) => {
                    let v = self.map__ebih__ebih_west__mid_save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__ebih__ebih_west__mid_save", e, v
                        ));
                    }
                }
                Expectation::MapEbihEbihWestUpperSave(e) => {
                    let v = self.map__ebih__ebih_west__upper_save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__ebih__ebih_west__upper_save", e, v
                        ));
                    }
                }
                Expectation::MapEbihEbihWestLowerSave(e) => {
                    let v = self.map__ebih__ebih_west__lower_save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__ebih__ebih_west__lower_save", e, v
                        ));
                    }
                }
                Expectation::MapGigunaBreachPeakSave(e) => {
                    let v = self.map__giguna_breach__peak__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__giguna_breach__peak__save", e, v
                        ));
                    }
                }
                Expectation::MapGigunaBreachSwSaveSave(e) => {
                    let v = self.map__giguna_breach__sw_save__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__giguna_breach__sw_save__save", e, v
                        ));
                    }
                }
                Expectation::MapGigunaGigunaNortheastSave(e) => {
                    let v = self.map__giguna__giguna_northeast__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__giguna__giguna_northeast__save", e, v
                        ));
                    }
                }
                Expectation::MapGigunaGigunaBaseSave(e) => {
                    let v = self.map__giguna__giguna_base__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__giguna__giguna_base__save", e, v
                        ));
                    }
                }
                Expectation::MapGigunaRuinsWestSave(e) => {
                    let v = self.map__giguna__ruins_west__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__giguna__ruins_west__save", e, v
                        ));
                    }
                }
                Expectation::MapGigunaRuinsTopSave(e) => {
                    let v = self.map__giguna__ruins_top__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__giguna__ruins_top__save", e, v
                        ));
                    }
                }
                Expectation::MapGlacierBreachSouthSaveSave(e) => {
                    let v = self.map__glacier_breach__south_save__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__glacier_breach__south_save__save", e, v
                        ));
                    }
                }
                Expectation::MapGlacierBreachWestSaveSave(e) => {
                    let v = self.map__glacier_breach__west_save__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__glacier_breach__west_save__save", e, v
                        ));
                    }
                }
                Expectation::MapGlacierBreachGuardedCorridorSave(e) => {
                    let v = self.map__glacier_breach__guarded_corridor__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__glacier_breach__guarded_corridor__save", e, v
                        ));
                    }
                }
                Expectation::MapGlacierBreachSaveAndExitSave(e) => {
                    let v = self.map__glacier_breach__save_and_exit__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__glacier_breach__save_and_exit__save", e, v
                        ));
                    }
                }
                Expectation::MapGlacierBreachHammondsBreachSave(e) => {
                    let v = self.map__glacier_breach__hammonds_breach__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__glacier_breach__hammonds_breach__save", e, v
                        ));
                    }
                }
                Expectation::MapGlacierRevivalSave(e) => {
                    let v = self.map__glacier__revival__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__glacier__revival__save", e, v
                        ));
                    }
                }
                Expectation::MapIrikarBreachSaveRoomSave(e) => {
                    let v = self.map__irikar_breach__save_room__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__irikar_breach__save_room__save", e, v
                        ));
                    }
                }
                Expectation::MapIrikarBreachGauntletSave(e) => {
                    let v = self.map__irikar_breach__gauntlet__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__irikar_breach__gauntlet__save", e, v
                        ));
                    }
                }
                Expectation::MapIrikarHubSave(e) => {
                    let v = self.map__irikar__hub__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__irikar__hub__save", e, v
                        ));
                    }
                }
                Expectation::MapIrikarMidwestSave(e) => {
                    let v = self.map__irikar__midwest__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__irikar__midwest__save", e, v
                        ));
                    }
                }
                Expectation::MapIrikarBeachSaveSave(e) => {
                    let v = self.map__irikar__beach_save__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__irikar__beach_save__save", e, v
                        ));
                    }
                }
                Expectation::MapUhrumWestEntranceSave(e) => {
                    let v = self.map__uhrum__west_entrance__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__uhrum__west_entrance__save", e, v
                        ));
                    }
                }
                Expectation::MapUhrumSaveRoomSave(e) => {
                    let v = self.map__uhrum__save_room__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__uhrum__save_room__save", e, v
                        ));
                    }
                }
                Expectation::MapUhrumAnnunaCorridorSave(e) => {
                    let v = self.map__uhrum__annuna_corridor__save();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "map__uhrum__annuna_corridor__save", e, v
                        ));
                    }
                }
                Expectation::GlacierCtxHammondsDoors(e) => {
                    let v = self.glacier__ctx__hammonds_doors();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "glacier__ctx__hammonds_doors", e, v
                        ));
                    }
                }
                Expectation::AmagiMainAreaCtxCombo(e) => {
                    let v = self.amagi__main_area__ctx__combo();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "amagi__main_area__ctx__combo", e, v
                        ));
                    }
                }
                Expectation::AnnunaWestBridgeCtxDoorsOpened(e) => {
                    let v = self.annuna__west_bridge__ctx__doors_opened();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "annuna__west_bridge__ctx__doors_opened", e, v
                        ));
                    }
                }
                Expectation::AnnunaEastBridgeCtxCombo(e) => {
                    let v = self.annuna__east_bridge__ctx__combo();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "annuna__east_bridge__ctx__combo", e, v
                        ));
                    }
                }
                Expectation::AnnunaVerticalRoomCtxDoorOpened(e) => {
                    let v = self.annuna__vertical_room__ctx__door_opened();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "annuna__vertical_room__ctx__door_opened", e, v
                        ));
                    }
                }
                Expectation::AnnunaWestClimbCtxDoorOpened(e) => {
                    let v = self.annuna__west_climb__ctx__door_opened();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "annuna__west_climb__ctx__door_opened", e, v
                        ));
                    }
                }
                Expectation::EbihBaseCampCtxLeftPlatformMoved(e) => {
                    let v = self.ebih__base_camp__ctx__left_platform_moved();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "ebih__base_camp__ctx__left_platform_moved", e, v
                        ));
                    }
                }
                Expectation::EbihTruckGateCtxDoorOpen(e) => {
                    let v = self.ebih__truck_gate__ctx__door_open();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "ebih__truck_gate__ctx__door_open", e, v
                        ));
                    }
                }
                Expectation::EbihGrid251012CtxDoorOpen(e) => {
                    let v = self.ebih__grid_25_10_12__ctx__door_open();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "ebih__grid_25_10_12__ctx__door_open", e, v
                        ));
                    }
                }
                Expectation::EbihWaterfallCtxWestDoorOpen(e) => {
                    let v = self.ebih__waterfall__ctx__west_door_open();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "ebih__waterfall__ctx__west_door_open", e, v
                        ));
                    }
                }
                Expectation::EbihEbihWestCtxDoorOpen(e) => {
                    let v = self.ebih__ebih_west__ctx__door_open();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "ebih__ebih_west__ctx__door_open", e, v
                        ));
                    }
                }
                Expectation::EbihEbihEastCtxPlatform1Moved(e) => {
                    let v = self.ebih__ebih_east__ctx__platform1_moved();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "ebih__ebih_east__ctx__platform1_moved", e, v
                        ));
                    }
                }
                Expectation::EbihEbihEastCtxPlatform2Moved(e) => {
                    let v = self.ebih__ebih_east__ctx__platform2_moved();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "ebih__ebih_east__ctx__platform2_moved", e, v
                        ));
                    }
                }
                Expectation::EbihDroneRoomCtxPlatformMoved(e) => {
                    let v = self.ebih__drone_room__ctx__platform_moved();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "ebih__drone_room__ctx__platform_moved", e, v
                        ));
                    }
                }
                Expectation::EbihVerticalInterchangeCtxDoorOpen(e) => {
                    let v = self.ebih__vertical_interchange__ctx__door_open();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "ebih__vertical_interchange__ctx__door_open", e, v
                        ));
                    }
                }
                Expectation::GigunaBreachSwSaveCtxDoorOpened(e) => {
                    let v = self.giguna_breach__sw_save__ctx__door_opened();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "giguna_breach__sw_save__ctx__door_opened", e, v
                        ));
                    }
                }
                Expectation::GigunaGigunaNortheastCtxDoorOpened(e) => {
                    let v = self.giguna__giguna_northeast__ctx__door_opened();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "giguna__giguna_northeast__ctx__door_opened", e, v
                        ));
                    }
                }
                Expectation::GigunaCarnelianCtxDoorOpened(e) => {
                    let v = self.giguna__carnelian__ctx__door_opened();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "giguna__carnelian__ctx__door_opened", e, v
                        ));
                    }
                }
                Expectation::GigunaCarnelianCtxUpperSusar(e) => {
                    let v = self.giguna__carnelian__ctx__upper_susar();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "giguna__carnelian__ctx__upper_susar", e, v
                        ));
                    }
                }
                Expectation::GigunaCarnelianCtxLowerSusar(e) => {
                    let v = self.giguna__carnelian__ctx__lower_susar();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "giguna__carnelian__ctx__lower_susar", e, v
                        ));
                    }
                }
                Expectation::GigunaWestCavernsCtxEastSusar(e) => {
                    let v = self.giguna__west_caverns__ctx__east_susar();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "giguna__west_caverns__ctx__east_susar", e, v
                        ));
                    }
                }
                Expectation::GigunaGigunaBaseCtxDoorOpen(e) => {
                    let v = self.giguna__giguna_base__ctx__door_open();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "giguna__giguna_base__ctx__door_open", e, v
                        ));
                    }
                }
                Expectation::GigunaRuinsWestCtxKishibHandled(e) => {
                    let v = self.giguna__ruins_west__ctx__kishib_handled();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "giguna__ruins_west__ctx__kishib_handled", e, v
                        ));
                    }
                }
                Expectation::GigunaRuinsTopCtxDoorsOpen(e) => {
                    let v = self.giguna__ruins_top__ctx__doors_open();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "giguna__ruins_top__ctx__doors_open", e, v
                        ));
                    }
                }
                Expectation::GigunaCloudsCtxPlatform(e) => {
                    let v = self.giguna__clouds__ctx__platform();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "giguna__clouds__ctx__platform", e, v
                        ));
                    }
                }
                Expectation::GigunaEastCavernsCtxDoorOpened(e) => {
                    let v = self.giguna__east_caverns__ctx__door_opened();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "giguna__east_caverns__ctx__door_opened", e, v
                        ));
                    }
                }
                Expectation::GigunaEastCavernsCtxComboEntered(e) => {
                    let v = self.giguna__east_caverns__ctx__combo_entered();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "giguna__east_caverns__ctx__combo_entered", e, v
                        ));
                    }
                }
                Expectation::GigunaEastCavernsCtxUpperSusar(e) => {
                    let v = self.giguna__east_caverns__ctx__upper_susar();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "giguna__east_caverns__ctx__upper_susar", e, v
                        ));
                    }
                }
                Expectation::GigunaEastCavernsCtxMidSusar(e) => {
                    let v = self.giguna__east_caverns__ctx__mid_susar();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "giguna__east_caverns__ctx__mid_susar", e, v
                        ));
                    }
                }
                Expectation::GigunaEastCavernsCtxLowerSusar(e) => {
                    let v = self.giguna__east_caverns__ctx__lower_susar();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "giguna__east_caverns__ctx__lower_susar", e, v
                        ));
                    }
                }
                Expectation::GigunaGatewayCtxDoorOpened(e) => {
                    let v = self.giguna__gateway__ctx__door_opened();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "giguna__gateway__ctx__door_opened", e, v
                        ));
                    }
                }
                Expectation::GlacierTheBigDropCtxBridgeOpen(e) => {
                    let v = self.glacier__the_big_drop__ctx__bridge_open();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "glacier__the_big_drop__ctx__bridge_open", e, v
                        ));
                    }
                }
                Expectation::GlacierVerticalRoomCtxUpperGatestone(e) => {
                    let v = self.glacier__vertical_room__ctx__upper_gatestone();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "glacier__vertical_room__ctx__upper_gatestone", e, v
                        ));
                    }
                }
                Expectation::GlacierVerticalRoomCtxLowerGatestones(e) => {
                    let v = self.glacier__vertical_room__ctx__lower_gatestones();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "glacier__vertical_room__ctx__lower_gatestones", e, v
                        ));
                    }
                }
                Expectation::IrikarBasementPortalCtxPlatformMoved(e) => {
                    let v = self.irikar__basement_portal__ctx__platform_moved();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "irikar__basement_portal__ctx__platform_moved", e, v
                        ));
                    }
                }
                Expectation::IrikarMidwestCtxLeftPlatform(e) => {
                    let v = self.irikar__midwest__ctx__left_platform();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "irikar__midwest__ctx__left_platform", e, v
                        ));
                    }
                }
                Expectation::IrikarMidwestCtxRightPlatform(e) => {
                    let v = self.irikar__midwest__ctx__right_platform();
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "irikar__midwest__ctx__right_platform", e, v
                        ));
                    }
                }
                Expectation::AmagiDragonEyePassage(e) => {
                    let v = self.has(Item::Amagi_Dragon_Eye_Passage);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Amagi_Dragon_Eye_Passage", e, v
                        ));
                    }
                }
                Expectation::AmagiStrongholdBoulder1(e) => {
                    let v = self.has(Item::Amagi_Stronghold_Boulder_1);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Amagi_Stronghold_Boulder_1", e, v
                        ));
                    }
                }
                Expectation::AmagiStrongholdBoulder2(e) => {
                    let v = self.has(Item::Amagi_Stronghold_Boulder_2);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Amagi_Stronghold_Boulder_2", e, v
                        ));
                    }
                }
                Expectation::AmagiStrongholdWall1(e) => {
                    let v = self.has(Item::Amagi_Stronghold_Wall_1);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Amagi_Stronghold_Wall_1", e, v
                        ));
                    }
                }
                Expectation::AmagiStrongholdWall2(e) => {
                    let v = self.has(Item::Amagi_Stronghold_Wall_2);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Amagi_Stronghold_Wall_2", e, v
                        ));
                    }
                }
                Expectation::AmagiWestLakeSurfaceWall(e) => {
                    let v = self.has(Item::Amagi_West_Lake_Surface_Wall);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Amagi_West_Lake_Surface_Wall", e, v
                        ));
                    }
                }
                Expectation::Amashilama(e) => {
                    let v = self.has(Item::Amashilama);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Amashilama", e, v));
                    }
                }
                Expectation::AnnunaEastBridgeGate(e) => {
                    let v = self.has(Item::Annuna_East_Bridge_Gate);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Annuna_East_Bridge_Gate", e, v
                        ));
                    }
                }
                Expectation::AnnunaMirrorMatchSwitch(e) => {
                    let v = self.has(Item::Annuna_Mirror_Match_Switch);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Annuna_Mirror_Match_Switch", e, v
                        ));
                    }
                }
                Expectation::AnnunaVerticalRoomGate(e) => {
                    let v = self.has(Item::Annuna_Vertical_Room_Gate);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Annuna_Vertical_Room_Gate", e, v
                        ));
                    }
                }
                Expectation::Anuman(e) => {
                    let v = self.has(Item::Anuman);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Anuman", e, v));
                    }
                }
                Expectation::ApocalypseBomb(e) => {
                    let v = self.has(Item::Apocalypse_Bomb);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Apocalypse_Bomb", e, v
                        ));
                    }
                }
                Expectation::ApocalypseSealsWall(e) => {
                    let v = self.has(Item::Apocalypse_Seals_Wall);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Apocalypse_Seals_Wall", e, v
                        ));
                    }
                }
                Expectation::BewareThePatternmind(e) => {
                    let v = self.has(Item::Beware_the_Patternmind);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Beware_the_Patternmind", e, v
                        ));
                    }
                }
                Expectation::BigFlask(e) => {
                    let v = self.count(Item::Big_Flask);
                    if v != <i8 as Into<i16>>::into(*e) {
                        errs.push(format!("Expected {} = {}, got: {}", "Big_Flask", e, v));
                    }
                }
                Expectation::Boomerang(e) => {
                    let v = self.has(Item::Boomerang);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Boomerang", e, v));
                    }
                }
                Expectation::BoomerangUpgrade(e) => {
                    let v = self.has(Item::Boomerang_Upgrade);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Boomerang_Upgrade", e, v
                        ));
                    }
                }
                Expectation::BreachAttractor(e) => {
                    let v = self.has(Item::Breach_Attractor);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Breach_Attractor", e, v
                        ));
                    }
                }
                Expectation::BreachSight(e) => {
                    let v = self.has(Item::Breach_Sight);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Breach_Sight", e, v));
                    }
                }
                Expectation::BronzeAxe(e) => {
                    let v = self.has(Item::Bronze_Axe);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Bronze_Axe", e, v));
                    }
                }
                Expectation::BuildingOfTheSchool(e) => {
                    let v = self.has(Item::Building_of_the_School);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Building_of_the_School", e, v
                        ));
                    }
                }
                Expectation::CarnelianRing(e) => {
                    let v = self.has(Item::Carnelian_Ring);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Carnelian_Ring", e, v));
                    }
                }
                Expectation::CommemorativeSpeech(e) => {
                    let v = self.has(Item::Commemorative_Speech);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Commemorative_Speech", e, v
                        ));
                    }
                }
                Expectation::CompaniesLayoff(e) => {
                    let v = self.has(Item::Companies_Layoff);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Companies_Layoff", e, v
                        ));
                    }
                }
                Expectation::Compass(e) => {
                    let v = self.has(Item::Compass);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Compass", e, v));
                    }
                }
                Expectation::DangerousIdeas(e) => {
                    let v = self.has(Item::Dangerous_Ideas);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Dangerous_Ideas", e, v
                        ));
                    }
                }
                Expectation::DearErnest(e) => {
                    let v = self.has(Item::Dear_Ernest);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Dear_Ernest", e, v));
                    }
                }
                Expectation::DefeatIndra(e) => {
                    let v = self.has(Item::Defeat_Indra);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Defeat_Indra", e, v));
                    }
                }
                Expectation::DefeatMUSAM20(e) => {
                    let v = self.has(Item::Defeat_MUS_A_M20);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Defeat_MUS_A_M20", e, v
                        ));
                    }
                }
                Expectation::DestructionPogrom(e) => {
                    let v = self.has(Item::Destruction_Pogrom);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Destruction_Pogrom", e, v
                        ));
                    }
                }
                Expectation::DoubleAxe(e) => {
                    let v = self.has(Item::Double_Axe);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Double_Axe", e, v));
                    }
                }
                Expectation::DrGloria(e) => {
                    let v = self.has(Item::Dr_Gloria);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Dr_Gloria", e, v));
                    }
                }
                Expectation::DroneHover(e) => {
                    let v = self.has(Item::Drone_Hover);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Drone_Hover", e, v));
                    }
                }
                Expectation::DroneMeleeDamage(e) => {
                    let v = self.has(Item::Drone_Melee_Damage);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Drone_Melee_Damage", e, v
                        ));
                    }
                }
                Expectation::DroneMeleeDamage2(e) => {
                    let v = self.has(Item::Drone_Melee_Damage_2);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Drone_Melee_Damage_2", e, v
                        ));
                    }
                }
                Expectation::DroneMeleeSpeed(e) => {
                    let v = self.has(Item::Drone_Melee_Speed);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Drone_Melee_Speed", e, v
                        ));
                    }
                }
                Expectation::DroneMeleeSpeed2(e) => {
                    let v = self.has(Item::Drone_Melee_Speed_2);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Drone_Melee_Speed_2", e, v
                        ));
                    }
                }
                Expectation::EbihAlu(e) => {
                    let v = self.has(Item::Ebih_Alu);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Ebih_Alu", e, v));
                    }
                }
                Expectation::EbihInterchangeBlock(e) => {
                    let v = self.has(Item::Ebih_Interchange_Block);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Ebih_Interchange_Block", e, v
                        ));
                    }
                }
                Expectation::EbihInterchangeGate(e) => {
                    let v = self.has(Item::Ebih_Interchange_Gate);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Ebih_Interchange_Gate", e, v
                        ));
                    }
                }
                Expectation::EbihWalledOffWall(e) => {
                    let v = self.has(Item::Ebih_Walled_Off_Wall);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Ebih_Walled_Off_Wall", e, v
                        ));
                    }
                }
                Expectation::EbihWastelandDoor(e) => {
                    let v = self.has(Item::Ebih_Wasteland_Door);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Ebih_Wasteland_Door", e, v
                        ));
                    }
                }
                Expectation::EbihWastelandPassageH(e) => {
                    let v = self.has(Item::Ebih_Wasteland_Passage_H);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Ebih_Wasteland_Passage_H", e, v
                        ));
                    }
                }
                Expectation::EbihWaterfallBlockLeft(e) => {
                    let v = self.has(Item::Ebih_Waterfall_Block_Left);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Ebih_Waterfall_Block_Left", e, v
                        ));
                    }
                }
                Expectation::EbihWaterfallBlockRight(e) => {
                    let v = self.has(Item::Ebih_Waterfall_Block_Right);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Ebih_Waterfall_Block_Right", e, v
                        ));
                    }
                }
                Expectation::EbihWaterfallWall(e) => {
                    let v = self.has(Item::Ebih_Waterfall_Wall);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Ebih_Waterfall_Wall", e, v
                        ));
                    }
                }
                Expectation::EbihWestBlock(e) => {
                    let v = self.has(Item::Ebih_West_Block);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Ebih_West_Block", e, v
                        ));
                    }
                }
                Expectation::Escape(e) => {
                    let v = self.has(Item::Escape);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Escape", e, v));
                    }
                }
                Expectation::ExitBreach(e) => {
                    let v = self.has(Item::Exit_Breach);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Exit_Breach", e, v));
                    }
                }
                Expectation::EyeRing(e) => {
                    let v = self.has(Item::Eye_Ring);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Eye_Ring", e, v));
                    }
                }
                Expectation::FamilyTragedy(e) => {
                    let v = self.has(Item::Family_Tragedy);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Family_Tragedy", e, v));
                    }
                }
                Expectation::FastTravel(e) => {
                    let v = self.has(Item::Fast_Travel);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Fast_Travel", e, v));
                    }
                }
                Expectation::Flask(e) => {
                    let v = self.count(Item::Flask);
                    if v != <i8 as Into<i16>>::into(*e) {
                        errs.push(format!("Expected {} = {}, got: {}", "Flask", e, v));
                    }
                }
                Expectation::ForbiddenKnowledge(e) => {
                    let v = self.has(Item::Forbidden_Knowledge);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Forbidden_Knowledge", e, v
                        ));
                    }
                }
                Expectation::FreedomFromAansur(e) => {
                    let v = self.has(Item::Freedom_from_Aansur);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Freedom_from_Aansur", e, v
                        ));
                    }
                }
                Expectation::GigunaBoulder(e) => {
                    let v = self.has(Item::Giguna_Boulder);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Giguna_Boulder", e, v));
                    }
                }
                Expectation::GigunaDualPathSwitch(e) => {
                    let v = self.has(Item::Giguna_Dual_Path_Switch);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Giguna_Dual_Path_Switch", e, v
                        ));
                    }
                }
                Expectation::GigunaDualPathWall(e) => {
                    let v = self.has(Item::Giguna_Dual_Path_Wall);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Giguna_Dual_Path_Wall", e, v
                        ));
                    }
                }
                Expectation::GigunaGatewayBlock(e) => {
                    let v = self.has(Item::Giguna_Gateway_Block);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Giguna_Gateway_Block", e, v
                        ));
                    }
                }
                Expectation::GigunaGatewayGate(e) => {
                    let v = self.has(Item::Giguna_Gateway_Gate);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Giguna_Gateway_Gate", e, v
                        ));
                    }
                }
                Expectation::GigunaGubi(e) => {
                    let v = self.has(Item::Giguna_Gubi);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Giguna_Gubi", e, v));
                    }
                }
                Expectation::GigunaNortheastGate(e) => {
                    let v = self.has(Item::Giguna_Northeast_Gate);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Giguna_Northeast_Gate", e, v
                        ));
                    }
                }
                Expectation::GlacierBigDropRock(e) => {
                    let v = self.has(Item::Glacier_Big_Drop_Rock);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Glacier_Big_Drop_Rock", e, v
                        ));
                    }
                }
                Expectation::GlacierSeaBurialRock(e) => {
                    let v = self.has(Item::Glacier_Sea_Burial_Rock);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Glacier_Sea_Burial_Rock", e, v
                        ));
                    }
                }
                Expectation::Goodbye(e) => {
                    let v = self.has(Item::Goodbye);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Goodbye", e, v));
                    }
                }
                Expectation::HammondAuth(e) => {
                    let v = self.has(Item::Hammond_Auth);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Hammond_Auth", e, v));
                    }
                }
                Expectation::HealthFragment(e) => {
                    let v = self.count(Item::Health_Fragment);
                    if v != <i8 as Into<i16>>::into(*e) {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Health_Fragment", e, v
                        ));
                    }
                }
                Expectation::HealthNode(e) => {
                    let v = self.count(Item::Health_Node);
                    if v != <i8 as Into<i16>>::into(*e) {
                        errs.push(format!("Expected {} = {}, got: {}", "Health_Node", e, v));
                    }
                }
                Expectation::HealthUpgrade(e) => {
                    let v = self.has(Item::Health_Upgrade);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Health_Upgrade", e, v));
                    }
                }
                Expectation::HealthUpgrade2(e) => {
                    let v = self.has(Item::Health_Upgrade_2);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Health_Upgrade_2", e, v
                        ));
                    }
                }
                Expectation::HealthUpgrade3(e) => {
                    let v = self.has(Item::Health_Upgrade_3);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Health_Upgrade_3", e, v
                        ));
                    }
                }
                Expectation::HealthUpgrade4(e) => {
                    let v = self.has(Item::Health_Upgrade_4);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Health_Upgrade_4", e, v
                        ));
                    }
                }
                Expectation::HereticsGranddaughter(e) => {
                    let v = self.has(Item::Heretics_Granddaughter);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Heretics_Granddaughter", e, v
                        ));
                    }
                }
                Expectation::HereticsTablet(e) => {
                    let v = self.has(Item::Heretics_Tablet);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Heretics_Tablet", e, v
                        ));
                    }
                }
                Expectation::IceAxe(e) => {
                    let v = self.has(Item::Ice_Axe);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Ice_Axe", e, v));
                    }
                }
                Expectation::Infect(e) => {
                    let v = self.has(Item::Infect);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Infect", e, v));
                    }
                }
                Expectation::InfectL1(e) => {
                    let v = self.has(Item::Infect_L1);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Infect_L1", e, v));
                    }
                }
                Expectation::InfectL2(e) => {
                    let v = self.has(Item::Infect_L2);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Infect_L2", e, v));
                    }
                }
                Expectation::InfectL3(e) => {
                    let v = self.has(Item::Infect_L3);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Infect_L3", e, v));
                    }
                }
                Expectation::InfectionRange(e) => {
                    let v = self.has(Item::Infection_Range);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Infection_Range", e, v
                        ));
                    }
                }
                Expectation::InfectionRange2(e) => {
                    let v = self.has(Item::Infection_Range_2);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Infection_Range_2", e, v
                        ));
                    }
                }
                Expectation::InfectionRange3(e) => {
                    let v = self.has(Item::Infection_Range_3);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Infection_Range_3", e, v
                        ));
                    }
                }
                Expectation::InfectionSpeed(e) => {
                    let v = self.has(Item::Infection_Speed);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Infection_Speed", e, v
                        ));
                    }
                }
                Expectation::IrikarGudam(e) => {
                    let v = self.has(Item::Irikar_Gudam);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Irikar_Gudam", e, v));
                    }
                }
                Expectation::IrikarRoyalStorageWall(e) => {
                    let v = self.has(Item::Irikar_Royal_Storage_Wall);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Irikar_Royal_Storage_Wall", e, v
                        ));
                    }
                }
                Expectation::LamentForFools(e) => {
                    let v = self.has(Item::Lament_for_Fools);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Lament_for_Fools", e, v
                        ));
                    }
                }
                Expectation::LedgeGrab(e) => {
                    let v = self.has(Item::Ledge_Grab);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Ledge_Grab", e, v));
                    }
                }
                Expectation::LetterFromTrace(e) => {
                    let v = self.has(Item::Letter_from_Trace);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Letter_from_Trace", e, v
                        ));
                    }
                }
                Expectation::MeleeDamage(e) => {
                    let v = self.has(Item::Melee_Damage);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Melee_Damage", e, v));
                    }
                }
                Expectation::MeleeDamage2(e) => {
                    let v = self.has(Item::Melee_Damage_2);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Melee_Damage_2", e, v));
                    }
                }
                Expectation::MeleeSpeed(e) => {
                    let v = self.has(Item::Melee_Speed);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Melee_Speed", e, v));
                    }
                }
                Expectation::MeleeSpeed2(e) => {
                    let v = self.has(Item::Melee_Speed_2);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Melee_Speed_2", e, v));
                    }
                }
                Expectation::MistUpgrade(e) => {
                    let v = self.has(Item::Mist_Upgrade);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Mist_Upgrade", e, v));
                    }
                }
                Expectation::NaniteMist(e) => {
                    let v = self.has(Item::Nanite_Mist);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Nanite_Mist", e, v));
                    }
                }
                Expectation::NanoLattice2(e) => {
                    let v = self.has(Item::Nano_Lattice_2);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Nano_Lattice_2", e, v));
                    }
                }
                Expectation::NanoPoints(e) => {
                    let v = self.has(Item::Nano_Points);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Nano_Points", e, v));
                    }
                }
                Expectation::NanoPoints2(e) => {
                    let v = self.has(Item::Nano_Points_2);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Nano_Points_2", e, v));
                    }
                }
                Expectation::Notes20530227(e) => {
                    let v = self.has(Item::Notes_2053_02_27);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Notes_2053_02_27", e, v
                        ));
                    }
                }
                Expectation::PlagueOfThoughts(e) => {
                    let v = self.has(Item::Plague_of_Thoughts);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Plague_of_Thoughts", e, v
                        ));
                    }
                }
                Expectation::PowerMatrix(e) => {
                    let v = self.count(Item::Power_Matrix);
                    if v != <i8 as Into<i16>>::into(*e) {
                        errs.push(format!("Expected {} = {}, got: {}", "Power_Matrix", e, v));
                    }
                }
                Expectation::RangedDamage(e) => {
                    let v = self.has(Item::Ranged_Damage);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Ranged_Damage", e, v));
                    }
                }
                Expectation::RangedDamage2(e) => {
                    let v = self.has(Item::Ranged_Damage_2);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Ranged_Damage_2", e, v
                        ));
                    }
                }
                Expectation::RangedSpeed(e) => {
                    let v = self.has(Item::Ranged_Speed);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Ranged_Speed", e, v));
                    }
                }
                Expectation::RangedSpeed2(e) => {
                    let v = self.has(Item::Ranged_Speed_2);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Ranged_Speed_2", e, v));
                    }
                }
                Expectation::RecordLosses(e) => {
                    let v = self.has(Item::Record_Losses);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Record_Losses", e, v));
                    }
                }
                Expectation::RemoteBoomerang(e) => {
                    let v = self.has(Item::Remote_Boomerang);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Remote_Boomerang", e, v
                        ));
                    }
                }
                Expectation::RemoteDrone(e) => {
                    let v = self.has(Item::Remote_Drone);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Remote_Drone", e, v));
                    }
                }
                Expectation::ResearchersMissing(e) => {
                    let v = self.has(Item::Researchers_Missing);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Researchers_Missing", e, v
                        ));
                    }
                }
                Expectation::RoyalDagger(e) => {
                    let v = self.has(Item::Royal_Dagger);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Royal_Dagger", e, v));
                    }
                }
                Expectation::Separation(e) => {
                    let v = self.has(Item::Separation);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Separation", e, v));
                    }
                }
                Expectation::Shockwave(e) => {
                    let v = self.has(Item::Shockwave);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Shockwave", e, v));
                    }
                }
                Expectation::SiunaStorageWall(e) => {
                    let v = self.has(Item::Siuna_Storage_Wall);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Siuna_Storage_Wall", e, v
                        ));
                    }
                }
                Expectation::SlingshotCharge(e) => {
                    let v = self.has(Item::Slingshot_Charge);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Slingshot_Charge", e, v
                        ));
                    }
                }
                Expectation::SlingshotHook(e) => {
                    let v = self.has(Item::Slingshot_Hook);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Slingshot_Hook", e, v));
                    }
                }
                Expectation::SlingshotWeapon(e) => {
                    let v = self.has(Item::Slingshot_Weapon);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Slingshot_Weapon", e, v
                        ));
                    }
                }
                Expectation::SniperValleyRock1(e) => {
                    let v = self.has(Item::Sniper_Valley_Rock_1);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Sniper_Valley_Rock_1", e, v
                        ));
                    }
                }
                Expectation::SniperValleyRock2(e) => {
                    let v = self.has(Item::Sniper_Valley_Rock_2);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Sniper_Valley_Rock_2", e, v
                        ));
                    }
                }
                Expectation::StationPower(e) => {
                    let v = self.has(Item::Station_Power);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Station_Power", e, v));
                    }
                }
                Expectation::StormBomb(e) => {
                    let v = self.has(Item::Storm_Bomb);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Storm_Bomb", e, v));
                    }
                }
                Expectation::SuspensionBridge(e) => {
                    let v = self.has(Item::Suspension_Bridge);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Suspension_Bridge", e, v
                        ));
                    }
                }
                Expectation::Switch3611(e) => {
                    let v = self.has(Item::Switch_36_11);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Switch_36_11", e, v));
                    }
                }
                Expectation::Switch4012(e) => {
                    let v = self.has(Item::Switch_40_12);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Switch_40_12", e, v));
                    }
                }
                Expectation::TerminalBreakthrough1(e) => {
                    let v = self.has(Item::Terminal_Breakthrough_1);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Terminal_Breakthrough_1", e, v
                        ));
                    }
                }
                Expectation::TerminalBreakthrough2(e) => {
                    let v = self.has(Item::Terminal_Breakthrough_2);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Terminal_Breakthrough_2", e, v
                        ));
                    }
                }
                Expectation::TheEternalArm(e) => {
                    let v = self.has(Item::The_Eternal_Arm);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "The_Eternal_Arm", e, v
                        ));
                    }
                }
                Expectation::TheIdealKiengir(e) => {
                    let v = self.has(Item::The_Ideal_Kiengir);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "The_Ideal_Kiengir", e, v
                        ));
                    }
                }
                Expectation::TheStudent(e) => {
                    let v = self.has(Item::The_Student);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "The_Student", e, v));
                    }
                }
                Expectation::Udusan(e) => {
                    let v = self.has(Item::Udusan);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Udusan", e, v));
                    }
                }
                Expectation::UhrumAnnunaCorridorBlock(e) => {
                    let v = self.has(Item::Uhrum_Annuna_Corridor_Block);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Uhrum_Annuna_Corridor_Block", e, v
                        ));
                    }
                }
                Expectation::UhrumWaterfallWall(e) => {
                    let v = self.has(Item::Uhrum_Waterfall_Wall);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Uhrum_Waterfall_Wall", e, v
                        ));
                    }
                }
                Expectation::UhrumWaterfallsBlock(e) => {
                    let v = self.has(Item::Uhrum_Waterfalls_Block);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Uhrum_Waterfalls_Block", e, v
                        ));
                    }
                }
                Expectation::UhrumWestEntranceGate(e) => {
                    let v = self.has(Item::Uhrum_West_Entrance_Gate);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Uhrum_West_Entrance_Gate", e, v
                        ));
                    }
                }
                Expectation::UhrumWestEntranceLowerWall(e) => {
                    let v = self.has(Item::Uhrum_West_Entrance_Lower_Wall);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Uhrum_West_Entrance_Lower_Wall", e, v
                        ));
                    }
                }
                Expectation::UhrumWestEntranceUpperWall(e) => {
                    let v = self.has(Item::Uhrum_West_Entrance_Upper_Wall);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Uhrum_West_Entrance_Upper_Wall", e, v
                        ));
                    }
                }
                Expectation::UnderSiege(e) => {
                    let v = self.has(Item::Under_Siege);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Under_Siege", e, v));
                    }
                }
                Expectation::UnderwaterMovement(e) => {
                    let v = self.has(Item::Underwater_Movement);
                    if v != *e {
                        errs.push(format!(
                            "Expected {} = {}, got: {}",
                            "Underwater_Movement", e, v
                        ));
                    }
                }
                Expectation::WallClimb(e) => {
                    let v = self.has(Item::Wall_Climb);
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "Wall_Climb", e, v));
                    }
                }
            }
        }
        if errs.is_empty() {
            Ok(())
        } else {
            Err(errs.join("\n"))
        }
    }

    fn take_exit(&mut self, exit: &graph::Exit, world: &graph::World) {
        self.set_position(exit.dest(), world);
        match exit.id() {
            _ => (),
        }
    }

    fn position(&self) -> SpotId {
        self.position
    }
    fn set_position_raw(&mut self, pos: SpotId) {
        self.position = pos;
    }
    fn set_position(&mut self, pos: SpotId, world: &graph::World) {
        let area = get_area(pos);
        match area {
            AreaId::Amagi__East_Lake => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Amagi__Gated_Community => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Amagi__Grid_31_19 => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Amagi__Liru_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Amagi__Main_Area => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Amagi__Secret_Chamber => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Amagi__West_Lake => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Amagi_Breach__East_Connector => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Amagi_Breach__East_Entrance => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Apocalypse => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Apocalypse_Hallway => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Center_Climb => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Center_Save => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__ANNUNA__CENTER_SAVE__SAVE);
                }
            }
            AreaId::Annuna__East_Bridge => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__East_Climb => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__East_Hideout => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Egg_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Factory_Access => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Factory_Entrance => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__ANNUNA__FACTORY_ENTRANCE__SAVE);
                }
            }
            AreaId::Annuna__Filter_Teleporter => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Final_Cache => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Final_Save => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Hidden_Portal => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Lamassu => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Lower_Hallway => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Middle_Hallway => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Mirror_Match => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Seals => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Siuna_Storage => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Sniper_Valley => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Spider_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Twisty_Passages => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Udug_Gate => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Upper_Hallway => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Upper_Save => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__ANNUNA__UPPER_SAVE__SAVE);
                }
            }
            AreaId::Annuna__Vertical_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__West_Bridge => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__West_Climb => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Antarctica__East => {
                if get_area(self.position) != area {
                    self.save = SpotId::Antarctica__East__Save_Point;
                }
            }
            AreaId::Ebih__Base_Camp => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Boss_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__By_Garage => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Drone_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Ebih_East => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Ebih_West => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Gem_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Grid_21_2_6 => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Grid_25_10_12 => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Grid_25_2_6 => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Grid_26_10_11 => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Guarded_Health => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Observation_Tower_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Truck_Gate => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Vertical_Interchange => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Walled_Off => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Waterfall => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Filter__Core => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Filter__Entrance => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Filter__Exit => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Filter__Lower_Hallway => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Filter__Scaffolding => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Filter__Upper_Hallway => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Antechamber => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Breachable_Wall => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Carnelian => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Clouds => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Dual_Path => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__East_Caverns => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Far_Corner => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Gateway => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Giguna_Base => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Giguna_Northeast => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Gubi_Lair => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Hard_Rock => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Helipad => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Labyrinth => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Labyrinth_East => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Lamassu => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Mural => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Ruins_Center => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Ruins_East => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Ruins_Top => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Ruins_West => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Separator => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Vertical_Interchange => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Wasteland => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__West_Caverns => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__West_Tower => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Antechamber => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Ascent => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Below_Chimney => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Central => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Chimney => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Cubby => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Fire_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Grid_14_10_11 => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Peak => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Pink_Clouds => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Robopede => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Slingshot => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__SW_Save => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Apocalypse_Entry => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Boomerang_Antechamber => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Boomerang_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Compass_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Crystals => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Dock_Outside => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Grid_31_9_12 => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Grid_32_7_10 => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Grid_37_38_9 => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Grid_39_40_7_9 => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Grid_42_10 => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Grid_43_10_11 => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Hammonds_End => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Lake_Main_Entrance => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Ledge_Grab_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Peak => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Revival => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Sea_Burial => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Secret_Chamber => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__The_Big_Drop => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Vertical_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier_Breach__Angry_Lions => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier_Breach__Control => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier_Breach__Crystals => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier_Breach__Electric_Arena => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier_Breach__Empty_Space => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier_Breach__Floaters => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier_Breach__Grate_Work => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier_Breach__Guarded_Corridor => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier_Breach__Hammonds_Breach => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER_BREACH__HAMMONDS_BREACH__SAVE);
                }
            }
            AreaId::Glacier_Breach__Piano_Roll => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier_Breach__Save_and_Exit => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier_Breach__South_Save => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier_Breach__Spidery_Connector => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier_Breach__Stable_Floor => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier_Breach__Stacked_Enemies => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier_Breach__West_Save => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier_Breach__Zappers => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Interior__Building_Interior => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Interior__Bunker_Interior => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Interior__Cave_Behind_Waterfall => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Interior__Ebih_Cave => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Interior__Garage => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Interior__Outpost_Interior => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Interior__Tent_Interior => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Abandoned_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Airy => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Basement_Pipes => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Basement_Portal => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Beach => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Beach_Save => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Boss_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__East_Rooftops => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Empty_Foyer => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Hub => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Lamassu => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Midwest => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Sight_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Basement_Save => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Exit_Corridor => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Flappy_Drone => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Four_way => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Gauntlet => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Hover_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Neon_Corridor => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Sandy_Lair => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Save_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Uhrum_Connector => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Worm_Rave => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Menu__Breach_Map => {
                if get_area(self.position) != area {
                    rules::action_invoke_save_last(self, world, pos);
                }
            }
            AreaId::Menu__Kiengir_Map => {
                if get_area(self.position) != area {
                    rules::action_invoke_save_last(self, world, pos);
                }
            }
            AreaId::Menu__Warp_Only => {
                if get_area(self.position) != area {
                    rules::action_invoke_save_last(self, world, pos);
                }
            }
            AreaId::Uhrum__Annuna_Corridor => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Uhrum__Artillery_Practice => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Uhrum__East_Lake => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Uhrum__Glitchy_Corridor => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Uhrum__Save_Room => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__UHRUM__SAVE_ROOM__SAVE);
                }
            }
            AreaId::Uhrum__Siege_Corridor => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Uhrum__Tulip_Tower => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Uhrum__Waterfalls => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Uhrum__West_Entrance => {
                if get_area(self.position) != area {
                    rules::action_invoke_reset_old_area__newpos(self, world, pos);
                }
            }
            _ => (),
        }
        if self.position != pos {
            match pos {
                SpotId::Amagi__East_Lake__Center_East_Water_Surface_Fast => {}
                SpotId::Amagi__East_Lake__Center_East_Water_Surface_Slow => {}
                SpotId::Amagi__East_Lake__Center_Lower_Platform_East => {}
                SpotId::Amagi__East_Lake__Center_Northeast_Platform => {}
                SpotId::Amagi__East_Lake__Center_Upper_Platform => {}
                SpotId::Amagi__East_Lake__Center_Water_Below_Platform_East => {}
                SpotId::Amagi__East_Lake__Center_Water_Below_Platform_West => {}
                SpotId::Amagi__East_Lake__Center_West_Platform => {}
                SpotId::Amagi__East_Lake__Center_West_Water_Surface => {}
                SpotId::Amagi__East_Lake__East_15_Flat => {}
                SpotId::Amagi__East_Lake__East_15_Lower => {}
                SpotId::Amagi__East_Lake__East_15_Lower_Hover => {}
                SpotId::Amagi__East_Lake__East_15_Upper_Hover => {}
                SpotId::Amagi__East_Lake__East_Hill => {}
                SpotId::Amagi__East_Lake__East_Water_Surface => {}
                SpotId::Amagi__East_Lake__Far_West_Water_Surface => {}
                SpotId::Amagi__East_Lake__Foot => {}
                SpotId::Amagi__East_Lake__Kum_Abala => {}
                SpotId::Amagi__East_Lake__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__AMAGI__EAST_LAKE__SAVE);
                }
                SpotId::Amagi__East_Lake__Southeast_Column => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__AMAGI__EAST_LAKE__SAVE);
                }
                SpotId::Amagi__East_Lake__Southwest_Column_East => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__AMAGI__EAST_LAKE__SAVE);
                }
                SpotId::Amagi__East_Lake__West_Water_Surface => {}
                SpotId::Amagi__Liru_Room__Bottom => {}
                SpotId::Amagi__Liru_Room__Shrine => {}
                SpotId::Amagi__Main_Area__Carving => {}
                SpotId::Amagi__Main_Area__Enemy_Side => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__AMAGI__MAIN_AREA__SAVE);
                }
                SpotId::Amagi__Main_Area__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__AMAGI__MAIN_AREA__SAVE);
                }
                SpotId::Amagi__Main_Area__Secret_Outcropping => {}
                SpotId::Amagi__Main_Area__Way_Off_To_The_Side => {}
                SpotId::Amagi__Main_Area__West_15 => {}
                SpotId::Amagi__West_Lake__Cavern_Eye => {}
                SpotId::Amagi__West_Lake__Cavern_Front_Pillar => {}
                SpotId::Amagi__West_Lake__Cavern_Middle_Pillar => {}
                SpotId::Amagi__West_Lake__Cavern_Rear_Pillar => {}
                SpotId::Amagi__West_Lake__Cavern_Refill_Station => {}
                SpotId::Amagi__West_Lake__Cavern_Tear_Duct => {}
                SpotId::Amagi__West_Lake__Stronghold_Ceiling_Left => {}
                SpotId::Amagi__West_Lake__Stronghold_Item => {}
                SpotId::Amagi__West_Lake__Stronghold_Middle_Column => {}
                SpotId::Amagi__West_Lake__Stronghold_Rear_Wall => {}
                SpotId::Amagi__West_Lake__Stronghold_Top => {}
                SpotId::Amagi_Breach__East_Entrance__East => {}
                SpotId::Amagi_Breach__East_Entrance__Grate_Left => {}
                SpotId::Amagi_Breach__East_Entrance__Grate_Right => {}
                SpotId::Amagi_Breach__East_Entrance__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__AMAGI_BREACH__EAST_ENTRANCE__SAVE);
                }
                SpotId::Amagi_Breach__East_Entrance__Upper_Slope => {}
                SpotId::Amagi_Breach__East_Entrance__West => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__AMAGI_BREACH__EAST_ENTRANCE__SAVE);
                }
                SpotId::Annuna__East_Bridge__Below_Cavern => {}
                SpotId::Annuna__East_Bridge__Cavern_Cache => {}
                SpotId::Annuna__East_Bridge__Cavern_Foyer => {}
                SpotId::Annuna__East_Bridge__Cavern_Right => {}
                SpotId::Annuna__East_Bridge__Flung_West => {}
                SpotId::Annuna__East_Bridge__Gate_Button_Gap => {}
                SpotId::Annuna__East_Bridge__Tower_Base_East => {}
                SpotId::Annuna__East_Bridge__Tower_Base_West => {}
                SpotId::Annuna__East_Bridge__Tower_Core => {}
                SpotId::Annuna__East_Bridge__Tower_East_Ledge => {}
                SpotId::Annuna__East_Bridge__Tower_Gate => {}
                SpotId::Annuna__East_Bridge__Tower_Opening => {}
                SpotId::Annuna__East_Bridge__Tower_Secret => {}
                SpotId::Annuna__East_Bridge__Tower_West_Ledge => {}
                SpotId::Annuna__East_Bridge__Upper_West_Partway_East => {}
                SpotId::Annuna__East_Bridge__West_22 => {}
                SpotId::Annuna__Egg_Room__Cache => {}
                SpotId::Annuna__Egg_Room__Corner_Platform => {}
                SpotId::Annuna__Egg_Room__East => {}
                SpotId::Annuna__Egg_Room__Passage_Entrance => {}
                SpotId::Annuna__Egg_Room__Second_Egg => {}
                SpotId::Annuna__Egg_Room__Third_Egg => {}
                SpotId::Annuna__Filter_Teleporter__Door_Ledge => {}
                SpotId::Annuna__Filter_Teleporter__Egg => {}
                SpotId::Annuna__Filter_Teleporter__Northeast_Cubby => {}
                SpotId::Annuna__Filter_Teleporter__Northeast_Ministair => {}
                SpotId::Annuna__Filter_Teleporter__Shaft_Bottom => {}
                SpotId::Annuna__Filter_Teleporter__Shaft_Top => {}
                SpotId::Annuna__Filter_Teleporter__Stair_Top => {}
                SpotId::Annuna__Filter_Teleporter__West_19 => {}
                SpotId::Annuna__Filter_Teleporter__West_19_Mid_flight => {}
                SpotId::Annuna__Filter_Teleporter__West_21 => {}
                SpotId::Annuna__Mirror_Match__East_26_Lower => {}
                SpotId::Annuna__Mirror_Match__East_26_Upper => {}
                SpotId::Annuna__Mirror_Match__Eastward => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE);
                }
                SpotId::Annuna__Mirror_Match__Plinth => {}
                SpotId::Annuna__Mirror_Match__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE);
                }
                SpotId::Annuna__Mirror_Match__Staircase => {}
                SpotId::Annuna__Mirror_Match__Waving_Distance => {}
                SpotId::Annuna__Mirror_Match__West_Gap => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE);
                }
                SpotId::Annuna__Siuna_Storage__Cache => {}
                SpotId::Annuna__Siuna_Storage__Wall_Left => {}
                SpotId::Annuna__Siuna_Storage__Wall_Right => {}
                SpotId::Annuna__Siuna_Storage__Within_Range => {}
                SpotId::Annuna__Sniper_Valley__Bridge_End => {}
                SpotId::Annuna__Sniper_Valley__Cavern_Cache => {}
                SpotId::Annuna__Sniper_Valley__Cavern_Tight_Corner => {}
                SpotId::Annuna__Sniper_Valley__East => {}
                SpotId::Annuna__Sniper_Valley__Table => {}
                SpotId::Annuna__Spider_Room__Center => {}
                SpotId::Annuna__Spider_Room__Healthy_Corner => {}
                SpotId::Annuna__Spider_Room__Northeast_Ledge => {}
                SpotId::Annuna__Spider_Room__Upper_Seam => {}
                SpotId::Annuna__Twisty_Passages__Northeast_C => {}
                SpotId::Annuna__Twisty_Passages__Northeast_D => {}
                SpotId::Annuna__Twisty_Passages__Northwest_Alcove => {}
                SpotId::Annuna__Twisty_Passages__Top => {}
                SpotId::Annuna__Twisty_Passages__West => {}
                SpotId::Annuna__Twisty_Passages__West_Dip => {}
                SpotId::Annuna__Twisty_Passages__West_Hill_Left => {}
                SpotId::Annuna__Twisty_Passages__West_Hill_Right => {}
                SpotId::Annuna__Twisty_Passages__West_Ledge => {}
                SpotId::Annuna__Upper_Hallway__Behind_Pedestal => {}
                SpotId::Annuna__Upper_Hallway__Portal_Stand => {}
                SpotId::Annuna__Vertical_Room__Above_Plinth => {}
                SpotId::Annuna__Vertical_Room__East_20 => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE);
                }
                SpotId::Annuna__Vertical_Room__East_21 => {}
                SpotId::Annuna__Vertical_Room__Gate_Button => {}
                SpotId::Annuna__Vertical_Room__Gate_Ledge => {}
                SpotId::Annuna__Vertical_Room__Lower_Ministair => {}
                SpotId::Annuna__Vertical_Room__Middle_Ministair => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE);
                }
                SpotId::Annuna__Vertical_Room__Middle_Overhang => {}
                SpotId::Annuna__Vertical_Room__Middle_West_Shaft => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE);
                }
                SpotId::Annuna__Vertical_Room__Plinth => {}
                SpotId::Annuna__Vertical_Room__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE);
                }
                SpotId::Annuna__Vertical_Room__Save_Point_Left => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE);
                }
                SpotId::Annuna__Vertical_Room__Save_Point_Right => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE);
                }
                SpotId::Annuna__Vertical_Room__Upper_Cache => {}
                SpotId::Annuna__Vertical_Room__West_17 => {}
                SpotId::Annuna__Vertical_Room__West_20 => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE);
                }
                SpotId::Annuna__Vertical_Room__West_21 => {}
                SpotId::Annuna__West_Bridge__Plinth => {}
                SpotId::Annuna__West_Bridge__Save_Point => {}
                SpotId::Annuna__West_Climb__Cache => {}
                SpotId::Annuna__West_Climb__East_20 => {}
                SpotId::Annuna__West_Climb__Platform_2 => {}
                SpotId::Annuna__West_Climb__Switch_Ledge => {}
                SpotId::Ebih__Base_Camp__Behind_Vehicle => {}
                SpotId::Ebih__Base_Camp__Building_Entry => {}
                SpotId::Ebih__Base_Camp__Bunker_Entry => {}
                SpotId::Ebih__Base_Camp__Lake_Access => {}
                SpotId::Ebih__Base_Camp__Left_Platform_Moved => {}
                SpotId::Ebih__Base_Camp__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__EBIH__BASE_CAMP__SAVE);
                }
                SpotId::Ebih__Base_Camp__Tent_Entry => {}
                SpotId::Ebih__Base_Camp__Top_Platform => {}
                SpotId::Ebih__Base_Camp__West_13 => {}
                SpotId::Ebih__Boss_Room__Boss => {}
                SpotId::Ebih__Boss_Room__East_6 => {}
                SpotId::Ebih__Boss_Room__East_Ledge => {}
                SpotId::Ebih__Boss_Room__High_Platform => {}
                SpotId::Ebih__Boss_Room__Lower_Ledge => {}
                SpotId::Ebih__Boss_Room__Upper_Tree => {}
                SpotId::Ebih__Boss_Room__West_5 => {}
                SpotId::Ebih__By_Garage__Crawlspace => {}
                SpotId::Ebih__By_Garage__Crawlspace_Opening => {}
                SpotId::Ebih__By_Garage__East_12 => {}
                SpotId::Ebih__By_Garage__East_13 => {}
                SpotId::Ebih__By_Garage__East_Below_Platforms => {}
                SpotId::Ebih__By_Garage__East_Platform => {}
                SpotId::Ebih__By_Garage__Garage_Entry => {}
                SpotId::Ebih__By_Garage__Outcropping => {}
                SpotId::Ebih__Drone_Room__Item => {}
                SpotId::Ebih__Drone_Room__Middle_Platform => {}
                SpotId::Ebih__Drone_Room__Pit_Left => {}
                SpotId::Ebih__Drone_Room__Portal => {}
                SpotId::Ebih__Drone_Room__West_6 => {}
                SpotId::Ebih__Ebih_East__Corner => {}
                SpotId::Ebih__Ebih_East__Dispenser => {}
                SpotId::Ebih__Ebih_East__East_9 => {}
                SpotId::Ebih__Ebih_East__East_Hill => {}
                SpotId::Ebih__Ebih_East__East_Ledge => {}
                SpotId::Ebih__Ebih_East__Ledge_End => {}
                SpotId::Ebih__Ebih_East__Lower_Moving_Platform => {}
                SpotId::Ebih__Ebih_West__Above_Alcove => {}
                SpotId::Ebih__Ebih_West__Above_Chute => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE);
                }
                SpotId::Ebih__Ebih_West__Alcove => {}
                SpotId::Ebih__Ebih_West__Alcove_Entrance => {}
                SpotId::Ebih__Ebih_West__East_10 => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__MID_SAVE);
                }
                SpotId::Ebih__Ebih_West__East_7 => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE);
                }
                SpotId::Ebih__Ebih_West__Lower_Platform => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE);
                }
                SpotId::Ebih__Ebih_West__Lower_Save => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE);
                }
                SpotId::Ebih__Ebih_West__Medium_High_Platform => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE);
                }
                SpotId::Ebih__Ebih_West__Mid_Save => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__MID_SAVE);
                }
                SpotId::Ebih__Ebih_West__Upper_Save => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE);
                }
                SpotId::Ebih__Ebih_West__West_13 => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE);
                }
                SpotId::Ebih__Grid_25_10_12__East_10 => {}
                SpotId::Ebih__Grid_25_10_12__Hidden_Bush => {}
                SpotId::Ebih__Grid_25_10_12__West_10 => {}
                SpotId::Ebih__Grid_25_2_6__Pit => {}
                SpotId::Ebih__Grid_26_10_11__Ledge => {}
                SpotId::Ebih__Grid_26_10_11__Middle_Bottom => {}
                SpotId::Ebih__Grid_26_10_11__Middle_Platform => {}
                SpotId::Ebih__Grid_26_10_11__Under_Ledge => {}
                SpotId::Ebih__Grid_26_10_11__Upper_Platform => {}
                SpotId::Ebih__Grid_26_10_11__West_11 => {}
                SpotId::Ebih__Guarded_Health__Far_West => {}
                SpotId::Ebih__Guarded_Health__West_Basin => {}
                SpotId::Ebih__Waterfall__Alcove => {}
                SpotId::Ebih__Waterfall__Alcove_Left => {}
                SpotId::Ebih__Waterfall__Cave_Entrance => {}
                SpotId::Ebih__Waterfall__Under_Waterfall => {}
                SpotId::Ebih__Waterfall__Waterfall_Center_Center => {}
                SpotId::Ebih__Waterfall__Waterfall_Center_Left => {}
                SpotId::Ebih__Waterfall__Waterfall_Left => {}
                SpotId::Giguna__Antechamber__Middle_Bricks_Left => {}
                SpotId::Giguna__Antechamber__Middle_Bricks_Right => {}
                SpotId::Giguna__Antechamber__Statue_Head => {}
                SpotId::Giguna__Antechamber__West_15 => {}
                SpotId::Giguna__Breachable_Wall__Above_the_Hole => {}
                SpotId::Giguna__Breachable_Wall__Cave_Mouth_East => {}
                SpotId::Giguna__Breachable_Wall__Cave_Mouth_West => {}
                SpotId::Giguna__Breachable_Wall__Wall_Interior => {}
                SpotId::Giguna__Breachable_Wall__West_Ledge => {}
                SpotId::Giguna__Breachable_Wall__West_Mid_air => {}
                SpotId::Giguna__Carnelian__Door => {}
                SpotId::Giguna__Carnelian__Middle_Platforms => {}
                SpotId::Giguna__Carnelian__Rock => {}
                SpotId::Giguna__Carnelian__Switch => {}
                SpotId::Giguna__Carnelian__Vault => {}
                SpotId::Giguna__Clouds__Cache => {}
                SpotId::Giguna__Clouds__North_Under_Ledge => {}
                SpotId::Giguna__Clouds__Platform_Early_Portal => {}
                SpotId::Giguna__Clouds__Platform_Stop => {}
                SpotId::Giguna__Dual_Path__Base_of_Wall => {}
                SpotId::Giguna__Dual_Path__In_the_Grass => {}
                SpotId::Giguna__Dual_Path__Wall_Secret => {}
                SpotId::Giguna__Dual_Path__Wall_Top => {}
                SpotId::Giguna__East_Caverns__Arc_Passage => {}
                SpotId::Giguna__East_Caverns__Carving => {}
                SpotId::Giguna__East_Caverns__Hidden_Passage_Center => {}
                SpotId::Giguna__East_Caverns__Hidden_Passage_East => {}
                SpotId::Giguna__Gateway__Block_Lowered => {}
                SpotId::Giguna__Gateway__Block_Right => {}
                SpotId::Giguna__Gateway__Button => {}
                SpotId::Giguna__Gateway__East_19 => {}
                SpotId::Giguna__Gateway__Far_Ledge => {}
                SpotId::Giguna__Gateway__Flask_Ledge => {}
                SpotId::Giguna__Gateway__Left_Platform => {}
                SpotId::Giguna__Gateway__One_Jump => {}
                SpotId::Giguna__Gateway__Refill_Station => {}
                SpotId::Giguna__Gateway__Right_Platform => {}
                SpotId::Giguna__Giguna_Base__Building_Entry => {}
                SpotId::Giguna__Giguna_Base__Kari => {}
                SpotId::Giguna__Giguna_Base__Ruin => {}
                SpotId::Giguna__Giguna_Base__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE);
                }
                SpotId::Giguna__Giguna_Base__Staircase_Bottom => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE);
                }
                SpotId::Giguna__Giguna_Base__Staircase_Top => {}
                SpotId::Giguna__Giguna_Base__Table => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE);
                }
                SpotId::Giguna__Giguna_Base__West_15 => {}
                SpotId::Giguna__Giguna_Base__West_16 => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE);
                }
                SpotId::Giguna__Giguna_Base__West_Grate => {}
                SpotId::Giguna__Giguna_Northeast__Door => {}
                SpotId::Giguna__Giguna_Northeast__Gate_Button => {}
                SpotId::Giguna__Giguna_Northeast__Gate_Left => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);
                }
                SpotId::Giguna__Giguna_Northeast__Gate_Right => {}
                SpotId::Giguna__Giguna_Northeast__Gate_Vent => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);
                }
                SpotId::Giguna__Giguna_Northeast__Right_Column => {}
                SpotId::Giguna__Giguna_Northeast__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);
                }
                SpotId::Giguna__Giguna_Northeast__Step => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);
                }
                SpotId::Giguna__Giguna_Northeast__Switch => {}
                SpotId::Giguna__Giguna_Northeast__Vault => {}
                SpotId::Giguna__Giguna_Northeast__West_10 => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);
                }
                SpotId::Giguna__Gubi_Lair__Center_Platform => {}
                SpotId::Giguna__Gubi_Lair__East_15 => {}
                SpotId::Giguna__Gubi_Lair__East_Tree => {}
                SpotId::Giguna__Gubi_Lair__Pedestal => {}
                SpotId::Giguna__Helipad__So_Close => {}
                SpotId::Giguna__Helipad__Tablet_Ledge => {}
                SpotId::Giguna__Helipad__Wall_Bottom => {}
                SpotId::Giguna__Lamassu__Deposit => {}
                SpotId::Giguna__Ruins_Center__Center_Top => {}
                SpotId::Giguna__Ruins_Center__East_8 => {}
                SpotId::Giguna__Ruins_Center__Tablet => {}
                SpotId::Giguna__Ruins_East__Way_Up_High => {}
                SpotId::Giguna__Ruins_Top__East_7 => {}
                SpotId::Giguna__Ruins_Top__East_Door => {}
                SpotId::Giguna__Ruins_Top__Flask => {}
                SpotId::Giguna__Ruins_Top__Interior_Ledge => {}
                SpotId::Giguna__Ruins_Top__Portal => {}
                SpotId::Giguna__Ruins_Top__Portal_Left => {}
                SpotId::Giguna__Ruins_Top__Rooftop_East => {}
                SpotId::Giguna__Ruins_Top__Rooftop_Gutter => {}
                SpotId::Giguna__Ruins_Top__Rooftop_West => {}
                SpotId::Giguna__Ruins_Top__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);
                }
                SpotId::Giguna__Ruins_Top__Small_Ledge => {}
                SpotId::Giguna__Ruins_Top__Switch => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);
                }
                SpotId::Giguna__Ruins_Top__Turret_Balcony_East => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);
                }
                SpotId::Giguna__Ruins_Top__Turret_Balcony_West => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);
                }
                SpotId::Giguna__Ruins_Top__Upper_Tunnel => {}
                SpotId::Giguna__Ruins_Top__West_Pillar => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);
                }
                SpotId::Giguna__Ruins_West__East_9 => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE);
                }
                SpotId::Giguna__Ruins_West__Nook => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE);
                }
                SpotId::Giguna__Ruins_West__Platform => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE);
                }
                SpotId::Giguna__Ruins_West__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE);
                }
                SpotId::Giguna__Wasteland__Bluff_by_Door => {}
                SpotId::Giguna__Wasteland__Cache_Ledge => {}
                SpotId::Giguna__Wasteland__Door_Left => {}
                SpotId::Giguna__Wasteland__Door_Right => {}
                SpotId::Giguna__Wasteland__East_12 => {}
                SpotId::Giguna__Wasteland__East_14 => {}
                SpotId::Giguna__Wasteland__Left_Platform_East => {}
                SpotId::Giguna__Wasteland__Left_Platform_West => {}
                SpotId::Giguna__Wasteland__Lower_Path_Left => {}
                SpotId::Giguna__Wasteland__Lower_Path_Right => {}
                SpotId::Giguna__Wasteland__Lower_Platform_East => {}
                SpotId::Giguna__Wasteland__Passage_Cache => {}
                SpotId::Giguna__Wasteland__Switch => {}
                SpotId::Giguna__Wasteland__Switch_Approach => {}
                SpotId::Giguna__Wasteland__Switch_Ledge => {}
                SpotId::Giguna__Wasteland__Tiny_Hill => {}
                SpotId::Giguna__Wasteland__Upper_Cache => {}
                SpotId::Giguna__Wasteland__West_14 => {}
                SpotId::Giguna__West_Caverns__Bush => {}
                SpotId::Giguna__West_Caverns__Cache => {}
                SpotId::Giguna__West_Caverns__Column_1_Top_Left => {}
                SpotId::Giguna__West_Caverns__Column_1_Top_Right => {}
                SpotId::Giguna__West_Caverns__Column_2_Top => {}
                SpotId::Giguna__West_Caverns__Northwest => {}
                SpotId::Giguna__West_Caverns__Top_Gap_Left => {}
                SpotId::Giguna__West_Caverns__Top_Gap_Right => {}
                SpotId::Giguna__West_Tower__Top => {}
                SpotId::Giguna_Breach__Chimney__Cache => {}
                SpotId::Giguna_Breach__Chimney__East_8 => {}
                SpotId::Giguna_Breach__Cubby__Entrance => {}
                SpotId::Giguna_Breach__Cubby__Rocks => {}
                SpotId::Giguna_Breach__Peak__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA_BREACH__PEAK__SAVE);
                }
                SpotId::Giguna_Breach__SW_Save__East_12 => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE);
                }
                SpotId::Giguna_Breach__SW_Save__Lower_Platform => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE);
                }
                SpotId::Giguna_Breach__SW_Save__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE);
                }
                SpotId::Glacier__Boomerang_Room__Center_Ledge => {}
                SpotId::Glacier__Boomerang_Room__Pedestal => {}
                SpotId::Glacier__Boomerang_Room__Upper_Gate_East => {}
                SpotId::Glacier__Crystals__Lower_Corner => {}
                SpotId::Glacier__Crystals__Lower_Slope => {}
                SpotId::Glacier__Crystals__Portal_Stand => {}
                SpotId::Glacier__Crystals__Top_Corner => {}
                SpotId::Glacier__Crystals__Upper_Ledge => {}
                SpotId::Glacier__Crystals__West => {}
                SpotId::Glacier__Dock_Outside__Above_Ruins => {}
                SpotId::Glacier__Dock_Outside__Cave_Treasure => {}
                SpotId::Glacier__Dock_Outside__Ruins_Platform => {}
                SpotId::Glacier__Dock_Outside__Ruins_Stairs => {}
                SpotId::Glacier__Dock_Outside__Upper_Ledge => {}
                SpotId::Glacier__Dock_Outside__Upper_West_Hill => {}
                SpotId::Glacier__Grid_39_40_7_9__Floating_Rock => {}
                SpotId::Glacier__Grid_39_40_7_9__Fortress_Ledge => {}
                SpotId::Glacier__Grid_39_40_7_9__Third_Upper_Platform => {}
                SpotId::Glacier__Hammonds_End__Between_Center_Doors => {}
                SpotId::Glacier__Hammonds_End__Center_Door_Left => {}
                SpotId::Glacier__Hammonds_End__Center_Door_Right => {}
                SpotId::Glacier__Hammonds_End__Corner => {}
                SpotId::Glacier__Hammonds_End__East_11_Door => {}
                SpotId::Glacier__Hammonds_End__Hammond => {}
                SpotId::Glacier__Hammonds_End__Lower_Grate_Left => {}
                SpotId::Glacier__Hammonds_End__Lower_Grate_Right => {}
                SpotId::Glacier__Hammonds_End__Lower_Pedestal_West => {}
                SpotId::Glacier__Hammonds_End__Lower_Right_Pedestal => {}
                SpotId::Glacier__Hammonds_End__Switch_from_Ledge => {}
                SpotId::Glacier__Hammonds_End__Switch_Near => {}
                SpotId::Glacier__Hammonds_End__Upper_Right_Mid_air => {}
                SpotId::Glacier__Hammonds_End__West_11 => {}
                SpotId::Glacier__Ledge_Grab_Room__Cliff_Bottom => {}
                SpotId::Glacier__Ledge_Grab_Room__Gate => {}
                SpotId::Glacier__Ledge_Grab_Room__Pedestal => {}
                SpotId::Glacier__Revival__Just_Thrown => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE);
                }
                SpotId::Glacier__Revival__Mid_air => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE);
                }
                SpotId::Glacier__Revival__Pillar => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE);
                }
                SpotId::Glacier__Revival__Pillar_Step => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE);
                }
                SpotId::Glacier__Revival__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE);
                }
                SpotId::Glacier__Revival__West_8 => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE);
                }
                SpotId::Glacier__Sea_Burial__Breakable_Rock_Left => {}
                SpotId::Glacier__Sea_Burial__Breakable_Rock_Right => {}
                SpotId::Glacier__Sea_Burial__Deep_Cache => {}
                SpotId::Glacier__Sea_Burial__East_14 => {}
                SpotId::Glacier__Sea_Burial__Grate_Ledge => {}
                SpotId::Glacier__Sea_Burial__Grate_Left => {}
                SpotId::Glacier__Sea_Burial__Grate_Right => {}
                SpotId::Glacier__Sea_Burial__Inside_the_Grate => {}
                SpotId::Glacier__Sea_Burial__Left_Center_Rock => {}
                SpotId::Glacier__Sea_Burial__Right_Center_Rock => {}
                SpotId::Glacier__Sea_Burial__Underwater_Passage_Center => {}
                SpotId::Glacier__Sea_Burial__West_14 => {}
                SpotId::Glacier__Sea_Burial__West_Basin => {}
                SpotId::Glacier__Sea_Burial__West_Water_Surface => {}
                SpotId::Glacier__The_Big_Drop__Breakable_Rock_Right => {}
                SpotId::Glacier__The_Big_Drop__Unstable_Footing => {
                    self.cbits1
                        .insert(flags::ContextBits1::GLACIER__THE_BIG_DROP__CTX__BRIDGE_OPEN);
                }
                SpotId::Glacier__The_Big_Drop__West_14 => {}
                SpotId::Glacier__The_Big_Drop__West_Unstable_Footing => {
                    self.cbits1
                        .insert(flags::ContextBits1::GLACIER__THE_BIG_DROP__CTX__BRIDGE_OPEN);
                }
                SpotId::Glacier__Vertical_Room__East_9 => {}
                SpotId::Glacier__Vertical_Room__Mid_9 => {}
                SpotId::Glacier__Vertical_Room__Peak => {}
                SpotId::Glacier__Vertical_Room__West_9 => {}
                SpotId::Glacier_Breach__Control__East => {}
                SpotId::Glacier_Breach__Control__Further_In => {}
                SpotId::Glacier_Breach__Control__Upper_Corner => {}
                SpotId::Glacier_Breach__Control__Upper_Gap => {}
                SpotId::Glacier_Breach__Grate_Work__Grate_East => {}
                SpotId::Glacier_Breach__Grate_Work__Grate_Interior => {}
                SpotId::Glacier_Breach__Grate_Work__Grate_West => {}
                SpotId::Glacier_Breach__Grate_Work__West_13 => {}
                SpotId::Glacier_Breach__Guarded_Corridor__East => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER_BREACH__GUARDED_CORRIDOR__SAVE);
                }
                SpotId::Glacier_Breach__Guarded_Corridor__Past_the_Guards => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER_BREACH__GUARDED_CORRIDOR__SAVE);
                }
                SpotId::Glacier_Breach__Guarded_Corridor__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER_BREACH__GUARDED_CORRIDOR__SAVE);
                }
                SpotId::Glacier_Breach__Save_and_Exit__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER_BREACH__SAVE_AND_EXIT__SAVE);
                }
                SpotId::Glacier_Breach__Save_and_Exit__West => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER_BREACH__SAVE_AND_EXIT__SAVE);
                }
                SpotId::Glacier_Breach__South_Save__Brick_Ledge => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER_BREACH__SOUTH_SAVE__SAVE);
                }
                SpotId::Glacier_Breach__South_Save__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER_BREACH__SOUTH_SAVE__SAVE);
                }
                SpotId::Glacier_Breach__South_Save__West => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER_BREACH__SOUTH_SAVE__SAVE);
                }
                SpotId::Glacier_Breach__West_Save__East_12 => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER_BREACH__WEST_SAVE__SAVE);
                }
                SpotId::Glacier_Breach__West_Save__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER_BREACH__WEST_SAVE__SAVE);
                }
                SpotId::Glacier_Breach__West_Save__West_Ledge => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER_BREACH__WEST_SAVE__SAVE);
                }
                SpotId::Glacier_Breach__West_Save__West_Nub => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__GLACIER_BREACH__WEST_SAVE__SAVE);
                }
                SpotId::Irikar__Airy__Cavern_Cache => {}
                SpotId::Irikar__Airy__Cavern_Side => {}
                SpotId::Irikar__Basement_Pipes__Double_Pipe_Left => {}
                SpotId::Irikar__Basement_Pipes__High_Pipe => {}
                SpotId::Irikar__Basement_Pipes__Left_Vertical_Pipe => {}
                SpotId::Irikar__Basement_Pipes__Right_Vertical_Pipe => {}
                SpotId::Irikar__Basement_Pipes__West_27 => {}
                SpotId::Irikar__Basement_Pipes__West_28 => {}
                SpotId::Irikar__Beach__Above_Tunnel => {}
                SpotId::Irikar__Beach__Cache => {}
                SpotId::Irikar__Beach__Tunnel_Entrance => {}
                SpotId::Irikar__Beach__Wet_Feet => {}
                SpotId::Irikar__Beach_Save__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__IRIKAR__BEACH_SAVE__SAVE);
                }
                SpotId::Irikar__Beach_Save__Top_Platform => {}
                SpotId::Irikar__Boss_Room__Bulls_Feet => {}
                SpotId::Irikar__Boss_Room__Healthy_Rooftop => {}
                SpotId::Irikar__Boss_Room__West_28 => {}
                SpotId::Irikar__East_Rooftops__Directly_Down => {}
                SpotId::Irikar__East_Rooftops__East_Mid_air => {}
                SpotId::Irikar__East_Rooftops__Off_the_Edge => {}
                SpotId::Irikar__East_Rooftops__Top_Rooftop => {}
                SpotId::Irikar__Hub__Bowl_Hole => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);
                }
                SpotId::Irikar__Hub__Bowl_Middle_Platform_Center => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);
                }
                SpotId::Irikar__Hub__Bowl_Middle_Platform_West => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);
                }
                SpotId::Irikar__Hub__Bowl_Platform_3 => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);
                }
                SpotId::Irikar__Hub__Collapsed_Column => {}
                SpotId::Irikar__Hub__Collapsed_Column_Debris => {}
                SpotId::Irikar__Hub__Dagger_Altar => {}
                SpotId::Irikar__Hub__Lower_Well => {}
                SpotId::Irikar__Hub__Royal_Storage_By_Wall => {}
                SpotId::Irikar__Hub__Royal_Storage_in_Wall => {}
                SpotId::Irikar__Hub__Ruined_Hallway_Atop_Well => {}
                SpotId::Irikar__Hub__Ruined_Hallway_By_Well => {}
                SpotId::Irikar__Hub__Ruined_Hallway_Gap_Left => {}
                SpotId::Irikar__Hub__Ruined_Hallway_Gap_Right => {}
                SpotId::Irikar__Hub__Sat_Tower_Top_Ledge => {}
                SpotId::Irikar__Hub__Sat_Tower_West_Valley => {}
                SpotId::Irikar__Hub__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);
                }
                SpotId::Irikar__Hub__SW_Building_Top_Platform => {}
                SpotId::Irikar__Hub__West_25 => {}
                SpotId::Irikar__Hub__West_Rooftop_1 => {}
                SpotId::Irikar__Lamassu__Desk => {}
                SpotId::Irikar__Lamassu__East_26 => {}
                SpotId::Irikar__Lamassu__Hidden_Passage_East => {}
                SpotId::Irikar__Midwest__East_25 => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__IRIKAR__MIDWEST__SAVE);
                }
                SpotId::Irikar__Midwest__Left_Platform_Dest => {}
                SpotId::Irikar__Midwest__Right_Platform_Start => {}
                SpotId::Irikar__Midwest__Save_Ledge => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__IRIKAR__MIDWEST__SAVE);
                }
                SpotId::Irikar__Midwest__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__IRIKAR__MIDWEST__SAVE);
                }
                SpotId::Irikar__Midwest__Tablet_Platform => {}
                SpotId::Irikar__Sight_Room__Item_Pedestal => {}
                SpotId::Irikar__Sight_Room__Portal => {}
                SpotId::Irikar_Breach__Basement_Save__Save_Point => {}
                SpotId::Irikar_Breach__Gauntlet__East_22 => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE);
                }
                SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Reward => {}
                SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Entry => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE);
                }
                SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Right => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE);
                }
                SpotId::Irikar_Breach__Gauntlet__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE);
                }
                SpotId::Irikar_Breach__Hover_Room__Bottom => {}
                SpotId::Irikar_Breach__Save_Room__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE);
                }
                SpotId::Irikar_Breach__Save_Room__Upper_Area => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE);
                }
                SpotId::Irikar_Breach__Save_Room__West => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE);
                }
                SpotId::Uhrum__Annuna_Corridor__Block_West => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE);
                }
                SpotId::Uhrum__Annuna_Corridor__East_25 => {}
                SpotId::Uhrum__Annuna_Corridor__East_Cubby => {}
                SpotId::Uhrum__Annuna_Corridor__Pedestal => {}
                SpotId::Uhrum__Annuna_Corridor__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE);
                }
                SpotId::Uhrum__Annuna_Corridor__Statue => {}
                SpotId::Uhrum__Annuna_Corridor__Upper_Ledge => {}
                SpotId::Uhrum__Annuna_Corridor__Upper_Platform => {}
                SpotId::Uhrum__Annuna_Corridor__Upper_Trees => {}
                SpotId::Uhrum__Annuna_Corridor__West_26 => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE);
                }
                SpotId::Uhrum__Siege_Corridor__Center_Box => {}
                SpotId::Uhrum__Siege_Corridor__East_25 => {}
                SpotId::Uhrum__Siege_Corridor__East_Hill => {}
                SpotId::Uhrum__Siege_Corridor__Northwest_Door => {}
                SpotId::Uhrum__Siege_Corridor__Northwest_Platform => {}
                SpotId::Uhrum__Siege_Corridor__Pond => {}
                SpotId::Uhrum__Siege_Corridor__Upper_Rock_East => {}
                SpotId::Uhrum__Siege_Corridor__Upper_Rock_Item => {}
                SpotId::Uhrum__Siege_Corridor__Upper_Rock_West => {}
                SpotId::Uhrum__Siege_Corridor__West_Loop => {}
                SpotId::Uhrum__Siege_Corridor__Western_Cache => {}
                SpotId::Uhrum__Siege_Corridor__Western_Rock => {}
                SpotId::Uhrum__Waterfalls__Ceiling_Cache => {}
                SpotId::Uhrum__Waterfalls__Island_Water_West => {}
                SpotId::Uhrum__Waterfalls__Water_Slope => {}
                SpotId::Uhrum__Waterfalls__West_24 => {}
                SpotId::Uhrum__Waterfalls__West_Shallow_End => {}
                SpotId::Uhrum__Waterfalls__West_Water_Ledge => {}
                SpotId::Uhrum__Waterfalls__West_Water_Nook => {}
                SpotId::Uhrum__Waterfalls__West_Water_Surface => {}
                SpotId::Uhrum__West_Entrance__Clear_Passage => {}
                SpotId::Uhrum__West_Entrance__Gate_Switch => {}
                SpotId::Uhrum__West_Entrance__Hidden_Passage_Entry => {}
                SpotId::Uhrum__West_Entrance__Hidden_Passage_West => {}
                SpotId::Uhrum__West_Entrance__Inner_Dais => {}
                SpotId::Uhrum__West_Entrance__Lower_Wall_West => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE);
                }
                SpotId::Uhrum__West_Entrance__Portal_Exit => {}
                SpotId::Uhrum__West_Entrance__Portal_Stand => {}
                SpotId::Uhrum__West_Entrance__Sand => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE);
                }
                SpotId::Uhrum__West_Entrance__Save_Point => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE);
                }
                SpotId::Uhrum__West_Entrance__Southeast_Tree => {
                    self.cbits1
                        .insert(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE);
                }
                SpotId::Uhrum__West_Entrance__Top_West_Ledge => {}
                SpotId::Uhrum__West_Entrance__West_25 => {}
                SpotId::Uhrum__West_Entrance__West_26 => {}
                SpotId::Uhrum__West_Entrance__West_of_Gate => {}
                _ => (),
            }
        }
        self.position = pos;
    }

    fn reload_game(&mut self, world: &graph::World) {
        self.reset_all(world);
        self.cbits1
            .remove(flags::ContextBits1::AMAGI__MAIN_AREA__CTX__COMBO);
        self.cbits1
            .remove(flags::ContextBits1::ANNUNA__EAST_BRIDGE__CTX__COMBO);
        self.cbits1
            .remove(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED);
    }

    fn reset_all(&mut self, world: &graph::World) {
        self.cbits1
            .remove(flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED);
        self.cbits1
            .remove(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED);
        self.cbits1
            .remove(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED);
        self.cbits1
            .remove(flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED);
        self.cbits1
            .remove(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__UPPER_SUSAR);
        self.cbits1
            .remove(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__LOWER_SUSAR);
        self.cbits1
            .remove(flags::ContextBits1::GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR);
        self.cbits1
            .remove(flags::ContextBits1::GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED);
        self.cbits1
            .remove(flags::ContextBits1::GIGUNA__CLOUDS__CTX__PLATFORM);
        self.cbits1
            .remove(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR);
        self.cbits1
            .remove(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR);
        self.cbits1
            .remove(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR);
        self.cbits1
            .remove(flags::ContextBits1::GIGUNA__GATEWAY__CTX__DOOR_OPENED);
        self.cbits1
            .remove(flags::ContextBits1::GLACIER__THE_BIG_DROP__CTX__BRIDGE_OPEN);
        self.cbits2
            .remove(flags::ContextBits2::IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED);
    }

    fn reset_region(&mut self, region_id: RegionId, world: &graph::World) {}
    fn reset_area(&mut self, area_id: AreaId, world: &graph::World) {
        match area_id {
            AreaId::Ebih__Base_Camp => {
                self.cbits1
                    .remove(flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED);
            }
            AreaId::Ebih__Ebih_East => {
                self.cbits1
                    .remove(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED);
                self.cbits1
                    .remove(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED);
            }
            AreaId::Ebih__Drone_Room => {
                self.cbits1
                    .remove(flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED);
            }
            AreaId::Giguna__Carnelian => {
                self.cbits1
                    .remove(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__UPPER_SUSAR);
                self.cbits1
                    .remove(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__LOWER_SUSAR);
            }
            AreaId::Giguna__West_Caverns => {
                self.cbits1
                    .remove(flags::ContextBits1::GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR);
            }
            AreaId::Giguna__Ruins_West => {
                self.cbits1
                    .remove(flags::ContextBits1::GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED);
            }
            AreaId::Giguna__Clouds => {
                self.cbits1
                    .remove(flags::ContextBits1::GIGUNA__CLOUDS__CTX__PLATFORM);
            }
            AreaId::Giguna__East_Caverns => {
                self.cbits1
                    .remove(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR);
                self.cbits1
                    .remove(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR);
                self.cbits1
                    .remove(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR);
            }
            AreaId::Giguna__Gateway => {
                self.cbits1
                    .remove(flags::ContextBits1::GIGUNA__GATEWAY__CTX__DOOR_OPENED);
            }
            AreaId::Glacier__The_Big_Drop => {
                self.cbits1
                    .remove(flags::ContextBits1::GLACIER__THE_BIG_DROP__CTX__BRIDGE_OPEN);
            }
            AreaId::Irikar__Basement_Portal => {
                self.cbits2
                    .remove(flags::ContextBits2::IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED);
            }
            _ => (),
        }
    }
    fn can_afford(&self, cost: &Currency) -> bool {
        match cost {
            Currency::Free => true,
            Currency::Energy(c) => self.energy >= *c,
            Currency::Flasks(c) => self.flasks >= *c,
            Currency::Refills(c) => self.refills >= *c,
        }
    }
    fn amount_could_afford(&self, cost: &Currency) -> i16 {
        match cost {
            Currency::Free => 1,
            Currency::Energy(_) => self.energy.into(),
            Currency::Flasks(_) => self.flasks.into(),
            Currency::Refills(_) => self.refills.into(),
        }
    }
    fn spend(&mut self, cost: &Currency) {
        match cost {
            Currency::Free => (),
            Currency::Energy(c) => self.energy -= *c,
            Currency::Flasks(c) => self.flasks -= *c,
            Currency::Refills(c) => self.refills -= *c,
        }
    }
    fn observe_afford(&self, cost: &Currency, full_obs: &mut FullObservation) {
        match cost {
            Currency::Free => (),
            Currency::Energy(c) => full_obs.observe_energy(IntegerObservation::Ge(*c)),
            Currency::Flasks(c) => full_obs.observe_flasks(IntegerObservation::Ge(*c)),
            Currency::Refills(c) => full_obs.observe_refills(IntegerObservation::Ge(*c)),
        }
    }

    fn visit(&mut self, loc_id: LocationId) {
        match loc_id {
            LocationId::Amagi_Breach__East_Entrance__Upper_Slope__Item => {
                self.cbits4.insert(flags::ContextBits4::VISITED_LOC_AMAGI_BREACH__EAST_ENTRANCE__UPPER_SLOPE__ITEM);
            }
            LocationId::Amagi__Main_Area__Way_Off_To_The_Side__Item => {
                self.cbits4.insert(flags::ContextBits4::VISITED_LOC_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM);
            }
            LocationId::Amagi__Liru_Room__Shrine__Item => {
                self.cbits4.insert(flags::ContextBits4::VISITED_LOC_AMAGI__LIRU_ROOM__SHRINE__ITEM);
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Break_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL);
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Defeat_MUS_A_M20 => {
                self.cbits4.insert(flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20);
            }
            LocationId::Amagi__West_Lake__Cavern_Tear_Duct__Remote_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI_DRAGON_EYE_FLASK);
            }
            LocationId::Amagi__West_Lake__Cavern_Eye__Item => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI_DRAGON_EYE_FLASK);
            }
            LocationId::Amagi__West_Lake__Cavern_Rear_Pillar__Boss_Reward => {
                self.cbits4.insert(flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD);
            }
            LocationId::Amagi__West_Lake__Stronghold_Top__Remote_Urn => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SHOCKWAVE);
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Item => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SHOCKWAVE);
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Break_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_WALL_1);
            }
            LocationId::Amagi__West_Lake__Stronghold_Rear_Wall__Break_Left_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_LEFT_WALL);
            }
            LocationId::Amagi__West_Lake__Stronghold_Middle_Column__Break_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_WALL_1);
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Left__Knock_Down_Left_Boulder => {
                self.cbits4.insert(flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER);
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Right__Knock_Down_Right_Boulder => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_BOULDER_2);
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Room__Break_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_WALL_2);
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Door__Break_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_WALL_2);
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Right__Break_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI_WEST_LAKE_SURFACE_WALL);
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Left__Break_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI_WEST_LAKE_SURFACE_WALL);
            }
            LocationId::Amagi__East_Lake__Foot__Tablet => {
                self.cbits4.insert(flags::ContextBits4::VISITED_LOC_AMAGI__EAST_LAKE__FOOT__TABLET);
            }
            LocationId::Annuna__Mirror_Match__Save_Point__Fight => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT);
            }
            LocationId::Annuna__Mirror_Match__Below_Switch__Hit_Switch => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH);
            }
            LocationId::Annuna__Mirror_Match__Plinth__Item => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA_MIRROR_MATCH_FLASK);
            }
            LocationId::Annuna__Mirror_Match__Waving_Distance__Shockwave_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA_MIRROR_MATCH_FLASK);
            }
            LocationId::Annuna__Mirror_Match__East_26_Lower__Remote_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA_MIRROR_MATCH_FLASK);
            }
            LocationId::Annuna__Mirror_Match__East_26_Upper__Remote_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA_MIRROR_MATCH_FLASK);
            }
            LocationId::Annuna__West_Bridge__Plinth__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__WEST_BRIDGE__PLINTH__ITEM);
            }
            LocationId::Annuna__East_Bridge__Gate_Button__Switch => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA_EAST_BRIDGE_GATE);
            }
            LocationId::Annuna__East_Bridge__Below_Gate_Button__Switch_from_Below => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW);
            }
            LocationId::Annuna__East_Bridge__Tower_Gate__Tablet => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET);
            }
            LocationId::Annuna__East_Bridge__Tower_Secret__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM);
            }
            LocationId::Annuna__Sniper_Valley__Bridge_End__Health_Pickup => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP);
            }
            LocationId::Annuna__Sniper_Valley__Table__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__SNIPER_VALLEY__TABLE__ITEM);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_West__Break_Outer_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SNIPER_VALLEY_ROCK_1);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_West__Upgraded_Mist_Through_Outer_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SNIPER_VALLEY_ROCK_1);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_East__Break_Outer_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SNIPER_VALLEY_ROCK_1);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_East__Upgraded_Mist_Through_Outer_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SNIPER_VALLEY_ROCK_1);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_West__Break_Inner_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SNIPER_VALLEY_ROCK_2);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_West__Upgraded_Mist_Through_Inner_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SNIPER_VALLEY_ROCK_2);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_East__Break_Inner_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SNIPER_VALLEY_ROCK_2);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_East__Upgraded_Mist_Through_Inner_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SNIPER_VALLEY_ROCK_2);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Cache__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM);
            }
            LocationId::Annuna__Vertical_Room__Plinth__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__VERTICAL_ROOM__PLINTH__ITEM);
            }
            LocationId::Annuna__Vertical_Room__Gate_Button__Hit_Button => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__VERTICAL_ROOM__GATE_BUTTON__HIT_BUTTON);
            }
            LocationId::Annuna__Vertical_Room__Upper_Cache__Tablet => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__VERTICAL_ROOM__UPPER_CACHE__TABLET);
            }
            LocationId::Annuna__Upper_Hallway__Behind_Pedestal__Health_Pickup => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__UPPER_HALLWAY__BEHIND_PEDESTAL__HEALTH_PICKUP);
            }
            LocationId::Annuna__Filter_Teleporter__Door_Ledge__Shockwave_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_FILTER_TELEPORTER_FLASK);
            }
            LocationId::Annuna__Filter_Teleporter__Shaft_Bottom__Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_FILTER_TELEPORTER_FLASK);
            }
            LocationId::Annuna__Filter_Teleporter__Northeast_Cubby__Tablet => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__FILTER_TELEPORTER__NORTHEAST_CUBBY__TABLET);
            }
            LocationId::Annuna__Spider_Room__Healthy_Corner__Health_Refill => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__SPIDER_ROOM__HEALTHY_CORNER__HEALTH_REFILL);
            }
            LocationId::Annuna__Twisty_Passages__Top__Tablet => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__TWISTY_PASSAGES__TOP__TABLET);
            }
            LocationId::Annuna__Twisty_Passages__Northwest_Alcove__Refill => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL);
            }
            LocationId::Annuna__West_Climb__Cache__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANNUNA__WEST_CLIMB__CACHE__ITEM);
            }
            LocationId::Annuna__Egg_Room__Second_Egg__Remote_Boomerang_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EGG_ROOM_FLASK);
            }
            LocationId::Annuna__Egg_Room__Cache__Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EGG_ROOM_FLASK);
            }
            LocationId::Annuna__Egg_Room__Cache__Shockwave_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EGG_ROOM_FLASK);
            }
            LocationId::Annuna__Egg_Room__Corner_Platform__Shockwave_from_Outside => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EGG_ROOM_FLASK);
            }
            LocationId::Annuna__Egg_Room__Corner_Platform__Remote_Boomerang_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EGG_ROOM_FLASK);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Wall_as_Indra => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SIUNA_STORAGE_WALL);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Through_Wall_as_Drone => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SIUNA_STORAGE_WALL);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Through_Wall_with_Mist => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SIUNA_STORAGE_WALL);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Through_Wall_with_Mist_2 => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SIUNA_STORAGE_WALL);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Wall_as_Indra => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SIUNA_STORAGE_WALL);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Left__Distant_Urn => {
                self.cbits7.insert(flags::ContextBits7::VISITED_NANITE_MIST);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Through_Wall_as_Drone => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SIUNA_STORAGE_WALL);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Through_Wall_with_Mist => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SIUNA_STORAGE_WALL);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Through_Wall_with_Mist_2 => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SIUNA_STORAGE_WALL);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Left__Distant_Urn_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_NANITE_MIST);
            }
            LocationId::Annuna__Siuna_Storage__Within_Range__Remote_Urn => {
                self.cbits7.insert(flags::ContextBits7::VISITED_NANITE_MIST);
            }
            LocationId::Annuna__Siuna_Storage__Within_Range__Remote_Urn_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_NANITE_MIST);
            }
            LocationId::Annuna__Siuna_Storage__Cache__Urn => {
                self.cbits7.insert(flags::ContextBits7::VISITED_NANITE_MIST);
            }
            LocationId::Annuna__Siuna_Storage__Cache__Urn_Collection_Skip => {
                self.cbits7.insert(flags::ContextBits7::VISITED_NANITE_MIST);
            }
            LocationId::Annuna__Siuna_Storage__Cache__Urn_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_NANITE_MIST);
            }
            LocationId::Annuna__Seals__Breakable_Rock__Break_Through_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_APOCALYPSE_SEALS_WALL);
            }
            LocationId::Annuna__Seals__Breakable_Rock__Mist_Through_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_APOCALYPSE_SEALS_WALL);
            }
            LocationId::Annuna__Seals__Breakable_Rock__Faster_Mist_Through_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_APOCALYPSE_SEALS_WALL);
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Boss_Fight => {
                self.cbits4.insert(flags::ContextBits4::VISITED_APOCALYPSE_BOMB);
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Fill_It_Up => {
                self.cbits4.insert(flags::ContextBits4::VISITED_APOCALYPSE_BOMB);
            }
            LocationId::Antarctica__Shed__Interior__Shelf => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANTARCTICA__SHED__INTERIOR__SHELF);
            }
            LocationId::Antarctica__Building_2__Behind_Boxes__Note => {
                self.cbits7.insert(flags::ContextBits7::VISITED_NOTES_2053_02_27);
            }
            LocationId::Antarctica__Power_Room__Switch__Flip => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_ANTARCTICA__POWER_ROOM__SWITCH__FLIP);
            }
            LocationId::Ebih__Base_Camp__Left_Platform_Moved__Item_From_The_Side => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_BASE_CAMP_FRAGMENT);
            }
            LocationId::Ebih__Base_Camp__Top_Platform__Item => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_BASE_CAMP_FRAGMENT);
            }
            LocationId::Ebih__By_Garage__Crawlspace__Fragment => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT);
            }
            LocationId::Ebih__Grid_25_10_12__East_10__Remote_Bush => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_BUSH_FLASK);
            }
            LocationId::Ebih__Grid_25_10_12__Hidden_Bush__Behind_Bush => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_BUSH_FLASK);
            }
            LocationId::Ebih__Waterfall__Alcove_Right__Block_Right => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WATERFALL_BLOCK_RIGHT);
            }
            LocationId::Ebih__Waterfall__Waterfall_Center_Center__Both_Blocks => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS);
            }
            LocationId::Ebih__Waterfall__Alcove_Left__Block_Left => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WATERFALL_BLOCK_LEFT);
            }
            LocationId::Ebih__Waterfall__Alcove__Pedestal => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_EBIH__WATERFALL__ALCOVE__PEDESTAL);
            }
            LocationId::Ebih__Waterfall__Alcove__Block_Right => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WATERFALL_BLOCK_RIGHT);
            }
            LocationId::Ebih__Waterfall__Alcove__Block_Left => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WATERFALL_BLOCK_LEFT);
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WATERFALL_WALL);
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Through_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WATERFALL_WALL);
            }
            LocationId::Ebih__Waterfall__Wall_Right__Upgraded_Mist_Through_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WATERFALL_WALL);
            }
            LocationId::Ebih__Waterfall__Wall_Left__Break_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WATERFALL_WALL);
            }
            LocationId::Ebih__Waterfall__Wall_Left__Break_Through_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WATERFALL_WALL);
            }
            LocationId::Ebih__Waterfall__Wall_Left__Upgraded_Mist_Through_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WATERFALL_WALL);
            }
            LocationId::Ebih__Ebih_West__Alcove__Tablet => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_EBIH__EBIH_WEST__ALCOVE__TABLET);
            }
            LocationId::Ebih__Ebih_West__Block_Left__Break_Block => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WEST_BLOCK);
            }
            LocationId::Ebih__Ebih_West__Block_Right__Break_Block => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WEST_BLOCK);
            }
            LocationId::Ebih__Ebih_East__Lower_Moving_Platform__Remote_Urn => {
                self.cbits4.insert(flags::ContextBits4::VISITED_INFECT);
            }
            LocationId::Ebih__Ebih_East__Corner__Urn => {
                self.cbits4.insert(flags::ContextBits4::VISITED_INFECT);
            }
            LocationId::Ebih__Ebih_East__Dispenser__Vend => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_EBIH__EBIH_EAST__DISPENSER__VEND);
            }
            LocationId::Ebih__Ebih_East__East_Ledge__Note => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_EBIH__EBIH_EAST__EAST_LEDGE__NOTE);
            }
            LocationId::Ebih__Boss_Room__Boss__Hack_Alu => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_ALU);
            }
            LocationId::Ebih__Boss_Room__Boss__Fight_Alu => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_ALU);
            }
            LocationId::Ebih__Boss_Room__Boss__Boss_Reward => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD);
            }
            LocationId::Ebih__Boss_Room__East_Ledge__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM);
            }
            LocationId::Ebih__Drone_Room__Item__Urn => {
                self.cbits7.insert(flags::ContextBits7::VISITED_REMOTE_DRONE);
            }
            LocationId::Ebih__Drone_Room__Item__Urn_Collection_Skip => {
                self.cbits7.insert(flags::ContextBits7::VISITED_REMOTE_DRONE);
            }
            LocationId::Ebih__Drone_Room__Item__Urn_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_REMOTE_DRONE);
            }
            LocationId::Ebih__Drone_Room__Middle_Platform__Urn_Quick_Grab => {
                self.cbits7.insert(flags::ContextBits7::VISITED_REMOTE_DRONE);
            }
            LocationId::Ebih__Grid_25_2_6__Pit__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_EBIH__GRID_25_2_6__PIT__ITEM);
            }
            LocationId::Ebih__Grid_26_10_11__Ledge__Note => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_EBIH__GRID_26_10_11__LEDGE__NOTE);
            }
            LocationId::Ebih__Vertical_Interchange__Block_Cubby__Shockwave_Block => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_EBIH__VERTICAL_INTERCHANGE__BLOCK_CUBBY__SHOCKWAVE_BLOCK);
            }
            LocationId::Ebih__Vertical_Interchange__Switch__Activate_Switch => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH);
            }
            LocationId::Ebih__Walled_Off__Wall_Right__Break_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WALLED_OFF_WALL);
            }
            LocationId::Ebih__Walled_Off__Wall_Right__Break_Through_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WALLED_OFF_WALL);
            }
            LocationId::Ebih__Walled_Off__Wall_Right__Break_Through_Wall_Faster => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WALLED_OFF_WALL);
            }
            LocationId::Ebih__Walled_Off__Wall_Left__Break_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WALLED_OFF_WALL);
            }
            LocationId::Ebih__Walled_Off__Wall_Left__Break_Through_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WALLED_OFF_WALL);
            }
            LocationId::Ebih__Walled_Off__Wall_Left__Break_Through_Wall_Faster => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WALLED_OFF_WALL);
            }
            LocationId::Ebih__Guarded_Health__West_Basin__Health => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_EBIH__GUARDED_HEALTH__WEST_BASIN__HEALTH);
            }
            LocationId::Ebih__Guarded_Health__Far_West__Refill => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_EBIH__GUARDED_HEALTH__FAR_WEST__REFILL);
            }
            LocationId::Filter__Core__Terminal_East__Authorize_Hammond => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_FILTER__CORE__TERMINAL_EAST__AUTHORIZE_HAMMOND);
            }
            LocationId::Giguna_Breach__Chimney__Cache__Flask => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK);
            }
            LocationId::Giguna_Breach__Cubby__Rocks__Health => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH);
            }
            LocationId::Giguna_Breach__Slingshot__Ravine__Urn => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN);
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Button__Open_Gate => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_NORTHEAST_GATE);
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Right__Remote_Button => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_NORTHEAST_GATE);
            }
            LocationId::Giguna__Giguna_Northeast__Door__Remote_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_NORTHEAST_FLASK);
            }
            LocationId::Giguna__Giguna_Northeast__Vault__Item => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_NORTHEAST_FLASK);
            }
            LocationId::Giguna__Carnelian__Vault__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__CARNELIAN__VAULT__ITEM);
            }
            LocationId::Giguna__West_Caverns__Cache__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__WEST_CAVERNS__CACHE__ITEM);
            }
            LocationId::Giguna__West_Caverns__Bush__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__WEST_CAVERNS__BUSH__ITEM);
            }
            LocationId::Giguna__Wasteland__Door_Right__Health => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH);
            }
            LocationId::Giguna__Wasteland__Passage_East__Clear_Horizontal_Passage_Manually => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WASTELAND_PASSAGE_H);
            }
            LocationId::Giguna__Wasteland__Passage_East__Mist_through_Horizontal_Passage => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WASTELAND_PASSAGE_H);
            }
            LocationId::Giguna__Wasteland__Passage_East__Upgraded_Mist_through_Horizontal_Passage => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WASTELAND_PASSAGE_H);
            }
            LocationId::Giguna__Wasteland__Passage_Cache__Clear_Horizontal_Passage_Manually => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WASTELAND_PASSAGE_H);
            }
            LocationId::Giguna__Wasteland__Passage_Cache__Mist_through_Horizontal_Passage => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WASTELAND_PASSAGE_H);
            }
            LocationId::Giguna__Wasteland__Passage_Cache__Upgraded_Mist_through_Horizontal_Passage => {
                self.cbits4.insert(flags::ContextBits4::VISITED_EBIH_WASTELAND_PASSAGE_H);
            }
            LocationId::Giguna__Giguna_Base__Ruin__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__GIGUNA_BASE__RUIN__ITEM);
            }
            LocationId::Giguna__Giguna_Base__Table__News => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__GIGUNA_BASE__TABLE__NEWS);
            }
            LocationId::Giguna__Ruins_East__Way_Up_High__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM);
            }
            LocationId::Giguna__Ruins_Center__Tablet__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__RUINS_CENTER__TABLET__ITEM);
            }
            LocationId::Giguna__Ruins_Top__Small_Ledge__Shockwave_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_TOP_FLASK);
            }
            LocationId::Giguna__Ruins_Top__Flask__Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_TOP_FLASK);
            }
            LocationId::Giguna__West_Tower__Top__Tablet => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__WEST_TOWER__TOP__TABLET);
            }
            LocationId::Giguna__Far_Corner__Grass__Obscured_Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM);
            }
            LocationId::Giguna__Helipad__Tablet_Ledge__Tablet => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET);
            }
            LocationId::Giguna__Clouds__Cache__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__CLOUDS__CACHE__ITEM);
            }
            LocationId::Giguna__Lamassu__Deposit__Flask => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__LAMASSU__DEPOSIT__FLASK);
            }
            LocationId::Giguna__Dual_Path__Below_Left_Switch__Remote_Switch => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_DUAL_PATH_SWITCH);
            }
            LocationId::Giguna__Dual_Path__Left_Switch__Hit_Switch => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_DUAL_PATH_SWITCH);
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Break_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_DUAL_PATH_WALL);
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Mist_into_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_DUAL_PATH_WALL);
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Upgraded_Mist_into_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_DUAL_PATH_WALL);
            }
            LocationId::Giguna__Dual_Path__Wall_Secret__Health => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH);
            }
            LocationId::Giguna__Dual_Path__Right_Switch__Hit_Switch => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_DUAL_PATH_SWITCH);
            }
            LocationId::Giguna__Dual_Path__Below_Right_Switch__Remote_Switch => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_DUAL_PATH_SWITCH);
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Shockwave_Boulder => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_BOULDER);
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Enter_Rock_as_Mist => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_BOULDER);
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Enter_Rock_as_Upgraded_Mist => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_BOULDER);
            }
            LocationId::Giguna__Hard_Rock__Rock_Center__Tablet => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET);
            }
            LocationId::Giguna__Hard_Rock__Rock_Left__Shockwave_Boulder => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_BOULDER);
            }
            LocationId::Giguna__Hard_Rock__Rock_Left__Enter_Rock_as_Mist => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_BOULDER);
            }
            LocationId::Giguna__Hard_Rock__Rock_Left__Enter_Rock_as_Upgraded_Mist => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_BOULDER);
            }
            LocationId::Giguna__East_Caverns__Hidden_Passage_Center__Hidden_Flask => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK);
            }
            LocationId::Giguna__Gateway__Block_Left__Shockwave => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_GATEWAY_BLOCK);
            }
            LocationId::Giguna__Gateway__Block_Right__Shockwave => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_GATEWAY_BLOCK);
            }
            LocationId::Giguna__Gateway__Flask_Ledge__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM);
            }
            LocationId::Giguna__Gateway__Button__Hit_Switch => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH);
            }
            LocationId::Giguna__Antechamber__Statue_Head__Tablet => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET);
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Hack_Gubi => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_GUBI);
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Fight_Gubi => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_GUBI);
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Boss_Reward => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD);
            }
            LocationId::Giguna__Gubi_Lair__Pedestal__Axe => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GIGUNA__GUBI_LAIR__PEDESTAL__AXE);
            }
            LocationId::Giguna__Breachable_Wall__Above_the_Hole__Shockwave_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_BREACHABLE_WALL_FLASK);
            }
            LocationId::Giguna__Breachable_Wall__Wall_Interior__Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_BREACHABLE_WALL_FLASK);
            }
            LocationId::Giguna__Breachable_Wall__Wall_Interior__Shockwave_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_BREACHABLE_WALL_FLASK);
            }
            LocationId::Glacier_Breach__Grate_Work__Grate_Interior__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GLACIER_BREACH__GRATE_WORK__GRATE_INTERIOR__ITEM);
            }
            LocationId::Glacier_Breach__Control__Upper_Corner__Control_Enemy => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SYNC_FLASK);
            }
            LocationId::Glacier_Breach__Control__Upper_Corner__Control_Enemy_And_Jump => {
                self.cbits7.insert(flags::ContextBits7::VISITED_SYNC_FLASK);
            }
            LocationId::Glacier__Dock_Outside__Ruins_Stairs__Note => {
                self.cbits7.insert(flags::ContextBits7::VISITED_NOTES_2053_02_27);
            }
            LocationId::Glacier__Dock_Outside__Cave_Treasure__Item => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_DOCK_FLASK);
            }
            LocationId::Glacier__Dock_Outside__Cave_Treasure__Flask_Collection_Skip => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_DOCK_FLASK);
            }
            LocationId::Glacier__Dock_Outside__Cave_Treasure__Flask_Fast_Travel => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_DOCK_FLASK);
            }
            LocationId::Glacier__Revival__Pillar__Health => {
                self.cbits7.insert(flags::ContextBits7::VISITED_REVIVAL_HEALTH_NODE);
            }
            LocationId::Glacier__Revival__Mid_air__Fly_to_the_Platform_and_Grab => {
                self.cbits7.insert(flags::ContextBits7::VISITED_REVIVAL_HEALTH_NODE);
            }
            LocationId::Glacier__Revival__Mid_air__Fly_to_the_Stairs_and_Grab => {
                self.cbits7.insert(flags::ContextBits7::VISITED_REVIVAL_HEALTH_NODE);
            }
            LocationId::Glacier__Compass_Room__Center__Table => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GLACIER__COMPASS_ROOM__CENTER__TABLE);
            }
            LocationId::Glacier__The_Big_Drop__West_14__Break_Rock => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_BIG_DROP_ROCK);
            }
            LocationId::Glacier__The_Big_Drop__West_14__Mist_Through => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_BIG_DROP_ROCK);
            }
            LocationId::Glacier__The_Big_Drop__West_14__Mist_Through_Faster => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_BIG_DROP_ROCK);
            }
            LocationId::Glacier__The_Big_Drop__Breakable_Rock_Right__Break_Rock => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_BIG_DROP_ROCK);
            }
            LocationId::Glacier__The_Big_Drop__Breakable_Rock_Right__Mist_Through => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_BIG_DROP_ROCK);
            }
            LocationId::Glacier__The_Big_Drop__Breakable_Rock_Right__Mist_Through_Faster => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_BIG_DROP_ROCK);
            }
            LocationId::Glacier__Sea_Burial__Collapsing_Ceiling__Drown => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_GLACIER__SEA_BURIAL__COLLAPSING_CEILING__DROWN);
            }
            LocationId::Glacier__Sea_Burial__Deep_Cache__Health => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_GLACIER__SEA_BURIAL__DEEP_CACHE__HEALTH);
            }
            LocationId::Glacier__Sea_Burial__Breakable_Rock_Left__Break_Rock => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_SEA_BURIAL_ROCK);
            }
            LocationId::Glacier__Sea_Burial__Breakable_Rock_Left__Mist_Through => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_SEA_BURIAL_ROCK);
            }
            LocationId::Glacier__Sea_Burial__Breakable_Rock_Left__Mist_Through_Faster => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_SEA_BURIAL_ROCK);
            }
            LocationId::Glacier__Sea_Burial__Breakable_Rock_Right__Break_Rock_while_Jumping => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_SEA_BURIAL_ROCK);
            }
            LocationId::Glacier__Sea_Burial__Breakable_Rock_Right__Mist_Through => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_SEA_BURIAL_ROCK);
            }
            LocationId::Glacier__Sea_Burial__Breakable_Rock_Right__Mist_Through_Faster => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_SEA_BURIAL_ROCK);
            }
            LocationId::Glacier__Sea_Burial__Inside_the_Grate__Notes => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_GLACIER__SEA_BURIAL__INSIDE_THE_GRATE__NOTES);
            }
            LocationId::Glacier__Grid_39_40_7_9__Third_Upper_Platform__Fly_by_Flask_Toward_Fortress => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_40_8_FLASK);
            }
            LocationId::Glacier__Grid_39_40_7_9__Third_Upper_Platform__Charged_Fly_by_Flask_Toward_Fortress => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_40_8_FLASK);
            }
            LocationId::Glacier__Grid_39_40_7_9__Floating_Rock__Item => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_40_8_FLASK);
            }
            LocationId::Glacier__Grid_39_40_7_9__Floating_Rock__Flask_Collection_Skip => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_40_8_FLASK);
            }
            LocationId::Glacier__Grid_39_40_7_9__Floating_Rock__Flask_Fast_Travel => {
                self.cbits4.insert(flags::ContextBits4::VISITED_GLACIER_40_8_FLASK);
            }
            LocationId::Glacier__Vertical_Room__Under_Switch__Switch => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH);
            }
            LocationId::Glacier__Vertical_Room__Peak__Flask => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_GLACIER__VERTICAL_ROOM__PEAK__FLASK);
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM);
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Switch => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH);
            }
            LocationId::Glacier__Ledge_Grab_Room__Cliff_Bottom__Quick_Grab => {
                self.cbits4.insert(flags::ContextBits4::VISITED_LEDGE_GRAB);
            }
            LocationId::Glacier__Ledge_Grab_Room__Pedestal__Item => {
                self.cbits4.insert(flags::ContextBits4::VISITED_LEDGE_GRAB);
            }
            LocationId::Glacier__Peak__Birds_Eye__Item => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_GLACIER__PEAK__BIRDS_EYE__ITEM);
            }
            LocationId::Glacier__Apocalypse_Entry__Grate_Ledge__Escape => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ESCAPE);
            }
            LocationId::Glacier__Apocalypse_Entry__Grate_Ledge__Hook_Escape => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ESCAPE);
            }
            LocationId::Glacier__Crystals__Top_Corner__Tablet => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_GLACIER__CRYSTALS__TOP_CORNER__TABLET);
            }
            LocationId::Glacier__Crystals__Lower_Corner__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_LOC_GLACIER__CRYSTALS__LOWER_CORNER__ITEM);
            }
            LocationId::Glacier__Hammonds_End__Hammond__Note => {
                self.cbits4.insert(flags::ContextBits4::VISITED_HAMMONDS_NOTE);
            }
            LocationId::Glacier__Hammonds_End__Corner__Quick_Note => {
                self.cbits4.insert(flags::ContextBits4::VISITED_HAMMONDS_NOTE);
            }
            LocationId::Glacier__Hammonds_End__Between_Center_Doors__Health => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_GLACIER__HAMMONDS_END__BETWEEN_CENTER_DOORS__HEALTH);
            }
            LocationId::Interior__Bunker_Interior__Desk__Note => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_INTERIOR__BUNKER_INTERIOR__DESK__NOTE);
            }
            LocationId::Interior__Building_Interior__Entry__Remote_Urn => {
                self.cbits7.insert(flags::ContextBits7::VISITED_MELEE_CHARGE);
            }
            LocationId::Interior__Building_Interior__Entry__Urn_Collection_Skip => {
                self.cbits7.insert(flags::ContextBits7::VISITED_MELEE_CHARGE);
            }
            LocationId::Interior__Building_Interior__Corner__Urn => {
                self.cbits7.insert(flags::ContextBits7::VISITED_MELEE_CHARGE);
            }
            LocationId::Interior__Tent_Interior__Desk__Note => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_INTERIOR__TENT_INTERIOR__DESK__NOTE);
            }
            LocationId::Interior__Garage__Boxes__Under_Boxes => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_INTERIOR__GARAGE__BOXES__UNDER_BOXES);
            }
            LocationId::Interior__Ebih_Cave__Entry__Health => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_INTERIOR__EBIH_CAVE__ENTRY__HEALTH);
            }
            LocationId::Interior__Outpost_Interior__Bookshelf__Note => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE);
            }
            LocationId::Irikar_Breach__Gauntlet__Hidden_Path_Reward__Item => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM);
            }
            LocationId::Irikar_Breach__Hover_Room__Bottom__Item => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM);
            }
            LocationId::Irikar_Breach__Worm_Rave__Corner__Item => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM);
            }
            LocationId::Irikar__Hub__Sat_Tower_Top_Ledge__Tablet => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET);
            }
            LocationId::Irikar__Hub__Dagger_Altar__Weapon => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__DAGGER_ALTAR__WEAPON);
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_IRIKAR_ROYAL_STORAGE_WALL);
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Mist_into_Wall => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL);
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Upgraded_Mist_into_Wall => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__UPGRADED_MIST_INTO_WALL);
            }
            LocationId::Irikar__Hub__Royal_Storage_in_Wall__Item => {
                self.cbits4.insert(flags::ContextBits4::VISITED_IRIKAR_ROYAL_STORAGE_FLASK);
            }
            LocationId::Irikar__Hub__Ruined_Hallway_By_Well__Shockwave_Well => {
                self.cbits4.insert(flags::ContextBits4::VISITED_IRIKAR_WELL_FLASK);
            }
            LocationId::Irikar__Hub__Ruined_Hallway_Atop_Well__Well_Item => {
                self.cbits4.insert(flags::ContextBits4::VISITED_IRIKAR_WELL_FLASK);
            }
            LocationId::Irikar__Hub__SW_Building_Top_Platform__Power_Core => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__SW_BUILDING_TOP_PLATFORM__POWER_CORE);
            }
            LocationId::Irikar__Hub__Collapsed_Column__Shockwave_to_Get_Item => {
                self.cbits4.insert(flags::ContextBits4::VISITED_IRIKAR_ROYAL_STORAGE_FLASK);
            }
            LocationId::Irikar__Airy__Cavern_Side__Remote_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_IRIKAR_AIRY_FLASK);
            }
            LocationId::Irikar__Airy__Cavern_Cache__Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_IRIKAR_AIRY_FLASK);
            }
            LocationId::Irikar__Airy__Cavern_Cache__Shockwave_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_IRIKAR_AIRY_FLASK);
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn => {
                self.cbits4.insert(flags::ContextBits4::VISITED_BREACH_SIGHT);
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Collection_Skip => {
                self.cbits4.insert(flags::ContextBits4::VISITED_BREACH_SIGHT);
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Fast_Travel => {
                self.cbits4.insert(flags::ContextBits4::VISITED_BREACH_SIGHT);
            }
            LocationId::Irikar__Abandoned_Room__Corner_Core__Core => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE);
            }
            LocationId::Irikar__Basement_Pipes__Left_Vertical_Pipe__Health_Pickup => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP);
            }
            LocationId::Irikar__Basement_Pipes__High_Pipe__Tablet => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR__BASEMENT_PIPES__HIGH_PIPE__TABLET);
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Defeat_Gudam => {
                self.cbits4.insert(flags::ContextBits4::VISITED_IRIKAR_GUDAM);
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Shockwave_Gudam => {
                self.cbits4.insert(flags::ContextBits4::VISITED_IRIKAR_GUDAM);
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Boss_Reward => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD);
            }
            LocationId::Irikar__Boss_Room__Healthy_Rooftop__Health => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH);
            }
            LocationId::Irikar__East_Rooftops__Top_Rooftop__Tablet => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET);
            }
            LocationId::Irikar__Midwest__Left_Platform_Dest__Shockwave_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_IRIKAR_MIDWEST_FLASK);
            }
            LocationId::Irikar__Midwest__Right_Platform_Start__Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_IRIKAR_MIDWEST_FLASK);
            }
            LocationId::Irikar__Midwest__Tablet_Platform__Tablet => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR__MIDWEST__TABLET_PLATFORM__TABLET);
            }
            LocationId::Irikar__Lamassu__Desk__Item => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR__LAMASSU__DESK__ITEM);
            }
            LocationId::Irikar__Beach_Save__Top_Platform__Urn => {
                self.cbits4.insert(flags::ContextBits4::VISITED_FAST_TRAVEL);
            }
            LocationId::Irikar__Beach__Cache__Item => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_IRIKAR__BEACH__CACHE__ITEM);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_1 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_2 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_3 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_4 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_5 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Mist_Upgrade => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_1 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_2 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_3 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_1 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_2 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_3 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_1 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_2 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_3 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_1 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_2 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_3 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_1 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_2 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_3 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_1 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_2 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_3 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_1 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_2 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_1 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_2 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_3 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_1 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_2 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_3 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_1 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_2 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_3 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3);
            }
            LocationId::Uhrum__West_Entrance__Inner_Dais__Item => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM);
            }
            LocationId::Uhrum__West_Entrance__Gate_Switch__Open_Gate => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE);
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_West__Mist_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_UPPER_WALL);
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_West__Upgraded_Mist_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_UPPER_WALL);
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Charge_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_UPPER_WALL);
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Spin_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_UPPER_WALL);
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Mist_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_UPPER_WALL);
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Upgraded_Mist_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_UPPER_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Charge_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_LOWER_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Spin_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_LOWER_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Mist_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_LOWER_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Upgraded_Mist_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_LOWER_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Charge_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_LOWER_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Spin_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_LOWER_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Mist_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_LOWER_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Upgraded_Mist_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_LOWER_WALL);
            }
            LocationId::Uhrum__West_Entrance__Sand__Refill => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_UHRUM__WEST_ENTRANCE__SAND__REFILL);
            }
            LocationId::Uhrum__Siege_Corridor__Western_Cache__Core => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE);
            }
            LocationId::Uhrum__Siege_Corridor__Center_Box__Box => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX);
            }
            LocationId::Uhrum__Siege_Corridor__Upper_Rock_Item__Urn => {
                self.cbits4.insert(flags::ContextBits4::VISITED_FAST_TRAVEL);
            }
            LocationId::Uhrum__Siege_Corridor__Pond__Item => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__POND__ITEM);
            }
            LocationId::Uhrum__Waterfalls__Ceiling_Cache__Flask => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_UHRUM__WATERFALLS__CEILING_CACHE__FLASK);
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Charge_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WATERFALL_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Spin_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WATERFALL_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Mist_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WATERFALL_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Upgraded_Mist_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WATERFALL_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Charge_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WATERFALL_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Spin_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WATERFALL_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Mist_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WATERFALL_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Upgraded_Mist_through_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WATERFALL_WALL);
            }
            LocationId::Uhrum__Waterfalls__Below_Block__Shockwave_Block => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WATERFALLS_BLOCK);
            }
            LocationId::Uhrum__Waterfalls__Above_Block__Block => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WATERFALLS_BLOCK);
            }
            LocationId::Uhrum__Waterfalls__East_26__Block => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_WATERFALLS_BLOCK);
            }
            LocationId::Uhrum__Waterfalls__West_Water_Nook__Tablet => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET);
            }
            LocationId::Uhrum__Annuna_Corridor__Upper_Trees__Remote_Urn => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANUMAN);
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANUMAN);
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Collection_Skip => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANUMAN);
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Fast_Travel => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANUMAN);
            }
            LocationId::Uhrum__Annuna_Corridor__Block_West__Dislodge_Block => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_ANNUNA_CORRIDOR_BLOCK);
            }
            LocationId::Uhrum__Annuna_Corridor__Block_East__Dislodge_Block => {
                self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM_ANNUNA_CORRIDOR_BLOCK);
            }
            LocationId::Uhrum__Annuna_Corridor__East_Cubby__Tablet => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET);
            }
            LocationId::Uhrum__Annuna_Corridor__Statue__Item => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM);
            }
        }
    }
    fn reset(&mut self, loc_id: LocationId) {
        match loc_id {
            LocationId::Amagi__West_Lake__Cavern_Tear_Duct__Remote_Flask | LocationId::Amagi__West_Lake__Cavern_Eye__Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_AMAGI_DRAGON_EYE_FLASK);
            }
            LocationId::Amagi__West_Lake__Stronghold_Top__Remote_Urn | LocationId::Amagi__West_Lake__Stronghold_Item__Item => {
                self.cbits7.remove(flags::ContextBits7::VISITED_SHOCKWAVE);
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Break_Wall | LocationId::Amagi__West_Lake__Stronghold_Middle_Column__Break_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_WALL_1);
            }
            LocationId::Amagi__West_Lake__Stronghold_Rear_Wall__Break_Left_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_LEFT_WALL);
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Right__Knock_Down_Right_Boulder => {
                self.cbits4.remove(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_BOULDER_2);
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Room__Break_Wall | LocationId::Amagi__West_Lake__Stronghold_Front_Door__Break_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_WALL_2);
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Right__Break_Wall | LocationId::Amagi__West_Lake__Surface_Wall_Left__Break_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_AMAGI_WEST_LAKE_SURFACE_WALL);
            }
            LocationId::Annuna__Mirror_Match__Plinth__Item | LocationId::Annuna__Mirror_Match__Waving_Distance__Shockwave_Flask | LocationId::Annuna__Mirror_Match__East_26_Lower__Remote_Flask | LocationId::Annuna__Mirror_Match__East_26_Upper__Remote_Flask => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA_MIRROR_MATCH_FLASK);
            }
            LocationId::Annuna__East_Bridge__Gate_Button__Switch => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA_EAST_BRIDGE_GATE);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_West__Break_Outer_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_West__Upgraded_Mist_Through_Outer_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_East__Break_Outer_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_East__Upgraded_Mist_Through_Outer_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_SNIPER_VALLEY_ROCK_1);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_West__Break_Inner_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_West__Upgraded_Mist_Through_Inner_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_East__Break_Inner_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_East__Upgraded_Mist_Through_Inner_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_SNIPER_VALLEY_ROCK_2);
            }
            LocationId::Annuna__Filter_Teleporter__Door_Ledge__Shockwave_Flask | LocationId::Annuna__Filter_Teleporter__Shaft_Bottom__Flask => {
                self.cbits4.remove(flags::ContextBits4::VISITED_FILTER_TELEPORTER_FLASK);
            }
            LocationId::Annuna__Egg_Room__Second_Egg__Remote_Boomerang_Flask | LocationId::Annuna__Egg_Room__Cache__Flask | LocationId::Annuna__Egg_Room__Cache__Shockwave_Flask | LocationId::Annuna__Egg_Room__Corner_Platform__Shockwave_from_Outside | LocationId::Annuna__Egg_Room__Corner_Platform__Remote_Boomerang_Flask => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EGG_ROOM_FLASK);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Wall_as_Indra | LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Through_Wall_as_Drone | LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Through_Wall_with_Mist | LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Through_Wall_with_Mist_2 | LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Wall_as_Indra | LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Through_Wall_as_Drone | LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Through_Wall_with_Mist | LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Through_Wall_with_Mist_2 => {
                self.cbits7.remove(flags::ContextBits7::VISITED_SIUNA_STORAGE_WALL);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Left__Distant_Urn | LocationId::Annuna__Siuna_Storage__Wall_Left__Distant_Urn_Fast_Travel | LocationId::Annuna__Siuna_Storage__Within_Range__Remote_Urn | LocationId::Annuna__Siuna_Storage__Within_Range__Remote_Urn_Fast_Travel | LocationId::Annuna__Siuna_Storage__Cache__Urn | LocationId::Annuna__Siuna_Storage__Cache__Urn_Collection_Skip | LocationId::Annuna__Siuna_Storage__Cache__Urn_Fast_Travel => {
                self.cbits7.remove(flags::ContextBits7::VISITED_NANITE_MIST);
            }
            LocationId::Annuna__Seals__Breakable_Rock__Break_Through_Wall | LocationId::Annuna__Seals__Breakable_Rock__Mist_Through_Wall | LocationId::Annuna__Seals__Breakable_Rock__Faster_Mist_Through_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_APOCALYPSE_SEALS_WALL);
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Boss_Fight | LocationId::Annuna__Apocalypse__Center_Scaffold_West__Fill_It_Up => {
                self.cbits4.remove(flags::ContextBits4::VISITED_APOCALYPSE_BOMB);
            }
            LocationId::Antarctica__Building_2__Behind_Boxes__Note | LocationId::Glacier__Dock_Outside__Ruins_Stairs__Note => {
                self.cbits7.remove(flags::ContextBits7::VISITED_NOTES_2053_02_27);
            }
            LocationId::Ebih__Base_Camp__Left_Platform_Moved__Item_From_The_Side | LocationId::Ebih__Base_Camp__Top_Platform__Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH_BASE_CAMP_FRAGMENT);
            }
            LocationId::Ebih__Grid_25_10_12__East_10__Remote_Bush | LocationId::Ebih__Grid_25_10_12__Hidden_Bush__Behind_Bush => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH_BUSH_FLASK);
            }
            LocationId::Ebih__Waterfall__Alcove_Right__Block_Right | LocationId::Ebih__Waterfall__Alcove__Block_Right => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH_WATERFALL_BLOCK_RIGHT);
            }
            LocationId::Ebih__Waterfall__Alcove_Left__Block_Left | LocationId::Ebih__Waterfall__Alcove__Block_Left => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH_WATERFALL_BLOCK_LEFT);
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Wall | LocationId::Ebih__Waterfall__Wall_Right__Break_Through_Wall | LocationId::Ebih__Waterfall__Wall_Right__Upgraded_Mist_Through_Wall | LocationId::Ebih__Waterfall__Wall_Left__Break_Wall | LocationId::Ebih__Waterfall__Wall_Left__Break_Through_Wall | LocationId::Ebih__Waterfall__Wall_Left__Upgraded_Mist_Through_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH_WATERFALL_WALL);
            }
            LocationId::Ebih__Ebih_West__Block_Left__Break_Block | LocationId::Ebih__Ebih_West__Block_Right__Break_Block => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH_WEST_BLOCK);
            }
            LocationId::Ebih__Ebih_East__Lower_Moving_Platform__Remote_Urn | LocationId::Ebih__Ebih_East__Corner__Urn => {
                self.cbits4.remove(flags::ContextBits4::VISITED_INFECT);
            }
            LocationId::Ebih__Boss_Room__Boss__Hack_Alu | LocationId::Ebih__Boss_Room__Boss__Fight_Alu => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH_ALU);
            }
            LocationId::Ebih__Drone_Room__Item__Urn | LocationId::Ebih__Drone_Room__Item__Urn_Collection_Skip | LocationId::Ebih__Drone_Room__Item__Urn_Fast_Travel | LocationId::Ebih__Drone_Room__Middle_Platform__Urn_Quick_Grab => {
                self.cbits7.remove(flags::ContextBits7::VISITED_REMOTE_DRONE);
            }
            LocationId::Ebih__Walled_Off__Wall_Right__Break_Wall | LocationId::Ebih__Walled_Off__Wall_Right__Break_Through_Wall | LocationId::Ebih__Walled_Off__Wall_Right__Break_Through_Wall_Faster | LocationId::Ebih__Walled_Off__Wall_Left__Break_Wall | LocationId::Ebih__Walled_Off__Wall_Left__Break_Through_Wall | LocationId::Ebih__Walled_Off__Wall_Left__Break_Through_Wall_Faster => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH_WALLED_OFF_WALL);
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Button__Open_Gate | LocationId::Giguna__Giguna_Northeast__Gate_Right__Remote_Button => {
                self.cbits4.remove(flags::ContextBits4::VISITED_GIGUNA_NORTHEAST_GATE);
            }
            LocationId::Giguna__Giguna_Northeast__Door__Remote_Flask | LocationId::Giguna__Giguna_Northeast__Vault__Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_GIGUNA_NORTHEAST_FLASK);
            }
            LocationId::Giguna__Wasteland__Passage_East__Clear_Horizontal_Passage_Manually | LocationId::Giguna__Wasteland__Passage_East__Mist_through_Horizontal_Passage | LocationId::Giguna__Wasteland__Passage_East__Upgraded_Mist_through_Horizontal_Passage | LocationId::Giguna__Wasteland__Passage_Cache__Clear_Horizontal_Passage_Manually | LocationId::Giguna__Wasteland__Passage_Cache__Mist_through_Horizontal_Passage | LocationId::Giguna__Wasteland__Passage_Cache__Upgraded_Mist_through_Horizontal_Passage => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH_WASTELAND_PASSAGE_H);
            }
            LocationId::Giguna__Ruins_Top__Small_Ledge__Shockwave_Flask | LocationId::Giguna__Ruins_Top__Flask__Flask => {
                self.cbits4.remove(flags::ContextBits4::VISITED_GIGUNA_TOP_FLASK);
            }
            LocationId::Giguna__Dual_Path__Below_Left_Switch__Remote_Switch | LocationId::Giguna__Dual_Path__Left_Switch__Hit_Switch | LocationId::Giguna__Dual_Path__Right_Switch__Hit_Switch | LocationId::Giguna__Dual_Path__Below_Right_Switch__Remote_Switch => {
                self.cbits4.remove(flags::ContextBits4::VISITED_GIGUNA_DUAL_PATH_SWITCH);
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Break_Wall | LocationId::Giguna__Dual_Path__Base_of_Wall__Mist_into_Wall | LocationId::Giguna__Dual_Path__Base_of_Wall__Upgraded_Mist_into_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_GIGUNA_DUAL_PATH_WALL);
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Shockwave_Boulder | LocationId::Giguna__Hard_Rock__Rock_Right__Enter_Rock_as_Mist | LocationId::Giguna__Hard_Rock__Rock_Right__Enter_Rock_as_Upgraded_Mist | LocationId::Giguna__Hard_Rock__Rock_Left__Shockwave_Boulder | LocationId::Giguna__Hard_Rock__Rock_Left__Enter_Rock_as_Mist | LocationId::Giguna__Hard_Rock__Rock_Left__Enter_Rock_as_Upgraded_Mist => {
                self.cbits4.remove(flags::ContextBits4::VISITED_GIGUNA_BOULDER);
            }
            LocationId::Giguna__Gateway__Block_Left__Shockwave | LocationId::Giguna__Gateway__Block_Right__Shockwave => {
                self.cbits4.remove(flags::ContextBits4::VISITED_GIGUNA_GATEWAY_BLOCK);
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Hack_Gubi | LocationId::Giguna__Gubi_Lair__Center_Platform__Fight_Gubi => {
                self.cbits4.remove(flags::ContextBits4::VISITED_GIGUNA_GUBI);
            }
            LocationId::Giguna__Breachable_Wall__Above_the_Hole__Shockwave_Flask | LocationId::Giguna__Breachable_Wall__Wall_Interior__Flask | LocationId::Giguna__Breachable_Wall__Wall_Interior__Shockwave_Flask => {
                self.cbits4.remove(flags::ContextBits4::VISITED_GIGUNA_BREACHABLE_WALL_FLASK);
            }
            LocationId::Glacier_Breach__Control__Upper_Corner__Control_Enemy | LocationId::Glacier_Breach__Control__Upper_Corner__Control_Enemy_And_Jump => {
                self.cbits7.remove(flags::ContextBits7::VISITED_SYNC_FLASK);
            }
            LocationId::Glacier__Dock_Outside__Cave_Treasure__Item | LocationId::Glacier__Dock_Outside__Cave_Treasure__Flask_Collection_Skip | LocationId::Glacier__Dock_Outside__Cave_Treasure__Flask_Fast_Travel => {
                self.cbits4.remove(flags::ContextBits4::VISITED_GLACIER_DOCK_FLASK);
            }
            LocationId::Glacier__Revival__Pillar__Health | LocationId::Glacier__Revival__Mid_air__Fly_to_the_Platform_and_Grab | LocationId::Glacier__Revival__Mid_air__Fly_to_the_Stairs_and_Grab => {
                self.cbits7.remove(flags::ContextBits7::VISITED_REVIVAL_HEALTH_NODE);
            }
            LocationId::Glacier__The_Big_Drop__West_14__Break_Rock | LocationId::Glacier__The_Big_Drop__West_14__Mist_Through | LocationId::Glacier__The_Big_Drop__West_14__Mist_Through_Faster | LocationId::Glacier__The_Big_Drop__Breakable_Rock_Right__Break_Rock | LocationId::Glacier__The_Big_Drop__Breakable_Rock_Right__Mist_Through | LocationId::Glacier__The_Big_Drop__Breakable_Rock_Right__Mist_Through_Faster => {
                self.cbits4.remove(flags::ContextBits4::VISITED_GLACIER_BIG_DROP_ROCK);
            }
            LocationId::Glacier__Sea_Burial__Breakable_Rock_Left__Break_Rock | LocationId::Glacier__Sea_Burial__Breakable_Rock_Left__Mist_Through | LocationId::Glacier__Sea_Burial__Breakable_Rock_Left__Mist_Through_Faster | LocationId::Glacier__Sea_Burial__Breakable_Rock_Right__Break_Rock_while_Jumping | LocationId::Glacier__Sea_Burial__Breakable_Rock_Right__Mist_Through | LocationId::Glacier__Sea_Burial__Breakable_Rock_Right__Mist_Through_Faster => {
                self.cbits4.remove(flags::ContextBits4::VISITED_GLACIER_SEA_BURIAL_ROCK);
            }
            LocationId::Glacier__Grid_39_40_7_9__Third_Upper_Platform__Fly_by_Flask_Toward_Fortress | LocationId::Glacier__Grid_39_40_7_9__Third_Upper_Platform__Charged_Fly_by_Flask_Toward_Fortress | LocationId::Glacier__Grid_39_40_7_9__Floating_Rock__Item | LocationId::Glacier__Grid_39_40_7_9__Floating_Rock__Flask_Collection_Skip | LocationId::Glacier__Grid_39_40_7_9__Floating_Rock__Flask_Fast_Travel => {
                self.cbits4.remove(flags::ContextBits4::VISITED_GLACIER_40_8_FLASK);
            }
            LocationId::Glacier__Ledge_Grab_Room__Cliff_Bottom__Quick_Grab | LocationId::Glacier__Ledge_Grab_Room__Pedestal__Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_LEDGE_GRAB);
            }
            LocationId::Glacier__Apocalypse_Entry__Grate_Ledge__Escape | LocationId::Glacier__Apocalypse_Entry__Grate_Ledge__Hook_Escape => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ESCAPE);
            }
            LocationId::Glacier__Hammonds_End__Hammond__Note | LocationId::Glacier__Hammonds_End__Corner__Quick_Note => {
                self.cbits4.remove(flags::ContextBits4::VISITED_HAMMONDS_NOTE);
            }
            LocationId::Interior__Building_Interior__Entry__Remote_Urn | LocationId::Interior__Building_Interior__Entry__Urn_Collection_Skip | LocationId::Interior__Building_Interior__Corner__Urn => {
                self.cbits7.remove(flags::ContextBits7::VISITED_MELEE_CHARGE);
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_IRIKAR_ROYAL_STORAGE_WALL);
            }
            LocationId::Irikar__Hub__Royal_Storage_in_Wall__Item | LocationId::Irikar__Hub__Collapsed_Column__Shockwave_to_Get_Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_IRIKAR_ROYAL_STORAGE_FLASK);
            }
            LocationId::Irikar__Hub__Ruined_Hallway_By_Well__Shockwave_Well | LocationId::Irikar__Hub__Ruined_Hallway_Atop_Well__Well_Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_IRIKAR_WELL_FLASK);
            }
            LocationId::Irikar__Airy__Cavern_Side__Remote_Flask | LocationId::Irikar__Airy__Cavern_Cache__Flask | LocationId::Irikar__Airy__Cavern_Cache__Shockwave_Flask => {
                self.cbits4.remove(flags::ContextBits4::VISITED_IRIKAR_AIRY_FLASK);
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn | LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Collection_Skip | LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Fast_Travel => {
                self.cbits4.remove(flags::ContextBits4::VISITED_BREACH_SIGHT);
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Defeat_Gudam | LocationId::Irikar__Boss_Room__Bulls_Feet__Shockwave_Gudam => {
                self.cbits4.remove(flags::ContextBits4::VISITED_IRIKAR_GUDAM);
            }
            LocationId::Irikar__Midwest__Left_Platform_Dest__Shockwave_Flask | LocationId::Irikar__Midwest__Right_Platform_Start__Flask => {
                self.cbits4.remove(flags::ContextBits4::VISITED_IRIKAR_MIDWEST_FLASK);
            }
            LocationId::Irikar__Beach_Save__Top_Platform__Urn | LocationId::Uhrum__Siege_Corridor__Upper_Rock_Item__Urn => {
                self.cbits4.remove(flags::ContextBits4::VISITED_FAST_TRAVEL);
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_West__Mist_through_Wall | LocationId::Uhrum__West_Entrance__Upper_Wall_West__Upgraded_Mist_through_Wall | LocationId::Uhrum__West_Entrance__Upper_Wall_East__Charge_through_Wall | LocationId::Uhrum__West_Entrance__Upper_Wall_East__Spin_through_Wall | LocationId::Uhrum__West_Entrance__Upper_Wall_East__Mist_through_Wall | LocationId::Uhrum__West_Entrance__Upper_Wall_East__Upgraded_Mist_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_UPPER_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Charge_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_West__Spin_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_West__Mist_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_West__Upgraded_Mist_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_East__Charge_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_East__Spin_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_East__Mist_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_East__Upgraded_Mist_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_LOWER_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Charge_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_West__Spin_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_West__Mist_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_West__Upgraded_Mist_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_East__Charge_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_East__Spin_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_East__Mist_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_East__Upgraded_Mist_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM_WATERFALL_WALL);
            }
            LocationId::Uhrum__Waterfalls__Below_Block__Shockwave_Block | LocationId::Uhrum__Waterfalls__Above_Block__Block | LocationId::Uhrum__Waterfalls__East_26__Block => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM_WATERFALLS_BLOCK);
            }
            LocationId::Uhrum__Annuna_Corridor__Upper_Trees__Remote_Urn | LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn | LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Collection_Skip | LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Fast_Travel => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANUMAN);
            }
            LocationId::Uhrum__Annuna_Corridor__Block_West__Dislodge_Block | LocationId::Uhrum__Annuna_Corridor__Block_East__Dislodge_Block => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM_ANNUNA_CORRIDOR_BLOCK);
            }
            LocationId::Amagi_Breach__East_Entrance__Upper_Slope__Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_LOC_AMAGI_BREACH__EAST_ENTRANCE__UPPER_SLOPE__ITEM);
            }
            LocationId::Amagi__Main_Area__Way_Off_To_The_Side__Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_LOC_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM);
            }
            LocationId::Amagi__Liru_Room__Shrine__Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_LOC_AMAGI__LIRU_ROOM__SHRINE__ITEM);
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Break_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL);
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Defeat_MUS_A_M20 => {
                self.cbits4.remove(flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20);
            }
            LocationId::Amagi__West_Lake__Cavern_Rear_Pillar__Boss_Reward => {
                self.cbits4.remove(flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD);
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Left__Knock_Down_Left_Boulder => {
                self.cbits4.remove(flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER);
            }
            LocationId::Amagi__East_Lake__Foot__Tablet => {
                self.cbits4.remove(flags::ContextBits4::VISITED_LOC_AMAGI__EAST_LAKE__FOOT__TABLET);
            }
            LocationId::Annuna__Mirror_Match__Save_Point__Fight => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT);
            }
            LocationId::Annuna__Mirror_Match__Below_Switch__Hit_Switch => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH);
            }
            LocationId::Annuna__West_Bridge__Plinth__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__WEST_BRIDGE__PLINTH__ITEM);
            }
            LocationId::Annuna__East_Bridge__Below_Gate_Button__Switch_from_Below => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW);
            }
            LocationId::Annuna__East_Bridge__Tower_Gate__Tablet => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET);
            }
            LocationId::Annuna__East_Bridge__Tower_Secret__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM);
            }
            LocationId::Annuna__Sniper_Valley__Bridge_End__Health_Pickup => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP);
            }
            LocationId::Annuna__Sniper_Valley__Table__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__SNIPER_VALLEY__TABLE__ITEM);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Cache__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM);
            }
            LocationId::Annuna__Vertical_Room__Plinth__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__VERTICAL_ROOM__PLINTH__ITEM);
            }
            LocationId::Annuna__Vertical_Room__Gate_Button__Hit_Button => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__VERTICAL_ROOM__GATE_BUTTON__HIT_BUTTON);
            }
            LocationId::Annuna__Vertical_Room__Upper_Cache__Tablet => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__VERTICAL_ROOM__UPPER_CACHE__TABLET);
            }
            LocationId::Annuna__Upper_Hallway__Behind_Pedestal__Health_Pickup => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__UPPER_HALLWAY__BEHIND_PEDESTAL__HEALTH_PICKUP);
            }
            LocationId::Annuna__Filter_Teleporter__Northeast_Cubby__Tablet => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__FILTER_TELEPORTER__NORTHEAST_CUBBY__TABLET);
            }
            LocationId::Annuna__Spider_Room__Healthy_Corner__Health_Refill => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__SPIDER_ROOM__HEALTHY_CORNER__HEALTH_REFILL);
            }
            LocationId::Annuna__Twisty_Passages__Top__Tablet => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__TWISTY_PASSAGES__TOP__TABLET);
            }
            LocationId::Annuna__Twisty_Passages__Northwest_Alcove__Refill => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL);
            }
            LocationId::Annuna__West_Climb__Cache__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANNUNA__WEST_CLIMB__CACHE__ITEM);
            }
            LocationId::Antarctica__Shed__Interior__Shelf => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANTARCTICA__SHED__INTERIOR__SHELF);
            }
            LocationId::Antarctica__Power_Room__Switch__Flip => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_ANTARCTICA__POWER_ROOM__SWITCH__FLIP);
            }
            LocationId::Ebih__By_Garage__Crawlspace__Fragment => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT);
            }
            LocationId::Ebih__Waterfall__Waterfall_Center_Center__Both_Blocks => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS);
            }
            LocationId::Ebih__Waterfall__Alcove__Pedestal => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_EBIH__WATERFALL__ALCOVE__PEDESTAL);
            }
            LocationId::Ebih__Ebih_West__Alcove__Tablet => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_EBIH__EBIH_WEST__ALCOVE__TABLET);
            }
            LocationId::Ebih__Ebih_East__Dispenser__Vend => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_EBIH__EBIH_EAST__DISPENSER__VEND);
            }
            LocationId::Ebih__Ebih_East__East_Ledge__Note => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_EBIH__EBIH_EAST__EAST_LEDGE__NOTE);
            }
            LocationId::Ebih__Boss_Room__Boss__Boss_Reward => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD);
            }
            LocationId::Ebih__Boss_Room__East_Ledge__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM);
            }
            LocationId::Ebih__Grid_25_2_6__Pit__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_EBIH__GRID_25_2_6__PIT__ITEM);
            }
            LocationId::Ebih__Grid_26_10_11__Ledge__Note => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_EBIH__GRID_26_10_11__LEDGE__NOTE);
            }
            LocationId::Ebih__Vertical_Interchange__Block_Cubby__Shockwave_Block => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_EBIH__VERTICAL_INTERCHANGE__BLOCK_CUBBY__SHOCKWAVE_BLOCK);
            }
            LocationId::Ebih__Vertical_Interchange__Switch__Activate_Switch => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH);
            }
            LocationId::Ebih__Guarded_Health__West_Basin__Health => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_EBIH__GUARDED_HEALTH__WEST_BASIN__HEALTH);
            }
            LocationId::Ebih__Guarded_Health__Far_West__Refill => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_EBIH__GUARDED_HEALTH__FAR_WEST__REFILL);
            }
            LocationId::Filter__Core__Terminal_East__Authorize_Hammond => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_FILTER__CORE__TERMINAL_EAST__AUTHORIZE_HAMMOND);
            }
            LocationId::Giguna_Breach__Chimney__Cache__Flask => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK);
            }
            LocationId::Giguna_Breach__Cubby__Rocks__Health => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH);
            }
            LocationId::Giguna_Breach__Slingshot__Ravine__Urn => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN);
            }
            LocationId::Giguna__Carnelian__Vault__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__CARNELIAN__VAULT__ITEM);
            }
            LocationId::Giguna__West_Caverns__Cache__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__WEST_CAVERNS__CACHE__ITEM);
            }
            LocationId::Giguna__West_Caverns__Bush__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__WEST_CAVERNS__BUSH__ITEM);
            }
            LocationId::Giguna__Wasteland__Door_Right__Health => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH);
            }
            LocationId::Giguna__Giguna_Base__Ruin__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__GIGUNA_BASE__RUIN__ITEM);
            }
            LocationId::Giguna__Giguna_Base__Table__News => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__GIGUNA_BASE__TABLE__NEWS);
            }
            LocationId::Giguna__Ruins_East__Way_Up_High__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM);
            }
            LocationId::Giguna__Ruins_Center__Tablet__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__RUINS_CENTER__TABLET__ITEM);
            }
            LocationId::Giguna__West_Tower__Top__Tablet => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__WEST_TOWER__TOP__TABLET);
            }
            LocationId::Giguna__Far_Corner__Grass__Obscured_Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM);
            }
            LocationId::Giguna__Helipad__Tablet_Ledge__Tablet => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET);
            }
            LocationId::Giguna__Clouds__Cache__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__CLOUDS__CACHE__ITEM);
            }
            LocationId::Giguna__Lamassu__Deposit__Flask => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__LAMASSU__DEPOSIT__FLASK);
            }
            LocationId::Giguna__Dual_Path__Wall_Secret__Health => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH);
            }
            LocationId::Giguna__Hard_Rock__Rock_Center__Tablet => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET);
            }
            LocationId::Giguna__East_Caverns__Hidden_Passage_Center__Hidden_Flask => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK);
            }
            LocationId::Giguna__Gateway__Flask_Ledge__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM);
            }
            LocationId::Giguna__Gateway__Button__Hit_Switch => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH);
            }
            LocationId::Giguna__Antechamber__Statue_Head__Tablet => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET);
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Boss_Reward => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD);
            }
            LocationId::Giguna__Gubi_Lair__Pedestal__Axe => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GIGUNA__GUBI_LAIR__PEDESTAL__AXE);
            }
            LocationId::Glacier_Breach__Grate_Work__Grate_Interior__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GLACIER_BREACH__GRATE_WORK__GRATE_INTERIOR__ITEM);
            }
            LocationId::Glacier__Compass_Room__Center__Table => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GLACIER__COMPASS_ROOM__CENTER__TABLE);
            }
            LocationId::Glacier__Sea_Burial__Collapsing_Ceiling__Drown => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_GLACIER__SEA_BURIAL__COLLAPSING_CEILING__DROWN);
            }
            LocationId::Glacier__Sea_Burial__Deep_Cache__Health => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_GLACIER__SEA_BURIAL__DEEP_CACHE__HEALTH);
            }
            LocationId::Glacier__Sea_Burial__Inside_the_Grate__Notes => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_GLACIER__SEA_BURIAL__INSIDE_THE_GRATE__NOTES);
            }
            LocationId::Glacier__Vertical_Room__Under_Switch__Switch => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH);
            }
            LocationId::Glacier__Vertical_Room__Peak__Flask => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_GLACIER__VERTICAL_ROOM__PEAK__FLASK);
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM);
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Switch => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH);
            }
            LocationId::Glacier__Peak__Birds_Eye__Item => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_GLACIER__PEAK__BIRDS_EYE__ITEM);
            }
            LocationId::Glacier__Crystals__Top_Corner__Tablet => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_GLACIER__CRYSTALS__TOP_CORNER__TABLET);
            }
            LocationId::Glacier__Crystals__Lower_Corner__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_LOC_GLACIER__CRYSTALS__LOWER_CORNER__ITEM);
            }
            LocationId::Glacier__Hammonds_End__Between_Center_Doors__Health => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_GLACIER__HAMMONDS_END__BETWEEN_CENTER_DOORS__HEALTH);
            }
            LocationId::Interior__Bunker_Interior__Desk__Note => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_INTERIOR__BUNKER_INTERIOR__DESK__NOTE);
            }
            LocationId::Interior__Tent_Interior__Desk__Note => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_INTERIOR__TENT_INTERIOR__DESK__NOTE);
            }
            LocationId::Interior__Garage__Boxes__Under_Boxes => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_INTERIOR__GARAGE__BOXES__UNDER_BOXES);
            }
            LocationId::Interior__Ebih_Cave__Entry__Health => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_INTERIOR__EBIH_CAVE__ENTRY__HEALTH);
            }
            LocationId::Interior__Outpost_Interior__Bookshelf__Note => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE);
            }
            LocationId::Irikar_Breach__Gauntlet__Hidden_Path_Reward__Item => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM);
            }
            LocationId::Irikar_Breach__Hover_Room__Bottom__Item => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM);
            }
            LocationId::Irikar_Breach__Worm_Rave__Corner__Item => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM);
            }
            LocationId::Irikar__Hub__Sat_Tower_Top_Ledge__Tablet => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET);
            }
            LocationId::Irikar__Hub__Dagger_Altar__Weapon => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__DAGGER_ALTAR__WEAPON);
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Mist_into_Wall => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL);
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Upgraded_Mist_into_Wall => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__UPGRADED_MIST_INTO_WALL);
            }
            LocationId::Irikar__Hub__SW_Building_Top_Platform__Power_Core => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__SW_BUILDING_TOP_PLATFORM__POWER_CORE);
            }
            LocationId::Irikar__Abandoned_Room__Corner_Core__Core => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE);
            }
            LocationId::Irikar__Basement_Pipes__Left_Vertical_Pipe__Health_Pickup => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP);
            }
            LocationId::Irikar__Basement_Pipes__High_Pipe__Tablet => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR__BASEMENT_PIPES__HIGH_PIPE__TABLET);
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Boss_Reward => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD);
            }
            LocationId::Irikar__Boss_Room__Healthy_Rooftop__Health => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH);
            }
            LocationId::Irikar__East_Rooftops__Top_Rooftop__Tablet => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET);
            }
            LocationId::Irikar__Midwest__Tablet_Platform__Tablet => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR__MIDWEST__TABLET_PLATFORM__TABLET);
            }
            LocationId::Irikar__Lamassu__Desk__Item => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR__LAMASSU__DESK__ITEM);
            }
            LocationId::Irikar__Beach__Cache__Item => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_IRIKAR__BEACH__CACHE__ITEM);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_4 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_5 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Mist_Upgrade => {
                self.cbits7.remove(flags::ContextBits7::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3);
            }
            LocationId::Uhrum__West_Entrance__Inner_Dais__Item => {
                self.cbits7.remove(flags::ContextBits7::VISITED_LOC_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM);
            }
            LocationId::Uhrum__West_Entrance__Gate_Switch__Open_Gate => {
                self.cbits7.remove(flags::ContextBits7::VISITED_LOC_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE);
            }
            LocationId::Uhrum__West_Entrance__Sand__Refill => {
                self.cbits7.remove(flags::ContextBits7::VISITED_LOC_UHRUM__WEST_ENTRANCE__SAND__REFILL);
            }
            LocationId::Uhrum__Siege_Corridor__Western_Cache__Core => {
                self.cbits7.remove(flags::ContextBits7::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE);
            }
            LocationId::Uhrum__Siege_Corridor__Center_Box__Box => {
                self.cbits7.remove(flags::ContextBits7::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX);
            }
            LocationId::Uhrum__Siege_Corridor__Pond__Item => {
                self.cbits7.remove(flags::ContextBits7::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__POND__ITEM);
            }
            LocationId::Uhrum__Waterfalls__Ceiling_Cache__Flask => {
                self.cbits7.remove(flags::ContextBits7::VISITED_LOC_UHRUM__WATERFALLS__CEILING_CACHE__FLASK);
            }
            LocationId::Uhrum__Waterfalls__West_Water_Nook__Tablet => {
                self.cbits7.remove(flags::ContextBits7::VISITED_LOC_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET);
            }
            LocationId::Uhrum__Annuna_Corridor__East_Cubby__Tablet => {
                self.cbits7.remove(flags::ContextBits7::VISITED_LOC_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET);
            }
            LocationId::Uhrum__Annuna_Corridor__Statue__Item => {
                self.cbits7.remove(flags::ContextBits7::VISITED_LOC_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM);
            }
        }
    }

    fn visited(&self, loc_id: LocationId) -> bool {
        match loc_id {
            LocationId::Amagi__West_Lake__Cavern_Tear_Duct__Remote_Flask | LocationId::Amagi__West_Lake__Cavern_Eye__Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI_DRAGON_EYE_FLASK)
            }
            LocationId::Amagi__West_Lake__Stronghold_Top__Remote_Urn | LocationId::Amagi__West_Lake__Stronghold_Item__Item => {
                self.cbits7.contains(flags::ContextBits7::VISITED_SHOCKWAVE)
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Break_Wall | LocationId::Amagi__West_Lake__Stronghold_Middle_Column__Break_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_WALL_1)
            }
            LocationId::Amagi__West_Lake__Stronghold_Rear_Wall__Break_Left_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_LEFT_WALL)
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Right__Knock_Down_Right_Boulder => {
                self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_BOULDER_2)
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Room__Break_Wall | LocationId::Amagi__West_Lake__Stronghold_Front_Door__Break_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_WALL_2)
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Right__Break_Wall | LocationId::Amagi__West_Lake__Surface_Wall_Left__Break_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI_WEST_LAKE_SURFACE_WALL)
            }
            LocationId::Annuna__Mirror_Match__Plinth__Item | LocationId::Annuna__Mirror_Match__Waving_Distance__Shockwave_Flask | LocationId::Annuna__Mirror_Match__East_26_Lower__Remote_Flask | LocationId::Annuna__Mirror_Match__East_26_Upper__Remote_Flask => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA_MIRROR_MATCH_FLASK)
            }
            LocationId::Annuna__East_Bridge__Gate_Button__Switch => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA_EAST_BRIDGE_GATE)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_West__Break_Outer_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_West__Upgraded_Mist_Through_Outer_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_East__Break_Outer_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_East__Upgraded_Mist_Through_Outer_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_SNIPER_VALLEY_ROCK_1)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_West__Break_Inner_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_West__Upgraded_Mist_Through_Inner_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_East__Break_Inner_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_East__Upgraded_Mist_Through_Inner_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_SNIPER_VALLEY_ROCK_2)
            }
            LocationId::Annuna__Filter_Teleporter__Door_Ledge__Shockwave_Flask | LocationId::Annuna__Filter_Teleporter__Shaft_Bottom__Flask => {
                self.cbits4.contains(flags::ContextBits4::VISITED_FILTER_TELEPORTER_FLASK)
            }
            LocationId::Annuna__Egg_Room__Second_Egg__Remote_Boomerang_Flask | LocationId::Annuna__Egg_Room__Cache__Flask | LocationId::Annuna__Egg_Room__Cache__Shockwave_Flask | LocationId::Annuna__Egg_Room__Corner_Platform__Shockwave_from_Outside | LocationId::Annuna__Egg_Room__Corner_Platform__Remote_Boomerang_Flask => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EGG_ROOM_FLASK)
            }
            LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Wall_as_Indra | LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Through_Wall_as_Drone | LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Through_Wall_with_Mist | LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Through_Wall_with_Mist_2 | LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Wall_as_Indra | LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Through_Wall_as_Drone | LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Through_Wall_with_Mist | LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Through_Wall_with_Mist_2 => {
                self.cbits7.contains(flags::ContextBits7::VISITED_SIUNA_STORAGE_WALL)
            }
            LocationId::Annuna__Siuna_Storage__Wall_Left__Distant_Urn | LocationId::Annuna__Siuna_Storage__Wall_Left__Distant_Urn_Fast_Travel | LocationId::Annuna__Siuna_Storage__Within_Range__Remote_Urn | LocationId::Annuna__Siuna_Storage__Within_Range__Remote_Urn_Fast_Travel | LocationId::Annuna__Siuna_Storage__Cache__Urn | LocationId::Annuna__Siuna_Storage__Cache__Urn_Collection_Skip | LocationId::Annuna__Siuna_Storage__Cache__Urn_Fast_Travel => {
                self.cbits7.contains(flags::ContextBits7::VISITED_NANITE_MIST)
            }
            LocationId::Annuna__Seals__Breakable_Rock__Break_Through_Wall | LocationId::Annuna__Seals__Breakable_Rock__Mist_Through_Wall | LocationId::Annuna__Seals__Breakable_Rock__Faster_Mist_Through_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_APOCALYPSE_SEALS_WALL)
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Boss_Fight | LocationId::Annuna__Apocalypse__Center_Scaffold_West__Fill_It_Up => {
                self.cbits4.contains(flags::ContextBits4::VISITED_APOCALYPSE_BOMB)
            }
            LocationId::Antarctica__Building_2__Behind_Boxes__Note | LocationId::Glacier__Dock_Outside__Ruins_Stairs__Note => {
                self.cbits7.contains(flags::ContextBits7::VISITED_NOTES_2053_02_27)
            }
            LocationId::Ebih__Base_Camp__Left_Platform_Moved__Item_From_The_Side | LocationId::Ebih__Base_Camp__Top_Platform__Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH_BASE_CAMP_FRAGMENT)
            }
            LocationId::Ebih__Grid_25_10_12__East_10__Remote_Bush | LocationId::Ebih__Grid_25_10_12__Hidden_Bush__Behind_Bush => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH_BUSH_FLASK)
            }
            LocationId::Ebih__Waterfall__Alcove_Right__Block_Right | LocationId::Ebih__Waterfall__Alcove__Block_Right => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH_WATERFALL_BLOCK_RIGHT)
            }
            LocationId::Ebih__Waterfall__Alcove_Left__Block_Left | LocationId::Ebih__Waterfall__Alcove__Block_Left => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH_WATERFALL_BLOCK_LEFT)
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Wall | LocationId::Ebih__Waterfall__Wall_Right__Break_Through_Wall | LocationId::Ebih__Waterfall__Wall_Right__Upgraded_Mist_Through_Wall | LocationId::Ebih__Waterfall__Wall_Left__Break_Wall | LocationId::Ebih__Waterfall__Wall_Left__Break_Through_Wall | LocationId::Ebih__Waterfall__Wall_Left__Upgraded_Mist_Through_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH_WATERFALL_WALL)
            }
            LocationId::Ebih__Ebih_West__Block_Left__Break_Block | LocationId::Ebih__Ebih_West__Block_Right__Break_Block => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH_WEST_BLOCK)
            }
            LocationId::Ebih__Ebih_East__Lower_Moving_Platform__Remote_Urn | LocationId::Ebih__Ebih_East__Corner__Urn => {
                self.cbits4.contains(flags::ContextBits4::VISITED_INFECT)
            }
            LocationId::Ebih__Boss_Room__Boss__Hack_Alu | LocationId::Ebih__Boss_Room__Boss__Fight_Alu => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH_ALU)
            }
            LocationId::Ebih__Drone_Room__Item__Urn | LocationId::Ebih__Drone_Room__Item__Urn_Collection_Skip | LocationId::Ebih__Drone_Room__Item__Urn_Fast_Travel | LocationId::Ebih__Drone_Room__Middle_Platform__Urn_Quick_Grab => {
                self.cbits7.contains(flags::ContextBits7::VISITED_REMOTE_DRONE)
            }
            LocationId::Ebih__Walled_Off__Wall_Right__Break_Wall | LocationId::Ebih__Walled_Off__Wall_Right__Break_Through_Wall | LocationId::Ebih__Walled_Off__Wall_Right__Break_Through_Wall_Faster | LocationId::Ebih__Walled_Off__Wall_Left__Break_Wall | LocationId::Ebih__Walled_Off__Wall_Left__Break_Through_Wall | LocationId::Ebih__Walled_Off__Wall_Left__Break_Through_Wall_Faster => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH_WALLED_OFF_WALL)
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Button__Open_Gate | LocationId::Giguna__Giguna_Northeast__Gate_Right__Remote_Button => {
                self.cbits4.contains(flags::ContextBits4::VISITED_GIGUNA_NORTHEAST_GATE)
            }
            LocationId::Giguna__Giguna_Northeast__Door__Remote_Flask | LocationId::Giguna__Giguna_Northeast__Vault__Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_GIGUNA_NORTHEAST_FLASK)
            }
            LocationId::Giguna__Wasteland__Passage_East__Clear_Horizontal_Passage_Manually | LocationId::Giguna__Wasteland__Passage_East__Mist_through_Horizontal_Passage | LocationId::Giguna__Wasteland__Passage_East__Upgraded_Mist_through_Horizontal_Passage | LocationId::Giguna__Wasteland__Passage_Cache__Clear_Horizontal_Passage_Manually | LocationId::Giguna__Wasteland__Passage_Cache__Mist_through_Horizontal_Passage | LocationId::Giguna__Wasteland__Passage_Cache__Upgraded_Mist_through_Horizontal_Passage => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH_WASTELAND_PASSAGE_H)
            }
            LocationId::Giguna__Ruins_Top__Small_Ledge__Shockwave_Flask | LocationId::Giguna__Ruins_Top__Flask__Flask => {
                self.cbits4.contains(flags::ContextBits4::VISITED_GIGUNA_TOP_FLASK)
            }
            LocationId::Giguna__Dual_Path__Below_Left_Switch__Remote_Switch | LocationId::Giguna__Dual_Path__Left_Switch__Hit_Switch | LocationId::Giguna__Dual_Path__Right_Switch__Hit_Switch | LocationId::Giguna__Dual_Path__Below_Right_Switch__Remote_Switch => {
                self.cbits4.contains(flags::ContextBits4::VISITED_GIGUNA_DUAL_PATH_SWITCH)
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Break_Wall | LocationId::Giguna__Dual_Path__Base_of_Wall__Mist_into_Wall | LocationId::Giguna__Dual_Path__Base_of_Wall__Upgraded_Mist_into_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_GIGUNA_DUAL_PATH_WALL)
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Shockwave_Boulder | LocationId::Giguna__Hard_Rock__Rock_Right__Enter_Rock_as_Mist | LocationId::Giguna__Hard_Rock__Rock_Right__Enter_Rock_as_Upgraded_Mist | LocationId::Giguna__Hard_Rock__Rock_Left__Shockwave_Boulder | LocationId::Giguna__Hard_Rock__Rock_Left__Enter_Rock_as_Mist | LocationId::Giguna__Hard_Rock__Rock_Left__Enter_Rock_as_Upgraded_Mist => {
                self.cbits4.contains(flags::ContextBits4::VISITED_GIGUNA_BOULDER)
            }
            LocationId::Giguna__Gateway__Block_Left__Shockwave | LocationId::Giguna__Gateway__Block_Right__Shockwave => {
                self.cbits4.contains(flags::ContextBits4::VISITED_GIGUNA_GATEWAY_BLOCK)
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Hack_Gubi | LocationId::Giguna__Gubi_Lair__Center_Platform__Fight_Gubi => {
                self.cbits4.contains(flags::ContextBits4::VISITED_GIGUNA_GUBI)
            }
            LocationId::Giguna__Breachable_Wall__Above_the_Hole__Shockwave_Flask | LocationId::Giguna__Breachable_Wall__Wall_Interior__Flask | LocationId::Giguna__Breachable_Wall__Wall_Interior__Shockwave_Flask => {
                self.cbits4.contains(flags::ContextBits4::VISITED_GIGUNA_BREACHABLE_WALL_FLASK)
            }
            LocationId::Glacier_Breach__Control__Upper_Corner__Control_Enemy | LocationId::Glacier_Breach__Control__Upper_Corner__Control_Enemy_And_Jump => {
                self.cbits7.contains(flags::ContextBits7::VISITED_SYNC_FLASK)
            }
            LocationId::Glacier__Dock_Outside__Cave_Treasure__Item | LocationId::Glacier__Dock_Outside__Cave_Treasure__Flask_Collection_Skip | LocationId::Glacier__Dock_Outside__Cave_Treasure__Flask_Fast_Travel => {
                self.cbits4.contains(flags::ContextBits4::VISITED_GLACIER_DOCK_FLASK)
            }
            LocationId::Glacier__Revival__Pillar__Health | LocationId::Glacier__Revival__Mid_air__Fly_to_the_Platform_and_Grab | LocationId::Glacier__Revival__Mid_air__Fly_to_the_Stairs_and_Grab => {
                self.cbits7.contains(flags::ContextBits7::VISITED_REVIVAL_HEALTH_NODE)
            }
            LocationId::Glacier__The_Big_Drop__West_14__Break_Rock | LocationId::Glacier__The_Big_Drop__West_14__Mist_Through | LocationId::Glacier__The_Big_Drop__West_14__Mist_Through_Faster | LocationId::Glacier__The_Big_Drop__Breakable_Rock_Right__Break_Rock | LocationId::Glacier__The_Big_Drop__Breakable_Rock_Right__Mist_Through | LocationId::Glacier__The_Big_Drop__Breakable_Rock_Right__Mist_Through_Faster => {
                self.cbits4.contains(flags::ContextBits4::VISITED_GLACIER_BIG_DROP_ROCK)
            }
            LocationId::Glacier__Sea_Burial__Breakable_Rock_Left__Break_Rock | LocationId::Glacier__Sea_Burial__Breakable_Rock_Left__Mist_Through | LocationId::Glacier__Sea_Burial__Breakable_Rock_Left__Mist_Through_Faster | LocationId::Glacier__Sea_Burial__Breakable_Rock_Right__Break_Rock_while_Jumping | LocationId::Glacier__Sea_Burial__Breakable_Rock_Right__Mist_Through | LocationId::Glacier__Sea_Burial__Breakable_Rock_Right__Mist_Through_Faster => {
                self.cbits4.contains(flags::ContextBits4::VISITED_GLACIER_SEA_BURIAL_ROCK)
            }
            LocationId::Glacier__Grid_39_40_7_9__Third_Upper_Platform__Fly_by_Flask_Toward_Fortress | LocationId::Glacier__Grid_39_40_7_9__Third_Upper_Platform__Charged_Fly_by_Flask_Toward_Fortress | LocationId::Glacier__Grid_39_40_7_9__Floating_Rock__Item | LocationId::Glacier__Grid_39_40_7_9__Floating_Rock__Flask_Collection_Skip | LocationId::Glacier__Grid_39_40_7_9__Floating_Rock__Flask_Fast_Travel => {
                self.cbits4.contains(flags::ContextBits4::VISITED_GLACIER_40_8_FLASK)
            }
            LocationId::Glacier__Ledge_Grab_Room__Cliff_Bottom__Quick_Grab | LocationId::Glacier__Ledge_Grab_Room__Pedestal__Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_LEDGE_GRAB)
            }
            LocationId::Glacier__Apocalypse_Entry__Grate_Ledge__Escape | LocationId::Glacier__Apocalypse_Entry__Grate_Ledge__Hook_Escape => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ESCAPE)
            }
            LocationId::Glacier__Hammonds_End__Hammond__Note | LocationId::Glacier__Hammonds_End__Corner__Quick_Note => {
                self.cbits4.contains(flags::ContextBits4::VISITED_HAMMONDS_NOTE)
            }
            LocationId::Interior__Building_Interior__Entry__Remote_Urn | LocationId::Interior__Building_Interior__Entry__Urn_Collection_Skip | LocationId::Interior__Building_Interior__Corner__Urn => {
                self.cbits7.contains(flags::ContextBits7::VISITED_MELEE_CHARGE)
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_IRIKAR_ROYAL_STORAGE_WALL)
            }
            LocationId::Irikar__Hub__Royal_Storage_in_Wall__Item | LocationId::Irikar__Hub__Collapsed_Column__Shockwave_to_Get_Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_IRIKAR_ROYAL_STORAGE_FLASK)
            }
            LocationId::Irikar__Hub__Ruined_Hallway_By_Well__Shockwave_Well | LocationId::Irikar__Hub__Ruined_Hallway_Atop_Well__Well_Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_IRIKAR_WELL_FLASK)
            }
            LocationId::Irikar__Airy__Cavern_Side__Remote_Flask | LocationId::Irikar__Airy__Cavern_Cache__Flask | LocationId::Irikar__Airy__Cavern_Cache__Shockwave_Flask => {
                self.cbits4.contains(flags::ContextBits4::VISITED_IRIKAR_AIRY_FLASK)
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn | LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Collection_Skip | LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Fast_Travel => {
                self.cbits4.contains(flags::ContextBits4::VISITED_BREACH_SIGHT)
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Defeat_Gudam | LocationId::Irikar__Boss_Room__Bulls_Feet__Shockwave_Gudam => {
                self.cbits4.contains(flags::ContextBits4::VISITED_IRIKAR_GUDAM)
            }
            LocationId::Irikar__Midwest__Left_Platform_Dest__Shockwave_Flask | LocationId::Irikar__Midwest__Right_Platform_Start__Flask => {
                self.cbits4.contains(flags::ContextBits4::VISITED_IRIKAR_MIDWEST_FLASK)
            }
            LocationId::Irikar__Beach_Save__Top_Platform__Urn | LocationId::Uhrum__Siege_Corridor__Upper_Rock_Item__Urn => {
                self.cbits4.contains(flags::ContextBits4::VISITED_FAST_TRAVEL)
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_West__Mist_through_Wall | LocationId::Uhrum__West_Entrance__Upper_Wall_West__Upgraded_Mist_through_Wall | LocationId::Uhrum__West_Entrance__Upper_Wall_East__Charge_through_Wall | LocationId::Uhrum__West_Entrance__Upper_Wall_East__Spin_through_Wall | LocationId::Uhrum__West_Entrance__Upper_Wall_East__Mist_through_Wall | LocationId::Uhrum__West_Entrance__Upper_Wall_East__Upgraded_Mist_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_UPPER_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Charge_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_West__Spin_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_West__Mist_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_West__Upgraded_Mist_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_East__Charge_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_East__Spin_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_East__Mist_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_East__Upgraded_Mist_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_LOWER_WALL)
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Charge_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_West__Spin_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_West__Mist_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_West__Upgraded_Mist_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_East__Charge_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_East__Spin_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_East__Mist_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_East__Upgraded_Mist_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM_WATERFALL_WALL)
            }
            LocationId::Uhrum__Waterfalls__Below_Block__Shockwave_Block | LocationId::Uhrum__Waterfalls__Above_Block__Block | LocationId::Uhrum__Waterfalls__East_26__Block => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM_WATERFALLS_BLOCK)
            }
            LocationId::Uhrum__Annuna_Corridor__Upper_Trees__Remote_Urn | LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn | LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Collection_Skip | LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Fast_Travel => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANUMAN)
            }
            LocationId::Uhrum__Annuna_Corridor__Block_West__Dislodge_Block | LocationId::Uhrum__Annuna_Corridor__Block_East__Dislodge_Block => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM_ANNUNA_CORRIDOR_BLOCK)
            }
            LocationId::Amagi_Breach__East_Entrance__Upper_Slope__Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_LOC_AMAGI_BREACH__EAST_ENTRANCE__UPPER_SLOPE__ITEM)
            }
            LocationId::Amagi__Main_Area__Way_Off_To_The_Side__Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_LOC_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM)
            }
            LocationId::Amagi__Liru_Room__Shrine__Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_LOC_AMAGI__LIRU_ROOM__SHRINE__ITEM)
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Break_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Defeat_MUS_A_M20 => {
                self.cbits4.contains(flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20)
            }
            LocationId::Amagi__West_Lake__Cavern_Rear_Pillar__Boss_Reward => {
                self.cbits4.contains(flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD)
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Left__Knock_Down_Left_Boulder => {
                self.cbits4.contains(flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER)
            }
            LocationId::Amagi__East_Lake__Foot__Tablet => {
                self.cbits4.contains(flags::ContextBits4::VISITED_LOC_AMAGI__EAST_LAKE__FOOT__TABLET)
            }
            LocationId::Annuna__Mirror_Match__Save_Point__Fight => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT)
            }
            LocationId::Annuna__Mirror_Match__Below_Switch__Hit_Switch => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH)
            }
            LocationId::Annuna__West_Bridge__Plinth__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__WEST_BRIDGE__PLINTH__ITEM)
            }
            LocationId::Annuna__East_Bridge__Below_Gate_Button__Switch_from_Below => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW)
            }
            LocationId::Annuna__East_Bridge__Tower_Gate__Tablet => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET)
            }
            LocationId::Annuna__East_Bridge__Tower_Secret__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM)
            }
            LocationId::Annuna__Sniper_Valley__Bridge_End__Health_Pickup => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP)
            }
            LocationId::Annuna__Sniper_Valley__Table__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__SNIPER_VALLEY__TABLE__ITEM)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Cache__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM)
            }
            LocationId::Annuna__Vertical_Room__Plinth__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__VERTICAL_ROOM__PLINTH__ITEM)
            }
            LocationId::Annuna__Vertical_Room__Gate_Button__Hit_Button => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__VERTICAL_ROOM__GATE_BUTTON__HIT_BUTTON)
            }
            LocationId::Annuna__Vertical_Room__Upper_Cache__Tablet => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__VERTICAL_ROOM__UPPER_CACHE__TABLET)
            }
            LocationId::Annuna__Upper_Hallway__Behind_Pedestal__Health_Pickup => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__UPPER_HALLWAY__BEHIND_PEDESTAL__HEALTH_PICKUP)
            }
            LocationId::Annuna__Filter_Teleporter__Northeast_Cubby__Tablet => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__FILTER_TELEPORTER__NORTHEAST_CUBBY__TABLET)
            }
            LocationId::Annuna__Spider_Room__Healthy_Corner__Health_Refill => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__SPIDER_ROOM__HEALTHY_CORNER__HEALTH_REFILL)
            }
            LocationId::Annuna__Twisty_Passages__Top__Tablet => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__TWISTY_PASSAGES__TOP__TABLET)
            }
            LocationId::Annuna__Twisty_Passages__Northwest_Alcove__Refill => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL)
            }
            LocationId::Annuna__West_Climb__Cache__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__WEST_CLIMB__CACHE__ITEM)
            }
            LocationId::Antarctica__Shed__Interior__Shelf => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANTARCTICA__SHED__INTERIOR__SHELF)
            }
            LocationId::Antarctica__Power_Room__Switch__Flip => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANTARCTICA__POWER_ROOM__SWITCH__FLIP)
            }
            LocationId::Ebih__By_Garage__Crawlspace__Fragment => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT)
            }
            LocationId::Ebih__Waterfall__Waterfall_Center_Center__Both_Blocks => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS)
            }
            LocationId::Ebih__Waterfall__Alcove__Pedestal => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_EBIH__WATERFALL__ALCOVE__PEDESTAL)
            }
            LocationId::Ebih__Ebih_West__Alcove__Tablet => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_EBIH__EBIH_WEST__ALCOVE__TABLET)
            }
            LocationId::Ebih__Ebih_East__Dispenser__Vend => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_EBIH__EBIH_EAST__DISPENSER__VEND)
            }
            LocationId::Ebih__Ebih_East__East_Ledge__Note => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_EBIH__EBIH_EAST__EAST_LEDGE__NOTE)
            }
            LocationId::Ebih__Boss_Room__Boss__Boss_Reward => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD)
            }
            LocationId::Ebih__Boss_Room__East_Ledge__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM)
            }
            LocationId::Ebih__Grid_25_2_6__Pit__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_EBIH__GRID_25_2_6__PIT__ITEM)
            }
            LocationId::Ebih__Grid_26_10_11__Ledge__Note => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_EBIH__GRID_26_10_11__LEDGE__NOTE)
            }
            LocationId::Ebih__Vertical_Interchange__Block_Cubby__Shockwave_Block => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_EBIH__VERTICAL_INTERCHANGE__BLOCK_CUBBY__SHOCKWAVE_BLOCK)
            }
            LocationId::Ebih__Vertical_Interchange__Switch__Activate_Switch => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH)
            }
            LocationId::Ebih__Guarded_Health__West_Basin__Health => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_EBIH__GUARDED_HEALTH__WEST_BASIN__HEALTH)
            }
            LocationId::Ebih__Guarded_Health__Far_West__Refill => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_EBIH__GUARDED_HEALTH__FAR_WEST__REFILL)
            }
            LocationId::Filter__Core__Terminal_East__Authorize_Hammond => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_FILTER__CORE__TERMINAL_EAST__AUTHORIZE_HAMMOND)
            }
            LocationId::Giguna_Breach__Chimney__Cache__Flask => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK)
            }
            LocationId::Giguna_Breach__Cubby__Rocks__Health => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH)
            }
            LocationId::Giguna_Breach__Slingshot__Ravine__Urn => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN)
            }
            LocationId::Giguna__Carnelian__Vault__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__CARNELIAN__VAULT__ITEM)
            }
            LocationId::Giguna__West_Caverns__Cache__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__WEST_CAVERNS__CACHE__ITEM)
            }
            LocationId::Giguna__West_Caverns__Bush__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__WEST_CAVERNS__BUSH__ITEM)
            }
            LocationId::Giguna__Wasteland__Door_Right__Health => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH)
            }
            LocationId::Giguna__Giguna_Base__Ruin__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__GIGUNA_BASE__RUIN__ITEM)
            }
            LocationId::Giguna__Giguna_Base__Table__News => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__GIGUNA_BASE__TABLE__NEWS)
            }
            LocationId::Giguna__Ruins_East__Way_Up_High__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM)
            }
            LocationId::Giguna__Ruins_Center__Tablet__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__RUINS_CENTER__TABLET__ITEM)
            }
            LocationId::Giguna__West_Tower__Top__Tablet => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__WEST_TOWER__TOP__TABLET)
            }
            LocationId::Giguna__Far_Corner__Grass__Obscured_Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM)
            }
            LocationId::Giguna__Helipad__Tablet_Ledge__Tablet => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET)
            }
            LocationId::Giguna__Clouds__Cache__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__CLOUDS__CACHE__ITEM)
            }
            LocationId::Giguna__Lamassu__Deposit__Flask => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__LAMASSU__DEPOSIT__FLASK)
            }
            LocationId::Giguna__Dual_Path__Wall_Secret__Health => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH)
            }
            LocationId::Giguna__Hard_Rock__Rock_Center__Tablet => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET)
            }
            LocationId::Giguna__East_Caverns__Hidden_Passage_Center__Hidden_Flask => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK)
            }
            LocationId::Giguna__Gateway__Flask_Ledge__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM)
            }
            LocationId::Giguna__Gateway__Button__Hit_Switch => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH)
            }
            LocationId::Giguna__Antechamber__Statue_Head__Tablet => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET)
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Boss_Reward => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD)
            }
            LocationId::Giguna__Gubi_Lair__Pedestal__Axe => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__GUBI_LAIR__PEDESTAL__AXE)
            }
            LocationId::Glacier_Breach__Grate_Work__Grate_Interior__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GLACIER_BREACH__GRATE_WORK__GRATE_INTERIOR__ITEM)
            }
            LocationId::Glacier__Compass_Room__Center__Table => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GLACIER__COMPASS_ROOM__CENTER__TABLE)
            }
            LocationId::Glacier__Sea_Burial__Collapsing_Ceiling__Drown => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_GLACIER__SEA_BURIAL__COLLAPSING_CEILING__DROWN)
            }
            LocationId::Glacier__Sea_Burial__Deep_Cache__Health => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_GLACIER__SEA_BURIAL__DEEP_CACHE__HEALTH)
            }
            LocationId::Glacier__Sea_Burial__Inside_the_Grate__Notes => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_GLACIER__SEA_BURIAL__INSIDE_THE_GRATE__NOTES)
            }
            LocationId::Glacier__Vertical_Room__Under_Switch__Switch => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH)
            }
            LocationId::Glacier__Vertical_Room__Peak__Flask => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_GLACIER__VERTICAL_ROOM__PEAK__FLASK)
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM)
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Switch => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH)
            }
            LocationId::Glacier__Peak__Birds_Eye__Item => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_GLACIER__PEAK__BIRDS_EYE__ITEM)
            }
            LocationId::Glacier__Crystals__Top_Corner__Tablet => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_GLACIER__CRYSTALS__TOP_CORNER__TABLET)
            }
            LocationId::Glacier__Crystals__Lower_Corner__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GLACIER__CRYSTALS__LOWER_CORNER__ITEM)
            }
            LocationId::Glacier__Hammonds_End__Between_Center_Doors__Health => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_GLACIER__HAMMONDS_END__BETWEEN_CENTER_DOORS__HEALTH)
            }
            LocationId::Interior__Bunker_Interior__Desk__Note => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_INTERIOR__BUNKER_INTERIOR__DESK__NOTE)
            }
            LocationId::Interior__Tent_Interior__Desk__Note => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_INTERIOR__TENT_INTERIOR__DESK__NOTE)
            }
            LocationId::Interior__Garage__Boxes__Under_Boxes => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_INTERIOR__GARAGE__BOXES__UNDER_BOXES)
            }
            LocationId::Interior__Ebih_Cave__Entry__Health => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_INTERIOR__EBIH_CAVE__ENTRY__HEALTH)
            }
            LocationId::Interior__Outpost_Interior__Bookshelf__Note => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE)
            }
            LocationId::Irikar_Breach__Gauntlet__Hidden_Path_Reward__Item => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM)
            }
            LocationId::Irikar_Breach__Hover_Room__Bottom__Item => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM)
            }
            LocationId::Irikar_Breach__Worm_Rave__Corner__Item => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM)
            }
            LocationId::Irikar__Hub__Sat_Tower_Top_Ledge__Tablet => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET)
            }
            LocationId::Irikar__Hub__Dagger_Altar__Weapon => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__DAGGER_ALTAR__WEAPON)
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Mist_into_Wall => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL)
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Upgraded_Mist_into_Wall => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__UPGRADED_MIST_INTO_WALL)
            }
            LocationId::Irikar__Hub__SW_Building_Top_Platform__Power_Core => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__SW_BUILDING_TOP_PLATFORM__POWER_CORE)
            }
            LocationId::Irikar__Abandoned_Room__Corner_Core__Core => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE)
            }
            LocationId::Irikar__Basement_Pipes__Left_Vertical_Pipe__Health_Pickup => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP)
            }
            LocationId::Irikar__Basement_Pipes__High_Pipe__Tablet => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__BASEMENT_PIPES__HIGH_PIPE__TABLET)
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Boss_Reward => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD)
            }
            LocationId::Irikar__Boss_Room__Healthy_Rooftop__Health => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH)
            }
            LocationId::Irikar__East_Rooftops__Top_Rooftop__Tablet => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET)
            }
            LocationId::Irikar__Midwest__Tablet_Platform__Tablet => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__MIDWEST__TABLET_PLATFORM__TABLET)
            }
            LocationId::Irikar__Lamassu__Desk__Item => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__LAMASSU__DESK__ITEM)
            }
            LocationId::Irikar__Beach__Cache__Item => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__BEACH__CACHE__ITEM)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_4 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_5 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Mist_Upgrade => {
                self.cbits7.contains(flags::ContextBits7::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3)
            }
            LocationId::Uhrum__West_Entrance__Inner_Dais__Item => {
                self.cbits7.contains(flags::ContextBits7::VISITED_LOC_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM)
            }
            LocationId::Uhrum__West_Entrance__Gate_Switch__Open_Gate => {
                self.cbits7.contains(flags::ContextBits7::VISITED_LOC_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE)
            }
            LocationId::Uhrum__West_Entrance__Sand__Refill => {
                self.cbits7.contains(flags::ContextBits7::VISITED_LOC_UHRUM__WEST_ENTRANCE__SAND__REFILL)
            }
            LocationId::Uhrum__Siege_Corridor__Western_Cache__Core => {
                self.cbits7.contains(flags::ContextBits7::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE)
            }
            LocationId::Uhrum__Siege_Corridor__Center_Box__Box => {
                self.cbits7.contains(flags::ContextBits7::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX)
            }
            LocationId::Uhrum__Siege_Corridor__Pond__Item => {
                self.cbits7.contains(flags::ContextBits7::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__POND__ITEM)
            }
            LocationId::Uhrum__Waterfalls__Ceiling_Cache__Flask => {
                self.cbits7.contains(flags::ContextBits7::VISITED_LOC_UHRUM__WATERFALLS__CEILING_CACHE__FLASK)
            }
            LocationId::Uhrum__Waterfalls__West_Water_Nook__Tablet => {
                self.cbits7.contains(flags::ContextBits7::VISITED_LOC_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET)
            }
            LocationId::Uhrum__Annuna_Corridor__East_Cubby__Tablet => {
                self.cbits7.contains(flags::ContextBits7::VISITED_LOC_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET)
            }
            LocationId::Uhrum__Annuna_Corridor__Statue__Item => {
                self.cbits7.contains(flags::ContextBits7::VISITED_LOC_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM)
            }
        }
    }

    fn all_spot_checks(&self, id: SpotId) -> bool {
        false
    }
    fn all_area_checks(&self, id: AreaId) -> bool {
        false
    }
    fn all_region_checks(&self, id: RegionId) -> bool {
        false
    }
    fn get_movement_state(&self, world: &graph::World) -> movements::MovementState {
        movements::get_movement_state(self, world)
    }

    fn observe_movement_state(
        &self,
        world: &graph::World,
        full_obs: &mut FullObservation,
    ) -> movements::MovementState {
        movements::observe_movement_state(self, world, full_obs)
    }

    fn local_travel_time(&self, movement_state: movements::MovementState, dest: SpotId) -> u32 {
        movements::local_travel_time(movement_state, self.position, dest)
    }

    fn count_visits(&self) -> usize {
        self.cbits4
            .intersection(flags::ContextBits4::ALL_VISIT_FLAGS)
            .bits()
            .count_ones() as usize
            + self
                .cbits5
                .intersection(flags::ContextBits5::ALL_VISIT_FLAGS)
                .bits()
                .count_ones() as usize
            + self
                .cbits6
                .intersection(flags::ContextBits6::ALL_VISIT_FLAGS)
                .bits()
                .count_ones() as usize
            + self
                .cbits7
                .intersection(flags::ContextBits7::ALL_VISIT_FLAGS)
                .bits()
                .count_ones() as usize
    }
    fn progress(&self) -> u32 {
        let visits = self.count_visits();
        if visits <= 0 {
            0
        } else {
            (visits * 100 / Self::World::NUM_CANON_LOCATIONS)
                .try_into()
                .unwrap()
        }
    }

    fn diff(&self, old: &Context) -> String {
        let mut list: Vec<String> = Vec::new();

        if old.position != self.position {
            list.push(format!(
                "position: {:?} → {:?}",
                old.position, self.position
            ));
        }
        if old.energy != self.energy {
            list.push(format!("energy: {:?} → {:?}", old.energy, self.energy));
        }
        if old.flasks != self.flasks {
            list.push(format!("flasks: {:?} → {:?}", old.flasks, self.flasks));
        }
        if old.refills != self.refills {
            list.push(format!("refills: {:?} → {:?}", old.refills, self.refills));
        }
        if old.mode != self.mode {
            list.push(format!("mode: {:?} → {:?}", old.mode, self.mode));
        }
        if old.save != self.save {
            list.push(format!("save: {:?} → {:?}", old.save, self.save));
        }
        if old.breach_save != self.breach_save {
            list.push(format!(
                "breach_save: {:?} → {:?}",
                old.breach_save, self.breach_save
            ));
        }
        if old.indra != self.indra {
            list.push(format!("indra: {:?} → {:?}", old.indra, self.indra));
        }
        if old.last != self.last {
            list.push(format!("last: {:?} → {:?}", old.last, self.last));
        }
        if old.portal != self.portal {
            list.push(format!("portal: {:?} → {:?}", old.portal, self.portal));
        }
        if old.prev_portal != self.prev_portal {
            list.push(format!(
                "prev_portal: {:?} → {:?}",
                old.prev_portal, self.prev_portal
            ));
        }
        if old.prev_area != self.prev_area {
            list.push(format!(
                "prev_area: {:?} → {:?}",
                old.prev_area, self.prev_area
            ));
        }
        if old.big_flask != self.big_flask {
            list.push(format!("Big_Flask: {:+}", self.big_flask - old.big_flask));
        }
        if old.flask != self.flask {
            list.push(format!("Flask: {:+}", self.flask - old.flask));
        }
        if old.health_fragment != self.health_fragment {
            list.push(format!(
                "Health_Fragment: {:+}",
                self.health_fragment - old.health_fragment
            ));
        }
        if old.health_node != self.health_node {
            list.push(format!(
                "Health_Node: {:+}",
                self.health_node - old.health_node
            ));
        }
        if old.power_matrix != self.power_matrix {
            list.push(format!(
                "Power_Matrix: {:+}",
                self.power_matrix - old.power_matrix
            ));
        }
        // bitflags
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__AMAGI_BREACH__EAST_ENTRANCE__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__AMAGI_BREACH__EAST_ENTRANCE__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__AMAGI_BREACH__EAST_ENTRANCE__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__AMAGI__MAIN_AREA__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__AMAGI__MAIN_AREA__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__AMAGI__MAIN_AREA__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__AMAGI__EAST_LAKE__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__AMAGI__EAST_LAKE__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__AMAGI__EAST_LAKE__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__ANNUNA__MIRROR_MATCH__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__ANNUNA__VERTICAL_ROOM__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__ANNUNA__FACTORY_ENTRANCE__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__ANNUNA__FACTORY_ENTRANCE__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__ANNUNA__FACTORY_ENTRANCE__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__ANNUNA__UPPER_SAVE__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__ANNUNA__UPPER_SAVE__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__ANNUNA__UPPER_SAVE__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__ANNUNA__CENTER_SAVE__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__ANNUNA__CENTER_SAVE__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__ANNUNA__CENTER_SAVE__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__EBIH__BASE_CAMP__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__EBIH__BASE_CAMP__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__EBIH__BASE_CAMP__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__MID_SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__MID_SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__EBIH__EBIH_WEST__MID_SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__EBIH__EBIH_WEST__UPPER_SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__EBIH__EBIH_WEST__LOWER_SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA_BREACH__PEAK__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA_BREACH__PEAK__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__GIGUNA_BREACH__PEAK__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__GIGUNA_BREACH__SW_SAVE__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__GIGUNA__GIGUNA_BASE__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__GIGUNA__RUINS_WEST__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__GIGUNA__RUINS_TOP__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__GLACIER_BREACH__SOUTH_SAVE__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__GLACIER_BREACH__SOUTH_SAVE__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__GLACIER_BREACH__SOUTH_SAVE__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__GLACIER_BREACH__WEST_SAVE__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__GLACIER_BREACH__WEST_SAVE__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__GLACIER_BREACH__WEST_SAVE__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__GLACIER_BREACH__GUARDED_CORRIDOR__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__GLACIER_BREACH__GUARDED_CORRIDOR__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__GLACIER_BREACH__GUARDED_CORRIDOR__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__GLACIER_BREACH__SAVE_AND_EXIT__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__GLACIER_BREACH__SAVE_AND_EXIT__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__GLACIER_BREACH__SAVE_AND_EXIT__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__GLACIER_BREACH__HAMMONDS_BREACH__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__GLACIER_BREACH__HAMMONDS_BREACH__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__GLACIER_BREACH__HAMMONDS_BREACH__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__GLACIER__REVIVAL__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__IRIKAR_BREACH__GAUNTLET__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__IRIKAR__HUB__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__IRIKAR__MIDWEST__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__IRIKAR__MIDWEST__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__IRIKAR__MIDWEST__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__IRIKAR__BEACH_SAVE__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__IRIKAR__BEACH_SAVE__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__IRIKAR__BEACH_SAVE__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__UHRUM__WEST_ENTRANCE__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__UHRUM__SAVE_ROOM__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__UHRUM__SAVE_ROOM__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__UHRUM__SAVE_ROOM__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE);
        if n != p {
            list.push(format!(
                "{}MAP__UHRUM__ANNUNA_CORRIDOR__SAVE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GLACIER__CTX__HAMMONDS_DOORS);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GLACIER__CTX__HAMMONDS_DOORS);
        if n != p {
            list.push(format!(
                "{}GLACIER__CTX__HAMMONDS_DOORS",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::AMAGI__MAIN_AREA__CTX__COMBO);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::AMAGI__MAIN_AREA__CTX__COMBO);
        if n != p {
            list.push(format!(
                "{}AMAGI__MAIN_AREA__CTX__COMBO",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::ANNUNA__WEST_BRIDGE__CTX__DOORS_OPENED);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::ANNUNA__WEST_BRIDGE__CTX__DOORS_OPENED);
        if n != p {
            list.push(format!(
                "{}ANNUNA__WEST_BRIDGE__CTX__DOORS_OPENED",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::ANNUNA__EAST_BRIDGE__CTX__COMBO);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::ANNUNA__EAST_BRIDGE__CTX__COMBO);
        if n != p {
            list.push(format!(
                "{}ANNUNA__EAST_BRIDGE__CTX__COMBO",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::ANNUNA__VERTICAL_ROOM__CTX__DOOR_OPENED);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::ANNUNA__VERTICAL_ROOM__CTX__DOOR_OPENED);
        if n != p {
            list.push(format!(
                "{}ANNUNA__VERTICAL_ROOM__CTX__DOOR_OPENED",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::ANNUNA__WEST_CLIMB__CTX__DOOR_OPENED);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::ANNUNA__WEST_CLIMB__CTX__DOOR_OPENED);
        if n != p {
            list.push(format!(
                "{}ANNUNA__WEST_CLIMB__CTX__DOOR_OPENED",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED);
        if n != p {
            list.push(format!(
                "{}EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::EBIH__TRUCK_GATE__CTX__DOOR_OPEN);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::EBIH__TRUCK_GATE__CTX__DOOR_OPEN);
        if n != p {
            list.push(format!(
                "{}EBIH__TRUCK_GATE__CTX__DOOR_OPEN",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::EBIH__GRID_25_10_12__CTX__DOOR_OPEN);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::EBIH__GRID_25_10_12__CTX__DOOR_OPEN);
        if n != p {
            list.push(format!(
                "{}EBIH__GRID_25_10_12__CTX__DOOR_OPEN",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::EBIH__WATERFALL__CTX__WEST_DOOR_OPEN);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::EBIH__WATERFALL__CTX__WEST_DOOR_OPEN);
        if n != p {
            list.push(format!(
                "{}EBIH__WATERFALL__CTX__WEST_DOOR_OPEN",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::EBIH__EBIH_WEST__CTX__DOOR_OPEN);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::EBIH__EBIH_WEST__CTX__DOOR_OPEN);
        if n != p {
            list.push(format!(
                "{}EBIH__EBIH_WEST__CTX__DOOR_OPEN",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED);
        if n != p {
            list.push(format!(
                "{}EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED);
        if n != p {
            list.push(format!(
                "{}EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED);
        if n != p {
            list.push(format!(
                "{}EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::EBIH__VERTICAL_INTERCHANGE__CTX__DOOR_OPEN);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::EBIH__VERTICAL_INTERCHANGE__CTX__DOOR_OPEN);
        if n != p {
            list.push(format!(
                "{}EBIH__VERTICAL_INTERCHANGE__CTX__DOOR_OPEN",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GIGUNA_BREACH__SW_SAVE__CTX__DOOR_OPENED);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GIGUNA_BREACH__SW_SAVE__CTX__DOOR_OPENED);
        if n != p {
            list.push(format!(
                "{}GIGUNA_BREACH__SW_SAVE__CTX__DOOR_OPENED",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__GIGUNA_NORTHEAST__CTX__DOOR_OPENED);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__GIGUNA_NORTHEAST__CTX__DOOR_OPENED);
        if n != p {
            list.push(format!(
                "{}GIGUNA__GIGUNA_NORTHEAST__CTX__DOOR_OPENED",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__DOOR_OPENED);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__DOOR_OPENED);
        if n != p {
            list.push(format!(
                "{}GIGUNA__CARNELIAN__CTX__DOOR_OPENED",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__UPPER_SUSAR);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__UPPER_SUSAR);
        if n != p {
            list.push(format!(
                "{}GIGUNA__CARNELIAN__CTX__UPPER_SUSAR",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__LOWER_SUSAR);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__LOWER_SUSAR);
        if n != p {
            list.push(format!(
                "{}GIGUNA__CARNELIAN__CTX__LOWER_SUSAR",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR);
        if n != p {
            list.push(format!(
                "{}GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__GIGUNA_BASE__CTX__DOOR_OPEN);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__GIGUNA_BASE__CTX__DOOR_OPEN);
        if n != p {
            list.push(format!(
                "{}GIGUNA__GIGUNA_BASE__CTX__DOOR_OPEN",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED);
        if n != p {
            list.push(format!(
                "{}GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__RUINS_TOP__CTX__DOORS_OPEN);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__RUINS_TOP__CTX__DOORS_OPEN);
        if n != p {
            list.push(format!(
                "{}GIGUNA__RUINS_TOP__CTX__DOORS_OPEN",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__CLOUDS__CTX__PLATFORM);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__CLOUDS__CTX__PLATFORM);
        if n != p {
            list.push(format!(
                "{}GIGUNA__CLOUDS__CTX__PLATFORM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__DOOR_OPENED);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__DOOR_OPENED);
        if n != p {
            list.push(format!(
                "{}GIGUNA__EAST_CAVERNS__CTX__DOOR_OPENED",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED);
        if n != p {
            list.push(format!(
                "{}GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR);
        if n != p {
            list.push(format!(
                "{}GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR);
        if n != p {
            list.push(format!(
                "{}GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR);
        if n != p {
            list.push(format!(
                "{}GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__GATEWAY__CTX__DOOR_OPENED);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GIGUNA__GATEWAY__CTX__DOOR_OPENED);
        if n != p {
            list.push(format!(
                "{}GIGUNA__GATEWAY__CTX__DOOR_OPENED",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits1
            .contains(flags::ContextBits1::GLACIER__THE_BIG_DROP__CTX__BRIDGE_OPEN);
        let p = old
            .cbits1
            .contains(flags::ContextBits1::GLACIER__THE_BIG_DROP__CTX__BRIDGE_OPEN);
        if n != p {
            list.push(format!(
                "{}GLACIER__THE_BIG_DROP__CTX__BRIDGE_OPEN",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::GLACIER__VERTICAL_ROOM__CTX__UPPER_GATESTONE);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::GLACIER__VERTICAL_ROOM__CTX__UPPER_GATESTONE);
        if n != p {
            list.push(format!(
                "{}GLACIER__VERTICAL_ROOM__CTX__UPPER_GATESTONE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::GLACIER__VERTICAL_ROOM__CTX__LOWER_GATESTONES);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::GLACIER__VERTICAL_ROOM__CTX__LOWER_GATESTONES);
        if n != p {
            list.push(format!(
                "{}GLACIER__VERTICAL_ROOM__CTX__LOWER_GATESTONES",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED);
        if n != p {
            list.push(format!(
                "{}IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::IRIKAR__MIDWEST__CTX__LEFT_PLATFORM);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::IRIKAR__MIDWEST__CTX__LEFT_PLATFORM);
        if n != p {
            list.push(format!(
                "{}IRIKAR__MIDWEST__CTX__LEFT_PLATFORM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::IRIKAR__MIDWEST__CTX__RIGHT_PLATFORM);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::IRIKAR__MIDWEST__CTX__RIGHT_PLATFORM);
        if n != p {
            list.push(format!(
                "{}IRIKAR__MIDWEST__CTX__RIGHT_PLATFORM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::AMAGI_DRAGON_EYE_PASSAGE);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::AMAGI_DRAGON_EYE_PASSAGE);
        if n != p {
            list.push(format!(
                "{}AMAGI_DRAGON_EYE_PASSAGE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_1);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_1);
        if n != p {
            list.push(format!(
                "{}AMAGI_STRONGHOLD_BOULDER_1",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_2);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_2);
        if n != p {
            list.push(format!(
                "{}AMAGI_STRONGHOLD_BOULDER_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_1);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_1);
        if n != p {
            list.push(format!(
                "{}AMAGI_STRONGHOLD_WALL_1",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_2);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_2);
        if n != p {
            list.push(format!(
                "{}AMAGI_STRONGHOLD_WALL_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::AMAGI_WEST_LAKE_SURFACE_WALL);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::AMAGI_WEST_LAKE_SURFACE_WALL);
        if n != p {
            list.push(format!(
                "{}AMAGI_WEST_LAKE_SURFACE_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits2.contains(flags::ContextBits2::AMASHILAMA);
        let p = old.cbits2.contains(flags::ContextBits2::AMASHILAMA);
        if n != p {
            list.push(format!("{}AMASHILAMA", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::ANNUNA_EAST_BRIDGE_GATE);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::ANNUNA_EAST_BRIDGE_GATE);
        if n != p {
            list.push(format!(
                "{}ANNUNA_EAST_BRIDGE_GATE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::ANNUNA_MIRROR_MATCH_SWITCH);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::ANNUNA_MIRROR_MATCH_SWITCH);
        if n != p {
            list.push(format!(
                "{}ANNUNA_MIRROR_MATCH_SWITCH",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::ANNUNA_VERTICAL_ROOM_GATE);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::ANNUNA_VERTICAL_ROOM_GATE);
        if n != p {
            list.push(format!(
                "{}ANNUNA_VERTICAL_ROOM_GATE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits2.contains(flags::ContextBits2::ANUMAN);
        let p = old.cbits2.contains(flags::ContextBits2::ANUMAN);
        if n != p {
            list.push(format!("{}ANUMAN", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::APOCALYPSE_BOMB);
        let p = old.cbits2.contains(flags::ContextBits2::APOCALYPSE_BOMB);
        if n != p {
            list.push(format!("{}APOCALYPSE_BOMB", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::APOCALYPSE_SEALS_WALL);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::APOCALYPSE_SEALS_WALL);
        if n != p {
            list.push(format!(
                "{}APOCALYPSE_SEALS_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::BEWARE_THE_PATTERNMIND);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::BEWARE_THE_PATTERNMIND);
        if n != p {
            list.push(format!(
                "{}BEWARE_THE_PATTERNMIND",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits2.contains(flags::ContextBits2::BOOMERANG);
        let p = old.cbits2.contains(flags::ContextBits2::BOOMERANG);
        if n != p {
            list.push(format!("{}BOOMERANG", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::BOOMERANG_UPGRADE);
        let p = old.cbits2.contains(flags::ContextBits2::BOOMERANG_UPGRADE);
        if n != p {
            list.push(format!("{}BOOMERANG_UPGRADE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::BREACH_ATTRACTOR);
        let p = old.cbits2.contains(flags::ContextBits2::BREACH_ATTRACTOR);
        if n != p {
            list.push(format!("{}BREACH_ATTRACTOR", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::BREACH_SIGHT);
        let p = old.cbits2.contains(flags::ContextBits2::BREACH_SIGHT);
        if n != p {
            list.push(format!("{}BREACH_SIGHT", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::BRONZE_AXE);
        let p = old.cbits2.contains(flags::ContextBits2::BRONZE_AXE);
        if n != p {
            list.push(format!("{}BRONZE_AXE", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::BUILDING_OF_THE_SCHOOL);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::BUILDING_OF_THE_SCHOOL);
        if n != p {
            list.push(format!(
                "{}BUILDING_OF_THE_SCHOOL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits2.contains(flags::ContextBits2::CARNELIAN_RING);
        let p = old.cbits2.contains(flags::ContextBits2::CARNELIAN_RING);
        if n != p {
            list.push(format!("{}CARNELIAN_RING", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::COMMEMORATIVE_SPEECH);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::COMMEMORATIVE_SPEECH);
        if n != p {
            list.push(format!("{}COMMEMORATIVE_SPEECH", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::COMPANIES_LAYOFF);
        let p = old.cbits2.contains(flags::ContextBits2::COMPANIES_LAYOFF);
        if n != p {
            list.push(format!("{}COMPANIES_LAYOFF", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::COMPASS);
        let p = old.cbits2.contains(flags::ContextBits2::COMPASS);
        if n != p {
            list.push(format!("{}COMPASS", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DANGEROUS_IDEAS);
        let p = old.cbits2.contains(flags::ContextBits2::DANGEROUS_IDEAS);
        if n != p {
            list.push(format!("{}DANGEROUS_IDEAS", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DEAR_ERNEST);
        let p = old.cbits2.contains(flags::ContextBits2::DEAR_ERNEST);
        if n != p {
            list.push(format!("{}DEAR_ERNEST", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DEFEAT_INDRA);
        let p = old.cbits2.contains(flags::ContextBits2::DEFEAT_INDRA);
        if n != p {
            list.push(format!("{}DEFEAT_INDRA", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DEFEAT_MUS_A_M20);
        let p = old.cbits2.contains(flags::ContextBits2::DEFEAT_MUS_A_M20);
        if n != p {
            list.push(format!("{}DEFEAT_MUS_A_M20", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::DESTRUCTION_POGROM);
        let p = old.cbits2.contains(flags::ContextBits2::DESTRUCTION_POGROM);
        if n != p {
            list.push(format!("{}DESTRUCTION_POGROM", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DOUBLE_AXE);
        let p = old.cbits2.contains(flags::ContextBits2::DOUBLE_AXE);
        if n != p {
            list.push(format!("{}DOUBLE_AXE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DR_GLORIA);
        let p = old.cbits2.contains(flags::ContextBits2::DR_GLORIA);
        if n != p {
            list.push(format!("{}DR_GLORIA", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DRONE_HOVER);
        let p = old.cbits2.contains(flags::ContextBits2::DRONE_HOVER);
        if n != p {
            list.push(format!("{}DRONE_HOVER", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::DRONE_MELEE_DAMAGE);
        let p = old.cbits2.contains(flags::ContextBits2::DRONE_MELEE_DAMAGE);
        if n != p {
            list.push(format!("{}DRONE_MELEE_DAMAGE", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::DRONE_MELEE_DAMAGE_2);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::DRONE_MELEE_DAMAGE_2);
        if n != p {
            list.push(format!("{}DRONE_MELEE_DAMAGE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DRONE_MELEE_SPEED);
        let p = old.cbits2.contains(flags::ContextBits2::DRONE_MELEE_SPEED);
        if n != p {
            list.push(format!("{}DRONE_MELEE_SPEED", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::DRONE_MELEE_SPEED_2);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::DRONE_MELEE_SPEED_2);
        if n != p {
            list.push(format!("{}DRONE_MELEE_SPEED_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::EBIH_ALU);
        let p = old.cbits2.contains(flags::ContextBits2::EBIH_ALU);
        if n != p {
            list.push(format!("{}EBIH_ALU", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::EBIH_INTERCHANGE_BLOCK);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::EBIH_INTERCHANGE_BLOCK);
        if n != p {
            list.push(format!(
                "{}EBIH_INTERCHANGE_BLOCK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::EBIH_INTERCHANGE_GATE);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::EBIH_INTERCHANGE_GATE);
        if n != p {
            list.push(format!(
                "{}EBIH_INTERCHANGE_GATE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::EBIH_WALLED_OFF_WALL);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::EBIH_WALLED_OFF_WALL);
        if n != p {
            list.push(format!("{}EBIH_WALLED_OFF_WALL", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::EBIH_WASTELAND_DOOR);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::EBIH_WASTELAND_DOOR);
        if n != p {
            list.push(format!("{}EBIH_WASTELAND_DOOR", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::EBIH_WASTELAND_PASSAGE_H);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::EBIH_WASTELAND_PASSAGE_H);
        if n != p {
            list.push(format!(
                "{}EBIH_WASTELAND_PASSAGE_H",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::EBIH_WATERFALL_BLOCK_LEFT);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::EBIH_WATERFALL_BLOCK_LEFT);
        if n != p {
            list.push(format!(
                "{}EBIH_WATERFALL_BLOCK_LEFT",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::EBIH_WATERFALL_BLOCK_RIGHT);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::EBIH_WATERFALL_BLOCK_RIGHT);
        if n != p {
            list.push(format!(
                "{}EBIH_WATERFALL_BLOCK_RIGHT",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::EBIH_WATERFALL_WALL);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::EBIH_WATERFALL_WALL);
        if n != p {
            list.push(format!("{}EBIH_WATERFALL_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::EBIH_WEST_BLOCK);
        let p = old.cbits2.contains(flags::ContextBits2::EBIH_WEST_BLOCK);
        if n != p {
            list.push(format!("{}EBIH_WEST_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::ESCAPE);
        let p = old.cbits2.contains(flags::ContextBits2::ESCAPE);
        if n != p {
            list.push(format!("{}ESCAPE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::EXIT_BREACH);
        let p = old.cbits2.contains(flags::ContextBits2::EXIT_BREACH);
        if n != p {
            list.push(format!("{}EXIT_BREACH", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::EYE_RING);
        let p = old.cbits2.contains(flags::ContextBits2::EYE_RING);
        if n != p {
            list.push(format!("{}EYE_RING", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::FAMILY_TRAGEDY);
        let p = old.cbits2.contains(flags::ContextBits2::FAMILY_TRAGEDY);
        if n != p {
            list.push(format!("{}FAMILY_TRAGEDY", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::FAST_TRAVEL);
        let p = old.cbits2.contains(flags::ContextBits2::FAST_TRAVEL);
        if n != p {
            list.push(format!("{}FAST_TRAVEL", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::FORBIDDEN_KNOWLEDGE);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::FORBIDDEN_KNOWLEDGE);
        if n != p {
            list.push(format!("{}FORBIDDEN_KNOWLEDGE", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::FREEDOM_FROM_AANSUR);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::FREEDOM_FROM_AANSUR);
        if n != p {
            list.push(format!("{}FREEDOM_FROM_AANSUR", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::GIGUNA_BOULDER);
        let p = old.cbits2.contains(flags::ContextBits2::GIGUNA_BOULDER);
        if n != p {
            list.push(format!("{}GIGUNA_BOULDER", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::GIGUNA_DUAL_PATH_SWITCH);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::GIGUNA_DUAL_PATH_SWITCH);
        if n != p {
            list.push(format!(
                "{}GIGUNA_DUAL_PATH_SWITCH",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::GIGUNA_DUAL_PATH_WALL);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::GIGUNA_DUAL_PATH_WALL);
        if n != p {
            list.push(format!(
                "{}GIGUNA_DUAL_PATH_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::GIGUNA_GATEWAY_BLOCK);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::GIGUNA_GATEWAY_BLOCK);
        if n != p {
            list.push(format!("{}GIGUNA_GATEWAY_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits2
            .contains(flags::ContextBits2::GIGUNA_GATEWAY_GATE);
        let p = old
            .cbits2
            .contains(flags::ContextBits2::GIGUNA_GATEWAY_GATE);
        if n != p {
            list.push(format!("{}GIGUNA_GATEWAY_GATE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::GIGUNA_GUBI);
        let p = old.cbits2.contains(flags::ContextBits2::GIGUNA_GUBI);
        if n != p {
            list.push(format!("{}GIGUNA_GUBI", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits3
            .contains(flags::ContextBits3::GIGUNA_NORTHEAST_GATE);
        let p = old
            .cbits3
            .contains(flags::ContextBits3::GIGUNA_NORTHEAST_GATE);
        if n != p {
            list.push(format!(
                "{}GIGUNA_NORTHEAST_GATE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits3
            .contains(flags::ContextBits3::GLACIER_BIG_DROP_ROCK);
        let p = old
            .cbits3
            .contains(flags::ContextBits3::GLACIER_BIG_DROP_ROCK);
        if n != p {
            list.push(format!(
                "{}GLACIER_BIG_DROP_ROCK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits3
            .contains(flags::ContextBits3::GLACIER_SEA_BURIAL_ROCK);
        let p = old
            .cbits3
            .contains(flags::ContextBits3::GLACIER_SEA_BURIAL_ROCK);
        if n != p {
            list.push(format!(
                "{}GLACIER_SEA_BURIAL_ROCK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits3.contains(flags::ContextBits3::GOODBYE);
        let p = old.cbits3.contains(flags::ContextBits3::GOODBYE);
        if n != p {
            list.push(format!("{}GOODBYE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::HAMMOND_AUTH);
        let p = old.cbits3.contains(flags::ContextBits3::HAMMOND_AUTH);
        if n != p {
            list.push(format!("{}HAMMOND_AUTH", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::HEALTH_UPGRADE);
        let p = old.cbits3.contains(flags::ContextBits3::HEALTH_UPGRADE);
        if n != p {
            list.push(format!("{}HEALTH_UPGRADE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::HEALTH_UPGRADE_2);
        let p = old.cbits3.contains(flags::ContextBits3::HEALTH_UPGRADE_2);
        if n != p {
            list.push(format!("{}HEALTH_UPGRADE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::HEALTH_UPGRADE_3);
        let p = old.cbits3.contains(flags::ContextBits3::HEALTH_UPGRADE_3);
        if n != p {
            list.push(format!("{}HEALTH_UPGRADE_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::HEALTH_UPGRADE_4);
        let p = old.cbits3.contains(flags::ContextBits3::HEALTH_UPGRADE_4);
        if n != p {
            list.push(format!("{}HEALTH_UPGRADE_4", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits3
            .contains(flags::ContextBits3::HERETICS_GRANDDAUGHTER);
        let p = old
            .cbits3
            .contains(flags::ContextBits3::HERETICS_GRANDDAUGHTER);
        if n != p {
            list.push(format!(
                "{}HERETICS_GRANDDAUGHTER",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits3.contains(flags::ContextBits3::HERETICS_TABLET);
        let p = old.cbits3.contains(flags::ContextBits3::HERETICS_TABLET);
        if n != p {
            list.push(format!("{}HERETICS_TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::ICE_AXE);
        let p = old.cbits3.contains(flags::ContextBits3::ICE_AXE);
        if n != p {
            list.push(format!("{}ICE_AXE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::INFECT);
        let p = old.cbits3.contains(flags::ContextBits3::INFECT);
        if n != p {
            list.push(format!("{}INFECT", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::INFECT_L1);
        let p = old.cbits3.contains(flags::ContextBits3::INFECT_L1);
        if n != p {
            list.push(format!("{}INFECT_L1", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::INFECT_L2);
        let p = old.cbits3.contains(flags::ContextBits3::INFECT_L2);
        if n != p {
            list.push(format!("{}INFECT_L2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::INFECT_L3);
        let p = old.cbits3.contains(flags::ContextBits3::INFECT_L3);
        if n != p {
            list.push(format!("{}INFECT_L3", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::INFECTION_RANGE);
        let p = old.cbits3.contains(flags::ContextBits3::INFECTION_RANGE);
        if n != p {
            list.push(format!("{}INFECTION_RANGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::INFECTION_RANGE_2);
        let p = old.cbits3.contains(flags::ContextBits3::INFECTION_RANGE_2);
        if n != p {
            list.push(format!("{}INFECTION_RANGE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::INFECTION_RANGE_3);
        let p = old.cbits3.contains(flags::ContextBits3::INFECTION_RANGE_3);
        if n != p {
            list.push(format!("{}INFECTION_RANGE_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::INFECTION_SPEED);
        let p = old.cbits3.contains(flags::ContextBits3::INFECTION_SPEED);
        if n != p {
            list.push(format!("{}INFECTION_SPEED", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::IRIKAR_GUDAM);
        let p = old.cbits3.contains(flags::ContextBits3::IRIKAR_GUDAM);
        if n != p {
            list.push(format!("{}IRIKAR_GUDAM", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits3
            .contains(flags::ContextBits3::IRIKAR_ROYAL_STORAGE_WALL);
        let p = old
            .cbits3
            .contains(flags::ContextBits3::IRIKAR_ROYAL_STORAGE_WALL);
        if n != p {
            list.push(format!(
                "{}IRIKAR_ROYAL_STORAGE_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits3.contains(flags::ContextBits3::LAMENT_FOR_FOOLS);
        let p = old.cbits3.contains(flags::ContextBits3::LAMENT_FOR_FOOLS);
        if n != p {
            list.push(format!("{}LAMENT_FOR_FOOLS", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::LEDGE_GRAB);
        let p = old.cbits3.contains(flags::ContextBits3::LEDGE_GRAB);
        if n != p {
            list.push(format!("{}LEDGE_GRAB", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::LETTER_FROM_TRACE);
        let p = old.cbits3.contains(flags::ContextBits3::LETTER_FROM_TRACE);
        if n != p {
            list.push(format!("{}LETTER_FROM_TRACE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::MELEE_DAMAGE);
        let p = old.cbits3.contains(flags::ContextBits3::MELEE_DAMAGE);
        if n != p {
            list.push(format!("{}MELEE_DAMAGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::MELEE_DAMAGE_2);
        let p = old.cbits3.contains(flags::ContextBits3::MELEE_DAMAGE_2);
        if n != p {
            list.push(format!("{}MELEE_DAMAGE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::MELEE_SPEED);
        let p = old.cbits3.contains(flags::ContextBits3::MELEE_SPEED);
        if n != p {
            list.push(format!("{}MELEE_SPEED", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::MELEE_SPEED_2);
        let p = old.cbits3.contains(flags::ContextBits3::MELEE_SPEED_2);
        if n != p {
            list.push(format!("{}MELEE_SPEED_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::MIST_UPGRADE);
        let p = old.cbits3.contains(flags::ContextBits3::MIST_UPGRADE);
        if n != p {
            list.push(format!("{}MIST_UPGRADE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::NANITE_MIST);
        let p = old.cbits3.contains(flags::ContextBits3::NANITE_MIST);
        if n != p {
            list.push(format!("{}NANITE_MIST", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::NANO_LATTICE_2);
        let p = old.cbits3.contains(flags::ContextBits3::NANO_LATTICE_2);
        if n != p {
            list.push(format!("{}NANO_LATTICE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::NANO_POINTS);
        let p = old.cbits3.contains(flags::ContextBits3::NANO_POINTS);
        if n != p {
            list.push(format!("{}NANO_POINTS", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::NANO_POINTS_2);
        let p = old.cbits3.contains(flags::ContextBits3::NANO_POINTS_2);
        if n != p {
            list.push(format!("{}NANO_POINTS_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::NOTES_2053_02_27);
        let p = old.cbits3.contains(flags::ContextBits3::NOTES_2053_02_27);
        if n != p {
            list.push(format!("{}NOTES_2053_02_27", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits3
            .contains(flags::ContextBits3::PLAGUE_OF_THOUGHTS);
        let p = old.cbits3.contains(flags::ContextBits3::PLAGUE_OF_THOUGHTS);
        if n != p {
            list.push(format!("{}PLAGUE_OF_THOUGHTS", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::RANGED_DAMAGE);
        let p = old.cbits3.contains(flags::ContextBits3::RANGED_DAMAGE);
        if n != p {
            list.push(format!("{}RANGED_DAMAGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::RANGED_DAMAGE_2);
        let p = old.cbits3.contains(flags::ContextBits3::RANGED_DAMAGE_2);
        if n != p {
            list.push(format!("{}RANGED_DAMAGE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::RANGED_SPEED);
        let p = old.cbits3.contains(flags::ContextBits3::RANGED_SPEED);
        if n != p {
            list.push(format!("{}RANGED_SPEED", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::RANGED_SPEED_2);
        let p = old.cbits3.contains(flags::ContextBits3::RANGED_SPEED_2);
        if n != p {
            list.push(format!("{}RANGED_SPEED_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::RECORD_LOSSES);
        let p = old.cbits3.contains(flags::ContextBits3::RECORD_LOSSES);
        if n != p {
            list.push(format!("{}RECORD_LOSSES", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::REMOTE_BOOMERANG);
        let p = old.cbits3.contains(flags::ContextBits3::REMOTE_BOOMERANG);
        if n != p {
            list.push(format!("{}REMOTE_BOOMERANG", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::REMOTE_DRONE);
        let p = old.cbits3.contains(flags::ContextBits3::REMOTE_DRONE);
        if n != p {
            list.push(format!("{}REMOTE_DRONE", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits3
            .contains(flags::ContextBits3::RESEARCHERS_MISSING);
        let p = old
            .cbits3
            .contains(flags::ContextBits3::RESEARCHERS_MISSING);
        if n != p {
            list.push(format!("{}RESEARCHERS_MISSING", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::ROYAL_DAGGER);
        let p = old.cbits3.contains(flags::ContextBits3::ROYAL_DAGGER);
        if n != p {
            list.push(format!("{}ROYAL_DAGGER", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SEPARATION);
        let p = old.cbits3.contains(flags::ContextBits3::SEPARATION);
        if n != p {
            list.push(format!("{}SEPARATION", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SHOCKWAVE);
        let p = old.cbits3.contains(flags::ContextBits3::SHOCKWAVE);
        if n != p {
            list.push(format!("{}SHOCKWAVE", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits3
            .contains(flags::ContextBits3::SIUNA_STORAGE_WALL);
        let p = old.cbits3.contains(flags::ContextBits3::SIUNA_STORAGE_WALL);
        if n != p {
            list.push(format!("{}SIUNA_STORAGE_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SLINGSHOT_CHARGE);
        let p = old.cbits3.contains(flags::ContextBits3::SLINGSHOT_CHARGE);
        if n != p {
            list.push(format!("{}SLINGSHOT_CHARGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SLINGSHOT_HOOK);
        let p = old.cbits3.contains(flags::ContextBits3::SLINGSHOT_HOOK);
        if n != p {
            list.push(format!("{}SLINGSHOT_HOOK", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SLINGSHOT_WEAPON);
        let p = old.cbits3.contains(flags::ContextBits3::SLINGSHOT_WEAPON);
        if n != p {
            list.push(format!("{}SLINGSHOT_WEAPON", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits3
            .contains(flags::ContextBits3::SNIPER_VALLEY_ROCK_1);
        let p = old
            .cbits3
            .contains(flags::ContextBits3::SNIPER_VALLEY_ROCK_1);
        if n != p {
            list.push(format!("{}SNIPER_VALLEY_ROCK_1", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits3
            .contains(flags::ContextBits3::SNIPER_VALLEY_ROCK_2);
        let p = old
            .cbits3
            .contains(flags::ContextBits3::SNIPER_VALLEY_ROCK_2);
        if n != p {
            list.push(format!("{}SNIPER_VALLEY_ROCK_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::STATION_POWER);
        let p = old.cbits3.contains(flags::ContextBits3::STATION_POWER);
        if n != p {
            list.push(format!("{}STATION_POWER", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::STORM_BOMB);
        let p = old.cbits3.contains(flags::ContextBits3::STORM_BOMB);
        if n != p {
            list.push(format!("{}STORM_BOMB", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SUSPENSION_BRIDGE);
        let p = old.cbits3.contains(flags::ContextBits3::SUSPENSION_BRIDGE);
        if n != p {
            list.push(format!("{}SUSPENSION_BRIDGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SWITCH_36_11);
        let p = old.cbits3.contains(flags::ContextBits3::SWITCH_36_11);
        if n != p {
            list.push(format!("{}SWITCH_36_11", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SWITCH_40_12);
        let p = old.cbits3.contains(flags::ContextBits3::SWITCH_40_12);
        if n != p {
            list.push(format!("{}SWITCH_40_12", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits3
            .contains(flags::ContextBits3::TERMINAL_BREAKTHROUGH_1);
        let p = old
            .cbits3
            .contains(flags::ContextBits3::TERMINAL_BREAKTHROUGH_1);
        if n != p {
            list.push(format!(
                "{}TERMINAL_BREAKTHROUGH_1",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits3
            .contains(flags::ContextBits3::TERMINAL_BREAKTHROUGH_2);
        let p = old
            .cbits3
            .contains(flags::ContextBits3::TERMINAL_BREAKTHROUGH_2);
        if n != p {
            list.push(format!(
                "{}TERMINAL_BREAKTHROUGH_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits3.contains(flags::ContextBits3::THE_ETERNAL_ARM);
        let p = old.cbits3.contains(flags::ContextBits3::THE_ETERNAL_ARM);
        if n != p {
            list.push(format!("{}THE_ETERNAL_ARM", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::THE_IDEAL_KIENGIR);
        let p = old.cbits3.contains(flags::ContextBits3::THE_IDEAL_KIENGIR);
        if n != p {
            list.push(format!("{}THE_IDEAL_KIENGIR", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::THE_STUDENT);
        let p = old.cbits3.contains(flags::ContextBits3::THE_STUDENT);
        if n != p {
            list.push(format!("{}THE_STUDENT", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::UDUSAN);
        let p = old.cbits3.contains(flags::ContextBits3::UDUSAN);
        if n != p {
            list.push(format!("{}UDUSAN", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::UHRUM_ANNUNA_CORRIDOR_BLOCK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::UHRUM_ANNUNA_CORRIDOR_BLOCK);
        if n != p {
            list.push(format!(
                "{}UHRUM_ANNUNA_CORRIDOR_BLOCK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::UHRUM_WATERFALL_WALL);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::UHRUM_WATERFALL_WALL);
        if n != p {
            list.push(format!("{}UHRUM_WATERFALL_WALL", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::UHRUM_WATERFALLS_BLOCK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::UHRUM_WATERFALLS_BLOCK);
        if n != p {
            list.push(format!(
                "{}UHRUM_WATERFALLS_BLOCK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::UHRUM_WEST_ENTRANCE_GATE);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::UHRUM_WEST_ENTRANCE_GATE);
        if n != p {
            list.push(format!(
                "{}UHRUM_WEST_ENTRANCE_GATE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::UHRUM_WEST_ENTRANCE_LOWER_WALL);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::UHRUM_WEST_ENTRANCE_LOWER_WALL);
        if n != p {
            list.push(format!(
                "{}UHRUM_WEST_ENTRANCE_LOWER_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::UHRUM_WEST_ENTRANCE_UPPER_WALL);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::UHRUM_WEST_ENTRANCE_UPPER_WALL);
        if n != p {
            list.push(format!(
                "{}UHRUM_WEST_ENTRANCE_UPPER_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits4.contains(flags::ContextBits4::UNDER_SIEGE);
        let p = old.cbits4.contains(flags::ContextBits4::UNDER_SIEGE);
        if n != p {
            list.push(format!("{}UNDER_SIEGE", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::UNDERWATER_MOVEMENT);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::UNDERWATER_MOVEMENT);
        if n != p {
            list.push(format!("{}UNDERWATER_MOVEMENT", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::WALL_CLIMB);
        let p = old.cbits4.contains(flags::ContextBits4::WALL_CLIMB);
        if n != p {
            list.push(format!("{}WALL_CLIMB", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_AMAGI_DRAGON_EYE_FLASK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_AMAGI_DRAGON_EYE_FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_AMAGI_DRAGON_EYE_FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_BOULDER_2);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_BOULDER_2);
        if n != p {
            list.push(format!(
                "{}VISITED_AMAGI_STRONGHOLD_BOULDER_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_LEFT_WALL);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_LEFT_WALL);
        if n != p {
            list.push(format!(
                "{}VISITED_AMAGI_STRONGHOLD_LEFT_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_WALL_1);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_WALL_1);
        if n != p {
            list.push(format!(
                "{}VISITED_AMAGI_STRONGHOLD_WALL_1",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_WALL_2);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_AMAGI_STRONGHOLD_WALL_2);
        if n != p {
            list.push(format!(
                "{}VISITED_AMAGI_STRONGHOLD_WALL_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_AMAGI_WEST_LAKE_SURFACE_WALL);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_AMAGI_WEST_LAKE_SURFACE_WALL);
        if n != p {
            list.push(format!(
                "{}VISITED_AMAGI_WEST_LAKE_SURFACE_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_ANNUNA_EAST_BRIDGE_GATE);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_ANNUNA_EAST_BRIDGE_GATE);
        if n != p {
            list.push(format!(
                "{}VISITED_ANNUNA_EAST_BRIDGE_GATE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_ANNUNA_MIRROR_MATCH_FLASK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_ANNUNA_MIRROR_MATCH_FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_ANNUNA_MIRROR_MATCH_FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANUMAN);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANUMAN);
        if n != p {
            list.push(format!("{}VISITED_ANUMAN", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_APOCALYPSE_BOMB);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_APOCALYPSE_BOMB);
        if n != p {
            list.push(format!(
                "{}VISITED_APOCALYPSE_BOMB",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_APOCALYPSE_SEALS_WALL);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_APOCALYPSE_SEALS_WALL);
        if n != p {
            list.push(format!(
                "{}VISITED_APOCALYPSE_SEALS_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_BREACH_SIGHT);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_BREACH_SIGHT);
        if n != p {
            list.push(format!("{}VISITED_BREACH_SIGHT", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH_ALU);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH_ALU);
        if n != p {
            list.push(format!("{}VISITED_EBIH_ALU", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_EBIH_BASE_CAMP_FRAGMENT);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_EBIH_BASE_CAMP_FRAGMENT);
        if n != p {
            list.push(format!(
                "{}VISITED_EBIH_BASE_CAMP_FRAGMENT",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_EBIH_BUSH_FLASK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_EBIH_BUSH_FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_EBIH_BUSH_FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_EBIH_WALLED_OFF_WALL);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_EBIH_WALLED_OFF_WALL);
        if n != p {
            list.push(format!(
                "{}VISITED_EBIH_WALLED_OFF_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_EBIH_WASTELAND_PASSAGE_H);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_EBIH_WASTELAND_PASSAGE_H);
        if n != p {
            list.push(format!(
                "{}VISITED_EBIH_WASTELAND_PASSAGE_H",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_EBIH_WATERFALL_BLOCK_LEFT);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_EBIH_WATERFALL_BLOCK_LEFT);
        if n != p {
            list.push(format!(
                "{}VISITED_EBIH_WATERFALL_BLOCK_LEFT",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_EBIH_WATERFALL_BLOCK_RIGHT);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_EBIH_WATERFALL_BLOCK_RIGHT);
        if n != p {
            list.push(format!(
                "{}VISITED_EBIH_WATERFALL_BLOCK_RIGHT",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_EBIH_WATERFALL_WALL);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_EBIH_WATERFALL_WALL);
        if n != p {
            list.push(format!(
                "{}VISITED_EBIH_WATERFALL_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_EBIH_WEST_BLOCK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_EBIH_WEST_BLOCK);
        if n != p {
            list.push(format!(
                "{}VISITED_EBIH_WEST_BLOCK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_EGG_ROOM_FLASK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_EGG_ROOM_FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_EGG_ROOM_FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ESCAPE);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ESCAPE);
        if n != p {
            list.push(format!("{}VISITED_ESCAPE", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_FAST_TRAVEL);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_FAST_TRAVEL);
        if n != p {
            list.push(format!("{}VISITED_FAST_TRAVEL", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_FILTER_TELEPORTER_FLASK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_FILTER_TELEPORTER_FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_FILTER_TELEPORTER_FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_BOULDER);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_BOULDER);
        if n != p {
            list.push(format!(
                "{}VISITED_GIGUNA_BOULDER",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_BREACHABLE_WALL_FLASK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_BREACHABLE_WALL_FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_GIGUNA_BREACHABLE_WALL_FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_DUAL_PATH_SWITCH);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_DUAL_PATH_SWITCH);
        if n != p {
            list.push(format!(
                "{}VISITED_GIGUNA_DUAL_PATH_SWITCH",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_DUAL_PATH_WALL);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_DUAL_PATH_WALL);
        if n != p {
            list.push(format!(
                "{}VISITED_GIGUNA_DUAL_PATH_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_GATEWAY_BLOCK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_GATEWAY_BLOCK);
        if n != p {
            list.push(format!(
                "{}VISITED_GIGUNA_GATEWAY_BLOCK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_GUBI);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_GUBI);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA_GUBI", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_NORTHEAST_FLASK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_NORTHEAST_FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_GIGUNA_NORTHEAST_FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_NORTHEAST_GATE);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_NORTHEAST_GATE);
        if n != p {
            list.push(format!(
                "{}VISITED_GIGUNA_NORTHEAST_GATE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_TOP_FLASK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_GIGUNA_TOP_FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_GIGUNA_TOP_FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_GLACIER_40_8_FLASK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_GLACIER_40_8_FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_GLACIER_40_8_FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_GLACIER_BIG_DROP_ROCK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_GLACIER_BIG_DROP_ROCK);
        if n != p {
            list.push(format!(
                "{}VISITED_GLACIER_BIG_DROP_ROCK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_GLACIER_DOCK_FLASK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_GLACIER_DOCK_FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_GLACIER_DOCK_FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_GLACIER_SEA_BURIAL_ROCK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_GLACIER_SEA_BURIAL_ROCK);
        if n != p {
            list.push(format!(
                "{}VISITED_GLACIER_SEA_BURIAL_ROCK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_HAMMONDS_NOTE);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_HAMMONDS_NOTE);
        if n != p {
            list.push(format!(
                "{}VISITED_HAMMONDS_NOTE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_INFECT);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_INFECT);
        if n != p {
            list.push(format!("{}VISITED_INFECT", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_IRIKAR_AIRY_FLASK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_IRIKAR_AIRY_FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_IRIKAR_AIRY_FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_IRIKAR_GUDAM);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_IRIKAR_GUDAM);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR_GUDAM", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_IRIKAR_MIDWEST_FLASK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_IRIKAR_MIDWEST_FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_IRIKAR_MIDWEST_FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_IRIKAR_ROYAL_STORAGE_FLASK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_IRIKAR_ROYAL_STORAGE_FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_IRIKAR_ROYAL_STORAGE_FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_IRIKAR_ROYAL_STORAGE_WALL);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_IRIKAR_ROYAL_STORAGE_WALL);
        if n != p {
            list.push(format!(
                "{}VISITED_IRIKAR_ROYAL_STORAGE_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_IRIKAR_WELL_FLASK);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_IRIKAR_WELL_FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_IRIKAR_WELL_FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_LEDGE_GRAB);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_LEDGE_GRAB);
        if n != p {
            list.push(format!("{}VISITED_LEDGE_GRAB", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(
            flags::ContextBits4::VISITED_LOC_AMAGI_BREACH__EAST_ENTRANCE__UPPER_SLOPE__ITEM,
        );
        let p = old.cbits4.contains(
            flags::ContextBits4::VISITED_LOC_AMAGI_BREACH__EAST_ENTRANCE__UPPER_SLOPE__ITEM,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_AMAGI_BREACH__EAST_ENTRANCE__UPPER_SLOPE__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_LOC_AMAGI__EAST_LAKE__FOOT__TABLET);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_LOC_AMAGI__EAST_LAKE__FOOT__TABLET);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_AMAGI__EAST_LAKE__FOOT__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_LOC_AMAGI__LIRU_ROOM__SHRINE__ITEM);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_LOC_AMAGI__LIRU_ROOM__SHRINE__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_AMAGI__LIRU_ROOM__SHRINE__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits4
            .contains(flags::ContextBits4::VISITED_LOC_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM);
        let p = old
            .cbits4
            .contains(flags::ContextBits4::VISITED_LOC_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits4.contains(
            flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD,
        );
        let p = old.cbits4.contains(
            flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits4.contains(
            flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL,
        );
        let p = old.cbits4.contains(
            flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_LOC_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_LOC_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_ANNUNA__FILTER_TELEPORTER__NORTHEAST_CUBBY__TABLET,
        );
        let p = old.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_ANNUNA__FILTER_TELEPORTER__NORTHEAST_CUBBY__TABLET,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__FILTER_TELEPORTER__NORTHEAST_CUBBY__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH,
        );
        let p = old.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP,
        );
        let p = old.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__SNIPER_VALLEY__TABLE__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__SNIPER_VALLEY__TABLE__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__SNIPER_VALLEY__TABLE__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_ANNUNA__SPIDER_ROOM__HEALTHY_CORNER__HEALTH_REFILL,
        );
        let p = old.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_ANNUNA__SPIDER_ROOM__HEALTHY_CORNER__HEALTH_REFILL,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__SPIDER_ROOM__HEALTHY_CORNER__HEALTH_REFILL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL,
        );
        let p = old.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__TWISTY_PASSAGES__TOP__TABLET);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__TWISTY_PASSAGES__TOP__TABLET);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__TWISTY_PASSAGES__TOP__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_ANNUNA__UPPER_HALLWAY__BEHIND_PEDESTAL__HEALTH_PICKUP,
        );
        let p = old.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_ANNUNA__UPPER_HALLWAY__BEHIND_PEDESTAL__HEALTH_PICKUP,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__UPPER_HALLWAY__BEHIND_PEDESTAL__HEALTH_PICKUP",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_ANNUNA__VERTICAL_ROOM__GATE_BUTTON__HIT_BUTTON,
        );
        let p = old.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_ANNUNA__VERTICAL_ROOM__GATE_BUTTON__HIT_BUTTON,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__VERTICAL_ROOM__GATE_BUTTON__HIT_BUTTON",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__VERTICAL_ROOM__PLINTH__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__VERTICAL_ROOM__PLINTH__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__VERTICAL_ROOM__PLINTH__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__VERTICAL_ROOM__UPPER_CACHE__TABLET);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__VERTICAL_ROOM__UPPER_CACHE__TABLET);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__VERTICAL_ROOM__UPPER_CACHE__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__WEST_BRIDGE__PLINTH__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__WEST_BRIDGE__PLINTH__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__WEST_BRIDGE__PLINTH__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__WEST_CLIMB__CACHE__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANNUNA__WEST_CLIMB__CACHE__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANNUNA__WEST_CLIMB__CACHE__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANTARCTICA__POWER_ROOM__SWITCH__FLIP);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANTARCTICA__POWER_ROOM__SWITCH__FLIP);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANTARCTICA__POWER_ROOM__SWITCH__FLIP",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANTARCTICA__SHED__INTERIOR__SHELF);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_ANTARCTICA__SHED__INTERIOR__SHELF);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_ANTARCTICA__SHED__INTERIOR__SHELF",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__EBIH_EAST__DISPENSER__VEND);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__EBIH_EAST__DISPENSER__VEND);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_EBIH__EBIH_EAST__DISPENSER__VEND",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__EBIH_EAST__EAST_LEDGE__NOTE);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__EBIH_EAST__EAST_LEDGE__NOTE);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_EBIH__EBIH_EAST__EAST_LEDGE__NOTE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__EBIH_WEST__ALCOVE__TABLET);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__EBIH_WEST__ALCOVE__TABLET);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_EBIH__EBIH_WEST__ALCOVE__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__GRID_25_2_6__PIT__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__GRID_25_2_6__PIT__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_EBIH__GRID_25_2_6__PIT__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__GRID_26_10_11__LEDGE__NOTE);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__GRID_26_10_11__LEDGE__NOTE);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_EBIH__GRID_26_10_11__LEDGE__NOTE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__GUARDED_HEALTH__FAR_WEST__REFILL);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__GUARDED_HEALTH__FAR_WEST__REFILL);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_EBIH__GUARDED_HEALTH__FAR_WEST__REFILL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__GUARDED_HEALTH__WEST_BASIN__HEALTH);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__GUARDED_HEALTH__WEST_BASIN__HEALTH);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_EBIH__GUARDED_HEALTH__WEST_BASIN__HEALTH",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_LOC_EBIH__VERTICAL_INTERCHANGE__BLOCK_CUBBY__SHOCKWAVE_BLOCK);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_LOC_EBIH__VERTICAL_INTERCHANGE__BLOCK_CUBBY__SHOCKWAVE_BLOCK);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_EBIH__VERTICAL_INTERCHANGE__BLOCK_CUBBY__SHOCKWAVE_BLOCK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH,
        );
        let p = old.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__WATERFALL__ALCOVE__PEDESTAL);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_EBIH__WATERFALL__ALCOVE__PEDESTAL);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_EBIH__WATERFALL__ALCOVE__PEDESTAL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS,
        );
        let p = old.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_FILTER__CORE__TERMINAL_EAST__AUTHORIZE_HAMMOND,
        );
        let p = old.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_FILTER__CORE__TERMINAL_EAST__AUTHORIZE_HAMMOND,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_FILTER__CORE__TERMINAL_EAST__AUTHORIZE_HAMMOND",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__CARNELIAN__VAULT__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__CARNELIAN__VAULT__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__CARNELIAN__VAULT__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__CLOUDS__CACHE__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__CLOUDS__CACHE__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__CLOUDS__CACHE__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_LOC_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__GIGUNA_BASE__RUIN__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__GIGUNA_BASE__RUIN__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__GIGUNA_BASE__RUIN__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__GIGUNA_BASE__TABLE__NEWS);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__GIGUNA_BASE__TABLE__NEWS);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__GIGUNA_BASE__TABLE__NEWS",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD,
        );
        let p = old.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__GUBI_LAIR__PEDESTAL__AXE);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__GUBI_LAIR__PEDESTAL__AXE);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__GUBI_LAIR__PEDESTAL__AXE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__LAMASSU__DEPOSIT__FLASK);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__LAMASSU__DEPOSIT__FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__LAMASSU__DEPOSIT__FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__RUINS_CENTER__TABLET__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__RUINS_CENTER__TABLET__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__RUINS_CENTER__TABLET__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__WEST_CAVERNS__BUSH__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__WEST_CAVERNS__BUSH__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__WEST_CAVERNS__BUSH__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__WEST_CAVERNS__CACHE__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__WEST_CAVERNS__CACHE__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__WEST_CAVERNS__CACHE__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__WEST_TOWER__TOP__TABLET);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GIGUNA__WEST_TOWER__TOP__TABLET);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GIGUNA__WEST_TOWER__TOP__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_GLACIER_BREACH__GRATE_WORK__GRATE_INTERIOR__ITEM,
        );
        let p = old.cbits5.contains(
            flags::ContextBits5::VISITED_LOC_GLACIER_BREACH__GRATE_WORK__GRATE_INTERIOR__ITEM,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GLACIER_BREACH__GRATE_WORK__GRATE_INTERIOR__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GLACIER__COMPASS_ROOM__CENTER__TABLE);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GLACIER__COMPASS_ROOM__CENTER__TABLE);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GLACIER__COMPASS_ROOM__CENTER__TABLE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GLACIER__CRYSTALS__LOWER_CORNER__ITEM);
        let p = old
            .cbits5
            .contains(flags::ContextBits5::VISITED_LOC_GLACIER__CRYSTALS__LOWER_CORNER__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GLACIER__CRYSTALS__LOWER_CORNER__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_GLACIER__CRYSTALS__TOP_CORNER__TABLET);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_GLACIER__CRYSTALS__TOP_CORNER__TABLET);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GLACIER__CRYSTALS__TOP_CORNER__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_GLACIER__HAMMONDS_END__BETWEEN_CENTER_DOORS__HEALTH,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_GLACIER__HAMMONDS_END__BETWEEN_CENTER_DOORS__HEALTH,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GLACIER__HAMMONDS_END__BETWEEN_CENTER_DOORS__HEALTH",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_GLACIER__PEAK__BIRDS_EYE__ITEM);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_GLACIER__PEAK__BIRDS_EYE__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GLACIER__PEAK__BIRDS_EYE__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_GLACIER__SEA_BURIAL__COLLAPSING_CEILING__DROWN,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_GLACIER__SEA_BURIAL__COLLAPSING_CEILING__DROWN,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GLACIER__SEA_BURIAL__COLLAPSING_CEILING__DROWN",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_GLACIER__SEA_BURIAL__DEEP_CACHE__HEALTH);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_GLACIER__SEA_BURIAL__DEEP_CACHE__HEALTH);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GLACIER__SEA_BURIAL__DEEP_CACHE__HEALTH",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_GLACIER__SEA_BURIAL__INSIDE_THE_GRATE__NOTES,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_GLACIER__SEA_BURIAL__INSIDE_THE_GRATE__NOTES,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GLACIER__SEA_BURIAL__INSIDE_THE_GRATE__NOTES",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_GLACIER__VERTICAL_ROOM__PEAK__FLASK);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_GLACIER__VERTICAL_ROOM__PEAK__FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GLACIER__VERTICAL_ROOM__PEAK__FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_INTERIOR__BUNKER_INTERIOR__DESK__NOTE);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_INTERIOR__BUNKER_INTERIOR__DESK__NOTE);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_INTERIOR__BUNKER_INTERIOR__DESK__NOTE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_INTERIOR__EBIH_CAVE__ENTRY__HEALTH);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_INTERIOR__EBIH_CAVE__ENTRY__HEALTH);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_INTERIOR__EBIH_CAVE__ENTRY__HEALTH",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_INTERIOR__GARAGE__BOXES__UNDER_BOXES);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_INTERIOR__GARAGE__BOXES__UNDER_BOXES);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_INTERIOR__GARAGE__BOXES__UNDER_BOXES",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_INTERIOR__TENT_INTERIOR__DESK__NOTE);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_INTERIOR__TENT_INTERIOR__DESK__NOTE);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_INTERIOR__TENT_INTERIOR__DESK__NOTE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__BASEMENT_PIPES__HIGH_PIPE__TABLET);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__BASEMENT_PIPES__HIGH_PIPE__TABLET);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR__BASEMENT_PIPES__HIGH_PIPE__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__BEACH__CACHE__ITEM);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__BEACH__CACHE__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR__BEACH__CACHE__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__DAGGER_ALTAR__WEAPON);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__DAGGER_ALTAR__WEAPON);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR__HUB__DAGGER_ALTAR__WEAPON",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__UPGRADED_MIST_INTO_WALL);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__UPGRADED_MIST_INTO_WALL);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__UPGRADED_MIST_INTO_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__SW_BUILDING_TOP_PLATFORM__POWER_CORE,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__SW_BUILDING_TOP_PLATFORM__POWER_CORE,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR__HUB__SW_BUILDING_TOP_PLATFORM__POWER_CORE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__LAMASSU__DESK__ITEM);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__LAMASSU__DESK__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR__LAMASSU__DESK__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__MIDWEST__TABLET_PLATFORM__TABLET);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_IRIKAR__MIDWEST__TABLET_PLATFORM__TABLET);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_IRIKAR__MIDWEST__TABLET_PLATFORM__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3);
        let p = old
            .cbits6
            .contains(flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5,
        );
        let p = old.cbits6.contains(
            flags::ContextBits6::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits7.contains(
            flags::ContextBits7::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE,
        );
        let p = old.cbits7.contains(
            flags::ContextBits7::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__POND__ITEM);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__POND__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_UHRUM__SIEGE_CORRIDOR__POND__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__WATERFALLS__CEILING_CACHE__FLASK);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__WATERFALLS__CEILING_CACHE__FLASK);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_UHRUM__WATERFALLS__CEILING_CACHE__FLASK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits7.contains(
            flags::ContextBits7::VISITED_LOC_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE,
        );
        let p = old.cbits7.contains(
            flags::ContextBits7::VISITED_LOC_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE,
        );
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__WEST_ENTRANCE__SAND__REFILL);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_LOC_UHRUM__WEST_ENTRANCE__SAND__REFILL);
        if n != p {
            list.push(format!(
                "{}VISITED_LOC_UHRUM__WEST_ENTRANCE__SAND__REFILL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_MELEE_CHARGE);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_MELEE_CHARGE);
        if n != p {
            list.push(format!("{}VISITED_MELEE_CHARGE", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_NANITE_MIST);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_NANITE_MIST);
        if n != p {
            list.push(format!("{}VISITED_NANITE_MIST", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_NOTES_2053_02_27);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_NOTES_2053_02_27);
        if n != p {
            list.push(format!(
                "{}VISITED_NOTES_2053_02_27",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_REMOTE_DRONE);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_REMOTE_DRONE);
        if n != p {
            list.push(format!("{}VISITED_REMOTE_DRONE", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_REVIVAL_HEALTH_NODE);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_REVIVAL_HEALTH_NODE);
        if n != p {
            list.push(format!(
                "{}VISITED_REVIVAL_HEALTH_NODE",
                if n { "+" } else { "-" }
            ));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_SHOCKWAVE);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_SHOCKWAVE);
        if n != p {
            list.push(format!("{}VISITED_SHOCKWAVE", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_SIUNA_STORAGE_WALL);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_SIUNA_STORAGE_WALL);
        if n != p {
            list.push(format!(
                "{}VISITED_SIUNA_STORAGE_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_SNIPER_VALLEY_ROCK_1);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_SNIPER_VALLEY_ROCK_1);
        if n != p {
            list.push(format!(
                "{}VISITED_SNIPER_VALLEY_ROCK_1",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_SNIPER_VALLEY_ROCK_2);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_SNIPER_VALLEY_ROCK_2);
        if n != p {
            list.push(format!(
                "{}VISITED_SNIPER_VALLEY_ROCK_2",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_SYNC_FLASK);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_SYNC_FLASK);
        if n != p {
            list.push(format!("{}VISITED_SYNC_FLASK", if n { "+" } else { "-" }));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_UHRUM_ANNUNA_CORRIDOR_BLOCK);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_UHRUM_ANNUNA_CORRIDOR_BLOCK);
        if n != p {
            list.push(format!(
                "{}VISITED_UHRUM_ANNUNA_CORRIDOR_BLOCK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_UHRUM_WATERFALL_WALL);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_UHRUM_WATERFALL_WALL);
        if n != p {
            list.push(format!(
                "{}VISITED_UHRUM_WATERFALL_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_UHRUM_WATERFALLS_BLOCK);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_UHRUM_WATERFALLS_BLOCK);
        if n != p {
            list.push(format!(
                "{}VISITED_UHRUM_WATERFALLS_BLOCK",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_LOWER_WALL);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_LOWER_WALL);
        if n != p {
            list.push(format!(
                "{}VISITED_UHRUM_WEST_ENTRANCE_LOWER_WALL",
                if n { "+" } else { "-" }
            ));
        }
        let n = self
            .cbits7
            .contains(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_UPPER_WALL);
        let p = old
            .cbits7
            .contains(flags::ContextBits7::VISITED_UHRUM_WEST_ENTRANCE_UPPER_WALL);
        if n != p {
            list.push(format!(
                "{}VISITED_UHRUM_WEST_ENTRANCE_UPPER_WALL",
                if n { "+" } else { "-" }
            ));
        }
        if list.is_empty() {
            String::from("NONE")
        } else {
            list.join("\n")
        }
    }
}

impl Context {
    pub fn position(&self) -> SpotId {
        self.position
    }
    pub fn energy(&self) -> i16 {
        self.energy
    }
    pub fn set_energy(&mut self, val: i16) {
        self.energy = val;
    }
    pub fn flasks(&self) -> i8 {
        self.flasks
    }
    pub fn set_flasks(&mut self, val: i8) {
        self.flasks = val;
    }
    pub fn refills(&self) -> i8 {
        self.refills
    }
    pub fn set_refills(&mut self, val: i8) {
        self.refills = val;
    }
    pub fn mode(&self) -> enums::Mode {
        self.mode
    }
    pub fn set_mode(&mut self, val: enums::Mode) {
        self.mode = val;
    }
    pub fn save(&self) -> SpotId {
        self.save
    }
    pub fn set_save(&mut self, val: SpotId) {
        self.save = val;
    }
    pub fn breach_save(&self) -> SpotId {
        self.breach_save
    }
    pub fn set_breach_save(&mut self, val: SpotId) {
        self.breach_save = val;
    }
    pub fn indra(&self) -> SpotId {
        self.indra
    }
    pub fn set_indra(&mut self, val: SpotId) {
        self.indra = val;
    }
    pub fn last(&self) -> SpotId {
        self.last
    }
    pub fn set_last(&mut self, val: SpotId) {
        self.last = val;
    }
    pub fn portal(&self) -> SpotId {
        self.portal
    }
    pub fn set_portal(&mut self, val: SpotId) {
        self.portal = val;
    }
    pub fn prev_portal(&self) -> SpotId {
        self.prev_portal
    }
    pub fn set_prev_portal(&mut self, val: SpotId) {
        self.prev_portal = val;
    }
    pub fn prev_area(&self) -> AreaId {
        self.prev_area
    }
    pub fn set_prev_area(&mut self, val: AreaId) {
        self.prev_area = val;
    }
    pub fn map__amagi_breach__east_entrance__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__AMAGI_BREACH__EAST_ENTRANCE__SAVE)
    }
    pub fn set_map__amagi_breach__east_entrance__save(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::MAP__AMAGI_BREACH__EAST_ENTRANCE__SAVE,
            val,
        );
    }
    pub fn map__amagi__main_area__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__AMAGI__MAIN_AREA__SAVE)
    }
    pub fn set_map__amagi__main_area__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__AMAGI__MAIN_AREA__SAVE, val);
    }
    pub fn map__amagi__east_lake__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__AMAGI__EAST_LAKE__SAVE)
    }
    pub fn set_map__amagi__east_lake__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__AMAGI__EAST_LAKE__SAVE, val);
    }
    pub fn map__annuna__mirror_match__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE)
    }
    pub fn set_map__annuna__mirror_match__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE, val);
    }
    pub fn map__annuna__vertical_room__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE)
    }
    pub fn set_map__annuna__vertical_room__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE, val);
    }
    pub fn map__annuna__factory_entrance__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__ANNUNA__FACTORY_ENTRANCE__SAVE)
    }
    pub fn set_map__annuna__factory_entrance__save(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::MAP__ANNUNA__FACTORY_ENTRANCE__SAVE,
            val,
        );
    }
    pub fn map__annuna__upper_save__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__ANNUNA__UPPER_SAVE__SAVE)
    }
    pub fn set_map__annuna__upper_save__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__ANNUNA__UPPER_SAVE__SAVE, val);
    }
    pub fn map__annuna__center_save__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__ANNUNA__CENTER_SAVE__SAVE)
    }
    pub fn set_map__annuna__center_save__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__ANNUNA__CENTER_SAVE__SAVE, val);
    }
    pub fn map__ebih__base_camp__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__EBIH__BASE_CAMP__SAVE)
    }
    pub fn set_map__ebih__base_camp__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__EBIH__BASE_CAMP__SAVE, val);
    }
    pub fn map__ebih__ebih_west__mid_save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__MID_SAVE)
    }
    pub fn set_map__ebih__ebih_west__mid_save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__EBIH__EBIH_WEST__MID_SAVE, val);
    }
    pub fn map__ebih__ebih_west__upper_save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE)
    }
    pub fn set_map__ebih__ebih_west__upper_save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE, val);
    }
    pub fn map__ebih__ebih_west__lower_save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE)
    }
    pub fn set_map__ebih__ebih_west__lower_save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE, val);
    }
    pub fn map__giguna_breach__peak__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA_BREACH__PEAK__SAVE)
    }
    pub fn set_map__giguna_breach__peak__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__GIGUNA_BREACH__PEAK__SAVE, val);
    }
    pub fn map__giguna_breach__sw_save__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE)
    }
    pub fn set_map__giguna_breach__sw_save__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE, val);
    }
    pub fn map__giguna__giguna_northeast__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE)
    }
    pub fn set_map__giguna__giguna_northeast__save(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE,
            val,
        );
    }
    pub fn map__giguna__giguna_base__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE)
    }
    pub fn set_map__giguna__giguna_base__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE, val);
    }
    pub fn map__giguna__ruins_west__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE)
    }
    pub fn set_map__giguna__ruins_west__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE, val);
    }
    pub fn map__giguna__ruins_top__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE)
    }
    pub fn set_map__giguna__ruins_top__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE, val);
    }
    pub fn map__glacier_breach__south_save__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__GLACIER_BREACH__SOUTH_SAVE__SAVE)
    }
    pub fn set_map__glacier_breach__south_save__save(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::MAP__GLACIER_BREACH__SOUTH_SAVE__SAVE,
            val,
        );
    }
    pub fn map__glacier_breach__west_save__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__GLACIER_BREACH__WEST_SAVE__SAVE)
    }
    pub fn set_map__glacier_breach__west_save__save(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::MAP__GLACIER_BREACH__WEST_SAVE__SAVE,
            val,
        );
    }
    pub fn map__glacier_breach__guarded_corridor__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__GLACIER_BREACH__GUARDED_CORRIDOR__SAVE)
    }
    pub fn set_map__glacier_breach__guarded_corridor__save(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::MAP__GLACIER_BREACH__GUARDED_CORRIDOR__SAVE,
            val,
        );
    }
    pub fn map__glacier_breach__save_and_exit__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__GLACIER_BREACH__SAVE_AND_EXIT__SAVE)
    }
    pub fn set_map__glacier_breach__save_and_exit__save(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::MAP__GLACIER_BREACH__SAVE_AND_EXIT__SAVE,
            val,
        );
    }
    pub fn map__glacier_breach__hammonds_breach__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__GLACIER_BREACH__HAMMONDS_BREACH__SAVE)
    }
    pub fn set_map__glacier_breach__hammonds_breach__save(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::MAP__GLACIER_BREACH__HAMMONDS_BREACH__SAVE,
            val,
        );
    }
    pub fn map__glacier__revival__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE)
    }
    pub fn set_map__glacier__revival__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE, val);
    }
    pub fn map__irikar_breach__save_room__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE)
    }
    pub fn set_map__irikar_breach__save_room__save(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE,
            val,
        );
    }
    pub fn map__irikar_breach__gauntlet__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE)
    }
    pub fn set_map__irikar_breach__gauntlet__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE, val);
    }
    pub fn map__irikar__hub__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE)
    }
    pub fn set_map__irikar__hub__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE, val);
    }
    pub fn map__irikar__midwest__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__IRIKAR__MIDWEST__SAVE)
    }
    pub fn set_map__irikar__midwest__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__IRIKAR__MIDWEST__SAVE, val);
    }
    pub fn map__irikar__beach_save__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__IRIKAR__BEACH_SAVE__SAVE)
    }
    pub fn set_map__irikar__beach_save__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__IRIKAR__BEACH_SAVE__SAVE, val);
    }
    pub fn map__uhrum__west_entrance__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE)
    }
    pub fn set_map__uhrum__west_entrance__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE, val);
    }
    pub fn map__uhrum__save_room__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__UHRUM__SAVE_ROOM__SAVE)
    }
    pub fn set_map__uhrum__save_room__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__UHRUM__SAVE_ROOM__SAVE, val);
    }
    pub fn map__uhrum__annuna_corridor__save(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE)
    }
    pub fn set_map__uhrum__annuna_corridor__save(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE, val);
    }
    pub fn glacier__ctx__hammonds_doors(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GLACIER__CTX__HAMMONDS_DOORS)
    }
    pub fn set_glacier__ctx__hammonds_doors(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::GLACIER__CTX__HAMMONDS_DOORS, val);
    }
    pub fn amagi__main_area__ctx__combo(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::AMAGI__MAIN_AREA__CTX__COMBO)
    }
    pub fn set_amagi__main_area__ctx__combo(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::AMAGI__MAIN_AREA__CTX__COMBO, val);
    }
    pub fn annuna__west_bridge__ctx__doors_opened(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::ANNUNA__WEST_BRIDGE__CTX__DOORS_OPENED)
    }
    pub fn set_annuna__west_bridge__ctx__doors_opened(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::ANNUNA__WEST_BRIDGE__CTX__DOORS_OPENED,
            val,
        );
    }
    pub fn annuna__east_bridge__ctx__combo(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::ANNUNA__EAST_BRIDGE__CTX__COMBO)
    }
    pub fn set_annuna__east_bridge__ctx__combo(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::ANNUNA__EAST_BRIDGE__CTX__COMBO, val);
    }
    pub fn annuna__vertical_room__ctx__door_opened(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::ANNUNA__VERTICAL_ROOM__CTX__DOOR_OPENED)
    }
    pub fn set_annuna__vertical_room__ctx__door_opened(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::ANNUNA__VERTICAL_ROOM__CTX__DOOR_OPENED,
            val,
        );
    }
    pub fn annuna__west_climb__ctx__door_opened(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::ANNUNA__WEST_CLIMB__CTX__DOOR_OPENED)
    }
    pub fn set_annuna__west_climb__ctx__door_opened(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::ANNUNA__WEST_CLIMB__CTX__DOOR_OPENED,
            val,
        );
    }
    pub fn ebih__base_camp__ctx__left_platform_moved(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED)
    }
    pub fn set_ebih__base_camp__ctx__left_platform_moved(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED,
            val,
        );
    }
    pub fn ebih__truck_gate__ctx__door_open(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::EBIH__TRUCK_GATE__CTX__DOOR_OPEN)
    }
    pub fn set_ebih__truck_gate__ctx__door_open(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::EBIH__TRUCK_GATE__CTX__DOOR_OPEN, val);
    }
    pub fn ebih__grid_25_10_12__ctx__door_open(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::EBIH__GRID_25_10_12__CTX__DOOR_OPEN)
    }
    pub fn set_ebih__grid_25_10_12__ctx__door_open(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::EBIH__GRID_25_10_12__CTX__DOOR_OPEN,
            val,
        );
    }
    pub fn ebih__waterfall__ctx__west_door_open(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::EBIH__WATERFALL__CTX__WEST_DOOR_OPEN)
    }
    pub fn set_ebih__waterfall__ctx__west_door_open(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::EBIH__WATERFALL__CTX__WEST_DOOR_OPEN,
            val,
        );
    }
    pub fn ebih__ebih_west__ctx__door_open(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::EBIH__EBIH_WEST__CTX__DOOR_OPEN)
    }
    pub fn set_ebih__ebih_west__ctx__door_open(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::EBIH__EBIH_WEST__CTX__DOOR_OPEN, val);
    }
    pub fn ebih__ebih_east__ctx__platform1_moved(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED)
    }
    pub fn set_ebih__ebih_east__ctx__platform1_moved(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED,
            val,
        );
    }
    pub fn ebih__ebih_east__ctx__platform2_moved(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED)
    }
    pub fn set_ebih__ebih_east__ctx__platform2_moved(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED,
            val,
        );
    }
    pub fn ebih__drone_room__ctx__platform_moved(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED)
    }
    pub fn set_ebih__drone_room__ctx__platform_moved(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED,
            val,
        );
    }
    pub fn ebih__vertical_interchange__ctx__door_open(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::EBIH__VERTICAL_INTERCHANGE__CTX__DOOR_OPEN)
    }
    pub fn set_ebih__vertical_interchange__ctx__door_open(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::EBIH__VERTICAL_INTERCHANGE__CTX__DOOR_OPEN,
            val,
        );
    }
    pub fn giguna_breach__sw_save__ctx__door_opened(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GIGUNA_BREACH__SW_SAVE__CTX__DOOR_OPENED)
    }
    pub fn set_giguna_breach__sw_save__ctx__door_opened(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::GIGUNA_BREACH__SW_SAVE__CTX__DOOR_OPENED,
            val,
        );
    }
    pub fn giguna__giguna_northeast__ctx__door_opened(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GIGUNA__GIGUNA_NORTHEAST__CTX__DOOR_OPENED)
    }
    pub fn set_giguna__giguna_northeast__ctx__door_opened(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::GIGUNA__GIGUNA_NORTHEAST__CTX__DOOR_OPENED,
            val,
        );
    }
    pub fn giguna__carnelian__ctx__door_opened(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__DOOR_OPENED)
    }
    pub fn set_giguna__carnelian__ctx__door_opened(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::GIGUNA__CARNELIAN__CTX__DOOR_OPENED,
            val,
        );
    }
    pub fn giguna__carnelian__ctx__upper_susar(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__UPPER_SUSAR)
    }
    pub fn set_giguna__carnelian__ctx__upper_susar(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::GIGUNA__CARNELIAN__CTX__UPPER_SUSAR,
            val,
        );
    }
    pub fn giguna__carnelian__ctx__lower_susar(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__LOWER_SUSAR)
    }
    pub fn set_giguna__carnelian__ctx__lower_susar(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::GIGUNA__CARNELIAN__CTX__LOWER_SUSAR,
            val,
        );
    }
    pub fn giguna__west_caverns__ctx__east_susar(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR)
    }
    pub fn set_giguna__west_caverns__ctx__east_susar(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR,
            val,
        );
    }
    pub fn giguna__giguna_base__ctx__door_open(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GIGUNA__GIGUNA_BASE__CTX__DOOR_OPEN)
    }
    pub fn set_giguna__giguna_base__ctx__door_open(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::GIGUNA__GIGUNA_BASE__CTX__DOOR_OPEN,
            val,
        );
    }
    pub fn giguna__ruins_west__ctx__kishib_handled(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED)
    }
    pub fn set_giguna__ruins_west__ctx__kishib_handled(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED,
            val,
        );
    }
    pub fn giguna__ruins_top__ctx__doors_open(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GIGUNA__RUINS_TOP__CTX__DOORS_OPEN)
    }
    pub fn set_giguna__ruins_top__ctx__doors_open(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::GIGUNA__RUINS_TOP__CTX__DOORS_OPEN, val);
    }
    pub fn giguna__clouds__ctx__platform(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GIGUNA__CLOUDS__CTX__PLATFORM)
    }
    pub fn set_giguna__clouds__ctx__platform(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::GIGUNA__CLOUDS__CTX__PLATFORM, val);
    }
    pub fn giguna__east_caverns__ctx__door_opened(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__DOOR_OPENED)
    }
    pub fn set_giguna__east_caverns__ctx__door_opened(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__DOOR_OPENED,
            val,
        );
    }
    pub fn giguna__east_caverns__ctx__combo_entered(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED)
    }
    pub fn set_giguna__east_caverns__ctx__combo_entered(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED,
            val,
        );
    }
    pub fn giguna__east_caverns__ctx__upper_susar(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR)
    }
    pub fn set_giguna__east_caverns__ctx__upper_susar(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR,
            val,
        );
    }
    pub fn giguna__east_caverns__ctx__mid_susar(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR)
    }
    pub fn set_giguna__east_caverns__ctx__mid_susar(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR,
            val,
        );
    }
    pub fn giguna__east_caverns__ctx__lower_susar(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR)
    }
    pub fn set_giguna__east_caverns__ctx__lower_susar(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR,
            val,
        );
    }
    pub fn giguna__gateway__ctx__door_opened(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GIGUNA__GATEWAY__CTX__DOOR_OPENED)
    }
    pub fn set_giguna__gateway__ctx__door_opened(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::GIGUNA__GATEWAY__CTX__DOOR_OPENED, val);
    }
    pub fn glacier__the_big_drop__ctx__bridge_open(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::GLACIER__THE_BIG_DROP__CTX__BRIDGE_OPEN)
    }
    pub fn set_glacier__the_big_drop__ctx__bridge_open(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::GLACIER__THE_BIG_DROP__CTX__BRIDGE_OPEN,
            val,
        );
    }
    pub fn glacier__vertical_room__ctx__upper_gatestone(&self) -> bool {
        self.cbits2
            .contains(flags::ContextBits2::GLACIER__VERTICAL_ROOM__CTX__UPPER_GATESTONE)
    }
    pub fn set_glacier__vertical_room__ctx__upper_gatestone(&mut self, val: bool) {
        self.cbits2.set(
            flags::ContextBits2::GLACIER__VERTICAL_ROOM__CTX__UPPER_GATESTONE,
            val,
        );
    }
    pub fn glacier__vertical_room__ctx__lower_gatestones(&self) -> bool {
        self.cbits2
            .contains(flags::ContextBits2::GLACIER__VERTICAL_ROOM__CTX__LOWER_GATESTONES)
    }
    pub fn set_glacier__vertical_room__ctx__lower_gatestones(&mut self, val: bool) {
        self.cbits2.set(
            flags::ContextBits2::GLACIER__VERTICAL_ROOM__CTX__LOWER_GATESTONES,
            val,
        );
    }
    pub fn irikar__basement_portal__ctx__platform_moved(&self) -> bool {
        self.cbits2
            .contains(flags::ContextBits2::IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED)
    }
    pub fn set_irikar__basement_portal__ctx__platform_moved(&mut self, val: bool) {
        self.cbits2.set(
            flags::ContextBits2::IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED,
            val,
        );
    }
    pub fn irikar__midwest__ctx__left_platform(&self) -> bool {
        self.cbits2
            .contains(flags::ContextBits2::IRIKAR__MIDWEST__CTX__LEFT_PLATFORM)
    }
    pub fn set_irikar__midwest__ctx__left_platform(&mut self, val: bool) {
        self.cbits2.set(
            flags::ContextBits2::IRIKAR__MIDWEST__CTX__LEFT_PLATFORM,
            val,
        );
    }
    pub fn irikar__midwest__ctx__right_platform(&self) -> bool {
        self.cbits2
            .contains(flags::ContextBits2::IRIKAR__MIDWEST__CTX__RIGHT_PLATFORM)
    }
    pub fn set_irikar__midwest__ctx__right_platform(&mut self, val: bool) {
        self.cbits2.set(
            flags::ContextBits2::IRIKAR__MIDWEST__CTX__RIGHT_PLATFORM,
            val,
        );
    }
}

//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

#![allow(non_snake_case)]
#![allow(unused)]

use crate::graph::{self, *};
use crate::graph_enums::*;
use crate::items::Item;
use crate::movements;
use crate::prices::Currency;
use crate::rules;
use analyzer::context;
use analyzer::world::World;
use enum_map::EnumMap;
use serde::{Deserialize, Serialize};
use serde_repr::{Deserialize_repr, Serialize_repr};
use std::str::FromStr;
use yaml_rust::Yaml;

pub mod enums {
use std::fmt;
#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd, Default, serde_repr::Serialize_repr, serde_repr::Deserialize_repr)]
#[repr(u8)]
pub enum Mode {
    #[default]
    Indra,
    Drone,
}
impl fmt::Display for Mode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            Mode::Indra => write!(f, "{}", "Indra"),
            Mode::Drone => write!(f, "{}", "Drone"),
        }
    }
}
impl std::str::FromStr for Mode {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Drone" | "drone" => Ok(Mode::Drone),
            "Indra" | "indra" => Ok(Mode::Indra),
            _ => Err(format!("Could not recognize as a Mode: {}", s)),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd, Default, serde_repr::Serialize_repr, serde_repr::Deserialize_repr)]
#[repr(u8)]
pub enum Realm {
    #[default]
    Main,
    Breach,
    Emergence,
    Interior,
    Map,
    Menu,
}
impl fmt::Display for Realm {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            Realm::Main => write!(f, "{}", "Main"),
            Realm::Breach => write!(f, "{}", "Breach"),
            Realm::Emergence => write!(f, "{}", "Emergence"),
            Realm::Interior => write!(f, "{}", "Interior"),
            Realm::Map => write!(f, "{}", "Map"),
            Realm::Menu => write!(f, "{}", "Menu"),
        }
    }
}
impl std::str::FromStr for Realm {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Breach" | "breach" => Ok(Realm::Breach),
            "Emergence" | "emergence" => Ok(Realm::Emergence),
            "Interior" | "interior" => Ok(Realm::Interior),
            "Main" | "main" => Ok(Realm::Main),
            "Map" | "map" => Ok(Realm::Map),
            "Menu" | "menu" => Ok(Realm::Menu),
            _ => Err(format!("Could not recognize as a Realm: {}", s)),
        }
    }
}

}

#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub enum Expectation {
    Position(SpotId),
    Energy(i16),
    Flasks(i8),
    Refills(i8),
    Mode(enums::Mode),
    Save(SpotId),
    BreachSave(SpotId),
    Indra(SpotId),
    Last(SpotId),
    PrevArea(AreaId),
    MapAmagiMainAreaSave(bool),
    MapAmagiWestLakeUrn(bool),
    MapAnnunaMirrorMatchSave(bool),
    MapAnnunaWestBridgeSave(bool),
    MapAnnunaVerticalRoomSave(bool),
    MapAnnunaFactoryEntranceSave(bool),
    MapAnnunaCenterSaveSave(bool),
    MapAnnunaFinalSaveSave(bool),
    MapEbihBaseCampSave(bool),
    MapEbihWaterfallAxe(bool),
    MapEbihEbihWestMidSave(bool),
    MapEbihEbihWestUpperSave(bool),
    MapEbihEbihWestLowerSave(bool),
    MapEbihDroneRoomUrn(bool),
    MapGigunaBreachPeakSave(bool),
    MapGigunaBreachSwSaveSave(bool),
    MapGigunaGigunaNortheastSave(bool),
    MapGigunaGigunaBaseSave(bool),
    MapGigunaRuinsWestSave(bool),
    MapGigunaRuinsTopSave(bool),
    MapGlacierRevivalSave(bool),
    MapIrikarBreachSaveRoomSave(bool),
    MapIrikarBreachGauntletSave(bool),
    MapIrikarBreachBasementSaveSave(bool),
    MapIrikarHubSave(bool),
    MapIrikarSightRoomUrn(bool),
    MapUhrumWestEntranceSave(bool),
    MapUhrumSaveRoomSave(bool),
    MapUhrumAnnunaCorridorSave(bool),
    MapUhrumAnnunaCorridorUrn(bool),
    AmagiMainAreaCtxCombo(bool),
    AnnunaWestBridgeCtxDoorsOpened(bool),
    AnnunaEastBridgeCtxCombo(bool),
    AnnunaWestClimbCtxDoorOpened(bool),
    EbihBaseCampCtxLeftPlatformMoved(bool),
    EbihGrid251012CtxDoorOpen(bool),
    EbihWaterfallCtxWestDoorOpen(bool),
    EbihEbihWestCtxDoorOpen(bool),
    EbihEbihEastCtxPlatform1Moved(bool),
    EbihEbihEastCtxPlatform2Moved(bool),
    EbihDroneRoomCtxPlatformMoved(bool),
    EbihVerticalInterchangeCtxDoorOpen(bool),
    GigunaBreachSwSaveCtxDoorOpened(bool),
    GigunaGigunaNortheastCtxDoorOpened(bool),
    GigunaCarnelianCtxDoorOpened(bool),
    GigunaCarnelianCtxUpperSusar(bool),
    GigunaCarnelianCtxLowerSusar(bool),
    GigunaWestCavernsCtxEastSusar(bool),
    GigunaGigunaBaseCtxDoorOpen(bool),
    GigunaRuinsWestCtxKishibHandled(bool),
    GigunaRuinsTopCtxDoorsOpen(bool),
    GigunaCloudsCtxPlatformAndPortal(bool),
    GigunaEastCavernsCtxDoorOpened(bool),
    GigunaEastCavernsCtxComboEntered(bool),
    GigunaEastCavernsCtxUpperSusar(bool),
    GigunaEastCavernsCtxMidSusar(bool),
    GigunaEastCavernsCtxLowerSusar(bool),
    GigunaGatewayCtxDoorOpened(bool),
    IrikarBasementPortalCtxPlatformMoved(bool),
    // items
    AmagiDragonEyePassage(bool),
    AmagiStrongholdBoulder1(bool),
    AmagiStrongholdBoulder2(bool),
    AmagiStrongholdWall1(bool),
    AmagiStrongholdWall2(bool),
    AmagiWestLakeSurfaceWall(bool),
    Amashilama(bool),
    AnnunaEastBridgeGate(bool),
    AnnunaMirrorMatchSwitch(bool),
    Anuman(bool),
    AnunnaVerticalRoomGate(bool),
    ApocalypseBomb(bool),
    BigFlask(bool),
    Boomerang(bool),
    BreachAttractor(bool),
    BreachSight(bool),
    BronzeAxe(bool),
    BuildingOfTheSchool(bool),
    CommemorativeSpeech(bool),
    CompaniesLayoff(bool),
    Compass(bool),
    DangerousIdeas(bool),
    DearErnest(bool),
    DefeatIndra(bool),
    DefeatMUSAM20(bool),
    DestructionPogrom(bool),
    DroneHover(bool),
    DroneMeleeDamage(bool),
    DroneMeleeDamage2(bool),
    DroneMeleeSpeed(bool),
    DroneMeleeSpeed2(bool),
    EbihAlu(bool),
    EbihInterchangeBlock(bool),
    EbihInterchangeGate(bool),
    EbihWastelandDoor(bool),
    EbihWastelandPassageH(bool),
    EbihWaterfallBlockLeft(bool),
    EbihWaterfallBlockRight(bool),
    EbihWaterfallWall(bool),
    EbihWestBlock(bool),
    Escape(bool),
    ExitBreach(bool),
    EyeRing(bool),
    FamilyTragedy(bool),
    FastTravel(bool),
    Flask(i8),
    GigunaBoulder(bool),
    GigunaDualPathSwitch(bool),
    GigunaDualPathWall(bool),
    GigunaGatewayBlock(bool),
    GigunaGatewayGate(bool),
    GigunaGubi(bool),
    GigunaNortheastGate(bool),
    HealthFragment(i8),
    HealthNode(bool),
    HealthUpgrade(bool),
    HealthUpgrade2(bool),
    HealthUpgrade3(bool),
    HealthUpgrade4(bool),
    HereticsTablet(bool),
    Hover(bool),
    IceAxe(bool),
    Infect(bool),
    InfectL1(bool),
    InfectL2(bool),
    InfectL3(bool),
    InfectionRange(bool),
    InfectionRange2(bool),
    InfectionRange3(bool),
    InfectionSpeed(bool),
    IrikarGudam(bool),
    IrikarRoyalStorageWall(bool),
    LamentForFools(bool),
    LedgeGrab(bool),
    LetterFromTrace(bool),
    MeleeDamage(bool),
    MeleeDamage2(bool),
    MeleeSpeed(bool),
    MeleeSpeed2(bool),
    MistUpgrade(bool),
    NaniteMist(bool),
    NanoLattice2(bool),
    NanoPoints(bool),
    NanoPoints2(bool),
    PlagueOfThoughts(bool),
    PowerMatrix(bool),
    RangedDamage(bool),
    RangedDamage2(bool),
    RangedSpeed(bool),
    RangedSpeed2(bool),
    RecordLosses(bool),
    RemoteDrone(bool),
    ResearchersMissing(bool),
    Separation(bool),
    Shockwave(bool),
    SlingshotCharge(bool),
    SlingshotHook(bool),
    SlingshotWeapon(bool),
    SniperValleyRock1(bool),
    SniperValleyRock2(bool),
    StationPower(bool),
    StormBomb(bool),
    SuspensionBridge(bool),
    Switch3611(bool),
    Switch4012(bool),
    TerminalBreakthrough1(bool),
    TerminalBreakthrough2(bool),
    TheIdealKiengir(bool),
    UhrumAnnunaCorridorBlock(bool),
    UhrumWaterfallWall(bool),
    UhrumWaterfallsBlock(bool),
    UhrumWestEntranceGate(bool),
    UhrumWestEntranceLowerWall(bool),
    UhrumWestEntranceUpperWall(bool),
    UnderSiege(bool),
    UnderwaterMovement(bool),
    WallClimb(bool),
    WaterMovement(bool),
}

pub mod data {
    #[allow(unused_imports)]
    use crate::context::enums;
    use crate::graph_enums::*;
pub fn realm(spot_id: SpotId) -> enums::Realm {
    match spot_id {
        SpotId::Giguna_Breach__Antechamber__North => enums::Realm::Breach,
        SpotId::Giguna_Breach__Ascent__Bottom => enums::Realm::Breach,
        SpotId::Giguna_Breach__Ascent__Top => enums::Realm::Breach,
        SpotId::Giguna_Breach__Ascent__West_6 => enums::Realm::Breach,
        SpotId::Giguna_Breach__Ascent__West_9 => enums::Realm::Breach,
        SpotId::Giguna_Breach__Below_Chimney__Cubby_Entrance => enums::Realm::Breach,
        SpotId::Giguna_Breach__Below_Chimney__East_Ledge => enums::Realm::Breach,
        SpotId::Giguna_Breach__Below_Chimney__North => enums::Realm::Breach,
        SpotId::Giguna_Breach__Below_Chimney__Passage_Lip => enums::Realm::Breach,
        SpotId::Giguna_Breach__Below_Chimney__Southwest => enums::Realm::Breach,
        SpotId::Giguna_Breach__Below_Chimney__West_Passage => enums::Realm::Breach,
        SpotId::Giguna_Breach__Central__East_9 => enums::Realm::Breach,
        SpotId::Giguna_Breach__Central__East_Brick => enums::Realm::Breach,
        SpotId::Giguna_Breach__Central__Middle_Statue => enums::Realm::Breach,
        SpotId::Giguna_Breach__Central__South => enums::Realm::Breach,
        SpotId::Giguna_Breach__Central__Statuette => enums::Realm::Breach,
        SpotId::Giguna_Breach__Central__Tunnel => enums::Realm::Breach,
        SpotId::Giguna_Breach__Central__Upper_Floating_Brick => enums::Realm::Breach,
        SpotId::Giguna_Breach__Central__Wall => enums::Realm::Breach,
        SpotId::Giguna_Breach__Central__West_8 => enums::Realm::Breach,
        SpotId::Giguna_Breach__Central__West_9 => enums::Realm::Breach,
        SpotId::Giguna_Breach__Central__West_Statue => enums::Realm::Breach,
        SpotId::Giguna_Breach__Chimney__Cache => enums::Realm::Breach,
        SpotId::Giguna_Breach__Chimney__East_7 => enums::Realm::Breach,
        SpotId::Giguna_Breach__Chimney__East_8 => enums::Realm::Breach,
        SpotId::Giguna_Breach__Chimney__East_9 => enums::Realm::Breach,
        SpotId::Giguna_Breach__Chimney__Middle_Platform => enums::Realm::Breach,
        SpotId::Giguna_Breach__Chimney__South => enums::Realm::Breach,
        SpotId::Giguna_Breach__Chimney__Top => enums::Realm::Breach,
        SpotId::Giguna_Breach__Cubby__Entrance => enums::Realm::Breach,
        SpotId::Giguna_Breach__Cubby__Rocks => enums::Realm::Breach,
        SpotId::Giguna_Breach__Fire_Room__Cuesta => enums::Realm::Breach,
        SpotId::Giguna_Breach__Fire_Room__East_11 => enums::Realm::Breach,
        SpotId::Giguna_Breach__Fire_Room__First_Fire => enums::Realm::Breach,
        SpotId::Giguna_Breach__Fire_Room__South => enums::Realm::Breach,
        SpotId::Giguna_Breach__Fire_Room__West_10 => enums::Realm::Breach,
        SpotId::Giguna_Breach__Fire_Room__West_11 => enums::Realm::Breach,
        SpotId::Giguna_Breach__Fire_Room__West_Plateau => enums::Realm::Breach,
        SpotId::Giguna_Breach__Grid_14_10_11__East_10 => enums::Realm::Breach,
        SpotId::Giguna_Breach__Grid_14_10_11__East_11 => enums::Realm::Breach,
        SpotId::Giguna_Breach__Grid_14_10_11__High_Ledge => enums::Realm::Breach,
        SpotId::Giguna_Breach__Grid_14_10_11__North => enums::Realm::Breach,
        SpotId::Giguna_Breach__Grid_14_10_11__South => enums::Realm::Breach,
        SpotId::Giguna_Breach__Peak__Column => enums::Realm::Breach,
        SpotId::Giguna_Breach__Peak__East_6 => enums::Realm::Breach,
        SpotId::Giguna_Breach__Peak__East_Passage => enums::Realm::Breach,
        SpotId::Giguna_Breach__Peak__Portal => enums::Realm::Breach,
        SpotId::Giguna_Breach__Peak__Save_Point => enums::Realm::Breach,
        SpotId::Giguna_Breach__Peak__Upper_East => enums::Realm::Breach,
        SpotId::Giguna_Breach__Peak__Upper_West => enums::Realm::Breach,
        SpotId::Giguna_Breach__Peak__West_7 => enums::Realm::Breach,
        SpotId::Giguna_Breach__Pink_Clouds__Corner => enums::Realm::Breach,
        SpotId::Giguna_Breach__Pink_Clouds__Normal_Entry => enums::Realm::Breach,
        SpotId::Giguna_Breach__Pink_Clouds__Quick_Entry => enums::Realm::Breach,
        SpotId::Giguna_Breach__Robopede__Center => enums::Realm::Breach,
        SpotId::Giguna_Breach__Robopede__North => enums::Realm::Breach,
        SpotId::Giguna_Breach__Robopede__West => enums::Realm::Breach,
        SpotId::Giguna_Breach__SW_Save__East_12 => enums::Realm::Breach,
        SpotId::Giguna_Breach__SW_Save__Lower_Platform => enums::Realm::Breach,
        SpotId::Giguna_Breach__SW_Save__North => enums::Realm::Breach,
        SpotId::Giguna_Breach__SW_Save__Save_Point => enums::Realm::Breach,
        SpotId::Giguna_Breach__SW_Save__Side_Door => enums::Realm::Breach,
        SpotId::Giguna_Breach__SW_Save__West_11 => enums::Realm::Breach,
        SpotId::Giguna_Breach__Slingshot__Column => enums::Realm::Breach,
        SpotId::Giguna_Breach__Slingshot__Ravine => enums::Realm::Breach,
        SpotId::Giguna_Breach__Slingshot__West => enums::Realm::Breach,
        SpotId::Interior__Building_Interior__Corner => enums::Realm::Interior,
        SpotId::Interior__Building_Interior__Entry => enums::Realm::Interior,
        SpotId::Interior__Bunker_Interior__Desk => enums::Realm::Interior,
        SpotId::Interior__Bunker_Interior__Entry => enums::Realm::Interior,
        SpotId::Interior__Cave_Behind_Waterfall__Bottom => enums::Realm::Interior,
        SpotId::Interior__Cave_Behind_Waterfall__Middle => enums::Realm::Interior,
        SpotId::Interior__Cave_Behind_Waterfall__Top => enums::Realm::Interior,
        SpotId::Interior__Dock_Elevator__Connector => enums::Realm::Interior,
        SpotId::Interior__Dock_Elevator__Elevator => enums::Realm::Interior,
        SpotId::Interior__Dock_Interior__Connector => enums::Realm::Interior,
        SpotId::Interior__Dock_Interior__Entry => enums::Realm::Interior,
        SpotId::Interior__Ebih_Cave__Entry => enums::Realm::Interior,
        SpotId::Interior__Garage__Boxes => enums::Realm::Interior,
        SpotId::Interior__Garage__Entry => enums::Realm::Interior,
        SpotId::Interior__Outpost_Interior__Bookshelf => enums::Realm::Interior,
        SpotId::Interior__Outpost_Interior__Entry => enums::Realm::Interior,
        SpotId::Interior__Tent_Interior__Desk => enums::Realm::Interior,
        SpotId::Interior__Tent_Interior__Entry => enums::Realm::Interior,
        SpotId::Irikar_Breach__Basement_Save__Save_Point => enums::Realm::Breach,
        SpotId::Irikar_Breach__Exit_Corridor__East => enums::Realm::Breach,
        SpotId::Irikar_Breach__Exit_Corridor__North_12 => enums::Realm::Breach,
        SpotId::Irikar_Breach__Exit_Corridor__North_13 => enums::Realm::Breach,
        SpotId::Irikar_Breach__Exit_Corridor__Passage => enums::Realm::Breach,
        SpotId::Irikar_Breach__Exit_Corridor__Pillar => enums::Realm::Breach,
        SpotId::Irikar_Breach__Exit_Corridor__Portal_Stand => enums::Realm::Breach,
        SpotId::Irikar_Breach__Exit_Corridor__West => enums::Realm::Breach,
        SpotId::Irikar_Breach__Exit_Corridor__West_of_Pillar => enums::Realm::Breach,
        SpotId::Irikar_Breach__Flappy_Drone__Initial_Drop => enums::Realm::Breach,
        SpotId::Irikar_Breach__Flappy_Drone__Passage_Corner => enums::Realm::Breach,
        SpotId::Irikar_Breach__Flappy_Drone__Pillar_Underside => enums::Realm::Breach,
        SpotId::Irikar_Breach__Flappy_Drone__Side => enums::Realm::Breach,
        SpotId::Irikar_Breach__Flappy_Drone__South => enums::Realm::Breach,
        SpotId::Irikar_Breach__Flappy_Drone__Top_Pillar => enums::Realm::Breach,
        SpotId::Irikar_Breach__Flappy_Drone__Upper_Valley_Left => enums::Realm::Breach,
        SpotId::Irikar_Breach__Flappy_Drone__Upper_Valley_Right => enums::Realm::Breach,
        SpotId::Irikar_Breach__Flappy_Drone__West_Door => enums::Realm::Breach,
        SpotId::Irikar_Breach__Flappy_Drone__Zigzag_Bottom => enums::Realm::Breach,
        SpotId::Irikar_Breach__Four_way__East => enums::Realm::Breach,
        SpotId::Irikar_Breach__Four_way__Ledge => enums::Realm::Breach,
        SpotId::Irikar_Breach__Four_way__North => enums::Realm::Breach,
        SpotId::Irikar_Breach__Four_way__South => enums::Realm::Breach,
        SpotId::Irikar_Breach__Four_way__West => enums::Realm::Breach,
        SpotId::Irikar_Breach__Gauntlet__East_22 => enums::Realm::Breach,
        SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Bottom => enums::Realm::Breach,
        SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Lower_Entry => enums::Realm::Breach,
        SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Reward => enums::Realm::Breach,
        SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Top_Ledge => enums::Realm::Breach,
        SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Entry => enums::Realm::Breach,
        SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Left => enums::Realm::Breach,
        SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Right => enums::Realm::Breach,
        SpotId::Irikar_Breach__Gauntlet__Save_Point => enums::Realm::Breach,
        SpotId::Irikar_Breach__Hover_Room__Bottom => enums::Realm::Breach,
        SpotId::Irikar_Breach__Hover_Room__East => enums::Realm::Breach,
        SpotId::Irikar_Breach__Hover_Room__West => enums::Realm::Breach,
        SpotId::Irikar_Breach__Neon_Corridor__Center => enums::Realm::Breach,
        SpotId::Irikar_Breach__Neon_Corridor__East => enums::Realm::Breach,
        SpotId::Irikar_Breach__Neon_Corridor__West => enums::Realm::Breach,
        SpotId::Irikar_Breach__Neon_Corridor__West_Basin => enums::Realm::Breach,
        SpotId::Irikar_Breach__Sandy_Lair__East_27 => enums::Realm::Breach,
        SpotId::Irikar_Breach__Sandy_Lair__East_28 => enums::Realm::Breach,
        SpotId::Irikar_Breach__Save_Room__Save_Point => enums::Realm::Breach,
        SpotId::Irikar_Breach__Save_Room__Upper_Area => enums::Realm::Breach,
        SpotId::Irikar_Breach__Save_Room__West => enums::Realm::Breach,
        SpotId::Irikar_Breach__Uhrum_Connector__West => enums::Realm::Breach,
        SpotId::Irikar_Breach__Worm_Rave__Corner => enums::Realm::Breach,
        SpotId::Irikar_Breach__Worm_Rave__East => enums::Realm::Breach,
        SpotId::Irikar_Breach__Worm_Rave__South => enums::Realm::Breach,
        SpotId::Menu__Breach_Map__GB_Peak => enums::Realm::Map,
        SpotId::Menu__Breach_Map__GB_SW_Save => enums::Realm::Map,
        SpotId::Menu__Breach_Map__IB_Basement => enums::Realm::Map,
        SpotId::Menu__Breach_Map__IB_Gauntlet => enums::Realm::Map,
        SpotId::Menu__Breach_Map__IB_Save_Room => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Amagi_East_Lake => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Amagi_Isolation => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Amagi_Main_Area => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Annuna_Center_Save => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Annuna_Factory_Entrance => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Annuna_Mirror_Match => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Annuna_Upper => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Annuna_Vertical_Room => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Annuna_West_Bridge => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Anuman => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Apocalypse => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Breach_Sight => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Bronze_Axe => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Ebih_Base_Camp => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Ebih_Observatory => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Ebih_West_Lower => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Ebih_West_Mid => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Ebih_West_Upper => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Giguna_Base => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Giguna_Labyrinth => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Giguna_Northeast => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Giguna_Ruins_West => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Giguna_Separator => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Glacier_Revival => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Infect => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Irikar_Beach_Save => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Irikar_Hub => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Irikar_Midwest => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Remote_Drone => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Shockwave => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Uhrum_Center => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Uhrum_East => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Uhrum_Emergence => enums::Realm::Map,
        SpotId::Menu__Kiengir_Map__Uhrum_West => enums::Realm::Map,
        SpotId::Menu__Upgrade_Menu__Combat => enums::Realm::Menu,
        SpotId::Menu__Upgrade_Menu__Drone => enums::Realm::Menu,
        SpotId::Menu__Upgrade_Menu__Infection => enums::Realm::Menu,
        SpotId::Menu__Upgrade_Menu__Physiology => enums::Realm::Menu,
        SpotId::Menu__Warp_Only__Kiengir => enums::Realm::Main,
        _ => enums::Realm::Main
    }
}
pub fn water(spot_id: SpotId) -> bool {
    match spot_id {
        SpotId::Amagi__Grid_31_19__East => true,
        SpotId::Amagi__Grid_31_19__West => true,
        SpotId::Amagi__Liru_Room__Bottom => true,
        SpotId::Amagi__Liru_Room__East_Passage => true,
        SpotId::Amagi__Liru_Room__Hidden_Enemies => true,
        SpotId::Amagi__Liru_Room__Hidden_Exit => true,
        SpotId::Amagi__Liru_Room__Platform_1_Left => true,
        SpotId::Amagi__Liru_Room__Platform_1_Right => true,
        SpotId::Amagi__Liru_Room__Platform_2_Left => true,
        SpotId::Amagi__Liru_Room__Platform_2_Right => true,
        SpotId::Amagi__Liru_Room__Platform_3_Left => true,
        SpotId::Amagi__Liru_Room__Platform_3_Right => true,
        SpotId::Amagi__Liru_Room__Platform_4_Left => true,
        SpotId::Amagi__Liru_Room__Platform_4_Right => true,
        SpotId::Amagi__Liru_Room__Shrine => true,
        SpotId::Amagi__Liru_Room__West_19 => true,
        SpotId::Amagi__Liru_Room__West_20 => true,
        SpotId::Amagi__Main_Area__Broken_Wall => true,
        SpotId::Amagi__Main_Area__Carving => false,
        SpotId::Amagi__Main_Area__Catwalk_Broken_Part => true,
        SpotId::Amagi__Main_Area__Catwalk_Center => true,
        SpotId::Amagi__Main_Area__Catwalk_East_Edge => true,
        SpotId::Amagi__Main_Area__Cliff => true,
        SpotId::Amagi__Main_Area__East_15 => false,
        SpotId::Amagi__Main_Area__East_19 => true,
        SpotId::Amagi__Main_Area__East_Ledge => true,
        SpotId::Amagi__Main_Area__Enemy_Side => true,
        SpotId::Amagi__Main_Area__Flat_Ruin => true,
        SpotId::Amagi__Main_Area__Half_Pillar => true,
        SpotId::Amagi__Main_Area__Platform_2 => true,
        SpotId::Amagi__Main_Area__Platform_3 => true,
        SpotId::Amagi__Main_Area__Save_Point => true,
        SpotId::Amagi__Main_Area__Secret_Outcropping => false,
        SpotId::Amagi__Main_Area__Secret_Waterfall => false,
        SpotId::Amagi__Main_Area__Shallow_End => true,
        SpotId::Amagi__Main_Area__Small_Cliff => true,
        SpotId::Amagi__Main_Area__Upper_Platform => true,
        SpotId::Amagi__Main_Area__Wall_Stuck_Spot => true,
        SpotId::Amagi__Main_Area__Waters_Edge => false,
        SpotId::Amagi__Main_Area__Way_Off_To_The_Side => false,
        SpotId::Amagi__Main_Area__West_15 => false,
        SpotId::Amagi__Main_Area__West_18 => true,
        SpotId::Amagi__Main_Area__West_19 => true,
        SpotId::Amagi__Main_Area__West_Mini_Hill => true,
        SpotId::Amagi__Main_Area__West_Shelf => true,
        SpotId::Amagi__Main_Area__West_Side => true,
        SpotId::Amagi__West_Lake__Cavern_Back_Teeth => true,
        SpotId::Amagi__West_Lake__Cavern_Chin => true,
        SpotId::Amagi__West_Lake__Cavern_Eye => true,
        SpotId::Amagi__West_Lake__Cavern_Front_Pillar => true,
        SpotId::Amagi__West_Lake__Cavern_Front_Teeth => true,
        SpotId::Amagi__West_Lake__Cavern_Jaw => true,
        SpotId::Amagi__West_Lake__Cavern_Lower_Trachea => true,
        SpotId::Amagi__West_Lake__Cavern_Middle_Pillar => true,
        SpotId::Amagi__West_Lake__Cavern_Neck => true,
        SpotId::Amagi__West_Lake__Cavern_Rear_Pillar => true,
        SpotId::Amagi__West_Lake__Cavern_Refill_Station => true,
        SpotId::Amagi__West_Lake__Cavern_Tear_Duct => true,
        SpotId::Amagi__West_Lake__East_15 => false,
        SpotId::Amagi__West_Lake__East_18 => true,
        SpotId::Amagi__West_Lake__East_19 => true,
        SpotId::Amagi__West_Lake__East_20 => true,
        SpotId::Amagi__West_Lake__East_Bank => true,
        SpotId::Amagi__West_Lake__East_Platform => true,
        SpotId::Amagi__West_Lake__East_Shore => false,
        SpotId::Amagi__West_Lake__Left_of_Enemy => true,
        SpotId::Amagi__West_Lake__Northeast_Platform => true,
        SpotId::Amagi__West_Lake__Northwest_Platform => true,
        SpotId::Amagi__West_Lake__Pillar => true,
        SpotId::Amagi__West_Lake__Pillar_Platform => true,
        SpotId::Amagi__West_Lake__Small_Hill => true,
        SpotId::Amagi__West_Lake__Some_Rock => true,
        SpotId::Amagi__West_Lake__Somewhat_Central_Platform => true,
        SpotId::Amagi__West_Lake__Stronghold_Ceiling_Left => true,
        SpotId::Amagi__West_Lake__Stronghold_Ceiling_Right => true,
        SpotId::Amagi__West_Lake__Stronghold_Front_Door => true,
        SpotId::Amagi__West_Lake__Stronghold_Front_Room => true,
        SpotId::Amagi__West_Lake__Stronghold_Item => true,
        SpotId::Amagi__West_Lake__Stronghold_Middle_Column => true,
        SpotId::Amagi__West_Lake__Stronghold_Rear_Wall => true,
        SpotId::Amagi__West_Lake__Stronghold_Top => true,
        SpotId::Amagi__West_Lake__Surface_Wall_Left => false,
        SpotId::Amagi__West_Lake__Surface_Wall_Right => false,
        SpotId::Amagi__West_Lake__Tentacle_Gap => true,
        SpotId::Amagi__West_Lake__Upper_Center_Platform => true,
        SpotId::Amagi__West_Lake__Water_Surface => false,
        SpotId::Amagi__West_Lake__West_15 => false,
        SpotId::Amagi__West_Lake__West_Bank => true,
        SpotId::Amagi__West_Lake__West_Cliff => true,
        SpotId::Amagi__West_Lake__West_Platform => true,
        SpotId::Amagi__West_Lake__West_Shore => false,
        SpotId::Interior__Cave_Behind_Waterfall__Bottom => false,
        SpotId::Interior__Cave_Behind_Waterfall__Middle => false,
        SpotId::Interior__Cave_Behind_Waterfall__Top => false,
        SpotId::Uhrum__East_Lake__West_28 => true,
        SpotId::Uhrum__Waterfalls__East_28 => true,
        SpotId::Uhrum__Waterfalls__East_Water_Surface => true,
        SpotId::Uhrum__Waterfalls__Island_Water_West => true,
        SpotId::Uhrum__Waterfalls__Water_Pillar => true,
        SpotId::Uhrum__Waterfalls__Water_Slope => true,
        SpotId::Uhrum__Waterfalls__West_Shallow_End => true,
        SpotId::Uhrum__Waterfalls__West_Water_Ledge => true,
        SpotId::Uhrum__Waterfalls__West_Water_Nook => true,
        SpotId::Uhrum__Waterfalls__West_Water_Surface => true,
        _ => false
    }
}
pub fn flipside(spot_id: SpotId) -> SpotId {
    match spot_id {
        SpotId::Giguna_Breach__Peak__Portal => SpotId::Giguna__Ruins_Top__Save_Point,
        SpotId::Giguna_Breach__Peak__Save_Point => SpotId::Giguna__Ruins_Top__Portal,
        SpotId::Giguna_Breach__Pink_Clouds__Corner => SpotId::Giguna__Clouds__Cache,
        SpotId::Giguna_Breach__Pink_Clouds__Normal_Entry => SpotId::Giguna__Clouds__Platform_Stop,
        SpotId::Giguna__Clouds__Cache => SpotId::Giguna_Breach__Pink_Clouds__Corner,
        SpotId::Giguna__Clouds__Platform_Stop => SpotId::Giguna_Breach__Pink_Clouds__Normal_Entry,
        SpotId::Giguna__Ruins_Top__Portal => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__Save_Point => SpotId::Giguna_Breach__Peak__Portal,
        SpotId::Irikar_Breach__Exit_Corridor__Portal_Stand => SpotId::Irikar__Abandoned_Room__Empty_Pedestal,
        SpotId::Irikar_Breach__Gauntlet__Save_Point => SpotId::Irikar__Hub__Portal_Stand,
        SpotId::Irikar_Breach__Save_Room__Save_Point => SpotId::Irikar__Sight_Room__Portal,
        SpotId::Irikar__Basement_Portal__Portal_Stand => SpotId::Irikar_Breach__Basement_Save__Save_Point,
        SpotId::Irikar__Hub__Portal_Stand => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Sight_Room__Portal => SpotId::Irikar_Breach__Save_Room__Save_Point,
        _ => SpotId::None
    }
}
pub fn portal_default(spot_id: SpotId) -> SpotId {
    match spot_id {
        SpotId::Giguna_Breach__Peak__Column => SpotId::Giguna__Ruins_Top__Save_Point,
        SpotId::Giguna_Breach__Peak__East_6 => SpotId::Giguna__Ruins_Top__Save_Point,
        SpotId::Giguna_Breach__Peak__East_Passage => SpotId::Giguna__Ruins_Top__Save_Point,
        SpotId::Giguna_Breach__Peak__Portal => SpotId::Giguna__Ruins_Top__Save_Point,
        SpotId::Giguna_Breach__Peak__Save_Point => SpotId::Giguna__Ruins_Top__Save_Point,
        SpotId::Giguna_Breach__Peak__Upper_East => SpotId::Giguna__Ruins_Top__Save_Point,
        SpotId::Giguna_Breach__Peak__Upper_West => SpotId::Giguna__Ruins_Top__Save_Point,
        SpotId::Giguna_Breach__Peak__West_7 => SpotId::Giguna__Ruins_Top__Save_Point,
        SpotId::Giguna__Ruins_Top__East_7 => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__East_Door => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__Entryway => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__Flask => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__Interior_Ledge => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__Portal => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__Portal_Left => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__Rooftop_East => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__Rooftop_Gutter => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__Rooftop_West => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__Save_Point => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__Small_Ledge => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__Switch => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__Turret_Balcony_East => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__Turret_Balcony_West => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__Upper_Tunnel => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__West_7 => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__West_Door => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Giguna__Ruins_Top__West_Pillar => SpotId::Giguna_Breach__Peak__Save_Point,
        SpotId::Irikar_Breach__Exit_Corridor__East => SpotId::Irikar__Abandoned_Room__Empty_Pedestal,
        SpotId::Irikar_Breach__Exit_Corridor__North_12 => SpotId::Irikar__Abandoned_Room__Empty_Pedestal,
        SpotId::Irikar_Breach__Exit_Corridor__North_13 => SpotId::Irikar__Abandoned_Room__Empty_Pedestal,
        SpotId::Irikar_Breach__Exit_Corridor__Passage => SpotId::Irikar__Abandoned_Room__Empty_Pedestal,
        SpotId::Irikar_Breach__Exit_Corridor__Pillar => SpotId::Irikar__Abandoned_Room__Empty_Pedestal,
        SpotId::Irikar_Breach__Exit_Corridor__Portal_Stand => SpotId::Irikar__Abandoned_Room__Empty_Pedestal,
        SpotId::Irikar_Breach__Exit_Corridor__West => SpotId::Irikar__Abandoned_Room__Empty_Pedestal,
        SpotId::Irikar_Breach__Exit_Corridor__West_of_Pillar => SpotId::Irikar__Abandoned_Room__Empty_Pedestal,
        SpotId::Irikar__Basement_Portal__Bottom_Middle => SpotId::Irikar_Breach__Basement_Save__Save_Point,
        SpotId::Irikar__Basement_Portal__East_27 => SpotId::Irikar_Breach__Basement_Save__Save_Point,
        SpotId::Irikar__Basement_Portal__East_28 => SpotId::Irikar_Breach__Basement_Save__Save_Point,
        SpotId::Irikar__Basement_Portal__East_Platform => SpotId::Irikar_Breach__Basement_Save__Save_Point,
        SpotId::Irikar__Basement_Portal__Ledge => SpotId::Irikar_Breach__Basement_Save__Save_Point,
        SpotId::Irikar__Basement_Portal__Middle_Platform => SpotId::Irikar_Breach__Basement_Save__Save_Point,
        SpotId::Irikar__Basement_Portal__Moving_Platform_End => SpotId::Irikar_Breach__Basement_Save__Save_Point,
        SpotId::Irikar__Basement_Portal__Moving_Platform_Start => SpotId::Irikar_Breach__Basement_Save__Save_Point,
        SpotId::Irikar__Basement_Portal__North => SpotId::Irikar_Breach__Basement_Save__Save_Point,
        SpotId::Irikar__Basement_Portal__Portal_Stand => SpotId::Irikar_Breach__Basement_Save__Save_Point,
        SpotId::Irikar__Basement_Portal__West_28 => SpotId::Irikar_Breach__Basement_Save__Save_Point,
        SpotId::Irikar__Basement_Portal__Westmost_Platform => SpotId::Irikar_Breach__Basement_Save__Save_Point,
        SpotId::Irikar__Hub__Bowl_Hole => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Bowl_Middle_Ledge => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Bowl_Middle_Platform_Center => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Bowl_Middle_Platform_West => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Bowl_Platform_3 => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Bowl_Top_Platform => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Dagger_Altar => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__East_Rim => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__NW_Bowl_Edifice => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__NW_Middle_Building_Corner => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__NW_Middle_Building_West_Entry => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__NW_Roof => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__NW_Staircase_Upper => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__North_Above_Portal => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Northeast_Above_Bowl => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Northwest => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Northwest_Above_Bowl => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Portal_Stand => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Royal_Storage_By_Wall => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Royal_Storage_South => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Royal_Storage_in_Wall => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Sat_Tower_Bottom => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Sat_Tower_East_24 => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Sat_Tower_Floating_Platform => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Sat_Tower_Long_Ledge => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Sat_Tower_Lower_Left_Ledge => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Sat_Tower_Lower_Right_Ledge => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Sat_Tower_Middle_Ledge => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Sat_Tower_Northeast => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Sat_Tower_Roof_East => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Sat_Tower_Roof_West => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Sat_Tower_Top_Ledge => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Sat_Tower_West_Valley => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__Save_Point => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Hub__West_Rim => SpotId::Irikar_Breach__Gauntlet__Save_Point,
        SpotId::Irikar__Sight_Room__Above_Room_East => SpotId::Irikar_Breach__Save_Room__Save_Point,
        SpotId::Irikar__Sight_Room__Above_Room_North => SpotId::Irikar_Breach__Save_Room__Save_Point,
        SpotId::Irikar__Sight_Room__Item_Pedestal => SpotId::Irikar_Breach__Save_Room__Save_Point,
        SpotId::Irikar__Sight_Room__Lower_Ledge => SpotId::Irikar_Breach__Save_Room__Save_Point,
        SpotId::Irikar__Sight_Room__Portal => SpotId::Irikar_Breach__Save_Room__Save_Point,
        SpotId::Irikar__Sight_Room__West_24 => SpotId::Irikar_Breach__Save_Room__Save_Point,
        _ => SpotId::None
    }
}
pub fn map_spot(spot_id: SpotId) -> SpotId {
    match spot_id {
        SpotId::Amagi__Main_Area__Enemy_Side => SpotId::Menu__Kiengir_Map__Amagi_Main_Area,
        SpotId::Amagi__Main_Area__Save_Point => SpotId::Menu__Kiengir_Map__Amagi_Main_Area,
        SpotId::Amagi__West_Lake__Stronghold_Ceiling_Left => SpotId::Menu__Kiengir_Map__Shockwave,
        SpotId::Amagi__West_Lake__Stronghold_Item => SpotId::Menu__Kiengir_Map__Shockwave,
        SpotId::Amagi__West_Lake__Stronghold_Middle_Column => SpotId::Menu__Kiengir_Map__Shockwave,
        SpotId::Amagi__West_Lake__Stronghold_Rear_Wall => SpotId::Menu__Kiengir_Map__Shockwave,
        SpotId::Amagi__West_Lake__Stronghold_Top => SpotId::Menu__Kiengir_Map__Shockwave,
        SpotId::Annuna__Center_Save__East => SpotId::Menu__Kiengir_Map__Annuna_Center_Save,
        SpotId::Annuna__Center_Save__Save_Point => SpotId::Menu__Kiengir_Map__Annuna_Center_Save,
        SpotId::Annuna__Center_Save__West_Catwalk => SpotId::Menu__Kiengir_Map__Annuna_Center_Save,
        SpotId::Annuna__Center_Save__West_Floor => SpotId::Menu__Kiengir_Map__Annuna_Center_Save,
        SpotId::Annuna__Factory_Entrance__East => SpotId::Menu__Kiengir_Map__Annuna_Factory_Entrance,
        SpotId::Annuna__Factory_Entrance__Save_Point => SpotId::Menu__Kiengir_Map__Annuna_Factory_Entrance,
        SpotId::Annuna__Factory_Entrance__West => SpotId::Menu__Kiengir_Map__Annuna_Factory_Entrance,
        SpotId::Annuna__Final_Save__East => SpotId::Menu__Kiengir_Map__Apocalypse,
        SpotId::Annuna__Final_Save__Lower_West => SpotId::Menu__Kiengir_Map__Apocalypse,
        SpotId::Annuna__Final_Save__Pillar => SpotId::Menu__Kiengir_Map__Apocalypse,
        SpotId::Annuna__Final_Save__Save_Point => SpotId::Menu__Kiengir_Map__Apocalypse,
        SpotId::Annuna__Final_Save__Upper_West => SpotId::Menu__Kiengir_Map__Apocalypse,
        SpotId::Ebih__Base_Camp__Save_Point => SpotId::Menu__Kiengir_Map__Ebih_Base_Camp,
        SpotId::Ebih__Drone_Room__Item => SpotId::Menu__Kiengir_Map__Remote_Drone,
        SpotId::Ebih__Drone_Room__Middle_Platform => SpotId::Menu__Kiengir_Map__Remote_Drone,
        SpotId::Ebih__Drone_Room__Pit_Left => SpotId::Menu__Kiengir_Map__Remote_Drone,
        SpotId::Ebih__Drone_Room__Portal => SpotId::Menu__Kiengir_Map__Remote_Drone,
        SpotId::Ebih__Drone_Room__West_6 => SpotId::Menu__Kiengir_Map__Remote_Drone,
        SpotId::Ebih__Ebih_West__Above_Chute => SpotId::Menu__Kiengir_Map__Ebih_West_Upper,
        SpotId::Ebih__Ebih_West__East_10 => SpotId::Menu__Kiengir_Map__Ebih_West_Mid,
        SpotId::Ebih__Ebih_West__East_7 => SpotId::Menu__Kiengir_Map__Ebih_West_Upper,
        SpotId::Ebih__Ebih_West__Lower_Platform => SpotId::Menu__Kiengir_Map__Ebih_West_Lower,
        SpotId::Ebih__Ebih_West__Lower_Save => SpotId::Menu__Kiengir_Map__Ebih_West_Lower,
        SpotId::Ebih__Ebih_West__Medium_High_Platform => SpotId::Menu__Kiengir_Map__Ebih_West_Upper,
        SpotId::Ebih__Ebih_West__Mid_Save => SpotId::Menu__Kiengir_Map__Ebih_West_Mid,
        SpotId::Ebih__Ebih_West__Upper_Save => SpotId::Menu__Kiengir_Map__Ebih_West_Upper,
        SpotId::Ebih__Ebih_West__West_13 => SpotId::Menu__Kiengir_Map__Ebih_West_Lower,
        SpotId::Ebih__Waterfall__Alcove => SpotId::Menu__Kiengir_Map__Bronze_Axe,
        SpotId::Ebih__Waterfall__Alcove_Left => SpotId::Menu__Kiengir_Map__Bronze_Axe,
        SpotId::Ebih__Waterfall__Under_Waterfall => SpotId::Menu__Kiengir_Map__Bronze_Axe,
        SpotId::Ebih__Waterfall__Waterfall_Center_Center => SpotId::Menu__Kiengir_Map__Bronze_Axe,
        SpotId::Ebih__Waterfall__Waterfall_Center_Left => SpotId::Menu__Kiengir_Map__Bronze_Axe,
        SpotId::Ebih__Waterfall__Waterfall_Left => SpotId::Menu__Kiengir_Map__Bronze_Axe,
        SpotId::Giguna_Breach__Peak__Save_Point => SpotId::Menu__Breach_Map__GB_Peak,
        SpotId::Giguna_Breach__SW_Save__East_12 => SpotId::Menu__Breach_Map__GB_SW_Save,
        SpotId::Giguna_Breach__SW_Save__Lower_Platform => SpotId::Menu__Breach_Map__GB_SW_Save,
        SpotId::Giguna_Breach__SW_Save__Save_Point => SpotId::Menu__Breach_Map__GB_SW_Save,
        SpotId::Giguna__Giguna_Base__Save_Point => SpotId::Menu__Kiengir_Map__Giguna_Base,
        SpotId::Giguna__Giguna_Base__Staircase_Bottom => SpotId::Menu__Kiengir_Map__Giguna_Base,
        SpotId::Giguna__Giguna_Base__Table => SpotId::Menu__Kiengir_Map__Giguna_Base,
        SpotId::Giguna__Giguna_Base__West_16 => SpotId::Menu__Kiengir_Map__Giguna_Base,
        SpotId::Giguna__Giguna_Northeast__Gate_Left => SpotId::Menu__Kiengir_Map__Giguna_Northeast,
        SpotId::Giguna__Giguna_Northeast__Gate_Vent => SpotId::Menu__Kiengir_Map__Giguna_Northeast,
        SpotId::Giguna__Giguna_Northeast__Save_Point => SpotId::Menu__Kiengir_Map__Giguna_Northeast,
        SpotId::Giguna__Giguna_Northeast__Step => SpotId::Menu__Kiengir_Map__Giguna_Northeast,
        SpotId::Giguna__Giguna_Northeast__West_10 => SpotId::Menu__Kiengir_Map__Giguna_Northeast,
        SpotId::Giguna__Ruins_Top__Save_Point => SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top,
        SpotId::Giguna__Ruins_Top__Switch => SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top,
        SpotId::Giguna__Ruins_Top__Turret_Balcony_East => SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top,
        SpotId::Giguna__Ruins_Top__Turret_Balcony_West => SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top,
        SpotId::Giguna__Ruins_Top__West_Pillar => SpotId::Menu__Kiengir_Map__Giguna_Ruins_Top,
        SpotId::Giguna__Ruins_West__East_9 => SpotId::Menu__Kiengir_Map__Giguna_Ruins_West,
        SpotId::Giguna__Ruins_West__Nook => SpotId::Menu__Kiengir_Map__Giguna_Ruins_West,
        SpotId::Giguna__Ruins_West__Platform => SpotId::Menu__Kiengir_Map__Giguna_Ruins_West,
        SpotId::Giguna__Ruins_West__Save_Point => SpotId::Menu__Kiengir_Map__Giguna_Ruins_West,
        SpotId::Glacier__Revival__Save_Point => SpotId::Menu__Kiengir_Map__Glacier_Revival,
        SpotId::Glacier__Revival__West_8 => SpotId::Menu__Kiengir_Map__Glacier_Revival,
        SpotId::Irikar_Breach__Gauntlet__East_22 => SpotId::Menu__Breach_Map__IB_Gauntlet,
        SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Entry => SpotId::Menu__Breach_Map__IB_Gauntlet,
        SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Right => SpotId::Menu__Breach_Map__IB_Gauntlet,
        SpotId::Irikar_Breach__Gauntlet__Save_Point => SpotId::Menu__Breach_Map__IB_Gauntlet,
        SpotId::Irikar_Breach__Save_Room__Save_Point => SpotId::Menu__Breach_Map__IB_Save_Room,
        SpotId::Irikar_Breach__Save_Room__Upper_Area => SpotId::Menu__Breach_Map__IB_Save_Room,
        SpotId::Irikar_Breach__Save_Room__West => SpotId::Menu__Breach_Map__IB_Save_Room,
        SpotId::Irikar__Hub__Bowl_Hole => SpotId::Menu__Kiengir_Map__Irikar_Hub,
        SpotId::Irikar__Hub__Bowl_Middle_Platform_Center => SpotId::Menu__Kiengir_Map__Irikar_Hub,
        SpotId::Irikar__Hub__Bowl_Middle_Platform_West => SpotId::Menu__Kiengir_Map__Irikar_Hub,
        SpotId::Irikar__Hub__Bowl_Platform_3 => SpotId::Menu__Kiengir_Map__Irikar_Hub,
        SpotId::Irikar__Hub__Save_Point => SpotId::Menu__Kiengir_Map__Irikar_Hub,
        SpotId::Irikar__Sight_Room__Item_Pedestal => SpotId::Menu__Kiengir_Map__Breach_Sight,
        SpotId::Irikar__Sight_Room__Portal => SpotId::Menu__Kiengir_Map__Breach_Sight,
        SpotId::Uhrum__Annuna_Corridor__Block_West => SpotId::Menu__Kiengir_Map__Uhrum_East,
        SpotId::Uhrum__Annuna_Corridor__Pedestal => SpotId::Menu__Kiengir_Map__Anuman,
        SpotId::Uhrum__Annuna_Corridor__Save_Point => SpotId::Menu__Kiengir_Map__Uhrum_East,
        SpotId::Uhrum__Annuna_Corridor__Upper_Trees => SpotId::Menu__Kiengir_Map__Anuman,
        SpotId::Uhrum__Annuna_Corridor__West_26 => SpotId::Menu__Kiengir_Map__Uhrum_East,
        SpotId::Uhrum__Save_Room__East => SpotId::Menu__Kiengir_Map__Uhrum_Center,
        SpotId::Uhrum__Save_Room__Save_Point => SpotId::Menu__Kiengir_Map__Uhrum_Center,
        SpotId::Uhrum__Save_Room__West => SpotId::Menu__Kiengir_Map__Uhrum_Center,
        SpotId::Uhrum__West_Entrance__Sand => SpotId::Menu__Kiengir_Map__Uhrum_West,
        SpotId::Uhrum__West_Entrance__Save_Point => SpotId::Menu__Kiengir_Map__Uhrum_West,
        SpotId::Uhrum__West_Entrance__Southeast_Tree => SpotId::Menu__Kiengir_Map__Uhrum_West,
        _ => SpotId::None
    }
}
}

pub mod flags {
use bitflags::bitflags;
use serde::{self, Serialize, Deserialize};

bitflags!{
    #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
    pub struct ContextBits1 : u64 {
        const MAP__AMAGI__MAIN_AREA__SAVE = 0x1;
        const MAP__AMAGI__WEST_LAKE__URN = 0x2;
        const MAP__ANNUNA__MIRROR_MATCH__SAVE = 0x4;
        const MAP__ANNUNA__WEST_BRIDGE__SAVE = 0x8;
        const MAP__ANNUNA__VERTICAL_ROOM__SAVE = 0x10;
        const MAP__ANNUNA__FACTORY_ENTRANCE__SAVE = 0x20;
        const MAP__ANNUNA__CENTER_SAVE__SAVE = 0x40;
        const MAP__ANNUNA__FINAL_SAVE__SAVE = 0x80;
        const MAP__EBIH__BASE_CAMP__SAVE = 0x100;
        const MAP__EBIH__WATERFALL__AXE = 0x200;
        const MAP__EBIH__EBIH_WEST__MID_SAVE = 0x400;
        const MAP__EBIH__EBIH_WEST__UPPER_SAVE = 0x800;
        const MAP__EBIH__EBIH_WEST__LOWER_SAVE = 0x1000;
        const MAP__EBIH__DRONE_ROOM__URN = 0x2000;
        const MAP__GIGUNA_BREACH__PEAK__SAVE = 0x4000;
        const MAP__GIGUNA_BREACH__SW_SAVE__SAVE = 0x8000;
        const MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE = 0x10000;
        const MAP__GIGUNA__GIGUNA_BASE__SAVE = 0x20000;
        const MAP__GIGUNA__RUINS_WEST__SAVE = 0x40000;
        const MAP__GIGUNA__RUINS_TOP__SAVE = 0x80000;
        const MAP__GLACIER__REVIVAL__SAVE = 0x100000;
        const MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE = 0x200000;
        const MAP__IRIKAR_BREACH__GAUNTLET__SAVE = 0x400000;
        const MAP__IRIKAR_BREACH__BASEMENT_SAVE__SAVE = 0x800000;
        const MAP__IRIKAR__HUB__SAVE = 0x1000000;
        const MAP__IRIKAR__SIGHT_ROOM__URN = 0x2000000;
        const MAP__UHRUM__WEST_ENTRANCE__SAVE = 0x4000000;
        const MAP__UHRUM__SAVE_ROOM__SAVE = 0x8000000;
        const MAP__UHRUM__ANNUNA_CORRIDOR__SAVE = 0x10000000;
        const MAP__UHRUM__ANNUNA_CORRIDOR__URN = 0x20000000;
        const AMAGI__MAIN_AREA__CTX__COMBO = 0x40000000;
        const ANNUNA__WEST_BRIDGE__CTX__DOORS_OPENED = 0x80000000;
        const ANNUNA__EAST_BRIDGE__CTX__COMBO = 0x100000000;
        const ANNUNA__WEST_CLIMB__CTX__DOOR_OPENED = 0x200000000;
        const EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED = 0x400000000;
        const EBIH__GRID_25_10_12__CTX__DOOR_OPEN = 0x800000000;
        const EBIH__WATERFALL__CTX__WEST_DOOR_OPEN = 0x1000000000;
        const EBIH__EBIH_WEST__CTX__DOOR_OPEN = 0x2000000000;
        const EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED = 0x4000000000;
        const EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED = 0x8000000000;
        const EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED = 0x10000000000;
        const EBIH__VERTICAL_INTERCHANGE__CTX__DOOR_OPEN = 0x20000000000;
        const GIGUNA_BREACH__SW_SAVE__CTX__DOOR_OPENED = 0x40000000000;
        const GIGUNA__GIGUNA_NORTHEAST__CTX__DOOR_OPENED = 0x80000000000;
        const GIGUNA__CARNELIAN__CTX__DOOR_OPENED = 0x100000000000;
        const GIGUNA__CARNELIAN__CTX__UPPER_SUSAR = 0x200000000000;
        const GIGUNA__CARNELIAN__CTX__LOWER_SUSAR = 0x400000000000;
        const GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR = 0x800000000000;
        const GIGUNA__GIGUNA_BASE__CTX__DOOR_OPEN = 0x1000000000000;
        const GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED = 0x2000000000000;
        const GIGUNA__RUINS_TOP__CTX__DOORS_OPEN = 0x4000000000000;
        const GIGUNA__CLOUDS__CTX__PLATFORM_AND_PORTAL = 0x8000000000000;
        const GIGUNA__EAST_CAVERNS__CTX__DOOR_OPENED = 0x10000000000000;
        const GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED = 0x20000000000000;
        const GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR = 0x40000000000000;
        const GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR = 0x80000000000000;
        const GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR = 0x100000000000000;
        const GIGUNA__GATEWAY__CTX__DOOR_OPENED = 0x200000000000000;
        const IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED = 0x400000000000000;
        const BOOMERANG_STEERING = 0x800000000000000;
        const MAJOR_GLITCHES = 0x1000000000000000;
        const MINOR_GLITCHES = 0x2000000000000000;
        const AMAGI_DRAGON_EYE_PASSAGE = 0x4000000000000000;
        const AMAGI_STRONGHOLD_BOULDER_1 = 0x8000000000000000;
    }
}
bitflags!{
    #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
    pub struct ContextBits2 : u64 {
        const AMAGI_STRONGHOLD_BOULDER_2 = 0x1;
        const AMAGI_STRONGHOLD_WALL_1 = 0x2;
        const AMAGI_STRONGHOLD_WALL_2 = 0x4;
        const AMAGI_WEST_LAKE_SURFACE_WALL = 0x8;
        const AMASHILAMA = 0x10;
        const ANNUNA_EAST_BRIDGE_GATE = 0x20;
        const ANNUNA_MIRROR_MATCH_SWITCH = 0x40;
        const ANUMAN = 0x80;
        const ANUNNA_VERTICAL_ROOM_GATE = 0x100;
        const APOCALYPSE_BOMB = 0x200;
        const BIG_FLASK = 0x400;
        const BOOMERANG = 0x800;
        const BREACH_ATTRACTOR = 0x1000;
        const BREACH_SIGHT = 0x2000;
        const BRONZE_AXE = 0x4000;
        const BUILDING_OF_THE_SCHOOL = 0x8000;
        const COMMEMORATIVE_SPEECH = 0x10000;
        const COMPANIES_LAYOFF = 0x20000;
        const COMPASS = 0x40000;
        const DANGEROUS_IDEAS = 0x80000;
        const DEAR_ERNEST = 0x100000;
        const DEFEAT_INDRA = 0x200000;
        const DEFEAT_MUS_A_M20 = 0x400000;
        const DESTRUCTION_POGROM = 0x800000;
        const DRONE_HOVER = 0x1000000;
        const DRONE_MELEE_DAMAGE = 0x2000000;
        const DRONE_MELEE_DAMAGE_2 = 0x4000000;
        const DRONE_MELEE_SPEED = 0x8000000;
        const DRONE_MELEE_SPEED_2 = 0x10000000;
        const EBIH_ALU = 0x20000000;
        const EBIH_INTERCHANGE_BLOCK = 0x40000000;
        const EBIH_INTERCHANGE_GATE = 0x80000000;
        const EBIH_WASTELAND_DOOR = 0x100000000;
        const EBIH_WASTELAND_PASSAGE_H = 0x200000000;
        const EBIH_WATERFALL_BLOCK_LEFT = 0x400000000;
        const EBIH_WATERFALL_BLOCK_RIGHT = 0x800000000;
        const EBIH_WATERFALL_WALL = 0x1000000000;
        const EBIH_WEST_BLOCK = 0x2000000000;
        const ESCAPE = 0x4000000000;
        const EXIT_BREACH = 0x8000000000;
        const EYE_RING = 0x10000000000;
        const FAMILY_TRAGEDY = 0x20000000000;
        const FAST_TRAVEL = 0x40000000000;
        const GIGUNA_BOULDER = 0x80000000000;
        const GIGUNA_DUAL_PATH_SWITCH = 0x100000000000;
        const GIGUNA_DUAL_PATH_WALL = 0x200000000000;
        const GIGUNA_GATEWAY_BLOCK = 0x400000000000;
        const GIGUNA_GATEWAY_GATE = 0x800000000000;
        const GIGUNA_GUBI = 0x1000000000000;
        const GIGUNA_NORTHEAST_GATE = 0x2000000000000;
        const HEALTH_NODE = 0x4000000000000;
        const HEALTH_UPGRADE = 0x8000000000000;
        const HEALTH_UPGRADE_2 = 0x10000000000000;
        const HEALTH_UPGRADE_3 = 0x20000000000000;
        const HEALTH_UPGRADE_4 = 0x40000000000000;
        const HERETICS_TABLET = 0x80000000000000;
        const HOVER = 0x100000000000000;
        const ICE_AXE = 0x200000000000000;
        const INFECT = 0x400000000000000;
        const INFECT_L1 = 0x800000000000000;
        const INFECT_L2 = 0x1000000000000000;
        const INFECT_L3 = 0x2000000000000000;
        const INFECTION_RANGE = 0x4000000000000000;
        const INFECTION_RANGE_2 = 0x8000000000000000;
    }
}
bitflags!{
    #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
    pub struct ContextBits3 : u64 {
        const INFECTION_RANGE_3 = 0x1;
        const INFECTION_SPEED = 0x2;
        const IRIKAR_GUDAM = 0x4;
        const IRIKAR_ROYAL_STORAGE_WALL = 0x8;
        const LAMENT_FOR_FOOLS = 0x10;
        const LEDGE_GRAB = 0x20;
        const LETTER_FROM_TRACE = 0x40;
        const MELEE_DAMAGE = 0x80;
        const MELEE_DAMAGE_2 = 0x100;
        const MELEE_SPEED = 0x200;
        const MELEE_SPEED_2 = 0x400;
        const MIST_UPGRADE = 0x800;
        const NANITE_MIST = 0x1000;
        const NANO_LATTICE_2 = 0x2000;
        const NANO_POINTS = 0x4000;
        const NANO_POINTS_2 = 0x8000;
        const PLAGUE_OF_THOUGHTS = 0x10000;
        const POWER_MATRIX = 0x20000;
        const RANGED_DAMAGE = 0x40000;
        const RANGED_DAMAGE_2 = 0x80000;
        const RANGED_SPEED = 0x100000;
        const RANGED_SPEED_2 = 0x200000;
        const RECORD_LOSSES = 0x400000;
        const REMOTE_DRONE = 0x800000;
        const RESEARCHERS_MISSING = 0x1000000;
        const SEPARATION = 0x2000000;
        const SHOCKWAVE = 0x4000000;
        const SLINGSHOT_CHARGE = 0x8000000;
        const SLINGSHOT_HOOK = 0x10000000;
        const SLINGSHOT_WEAPON = 0x20000000;
        const SNIPER_VALLEY_ROCK_1 = 0x40000000;
        const SNIPER_VALLEY_ROCK_2 = 0x80000000;
        const STATION_POWER = 0x100000000;
        const STORM_BOMB = 0x200000000;
        const SUSPENSION_BRIDGE = 0x400000000;
        const SWITCH_36_11 = 0x800000000;
        const SWITCH_40_12 = 0x1000000000;
        const TERMINAL_BREAKTHROUGH_1 = 0x2000000000;
        const TERMINAL_BREAKTHROUGH_2 = 0x4000000000;
        const THE_IDEAL_KIENGIR = 0x8000000000;
        const UHRUM_ANNUNA_CORRIDOR_BLOCK = 0x10000000000;
        const UHRUM_WATERFALL_WALL = 0x20000000000;
        const UHRUM_WATERFALLS_BLOCK = 0x40000000000;
        const UHRUM_WEST_ENTRANCE_GATE = 0x80000000000;
        const UHRUM_WEST_ENTRANCE_LOWER_WALL = 0x100000000000;
        const UHRUM_WEST_ENTRANCE_UPPER_WALL = 0x200000000000;
        const UNDER_SIEGE = 0x400000000000;
        const UNDERWATER_MOVEMENT = 0x800000000000;
        const WALL_CLIMB = 0x1000000000000;
        const WATER_MOVEMENT = 0x2000000000000;
        const VISITED_AMAGI__LIRU_ROOM__SHRINE__ITEM = 0x4000000000000;
        const VISITED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM = 0x8000000000000;
        const VISITED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM = 0x10000000000000;
        const VISITED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD = 0x20000000000000;
        const VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL = 0x40000000000000;
        const VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20 = 0x80000000000000;
        const VISITED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK = 0x100000000000000;
        const VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER = 0x200000000000000;
        const VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER = 0x400000000000000;
        const VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL = 0x800000000000000;
        const VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL = 0x1000000000000000;
        const VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL = 0x2000000000000000;
        const VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM = 0x4000000000000000;
        const VISITED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL = 0x8000000000000000;
        const ALL_VISIT_FLAGS = 0xfffc000000000000;
    }
}
bitflags!{
    #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
    pub struct ContextBits4 : u64 {
        const VISITED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL = 0x1;
        const VISITED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN = 0x2;
        const VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL = 0x4;
        const VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL = 0x8;
        const VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT = 0x10;
        const VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP = 0x20;
        const VISITED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW = 0x40;
        const VISITED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH = 0x80;
        const VISITED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET = 0x100;
        const VISITED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM = 0x200;
        const VISITED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH = 0x400;
        const VISITED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK = 0x800;
        const VISITED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK = 0x1000;
        const VISITED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM = 0x2000;
        const VISITED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT = 0x4000;
        const VISITED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK = 0x8000;
        const VISITED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP = 0x10000;
        const VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM = 0x20000;
        const VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL = 0x40000;
        const VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL = 0x80000;
        const VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL = 0x100000;
        const VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL = 0x200000;
        const VISITED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM = 0x400000;
        const VISITED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL = 0x800000;
        const VISITED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET = 0x1000000;
        const VISITED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM = 0x2000000;
        const VISITED_ANNUNA__WEST_CLIMB__CACHE__ITEM = 0x4000000;
        const VISITED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE = 0x8000000;
        const VISITED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP = 0x10000000;
        const VISITED_ANTARCTICA__SHED__INTERIOR__SHELF = 0x20000000;
        const VISITED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE = 0x40000000;
        const VISITED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM = 0x80000000;
        const VISITED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD = 0x100000000;
        const VISITED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU = 0x200000000;
        const VISITED_EBIH__BOSS_ROOM__BOSS__HACK_ALU = 0x400000000;
        const VISITED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM = 0x800000000;
        const VISITED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT = 0x1000000000;
        const VISITED_EBIH__DRONE_ROOM__ITEM__URN = 0x2000000000;
        const VISITED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP = 0x4000000000;
        const VISITED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL = 0x8000000000;
        const VISITED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB = 0x10000000000;
        const VISITED_EBIH__EBIH_EAST__CORNER__URN = 0x20000000000;
        const VISITED_EBIH__EBIH_EAST__DISPENSER__VEND = 0x40000000000;
        const VISITED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE = 0x80000000000;
        const VISITED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN = 0x100000000000;
        const VISITED_EBIH__EBIH_WEST__ALCOVE__TABLET = 0x200000000000;
        const VISITED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK = 0x400000000000;
        const VISITED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK = 0x800000000000;
        const VISITED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH = 0x1000000000000;
        const VISITED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH = 0x2000000000000;
        const VISITED_EBIH__GRID_25_2_6__PIT__ITEM = 0x4000000000000;
        const VISITED_EBIH__GRID_26_10_11__LEDGE__NOTE = 0x8000000000000;
        const VISITED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH = 0x10000000000000;
        const VISITED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT = 0x20000000000000;
        const VISITED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT = 0x40000000000000;
        const VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT = 0x80000000000000;
        const VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT = 0x100000000000000;
        const VISITED_EBIH__WATERFALL__ALCOVE__PEDESTAL = 0x200000000000000;
        const VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL = 0x400000000000000;
        const VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL = 0x800000000000000;
        const VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL = 0x1000000000000000;
        const VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL = 0x2000000000000000;
        const VISITED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS = 0x4000000000000000;
        const VISITED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK = 0x8000000000000000;
        const ALL_VISIT_FLAGS = 0xffffffffffffffff;
    }
}
bitflags!{
    #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
    pub struct ContextBits5 : u64 {
        const VISITED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH = 0x1;
        const VISITED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN = 0x2;
        const VISITED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET = 0x4;
        const VISITED_GIGUNA__CARNELIAN__VAULT__ITEM = 0x8;
        const VISITED_GIGUNA__CLOUDS__CACHE__ITEM = 0x10;
        const VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL = 0x20;
        const VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL = 0x40;
        const VISITED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH = 0x80;
        const VISITED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH = 0x100;
        const VISITED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH = 0x200;
        const VISITED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH = 0x400;
        const VISITED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH = 0x800;
        const VISITED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK = 0x1000;
        const VISITED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM = 0x2000;
        const VISITED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE = 0x4000;
        const VISITED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE = 0x8000;
        const VISITED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH = 0x10000;
        const VISITED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM = 0x20000;
        const VISITED_GIGUNA__GIGUNA_BASE__RUIN__ITEM = 0x40000;
        const VISITED_GIGUNA__GIGUNA_BASE__TABLE__NEWS = 0x80000;
        const VISITED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK = 0x100000;
        const VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE = 0x200000;
        const VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON = 0x400000;
        const VISITED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM = 0x800000;
        const VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD = 0x1000000;
        const VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI = 0x2000000;
        const VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI = 0x4000000;
        const VISITED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE = 0x8000000;
        const VISITED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET = 0x10000000;
        const VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST = 0x20000000;
        const VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER = 0x40000000;
        const VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST = 0x80000000;
        const VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER = 0x100000000;
        const VISITED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET = 0x200000000;
        const VISITED_GIGUNA__LAMASSU__DEPOSIT__FLASK = 0x400000000;
        const VISITED_GIGUNA__RUINS_CENTER__TABLET__ITEM = 0x800000000;
        const VISITED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM = 0x1000000000;
        const VISITED_GIGUNA__RUINS_TOP__FLASK__FLASK = 0x2000000000;
        const VISITED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK = 0x4000000000;
        const VISITED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH = 0x8000000000;
        const VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY = 0x10000000000;
        const VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE = 0x20000000000;
        const VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY = 0x40000000000;
        const VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE = 0x80000000000;
        const VISITED_GIGUNA__WEST_CAVERNS__BUSH__ITEM = 0x100000000000;
        const VISITED_GIGUNA__WEST_CAVERNS__CACHE__ITEM = 0x200000000000;
        const VISITED_GIGUNA__WEST_TOWER__TOP__TABLET = 0x400000000000;
        const VISITED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE = 0x800000000000;
        const VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM = 0x1000000000000;
        const VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH = 0x2000000000000;
        const VISITED_GLACIER__COMPASS_ROOM__CENTER__TABLE = 0x4000000000000;
        const VISITED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB = 0x8000000000000;
        const VISITED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM = 0x10000000000000;
        const VISITED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN = 0x20000000000000;
        const VISITED_GLACIER__VERTICAL_ROOM__PEAK__FLASK = 0x40000000000000;
        const VISITED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH = 0x80000000000000;
        const VISITED_INTERIOR__BUILDING_INTERIOR__CORNER__URN = 0x100000000000000;
        const VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN = 0x200000000000000;
        const VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP = 0x400000000000000;
        const VISITED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE = 0x800000000000000;
        const VISITED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH = 0x1000000000000000;
        const VISITED_INTERIOR__GARAGE__BOXES__UNDER_BOXES = 0x2000000000000000;
        const VISITED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE = 0x4000000000000000;
        const VISITED_INTERIOR__TENT_INTERIOR__DESK__NOTE = 0x8000000000000000;
        const ALL_VISIT_FLAGS = 0xffffffffffffffff;
    }
}
bitflags!{
    #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
    pub struct ContextBits6 : u64 {
        const VISITED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM = 0x1;
        const VISITED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM = 0x2;
        const VISITED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM = 0x4;
        const VISITED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE = 0x8;
        const VISITED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP = 0x10;
        const VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD = 0x20;
        const VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM = 0x40;
        const VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM = 0x80;
        const VISITED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH = 0x100;
        const VISITED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET = 0x200;
        const VISITED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON = 0x400;
        const VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL = 0x800;
        const VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL = 0x1000;
        const VISITED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM = 0x2000;
        const VISITED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET = 0x4000;
        const VISITED_IRIKAR__LAMASSU__DESK__ITEM = 0x8000;
        const VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN = 0x10000;
        const VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP = 0x20000;
        const VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL = 0x40000;
        const VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1 = 0x80000;
        const VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2 = 0x100000;
        const VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3 = 0x200000;
        const VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1 = 0x400000;
        const VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2 = 0x800000;
        const VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3 = 0x1000000;
        const VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1 = 0x2000000;
        const VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2 = 0x4000000;
        const VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3 = 0x8000000;
        const VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1 = 0x10000000;
        const VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2 = 0x20000000;
        const VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3 = 0x40000000;
        const VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1 = 0x80000000;
        const VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2 = 0x100000000;
        const VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3 = 0x200000000;
        const VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1 = 0x400000000;
        const VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2 = 0x800000000;
        const VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3 = 0x1000000000;
        const VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1 = 0x2000000000;
        const VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2 = 0x4000000000;
        const VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3 = 0x8000000000;
        const VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1 = 0x10000000000;
        const VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2 = 0x20000000000;
        const VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3 = 0x40000000000;
        const VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1 = 0x80000000000;
        const VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2 = 0x100000000000;
        const VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1 = 0x200000000000;
        const VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2 = 0x400000000000;
        const VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3 = 0x800000000000;
        const VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1 = 0x1000000000000;
        const VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2 = 0x2000000000000;
        const VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3 = 0x4000000000000;
        const VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4 = 0x8000000000000;
        const VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5 = 0x10000000000000;
        const VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE = 0x20000000000000;
        const VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK = 0x40000000000000;
        const VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK = 0x80000000000000;
        const VISITED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET = 0x100000000000000;
        const VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN = 0x200000000000000;
        const VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP = 0x400000000000000;
        const VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL = 0x800000000000000;
        const VISITED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM = 0x1000000000000000;
        const VISITED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN = 0x2000000000000000;
        const VISITED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX = 0x4000000000000000;
        const VISITED_UHRUM__SIEGE_CORRIDOR__POND__ITEM = 0x8000000000000000;
        const ALL_VISIT_FLAGS = 0xffffffffffffffff;
    }
}
bitflags!{
    #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
    pub struct ContextBits7 : u64 {
        const VISITED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN = 0x1;
        const VISITED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE = 0x2;
        const VISITED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK = 0x4;
        const VISITED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL = 0x8;
        const VISITED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL = 0x10;
        const VISITED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL = 0x20;
        const VISITED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL = 0x40;
        const VISITED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL = 0x80;
        const VISITED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL = 0x100;
        const VISITED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK = 0x200;
        const VISITED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK = 0x400;
        const VISITED_UHRUM__WATERFALLS__EAST_26__BLOCK = 0x800;
        const VISITED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET = 0x1000;
        const VISITED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE = 0x2000;
        const VISITED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM = 0x4000;
        const VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL = 0x8000;
        const VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL = 0x10000;
        const VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL = 0x20000;
        const VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL = 0x40000;
        const VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL = 0x80000;
        const VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL = 0x100000;
        const VISITED_UHRUM__WEST_ENTRANCE__SAND__REFILL = 0x200000;
        const VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL = 0x400000;
        const VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL = 0x800000;
        const VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL = 0x1000000;
        const VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL = 0x2000000;
        const SKIPPED_AMAGI__LIRU_ROOM__SHRINE__ITEM = 0x4000000;
        const SKIPPED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM = 0x8000000;
        const SKIPPED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM = 0x10000000;
        const SKIPPED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD = 0x20000000;
        const SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL = 0x40000000;
        const SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20 = 0x80000000;
        const SKIPPED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK = 0x100000000;
        const SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER = 0x200000000;
        const SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER = 0x400000000;
        const SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL = 0x800000000;
        const SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL = 0x1000000000;
        const SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL = 0x2000000000;
        const SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM = 0x4000000000;
        const SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL = 0x8000000000;
        const SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL = 0x10000000000;
        const SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN = 0x20000000000;
        const SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL = 0x40000000000;
        const SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL = 0x80000000000;
        const SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT = 0x100000000000;
        const SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP = 0x200000000000;
        const SKIPPED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW = 0x400000000000;
        const SKIPPED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH = 0x800000000000;
        const SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET = 0x1000000000000;
        const SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM = 0x2000000000000;
        const SKIPPED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH = 0x4000000000000;
        const SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK = 0x8000000000000;
        const SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK = 0x10000000000000;
        const SKIPPED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM = 0x20000000000000;
        const SKIPPED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT = 0x40000000000000;
        const SKIPPED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK = 0x80000000000000;
        const SKIPPED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP = 0x100000000000000;
        const SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM = 0x200000000000000;
        const SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL = 0x400000000000000;
        const SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL = 0x800000000000000;
        const SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL = 0x1000000000000000;
        const SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL = 0x2000000000000000;
        const SKIPPED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM = 0x4000000000000000;
        const SKIPPED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL = 0x8000000000000000;
        const ALL_VISIT_FLAGS = 0x3ffffff;
        const ALL_SKIP_FLAGS = 0xfffffffffc000000;
    }
}
bitflags!{
    #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
    pub struct ContextBits8 : u64 {
        const SKIPPED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET = 0x1;
        const SKIPPED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM = 0x2;
        const SKIPPED_ANNUNA__WEST_CLIMB__CACHE__ITEM = 0x4;
        const SKIPPED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE = 0x8;
        const SKIPPED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP = 0x10;
        const SKIPPED_ANTARCTICA__SHED__INTERIOR__SHELF = 0x20;
        const SKIPPED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE = 0x40;
        const SKIPPED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM = 0x80;
        const SKIPPED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD = 0x100;
        const SKIPPED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU = 0x200;
        const SKIPPED_EBIH__BOSS_ROOM__BOSS__HACK_ALU = 0x400;
        const SKIPPED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM = 0x800;
        const SKIPPED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT = 0x1000;
        const SKIPPED_EBIH__DRONE_ROOM__ITEM__URN = 0x2000;
        const SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP = 0x4000;
        const SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL = 0x8000;
        const SKIPPED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB = 0x10000;
        const SKIPPED_EBIH__EBIH_EAST__CORNER__URN = 0x20000;
        const SKIPPED_EBIH__EBIH_EAST__DISPENSER__VEND = 0x40000;
        const SKIPPED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE = 0x80000;
        const SKIPPED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN = 0x100000;
        const SKIPPED_EBIH__EBIH_WEST__ALCOVE__TABLET = 0x200000;
        const SKIPPED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK = 0x400000;
        const SKIPPED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK = 0x800000;
        const SKIPPED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH = 0x1000000;
        const SKIPPED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH = 0x2000000;
        const SKIPPED_EBIH__GRID_25_2_6__PIT__ITEM = 0x4000000;
        const SKIPPED_EBIH__GRID_26_10_11__LEDGE__NOTE = 0x8000000;
        const SKIPPED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH = 0x10000000;
        const SKIPPED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT = 0x20000000;
        const SKIPPED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT = 0x40000000;
        const SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT = 0x80000000;
        const SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT = 0x100000000;
        const SKIPPED_EBIH__WATERFALL__ALCOVE__PEDESTAL = 0x200000000;
        const SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL = 0x400000000;
        const SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL = 0x800000000;
        const SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL = 0x1000000000;
        const SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL = 0x2000000000;
        const SKIPPED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS = 0x4000000000;
        const SKIPPED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK = 0x8000000000;
        const SKIPPED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH = 0x10000000000;
        const SKIPPED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN = 0x20000000000;
        const SKIPPED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET = 0x40000000000;
        const SKIPPED_GIGUNA__CARNELIAN__VAULT__ITEM = 0x80000000000;
        const SKIPPED_GIGUNA__CLOUDS__CACHE__ITEM = 0x100000000000;
        const SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL = 0x200000000000;
        const SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL = 0x400000000000;
        const SKIPPED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH = 0x800000000000;
        const SKIPPED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH = 0x1000000000000;
        const SKIPPED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH = 0x2000000000000;
        const SKIPPED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH = 0x4000000000000;
        const SKIPPED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH = 0x8000000000000;
        const SKIPPED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK = 0x10000000000000;
        const SKIPPED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM = 0x20000000000000;
        const SKIPPED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE = 0x40000000000000;
        const SKIPPED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE = 0x80000000000000;
        const SKIPPED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH = 0x100000000000000;
        const SKIPPED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM = 0x200000000000000;
        const SKIPPED_GIGUNA__GIGUNA_BASE__RUIN__ITEM = 0x400000000000000;
        const SKIPPED_GIGUNA__GIGUNA_BASE__TABLE__NEWS = 0x800000000000000;
        const SKIPPED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK = 0x1000000000000000;
        const SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE = 0x2000000000000000;
        const SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON = 0x4000000000000000;
        const SKIPPED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM = 0x8000000000000000;
        const ALL_SKIP_FLAGS = 0xffffffffffffffff;
    }
}
bitflags!{
    #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
    pub struct ContextBits9 : u64 {
        const SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD = 0x1;
        const SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI = 0x2;
        const SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI = 0x4;
        const SKIPPED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE = 0x8;
        const SKIPPED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET = 0x10;
        const SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST = 0x20;
        const SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER = 0x40;
        const SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST = 0x80;
        const SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER = 0x100;
        const SKIPPED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET = 0x200;
        const SKIPPED_GIGUNA__LAMASSU__DEPOSIT__FLASK = 0x400;
        const SKIPPED_GIGUNA__RUINS_CENTER__TABLET__ITEM = 0x800;
        const SKIPPED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM = 0x1000;
        const SKIPPED_GIGUNA__RUINS_TOP__FLASK__FLASK = 0x2000;
        const SKIPPED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK = 0x4000;
        const SKIPPED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH = 0x8000;
        const SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY = 0x10000;
        const SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE = 0x20000;
        const SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY = 0x40000;
        const SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE = 0x80000;
        const SKIPPED_GIGUNA__WEST_CAVERNS__BUSH__ITEM = 0x100000;
        const SKIPPED_GIGUNA__WEST_CAVERNS__CACHE__ITEM = 0x200000;
        const SKIPPED_GIGUNA__WEST_TOWER__TOP__TABLET = 0x400000;
        const SKIPPED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE = 0x800000;
        const SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM = 0x1000000;
        const SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH = 0x2000000;
        const SKIPPED_GLACIER__COMPASS_ROOM__CENTER__TABLE = 0x4000000;
        const SKIPPED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB = 0x8000000;
        const SKIPPED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM = 0x10000000;
        const SKIPPED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN = 0x20000000;
        const SKIPPED_GLACIER__VERTICAL_ROOM__PEAK__FLASK = 0x40000000;
        const SKIPPED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH = 0x80000000;
        const SKIPPED_INTERIOR__BUILDING_INTERIOR__CORNER__URN = 0x100000000;
        const SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN = 0x200000000;
        const SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP = 0x400000000;
        const SKIPPED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE = 0x800000000;
        const SKIPPED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH = 0x1000000000;
        const SKIPPED_INTERIOR__GARAGE__BOXES__UNDER_BOXES = 0x2000000000;
        const SKIPPED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE = 0x4000000000;
        const SKIPPED_INTERIOR__TENT_INTERIOR__DESK__NOTE = 0x8000000000;
        const SKIPPED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM = 0x10000000000;
        const SKIPPED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM = 0x20000000000;
        const SKIPPED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM = 0x40000000000;
        const SKIPPED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE = 0x80000000000;
        const SKIPPED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP = 0x100000000000;
        const SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD = 0x200000000000;
        const SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM = 0x400000000000;
        const SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM = 0x800000000000;
        const SKIPPED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH = 0x1000000000000;
        const SKIPPED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET = 0x2000000000000;
        const SKIPPED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON = 0x4000000000000;
        const SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL = 0x8000000000000;
        const SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL = 0x10000000000000;
        const SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM = 0x20000000000000;
        const SKIPPED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET = 0x40000000000000;
        const SKIPPED_IRIKAR__LAMASSU__DESK__ITEM = 0x80000000000000;
        const SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN = 0x100000000000000;
        const SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP = 0x200000000000000;
        const SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL = 0x400000000000000;
        const SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1 = 0x800000000000000;
        const SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2 = 0x1000000000000000;
        const SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3 = 0x2000000000000000;
        const SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1 = 0x4000000000000000;
        const SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2 = 0x8000000000000000;
        const ALL_SKIP_FLAGS = 0xffffffffffffffff;
    }
}
bitflags!{
    #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
    pub struct ContextBits10 : u64 {
        const SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3 = 0x1;
        const SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1 = 0x2;
        const SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2 = 0x4;
        const SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3 = 0x8;
        const SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1 = 0x10;
        const SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2 = 0x20;
        const SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3 = 0x40;
        const SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1 = 0x80;
        const SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2 = 0x100;
        const SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3 = 0x200;
        const SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1 = 0x400;
        const SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2 = 0x800;
        const SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3 = 0x1000;
        const SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1 = 0x2000;
        const SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2 = 0x4000;
        const SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3 = 0x8000;
        const SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1 = 0x10000;
        const SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2 = 0x20000;
        const SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3 = 0x40000;
        const SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1 = 0x80000;
        const SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2 = 0x100000;
        const SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1 = 0x200000;
        const SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2 = 0x400000;
        const SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3 = 0x800000;
        const SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1 = 0x1000000;
        const SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2 = 0x2000000;
        const SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3 = 0x4000000;
        const SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4 = 0x8000000;
        const SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5 = 0x10000000;
        const SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE = 0x20000000;
        const SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK = 0x40000000;
        const SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK = 0x80000000;
        const SKIPPED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET = 0x100000000;
        const SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN = 0x200000000;
        const SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP = 0x400000000;
        const SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL = 0x800000000;
        const SKIPPED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM = 0x1000000000;
        const SKIPPED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN = 0x2000000000;
        const SKIPPED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX = 0x4000000000;
        const SKIPPED_UHRUM__SIEGE_CORRIDOR__POND__ITEM = 0x8000000000;
        const SKIPPED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN = 0x10000000000;
        const SKIPPED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE = 0x20000000000;
        const SKIPPED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK = 0x40000000000;
        const SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL = 0x80000000000;
        const SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL = 0x100000000000;
        const SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL = 0x200000000000;
        const SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL = 0x400000000000;
        const SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL = 0x800000000000;
        const SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL = 0x1000000000000;
        const SKIPPED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK = 0x2000000000000;
        const SKIPPED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK = 0x4000000000000;
        const SKIPPED_UHRUM__WATERFALLS__EAST_26__BLOCK = 0x8000000000000;
        const SKIPPED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET = 0x10000000000000;
        const SKIPPED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE = 0x20000000000000;
        const SKIPPED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM = 0x40000000000000;
        const SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL = 0x80000000000000;
        const SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL = 0x100000000000000;
        const SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL = 0x200000000000000;
        const SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL = 0x400000000000000;
        const SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL = 0x800000000000000;
        const SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL = 0x1000000000000000;
        const SKIPPED_UHRUM__WEST_ENTRANCE__SAND__REFILL = 0x2000000000000000;
        const SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL = 0x4000000000000000;
        const SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL = 0x8000000000000000;
        const ALL_SKIP_FLAGS = 0xffffffffffffffff;
    }
}
bitflags!{
    #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash, Serialize, Deserialize)]
    pub struct ContextBits11 : u8 {
        const SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL = 0x1;
        const SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL = 0x2;
        const ALL_SKIP_FLAGS = 0x3;
    }
}
}


#[derive(Clone, Debug, Eq, PartialEq, Hash, Serialize, Deserialize)]
pub struct Context {
    // context vars
    pub position: SpotId,
    pub energy: i16,
    pub flasks: i8,
    pub refills: i8,
    pub mode: enums::Mode,
    pub save: SpotId,
    pub breach_save: SpotId,
    pub indra: SpotId,
    pub last: SpotId,
    pub prev_area: AreaId,
    // settings
    // items
    pub flask: i8,
    pub health_fragment: i8,
    // bitflags
    pub cbits1: flags::ContextBits1,
    pub cbits2: flags::ContextBits2,
    pub cbits3: flags::ContextBits3,
    pub cbits4: flags::ContextBits4,
    pub cbits5: flags::ContextBits5,
    pub cbits6: flags::ContextBits6,
    pub cbits7: flags::ContextBits7,
    pub cbits8: flags::ContextBits8,
    pub cbits9: flags::ContextBits9,
    pub cbits10: flags::ContextBits10,
    pub cbits11: flags::ContextBits11,
}

impl Default for Context {
    fn default() -> Context {
        Context {
            position: SpotId::Antarctica__West__Helipad,
            save: SpotId::Antarctica__West__Helipad,
            breach_save: SpotId::None,
            indra: SpotId::None,
            last: SpotId::None,
            prev_area: AreaId::Antarctica__West,
            energy: 0,
            flasks: 0,
            refills: 0,
            mode: enums::Mode::Indra,
            // settings
            // items
            flask: Default::default(),
            health_fragment: Default::default(),
            // bitflags
            cbits1: Default::default(),
            cbits2: Default::default(),
            cbits3: Default::default(),
            cbits4: Default::default(),
            cbits5: Default::default(),
            cbits6: Default::default(),
            cbits7: Default::default(),
            cbits8: Default::default(),
            cbits9: Default::default(),
            cbits10: Default::default(),
            cbits11: Default::default(),
        }
    }
}

impl analyzer::matchertrie::matcher::Observable for Context {
    type PropertyObservation = crate::observe::OneObservation;
}

impl context::Ctx for Context {
    type World = graph::World;
    type ItemId = Item;
    type AreaId = AreaId;
    type RegionId = RegionId;
    type MovementState = movements::MovementState;
    type Expectation = Expectation;
    const NUM_ITEMS: u32 = 118;


    fn has(&self, item: Item) -> bool {
        match item {
            Item::Amagi_Dragon_Eye_Passage => self.cbits1.contains(flags::ContextBits1::AMAGI_DRAGON_EYE_PASSAGE),
            Item::Amagi_Stronghold_Boulder_1 => self.cbits1.contains(flags::ContextBits1::AMAGI_STRONGHOLD_BOULDER_1),
            Item::Amagi_Stronghold_Boulder_2 => self.cbits2.contains(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_2),
            Item::Amagi_Stronghold_Wall_1 => self.cbits2.contains(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_1),
            Item::Amagi_Stronghold_Wall_2 => self.cbits2.contains(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_2),
            Item::Amagi_West_Lake_Surface_Wall => self.cbits2.contains(flags::ContextBits2::AMAGI_WEST_LAKE_SURFACE_WALL),
            Item::Amashilama => self.cbits2.contains(flags::ContextBits2::AMASHILAMA),
            Item::Annuna_East_Bridge_Gate => self.cbits2.contains(flags::ContextBits2::ANNUNA_EAST_BRIDGE_GATE),
            Item::Annuna_Mirror_Match_Switch => self.cbits2.contains(flags::ContextBits2::ANNUNA_MIRROR_MATCH_SWITCH),
            Item::Anuman => self.cbits2.contains(flags::ContextBits2::ANUMAN),
            Item::Anunna_Vertical_Room_Gate => self.cbits2.contains(flags::ContextBits2::ANUNNA_VERTICAL_ROOM_GATE),
            Item::Apocalypse_Bomb => self.cbits2.contains(flags::ContextBits2::APOCALYPSE_BOMB),
            Item::Big_Flask => self.cbits2.contains(flags::ContextBits2::BIG_FLASK),
            Item::Boomerang => self.cbits2.contains(flags::ContextBits2::BOOMERANG),
            Item::Breach_Attractor => self.cbits2.contains(flags::ContextBits2::BREACH_ATTRACTOR),
            Item::Breach_Sight => self.cbits2.contains(flags::ContextBits2::BREACH_SIGHT),
            Item::Bronze_Axe => self.cbits2.contains(flags::ContextBits2::BRONZE_AXE),
            Item::Building_of_the_School => self.cbits2.contains(flags::ContextBits2::BUILDING_OF_THE_SCHOOL),
            Item::Commemorative_Speech => self.cbits2.contains(flags::ContextBits2::COMMEMORATIVE_SPEECH),
            Item::Companies_Layoff => self.cbits2.contains(flags::ContextBits2::COMPANIES_LAYOFF),
            Item::Compass => self.cbits2.contains(flags::ContextBits2::COMPASS),
            Item::Dangerous_Ideas => self.cbits2.contains(flags::ContextBits2::DANGEROUS_IDEAS),
            Item::Dear_Ernest => self.cbits2.contains(flags::ContextBits2::DEAR_ERNEST),
            Item::Defeat_Indra => self.cbits2.contains(flags::ContextBits2::DEFEAT_INDRA),
            Item::Defeat_MUS_A_M20 => self.cbits2.contains(flags::ContextBits2::DEFEAT_MUS_A_M20),
            Item::Destruction_Pogrom => self.cbits2.contains(flags::ContextBits2::DESTRUCTION_POGROM),
            Item::Drone_Hover => self.cbits2.contains(flags::ContextBits2::DRONE_HOVER),
            Item::Drone_Melee_Damage => self.cbits2.contains(flags::ContextBits2::DRONE_MELEE_DAMAGE),
            Item::Drone_Melee_Damage_2 => self.cbits2.contains(flags::ContextBits2::DRONE_MELEE_DAMAGE_2),
            Item::Drone_Melee_Speed => self.cbits2.contains(flags::ContextBits2::DRONE_MELEE_SPEED),
            Item::Drone_Melee_Speed_2 => self.cbits2.contains(flags::ContextBits2::DRONE_MELEE_SPEED_2),
            Item::Ebih_Alu => self.cbits2.contains(flags::ContextBits2::EBIH_ALU),
            Item::Ebih_Interchange_Block => self.cbits2.contains(flags::ContextBits2::EBIH_INTERCHANGE_BLOCK),
            Item::Ebih_Interchange_Gate => self.cbits2.contains(flags::ContextBits2::EBIH_INTERCHANGE_GATE),
            Item::Ebih_Wasteland_Door => self.cbits2.contains(flags::ContextBits2::EBIH_WASTELAND_DOOR),
            Item::Ebih_Wasteland_Passage_H => self.cbits2.contains(flags::ContextBits2::EBIH_WASTELAND_PASSAGE_H),
            Item::Ebih_Waterfall_Block_Left => self.cbits2.contains(flags::ContextBits2::EBIH_WATERFALL_BLOCK_LEFT),
            Item::Ebih_Waterfall_Block_Right => self.cbits2.contains(flags::ContextBits2::EBIH_WATERFALL_BLOCK_RIGHT),
            Item::Ebih_Waterfall_Wall => self.cbits2.contains(flags::ContextBits2::EBIH_WATERFALL_WALL),
            Item::Ebih_West_Block => self.cbits2.contains(flags::ContextBits2::EBIH_WEST_BLOCK),
            Item::Escape => self.cbits2.contains(flags::ContextBits2::ESCAPE),
            Item::Exit_Breach => self.cbits2.contains(flags::ContextBits2::EXIT_BREACH),
            Item::Eye_Ring => self.cbits2.contains(flags::ContextBits2::EYE_RING),
            Item::Family_Tragedy => self.cbits2.contains(flags::ContextBits2::FAMILY_TRAGEDY),
            Item::Fast_Travel => self.cbits2.contains(flags::ContextBits2::FAST_TRAVEL),
            Item::Flask => self.flask >= 1,
            Item::Giguna_Boulder => self.cbits2.contains(flags::ContextBits2::GIGUNA_BOULDER),
            Item::Giguna_Dual_Path_Switch => self.cbits2.contains(flags::ContextBits2::GIGUNA_DUAL_PATH_SWITCH),
            Item::Giguna_Dual_Path_Wall => self.cbits2.contains(flags::ContextBits2::GIGUNA_DUAL_PATH_WALL),
            Item::Giguna_Gateway_Block => self.cbits2.contains(flags::ContextBits2::GIGUNA_GATEWAY_BLOCK),
            Item::Giguna_Gateway_Gate => self.cbits2.contains(flags::ContextBits2::GIGUNA_GATEWAY_GATE),
            Item::Giguna_Gubi => self.cbits2.contains(flags::ContextBits2::GIGUNA_GUBI),
            Item::Giguna_Northeast_Gate => self.cbits2.contains(flags::ContextBits2::GIGUNA_NORTHEAST_GATE),
            Item::Health_Fragment => self.health_fragment >= 1,
            Item::Health_Node => self.cbits2.contains(flags::ContextBits2::HEALTH_NODE),
            Item::Health_Upgrade => self.cbits2.contains(flags::ContextBits2::HEALTH_UPGRADE),
            Item::Health_Upgrade_2 => self.cbits2.contains(flags::ContextBits2::HEALTH_UPGRADE_2),
            Item::Health_Upgrade_3 => self.cbits2.contains(flags::ContextBits2::HEALTH_UPGRADE_3),
            Item::Health_Upgrade_4 => self.cbits2.contains(flags::ContextBits2::HEALTH_UPGRADE_4),
            Item::Heretics_Tablet => self.cbits2.contains(flags::ContextBits2::HERETICS_TABLET),
            Item::Hover => self.cbits2.contains(flags::ContextBits2::HOVER),
            Item::Ice_Axe => self.cbits2.contains(flags::ContextBits2::ICE_AXE),
            Item::Infect => self.cbits2.contains(flags::ContextBits2::INFECT),
            Item::Infect_L1 => self.cbits2.contains(flags::ContextBits2::INFECT_L1),
            Item::Infect_L2 => self.cbits2.contains(flags::ContextBits2::INFECT_L2),
            Item::Infect_L3 => self.cbits2.contains(flags::ContextBits2::INFECT_L3),
            Item::Infection_Range => self.cbits2.contains(flags::ContextBits2::INFECTION_RANGE),
            Item::Infection_Range_2 => self.cbits2.contains(flags::ContextBits2::INFECTION_RANGE_2),
            Item::Infection_Range_3 => self.cbits3.contains(flags::ContextBits3::INFECTION_RANGE_3),
            Item::Infection_Speed => self.cbits3.contains(flags::ContextBits3::INFECTION_SPEED),
            Item::Irikar_Gudam => self.cbits3.contains(flags::ContextBits3::IRIKAR_GUDAM),
            Item::Irikar_Royal_Storage_Wall => self.cbits3.contains(flags::ContextBits3::IRIKAR_ROYAL_STORAGE_WALL),
            Item::Lament_for_Fools => self.cbits3.contains(flags::ContextBits3::LAMENT_FOR_FOOLS),
            Item::Ledge_Grab => self.cbits3.contains(flags::ContextBits3::LEDGE_GRAB),
            Item::Letter_from_Trace => self.cbits3.contains(flags::ContextBits3::LETTER_FROM_TRACE),
            Item::Melee_Damage => self.cbits3.contains(flags::ContextBits3::MELEE_DAMAGE),
            Item::Melee_Damage_2 => self.cbits3.contains(flags::ContextBits3::MELEE_DAMAGE_2),
            Item::Melee_Speed => self.cbits3.contains(flags::ContextBits3::MELEE_SPEED),
            Item::Melee_Speed_2 => self.cbits3.contains(flags::ContextBits3::MELEE_SPEED_2),
            Item::Mist_Upgrade => self.cbits3.contains(flags::ContextBits3::MIST_UPGRADE),
            Item::Nanite_Mist => self.cbits3.contains(flags::ContextBits3::NANITE_MIST),
            Item::Nano_Lattice_2 => self.cbits3.contains(flags::ContextBits3::NANO_LATTICE_2),
            Item::Nano_Points => self.cbits3.contains(flags::ContextBits3::NANO_POINTS),
            Item::Nano_Points_2 => self.cbits3.contains(flags::ContextBits3::NANO_POINTS_2),
            Item::Plague_of_Thoughts => self.cbits3.contains(flags::ContextBits3::PLAGUE_OF_THOUGHTS),
            Item::Power_Matrix => self.cbits3.contains(flags::ContextBits3::POWER_MATRIX),
            Item::Ranged_Damage => self.cbits3.contains(flags::ContextBits3::RANGED_DAMAGE),
            Item::Ranged_Damage_2 => self.cbits3.contains(flags::ContextBits3::RANGED_DAMAGE_2),
            Item::Ranged_Speed => self.cbits3.contains(flags::ContextBits3::RANGED_SPEED),
            Item::Ranged_Speed_2 => self.cbits3.contains(flags::ContextBits3::RANGED_SPEED_2),
            Item::Record_Losses => self.cbits3.contains(flags::ContextBits3::RECORD_LOSSES),
            Item::Remote_Drone => self.cbits3.contains(flags::ContextBits3::REMOTE_DRONE),
            Item::Researchers_Missing => self.cbits3.contains(flags::ContextBits3::RESEARCHERS_MISSING),
            Item::Separation => self.cbits3.contains(flags::ContextBits3::SEPARATION),
            Item::Shockwave => self.cbits3.contains(flags::ContextBits3::SHOCKWAVE),
            Item::Slingshot_Charge => self.cbits3.contains(flags::ContextBits3::SLINGSHOT_CHARGE),
            Item::Slingshot_Hook => self.cbits3.contains(flags::ContextBits3::SLINGSHOT_HOOK),
            Item::Slingshot_Weapon => self.cbits3.contains(flags::ContextBits3::SLINGSHOT_WEAPON),
            Item::Sniper_Valley_Rock_1 => self.cbits3.contains(flags::ContextBits3::SNIPER_VALLEY_ROCK_1),
            Item::Sniper_Valley_Rock_2 => self.cbits3.contains(flags::ContextBits3::SNIPER_VALLEY_ROCK_2),
            Item::Station_Power => self.cbits3.contains(flags::ContextBits3::STATION_POWER),
            Item::Storm_Bomb => self.cbits3.contains(flags::ContextBits3::STORM_BOMB),
            Item::Suspension_Bridge => self.cbits3.contains(flags::ContextBits3::SUSPENSION_BRIDGE),
            Item::Switch_36_11 => self.cbits3.contains(flags::ContextBits3::SWITCH_36_11),
            Item::Switch_40_12 => self.cbits3.contains(flags::ContextBits3::SWITCH_40_12),
            Item::Terminal_Breakthrough_1 => self.cbits3.contains(flags::ContextBits3::TERMINAL_BREAKTHROUGH_1),
            Item::Terminal_Breakthrough_2 => self.cbits3.contains(flags::ContextBits3::TERMINAL_BREAKTHROUGH_2),
            Item::The_Ideal_Kiengir => self.cbits3.contains(flags::ContextBits3::THE_IDEAL_KIENGIR),
            Item::Uhrum_Annuna_Corridor_Block => self.cbits3.contains(flags::ContextBits3::UHRUM_ANNUNA_CORRIDOR_BLOCK),
            Item::Uhrum_Waterfall_Wall => self.cbits3.contains(flags::ContextBits3::UHRUM_WATERFALL_WALL),
            Item::Uhrum_Waterfalls_Block => self.cbits3.contains(flags::ContextBits3::UHRUM_WATERFALLS_BLOCK),
            Item::Uhrum_West_Entrance_Gate => self.cbits3.contains(flags::ContextBits3::UHRUM_WEST_ENTRANCE_GATE),
            Item::Uhrum_West_Entrance_Lower_Wall => self.cbits3.contains(flags::ContextBits3::UHRUM_WEST_ENTRANCE_LOWER_WALL),
            Item::Uhrum_West_Entrance_Upper_Wall => self.cbits3.contains(flags::ContextBits3::UHRUM_WEST_ENTRANCE_UPPER_WALL),
            Item::Under_Siege => self.cbits3.contains(flags::ContextBits3::UNDER_SIEGE),
            Item::Underwater_Movement => self.cbits3.contains(flags::ContextBits3::UNDERWATER_MOVEMENT),
            Item::Wall_Climb => self.cbits3.contains(flags::ContextBits3::WALL_CLIMB),
            Item::Water_Movement => self.cbits3.contains(flags::ContextBits3::WATER_MOVEMENT),
            _ => false,
        }
    }
    fn count(&self, item: Item) -> i16 {
        match item {
            Item::Amagi_Dragon_Eye_Passage => self.cbits1.contains(flags::ContextBits1::AMAGI_DRAGON_EYE_PASSAGE).into(),
            Item::Amagi_Stronghold_Boulder_1 => self.cbits1.contains(flags::ContextBits1::AMAGI_STRONGHOLD_BOULDER_1).into(),
            Item::Amagi_Stronghold_Boulder_2 => self.cbits2.contains(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_2).into(),
            Item::Amagi_Stronghold_Wall_1 => self.cbits2.contains(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_1).into(),
            Item::Amagi_Stronghold_Wall_2 => self.cbits2.contains(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_2).into(),
            Item::Amagi_West_Lake_Surface_Wall => self.cbits2.contains(flags::ContextBits2::AMAGI_WEST_LAKE_SURFACE_WALL).into(),
            Item::Amashilama => self.cbits2.contains(flags::ContextBits2::AMASHILAMA).into(),
            Item::Annuna_East_Bridge_Gate => self.cbits2.contains(flags::ContextBits2::ANNUNA_EAST_BRIDGE_GATE).into(),
            Item::Annuna_Mirror_Match_Switch => self.cbits2.contains(flags::ContextBits2::ANNUNA_MIRROR_MATCH_SWITCH).into(),
            Item::Anuman => self.cbits2.contains(flags::ContextBits2::ANUMAN).into(),
            Item::Anunna_Vertical_Room_Gate => self.cbits2.contains(flags::ContextBits2::ANUNNA_VERTICAL_ROOM_GATE).into(),
            Item::Apocalypse_Bomb => self.cbits2.contains(flags::ContextBits2::APOCALYPSE_BOMB).into(),
            Item::Big_Flask => self.cbits2.contains(flags::ContextBits2::BIG_FLASK).into(),
            Item::Boomerang => self.cbits2.contains(flags::ContextBits2::BOOMERANG).into(),
            Item::Breach_Attractor => self.cbits2.contains(flags::ContextBits2::BREACH_ATTRACTOR).into(),
            Item::Breach_Sight => self.cbits2.contains(flags::ContextBits2::BREACH_SIGHT).into(),
            Item::Bronze_Axe => self.cbits2.contains(flags::ContextBits2::BRONZE_AXE).into(),
            Item::Building_of_the_School => self.cbits2.contains(flags::ContextBits2::BUILDING_OF_THE_SCHOOL).into(),
            Item::Commemorative_Speech => self.cbits2.contains(flags::ContextBits2::COMMEMORATIVE_SPEECH).into(),
            Item::Companies_Layoff => self.cbits2.contains(flags::ContextBits2::COMPANIES_LAYOFF).into(),
            Item::Compass => self.cbits2.contains(flags::ContextBits2::COMPASS).into(),
            Item::Dangerous_Ideas => self.cbits2.contains(flags::ContextBits2::DANGEROUS_IDEAS).into(),
            Item::Dear_Ernest => self.cbits2.contains(flags::ContextBits2::DEAR_ERNEST).into(),
            Item::Defeat_Indra => self.cbits2.contains(flags::ContextBits2::DEFEAT_INDRA).into(),
            Item::Defeat_MUS_A_M20 => self.cbits2.contains(flags::ContextBits2::DEFEAT_MUS_A_M20).into(),
            Item::Destruction_Pogrom => self.cbits2.contains(flags::ContextBits2::DESTRUCTION_POGROM).into(),
            Item::Drone_Hover => self.cbits2.contains(flags::ContextBits2::DRONE_HOVER).into(),
            Item::Drone_Melee_Damage => self.cbits2.contains(flags::ContextBits2::DRONE_MELEE_DAMAGE).into(),
            Item::Drone_Melee_Damage_2 => self.cbits2.contains(flags::ContextBits2::DRONE_MELEE_DAMAGE_2).into(),
            Item::Drone_Melee_Speed => self.cbits2.contains(flags::ContextBits2::DRONE_MELEE_SPEED).into(),
            Item::Drone_Melee_Speed_2 => self.cbits2.contains(flags::ContextBits2::DRONE_MELEE_SPEED_2).into(),
            Item::Ebih_Alu => self.cbits2.contains(flags::ContextBits2::EBIH_ALU).into(),
            Item::Ebih_Interchange_Block => self.cbits2.contains(flags::ContextBits2::EBIH_INTERCHANGE_BLOCK).into(),
            Item::Ebih_Interchange_Gate => self.cbits2.contains(flags::ContextBits2::EBIH_INTERCHANGE_GATE).into(),
            Item::Ebih_Wasteland_Door => self.cbits2.contains(flags::ContextBits2::EBIH_WASTELAND_DOOR).into(),
            Item::Ebih_Wasteland_Passage_H => self.cbits2.contains(flags::ContextBits2::EBIH_WASTELAND_PASSAGE_H).into(),
            Item::Ebih_Waterfall_Block_Left => self.cbits2.contains(flags::ContextBits2::EBIH_WATERFALL_BLOCK_LEFT).into(),
            Item::Ebih_Waterfall_Block_Right => self.cbits2.contains(flags::ContextBits2::EBIH_WATERFALL_BLOCK_RIGHT).into(),
            Item::Ebih_Waterfall_Wall => self.cbits2.contains(flags::ContextBits2::EBIH_WATERFALL_WALL).into(),
            Item::Ebih_West_Block => self.cbits2.contains(flags::ContextBits2::EBIH_WEST_BLOCK).into(),
            Item::Escape => self.cbits2.contains(flags::ContextBits2::ESCAPE).into(),
            Item::Exit_Breach => self.cbits2.contains(flags::ContextBits2::EXIT_BREACH).into(),
            Item::Eye_Ring => self.cbits2.contains(flags::ContextBits2::EYE_RING).into(),
            Item::Family_Tragedy => self.cbits2.contains(flags::ContextBits2::FAMILY_TRAGEDY).into(),
            Item::Fast_Travel => self.cbits2.contains(flags::ContextBits2::FAST_TRAVEL).into(),
            Item::Flask => self.flask.into(),
            Item::Giguna_Boulder => self.cbits2.contains(flags::ContextBits2::GIGUNA_BOULDER).into(),
            Item::Giguna_Dual_Path_Switch => self.cbits2.contains(flags::ContextBits2::GIGUNA_DUAL_PATH_SWITCH).into(),
            Item::Giguna_Dual_Path_Wall => self.cbits2.contains(flags::ContextBits2::GIGUNA_DUAL_PATH_WALL).into(),
            Item::Giguna_Gateway_Block => self.cbits2.contains(flags::ContextBits2::GIGUNA_GATEWAY_BLOCK).into(),
            Item::Giguna_Gateway_Gate => self.cbits2.contains(flags::ContextBits2::GIGUNA_GATEWAY_GATE).into(),
            Item::Giguna_Gubi => self.cbits2.contains(flags::ContextBits2::GIGUNA_GUBI).into(),
            Item::Giguna_Northeast_Gate => self.cbits2.contains(flags::ContextBits2::GIGUNA_NORTHEAST_GATE).into(),
            Item::Health_Fragment => self.health_fragment.into(),
            Item::Health_Node => self.cbits2.contains(flags::ContextBits2::HEALTH_NODE).into(),
            Item::Health_Upgrade => self.cbits2.contains(flags::ContextBits2::HEALTH_UPGRADE).into(),
            Item::Health_Upgrade_2 => self.cbits2.contains(flags::ContextBits2::HEALTH_UPGRADE_2).into(),
            Item::Health_Upgrade_3 => self.cbits2.contains(flags::ContextBits2::HEALTH_UPGRADE_3).into(),
            Item::Health_Upgrade_4 => self.cbits2.contains(flags::ContextBits2::HEALTH_UPGRADE_4).into(),
            Item::Heretics_Tablet => self.cbits2.contains(flags::ContextBits2::HERETICS_TABLET).into(),
            Item::Hover => self.cbits2.contains(flags::ContextBits2::HOVER).into(),
            Item::Ice_Axe => self.cbits2.contains(flags::ContextBits2::ICE_AXE).into(),
            Item::Infect => self.cbits2.contains(flags::ContextBits2::INFECT).into(),
            Item::Infect_L1 => self.cbits2.contains(flags::ContextBits2::INFECT_L1).into(),
            Item::Infect_L2 => self.cbits2.contains(flags::ContextBits2::INFECT_L2).into(),
            Item::Infect_L3 => self.cbits2.contains(flags::ContextBits2::INFECT_L3).into(),
            Item::Infection_Range => self.cbits2.contains(flags::ContextBits2::INFECTION_RANGE).into(),
            Item::Infection_Range_2 => self.cbits2.contains(flags::ContextBits2::INFECTION_RANGE_2).into(),
            Item::Infection_Range_3 => self.cbits3.contains(flags::ContextBits3::INFECTION_RANGE_3).into(),
            Item::Infection_Speed => self.cbits3.contains(flags::ContextBits3::INFECTION_SPEED).into(),
            Item::Irikar_Gudam => self.cbits3.contains(flags::ContextBits3::IRIKAR_GUDAM).into(),
            Item::Irikar_Royal_Storage_Wall => self.cbits3.contains(flags::ContextBits3::IRIKAR_ROYAL_STORAGE_WALL).into(),
            Item::Lament_for_Fools => self.cbits3.contains(flags::ContextBits3::LAMENT_FOR_FOOLS).into(),
            Item::Ledge_Grab => self.cbits3.contains(flags::ContextBits3::LEDGE_GRAB).into(),
            Item::Letter_from_Trace => self.cbits3.contains(flags::ContextBits3::LETTER_FROM_TRACE).into(),
            Item::Melee_Damage => self.cbits3.contains(flags::ContextBits3::MELEE_DAMAGE).into(),
            Item::Melee_Damage_2 => self.cbits3.contains(flags::ContextBits3::MELEE_DAMAGE_2).into(),
            Item::Melee_Speed => self.cbits3.contains(flags::ContextBits3::MELEE_SPEED).into(),
            Item::Melee_Speed_2 => self.cbits3.contains(flags::ContextBits3::MELEE_SPEED_2).into(),
            Item::Mist_Upgrade => self.cbits3.contains(flags::ContextBits3::MIST_UPGRADE).into(),
            Item::Nanite_Mist => self.cbits3.contains(flags::ContextBits3::NANITE_MIST).into(),
            Item::Nano_Lattice_2 => self.cbits3.contains(flags::ContextBits3::NANO_LATTICE_2).into(),
            Item::Nano_Points => self.cbits3.contains(flags::ContextBits3::NANO_POINTS).into(),
            Item::Nano_Points_2 => self.cbits3.contains(flags::ContextBits3::NANO_POINTS_2).into(),
            Item::Plague_of_Thoughts => self.cbits3.contains(flags::ContextBits3::PLAGUE_OF_THOUGHTS).into(),
            Item::Power_Matrix => self.cbits3.contains(flags::ContextBits3::POWER_MATRIX).into(),
            Item::Ranged_Damage => self.cbits3.contains(flags::ContextBits3::RANGED_DAMAGE).into(),
            Item::Ranged_Damage_2 => self.cbits3.contains(flags::ContextBits3::RANGED_DAMAGE_2).into(),
            Item::Ranged_Speed => self.cbits3.contains(flags::ContextBits3::RANGED_SPEED).into(),
            Item::Ranged_Speed_2 => self.cbits3.contains(flags::ContextBits3::RANGED_SPEED_2).into(),
            Item::Record_Losses => self.cbits3.contains(flags::ContextBits3::RECORD_LOSSES).into(),
            Item::Remote_Drone => self.cbits3.contains(flags::ContextBits3::REMOTE_DRONE).into(),
            Item::Researchers_Missing => self.cbits3.contains(flags::ContextBits3::RESEARCHERS_MISSING).into(),
            Item::Separation => self.cbits3.contains(flags::ContextBits3::SEPARATION).into(),
            Item::Shockwave => self.cbits3.contains(flags::ContextBits3::SHOCKWAVE).into(),
            Item::Slingshot_Charge => self.cbits3.contains(flags::ContextBits3::SLINGSHOT_CHARGE).into(),
            Item::Slingshot_Hook => self.cbits3.contains(flags::ContextBits3::SLINGSHOT_HOOK).into(),
            Item::Slingshot_Weapon => self.cbits3.contains(flags::ContextBits3::SLINGSHOT_WEAPON).into(),
            Item::Sniper_Valley_Rock_1 => self.cbits3.contains(flags::ContextBits3::SNIPER_VALLEY_ROCK_1).into(),
            Item::Sniper_Valley_Rock_2 => self.cbits3.contains(flags::ContextBits3::SNIPER_VALLEY_ROCK_2).into(),
            Item::Station_Power => self.cbits3.contains(flags::ContextBits3::STATION_POWER).into(),
            Item::Storm_Bomb => self.cbits3.contains(flags::ContextBits3::STORM_BOMB).into(),
            Item::Suspension_Bridge => self.cbits3.contains(flags::ContextBits3::SUSPENSION_BRIDGE).into(),
            Item::Switch_36_11 => self.cbits3.contains(flags::ContextBits3::SWITCH_36_11).into(),
            Item::Switch_40_12 => self.cbits3.contains(flags::ContextBits3::SWITCH_40_12).into(),
            Item::Terminal_Breakthrough_1 => self.cbits3.contains(flags::ContextBits3::TERMINAL_BREAKTHROUGH_1).into(),
            Item::Terminal_Breakthrough_2 => self.cbits3.contains(flags::ContextBits3::TERMINAL_BREAKTHROUGH_2).into(),
            Item::The_Ideal_Kiengir => self.cbits3.contains(flags::ContextBits3::THE_IDEAL_KIENGIR).into(),
            Item::Uhrum_Annuna_Corridor_Block => self.cbits3.contains(flags::ContextBits3::UHRUM_ANNUNA_CORRIDOR_BLOCK).into(),
            Item::Uhrum_Waterfall_Wall => self.cbits3.contains(flags::ContextBits3::UHRUM_WATERFALL_WALL).into(),
            Item::Uhrum_Waterfalls_Block => self.cbits3.contains(flags::ContextBits3::UHRUM_WATERFALLS_BLOCK).into(),
            Item::Uhrum_West_Entrance_Gate => self.cbits3.contains(flags::ContextBits3::UHRUM_WEST_ENTRANCE_GATE).into(),
            Item::Uhrum_West_Entrance_Lower_Wall => self.cbits3.contains(flags::ContextBits3::UHRUM_WEST_ENTRANCE_LOWER_WALL).into(),
            Item::Uhrum_West_Entrance_Upper_Wall => self.cbits3.contains(flags::ContextBits3::UHRUM_WEST_ENTRANCE_UPPER_WALL).into(),
            Item::Under_Siege => self.cbits3.contains(flags::ContextBits3::UNDER_SIEGE).into(),
            Item::Underwater_Movement => self.cbits3.contains(flags::ContextBits3::UNDERWATER_MOVEMENT).into(),
            Item::Wall_Climb => self.cbits3.contains(flags::ContextBits3::WALL_CLIMB).into(),
            Item::Water_Movement => self.cbits3.contains(flags::ContextBits3::WATER_MOVEMENT).into(),
            _ => 0,
        }
    }
    fn collect(&mut self, item: Item, world: &graph::World) {
        match item {
            Item::Amagi_Dragon_Eye_Passage => {
                self.cbits1.insert(flags::ContextBits1::AMAGI_DRAGON_EYE_PASSAGE);
            }
            Item::Amagi_Stronghold_Boulder_1 => {
                self.cbits1.insert(flags::ContextBits1::AMAGI_STRONGHOLD_BOULDER_1);
            }
            Item::Amagi_Stronghold_Boulder_2 => {
                self.cbits2.insert(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_2);
            }
            Item::Amagi_Stronghold_Wall_1 => {
                self.cbits2.insert(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_1);
            }
            Item::Amagi_Stronghold_Wall_2 => {
                self.cbits2.insert(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_2);
            }
            Item::Amagi_West_Lake_Surface_Wall => {
                self.cbits2.insert(flags::ContextBits2::AMAGI_WEST_LAKE_SURFACE_WALL);
            }
            Item::Amashilama => {
                self.cbits2.insert(flags::ContextBits2::AMASHILAMA);
                rules::action_save_set_glacier_gt_revival_gt_save_point(self, world);
            }
            Item::Annuna_East_Bridge_Gate => {
                self.cbits2.insert(flags::ContextBits2::ANNUNA_EAST_BRIDGE_GATE);
            }
            Item::Annuna_Mirror_Match_Switch => {
                self.cbits2.insert(flags::ContextBits2::ANNUNA_MIRROR_MATCH_SWITCH);
            }
            Item::Anuman => {
                self.cbits2.insert(flags::ContextBits2::ANUMAN);
                rules::action_indra_set_default(self, world);
            }
            Item::Anunna_Vertical_Room_Gate => {
                self.cbits2.insert(flags::ContextBits2::ANUNNA_VERTICAL_ROOM_GATE);
            }
            Item::Apocalypse_Bomb => {
                self.cbits2.insert(flags::ContextBits2::APOCALYPSE_BOMB);
            }
            Item::Big_Flask => {
                self.cbits2.insert(flags::ContextBits2::BIG_FLASK);
                rules::action_flasks_incr_2(self, world);
            }
            Item::Boomerang => {
                self.cbits2.insert(flags::ContextBits2::BOOMERANG);
            }
            Item::Breach_Attractor => {
                self.cbits2.insert(flags::ContextBits2::BREACH_ATTRACTOR);
            }
            Item::Breach_Sight => {
                self.cbits2.insert(flags::ContextBits2::BREACH_SIGHT);
            }
            Item::Bronze_Axe => {
                self.cbits2.insert(flags::ContextBits2::BRONZE_AXE);
            }
            Item::Building_of_the_School => {
                self.cbits2.insert(flags::ContextBits2::BUILDING_OF_THE_SCHOOL);
            }
            Item::Commemorative_Speech => {
                self.cbits2.insert(flags::ContextBits2::COMMEMORATIVE_SPEECH);
            }
            Item::Companies_Layoff => {
                self.cbits2.insert(flags::ContextBits2::COMPANIES_LAYOFF);
            }
            Item::Compass => {
                self.cbits2.insert(flags::ContextBits2::COMPASS);
            }
            Item::Dangerous_Ideas => {
                self.cbits2.insert(flags::ContextBits2::DANGEROUS_IDEAS);
            }
            Item::Dear_Ernest => {
                self.cbits2.insert(flags::ContextBits2::DEAR_ERNEST);
            }
            Item::Defeat_Indra => {
                self.cbits2.insert(flags::ContextBits2::DEFEAT_INDRA);
            }
            Item::Defeat_MUS_A_M20 => {
                self.cbits2.insert(flags::ContextBits2::DEFEAT_MUS_A_M20);
                rules::action_skip__amagi_gt_west_lake_gt_cavern_refill_station_gt_break_wall_add_item__amagi_dragon_eye_passage(self, world);
            }
            Item::Destruction_Pogrom => {
                self.cbits2.insert(flags::ContextBits2::DESTRUCTION_POGROM);
            }
            Item::Drone_Hover => {
                self.cbits2.insert(flags::ContextBits2::DRONE_HOVER);
            }
            Item::Drone_Melee_Damage => {
                self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_DAMAGE);
            }
            Item::Drone_Melee_Damage_2 => {
                self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_DAMAGE_2);
            }
            Item::Drone_Melee_Speed => {
                self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_SPEED);
            }
            Item::Drone_Melee_Speed_2 => {
                self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_SPEED_2);
            }
            Item::Ebih_Alu => {
                self.cbits2.insert(flags::ContextBits2::EBIH_ALU);
            }
            Item::Ebih_Interchange_Block => {
                self.cbits2.insert(flags::ContextBits2::EBIH_INTERCHANGE_BLOCK);
            }
            Item::Ebih_Interchange_Gate => {
                self.cbits2.insert(flags::ContextBits2::EBIH_INTERCHANGE_GATE);
            }
            Item::Ebih_Wasteland_Door => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WASTELAND_DOOR);
            }
            Item::Ebih_Wasteland_Passage_H => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WASTELAND_PASSAGE_H);
            }
            Item::Ebih_Waterfall_Block_Left => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WATERFALL_BLOCK_LEFT);
            }
            Item::Ebih_Waterfall_Block_Right => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WATERFALL_BLOCK_RIGHT);
            }
            Item::Ebih_Waterfall_Wall => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WATERFALL_WALL);
            }
            Item::Ebih_West_Block => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WEST_BLOCK);
            }
            Item::Escape => {
                self.cbits2.insert(flags::ContextBits2::ESCAPE);
            }
            Item::Exit_Breach => {
                self.cbits2.insert(flags::ContextBits2::EXIT_BREACH);
            }
            Item::Eye_Ring => {
                self.cbits2.insert(flags::ContextBits2::EYE_RING);
            }
            Item::Family_Tragedy => {
                self.cbits2.insert(flags::ContextBits2::FAMILY_TRAGEDY);
            }
            Item::Fast_Travel => {
                self.cbits2.insert(flags::ContextBits2::FAST_TRAVEL);
            }
            Item::Flask => {
                self.flask += 1;
                rules::action_flasks_incr_1(self, world);
            }
            Item::Giguna_Boulder => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_BOULDER);
            }
            Item::Giguna_Dual_Path_Switch => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_DUAL_PATH_SWITCH);
            }
            Item::Giguna_Dual_Path_Wall => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_DUAL_PATH_WALL);
            }
            Item::Giguna_Gateway_Block => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_GATEWAY_BLOCK);
            }
            Item::Giguna_Gateway_Gate => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_GATEWAY_GATE);
            }
            Item::Giguna_Gubi => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_GUBI);
            }
            Item::Giguna_Northeast_Gate => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_NORTHEAST_GATE);
            }
            Item::Health_Fragment => {
                self.health_fragment += 1;
                rules::action_refill_energy(self, world);
            }
            Item::Health_Node => {
                self.cbits2.insert(flags::ContextBits2::HEALTH_NODE);
                rules::action_refill_energy(self, world);
            }
            Item::Health_Upgrade => {
                self.cbits2.insert(flags::ContextBits2::HEALTH_UPGRADE);
            }
            Item::Health_Upgrade_2 => {
                self.cbits2.insert(flags::ContextBits2::HEALTH_UPGRADE_2);
            }
            Item::Health_Upgrade_3 => {
                self.cbits2.insert(flags::ContextBits2::HEALTH_UPGRADE_3);
            }
            Item::Health_Upgrade_4 => {
                self.cbits2.insert(flags::ContextBits2::HEALTH_UPGRADE_4);
            }
            Item::Heretics_Tablet => {
                self.cbits2.insert(flags::ContextBits2::HERETICS_TABLET);
            }
            Item::Hover => {
                self.cbits2.insert(flags::ContextBits2::HOVER);
            }
            Item::Ice_Axe => {
                self.cbits2.insert(flags::ContextBits2::ICE_AXE);
            }
            Item::Infect => {
                self.cbits2.insert(flags::ContextBits2::INFECT);
                rules::action_refill_energy(self, world);
            }
            Item::Infect_L1 => {
                self.cbits2.insert(flags::ContextBits2::INFECT_L1);
            }
            Item::Infect_L2 => {
                self.cbits2.insert(flags::ContextBits2::INFECT_L2);
            }
            Item::Infect_L3 => {
                self.cbits2.insert(flags::ContextBits2::INFECT_L3);
            }
            Item::Infection_Range => {
                self.cbits2.insert(flags::ContextBits2::INFECTION_RANGE);
            }
            Item::Infection_Range_2 => {
                self.cbits2.insert(flags::ContextBits2::INFECTION_RANGE_2);
            }
            Item::Infection_Range_3 => {
                self.cbits3.insert(flags::ContextBits3::INFECTION_RANGE_3);
            }
            Item::Infection_Speed => {
                self.cbits3.insert(flags::ContextBits3::INFECTION_SPEED);
            }
            Item::Irikar_Gudam => {
                self.cbits3.insert(flags::ContextBits3::IRIKAR_GUDAM);
            }
            Item::Irikar_Royal_Storage_Wall => {
                self.cbits3.insert(flags::ContextBits3::IRIKAR_ROYAL_STORAGE_WALL);
            }
            Item::Lament_for_Fools => {
                self.cbits3.insert(flags::ContextBits3::LAMENT_FOR_FOOLS);
            }
            Item::Ledge_Grab => {
                self.cbits3.insert(flags::ContextBits3::LEDGE_GRAB);
            }
            Item::Letter_from_Trace => {
                self.cbits3.insert(flags::ContextBits3::LETTER_FROM_TRACE);
            }
            Item::Melee_Damage => {
                self.cbits3.insert(flags::ContextBits3::MELEE_DAMAGE);
            }
            Item::Melee_Damage_2 => {
                self.cbits3.insert(flags::ContextBits3::MELEE_DAMAGE_2);
            }
            Item::Melee_Speed => {
                self.cbits3.insert(flags::ContextBits3::MELEE_SPEED);
            }
            Item::Melee_Speed_2 => {
                self.cbits3.insert(flags::ContextBits3::MELEE_SPEED_2);
            }
            Item::Mist_Upgrade => {
                self.cbits3.insert(flags::ContextBits3::MIST_UPGRADE);
            }
            Item::Nanite_Mist => {
                self.cbits3.insert(flags::ContextBits3::NANITE_MIST);
            }
            Item::Nano_Lattice_2 => {
                self.cbits3.insert(flags::ContextBits3::NANO_LATTICE_2);
            }
            Item::Nano_Points => {
                self.cbits3.insert(flags::ContextBits3::NANO_POINTS);
            }
            Item::Nano_Points_2 => {
                self.cbits3.insert(flags::ContextBits3::NANO_POINTS_2);
            }
            Item::Plague_of_Thoughts => {
                self.cbits3.insert(flags::ContextBits3::PLAGUE_OF_THOUGHTS);
            }
            Item::Power_Matrix => {
                self.cbits3.insert(flags::ContextBits3::POWER_MATRIX);
            }
            Item::Ranged_Damage => {
                self.cbits3.insert(flags::ContextBits3::RANGED_DAMAGE);
            }
            Item::Ranged_Damage_2 => {
                self.cbits3.insert(flags::ContextBits3::RANGED_DAMAGE_2);
            }
            Item::Ranged_Speed => {
                self.cbits3.insert(flags::ContextBits3::RANGED_SPEED);
            }
            Item::Ranged_Speed_2 => {
                self.cbits3.insert(flags::ContextBits3::RANGED_SPEED_2);
            }
            Item::Record_Losses => {
                self.cbits3.insert(flags::ContextBits3::RECORD_LOSSES);
            }
            Item::Remote_Drone => {
                self.cbits3.insert(flags::ContextBits3::REMOTE_DRONE);
            }
            Item::Researchers_Missing => {
                self.cbits3.insert(flags::ContextBits3::RESEARCHERS_MISSING);
            }
            Item::Separation => {
                self.cbits3.insert(flags::ContextBits3::SEPARATION);
            }
            Item::Shockwave => {
                self.cbits3.insert(flags::ContextBits3::SHOCKWAVE);
            }
            Item::Slingshot_Charge => {
                self.cbits3.insert(flags::ContextBits3::SLINGSHOT_CHARGE);
            }
            Item::Slingshot_Hook => {
                self.cbits3.insert(flags::ContextBits3::SLINGSHOT_HOOK);
            }
            Item::Slingshot_Weapon => {
                self.cbits3.insert(flags::ContextBits3::SLINGSHOT_WEAPON);
            }
            Item::Sniper_Valley_Rock_1 => {
                self.cbits3.insert(flags::ContextBits3::SNIPER_VALLEY_ROCK_1);
            }
            Item::Sniper_Valley_Rock_2 => {
                self.cbits3.insert(flags::ContextBits3::SNIPER_VALLEY_ROCK_2);
            }
            Item::Station_Power => {
                self.cbits3.insert(flags::ContextBits3::STATION_POWER);
            }
            Item::Storm_Bomb => {
                self.cbits3.insert(flags::ContextBits3::STORM_BOMB);
            }
            Item::Suspension_Bridge => {
                self.cbits3.insert(flags::ContextBits3::SUSPENSION_BRIDGE);
            }
            Item::Switch_36_11 => {
                self.cbits3.insert(flags::ContextBits3::SWITCH_36_11);
            }
            Item::Switch_40_12 => {
                self.cbits3.insert(flags::ContextBits3::SWITCH_40_12);
            }
            Item::Terminal_Breakthrough_1 => {
                self.cbits3.insert(flags::ContextBits3::TERMINAL_BREAKTHROUGH_1);
            }
            Item::Terminal_Breakthrough_2 => {
                self.cbits3.insert(flags::ContextBits3::TERMINAL_BREAKTHROUGH_2);
            }
            Item::The_Ideal_Kiengir => {
                self.cbits3.insert(flags::ContextBits3::THE_IDEAL_KIENGIR);
            }
            Item::Uhrum_Annuna_Corridor_Block => {
                self.cbits3.insert(flags::ContextBits3::UHRUM_ANNUNA_CORRIDOR_BLOCK);
            }
            Item::Uhrum_Waterfall_Wall => {
                self.cbits3.insert(flags::ContextBits3::UHRUM_WATERFALL_WALL);
            }
            Item::Uhrum_Waterfalls_Block => {
                self.cbits3.insert(flags::ContextBits3::UHRUM_WATERFALLS_BLOCK);
            }
            Item::Uhrum_West_Entrance_Gate => {
                self.cbits3.insert(flags::ContextBits3::UHRUM_WEST_ENTRANCE_GATE);
            }
            Item::Uhrum_West_Entrance_Lower_Wall => {
                self.cbits3.insert(flags::ContextBits3::UHRUM_WEST_ENTRANCE_LOWER_WALL);
            }
            Item::Uhrum_West_Entrance_Upper_Wall => {
                self.cbits3.insert(flags::ContextBits3::UHRUM_WEST_ENTRANCE_UPPER_WALL);
            }
            Item::Under_Siege => {
                self.cbits3.insert(flags::ContextBits3::UNDER_SIEGE);
            }
            Item::Underwater_Movement => {
                self.cbits3.insert(flags::ContextBits3::UNDERWATER_MOVEMENT);
            }
            Item::Wall_Climb => {
                self.cbits3.insert(flags::ContextBits3::WALL_CLIMB);
            }
            Item::Water_Movement => {
                self.cbits3.insert(flags::ContextBits3::WATER_MOVEMENT);
            }
            Item::Power_Core => rules::action_refills_incr_1(self, world),
            Item::Amagi_Stronghold_Wall_And_Boulder_1 => rules::action_skip__amagi_gt_west_lake_gt_stronghold_ceiling_left_gt_knock_down_left_boulder_add_item__amagi_stronghold_wall_1_add_item__amagi_stronghold_boulder_1(self, world),
            Item::Amagi_Stronghold_Boulder_And_Wall_2 => rules::action_skip__amagi_gt_west_lake_gt_stronghold_ceiling_right_gt_knock_down_right_boulder_add_item__amagi_stronghold_wall_2_add_item__amagi_stronghold_boulder_2(self, world),
            Item::Ebih_Waterfall_Both_Blocks => rules::action_skip__ebih_gt_waterfall_gt_alcove_gt_block_left_skip__ebih_gt_waterfall_gt_alcove_gt_block_right_skip__ebih_gt_waterfall_gt_alcove_left_gt_block_left_skip__ebih_gt_waterfall_gt_alcove_right_gt_block_right_add_item__ebih_waterfall_block_right_add_item__ebih_waterfall_block_left(self, world),
            _ => (),
        }
    }


    // test helper for items
    fn add_item(&mut self, item: Item) {
        match item {
            Item::Amagi_Dragon_Eye_Passage => {
                self.cbits1.insert(flags::ContextBits1::AMAGI_DRAGON_EYE_PASSAGE);
            }
            Item::Amagi_Stronghold_Boulder_1 => {
                self.cbits1.insert(flags::ContextBits1::AMAGI_STRONGHOLD_BOULDER_1);
            }
            Item::Amagi_Stronghold_Boulder_2 => {
                self.cbits2.insert(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_2);
            }
            Item::Amagi_Stronghold_Wall_1 => {
                self.cbits2.insert(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_1);
            }
            Item::Amagi_Stronghold_Wall_2 => {
                self.cbits2.insert(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_2);
            }
            Item::Amagi_West_Lake_Surface_Wall => {
                self.cbits2.insert(flags::ContextBits2::AMAGI_WEST_LAKE_SURFACE_WALL);
            }
            Item::Amashilama => {
                self.cbits2.insert(flags::ContextBits2::AMASHILAMA);
            }
            Item::Annuna_East_Bridge_Gate => {
                self.cbits2.insert(flags::ContextBits2::ANNUNA_EAST_BRIDGE_GATE);
            }
            Item::Annuna_Mirror_Match_Switch => {
                self.cbits2.insert(flags::ContextBits2::ANNUNA_MIRROR_MATCH_SWITCH);
            }
            Item::Anuman => {
                self.cbits2.insert(flags::ContextBits2::ANUMAN);
            }
            Item::Anunna_Vertical_Room_Gate => {
                self.cbits2.insert(flags::ContextBits2::ANUNNA_VERTICAL_ROOM_GATE);
            }
            Item::Apocalypse_Bomb => {
                self.cbits2.insert(flags::ContextBits2::APOCALYPSE_BOMB);
            }
            Item::Big_Flask => {
                self.cbits2.insert(flags::ContextBits2::BIG_FLASK);
            }
            Item::Boomerang => {
                self.cbits2.insert(flags::ContextBits2::BOOMERANG);
            }
            Item::Breach_Attractor => {
                self.cbits2.insert(flags::ContextBits2::BREACH_ATTRACTOR);
            }
            Item::Breach_Sight => {
                self.cbits2.insert(flags::ContextBits2::BREACH_SIGHT);
            }
            Item::Bronze_Axe => {
                self.cbits2.insert(flags::ContextBits2::BRONZE_AXE);
            }
            Item::Building_of_the_School => {
                self.cbits2.insert(flags::ContextBits2::BUILDING_OF_THE_SCHOOL);
            }
            Item::Commemorative_Speech => {
                self.cbits2.insert(flags::ContextBits2::COMMEMORATIVE_SPEECH);
            }
            Item::Companies_Layoff => {
                self.cbits2.insert(flags::ContextBits2::COMPANIES_LAYOFF);
            }
            Item::Compass => {
                self.cbits2.insert(flags::ContextBits2::COMPASS);
            }
            Item::Dangerous_Ideas => {
                self.cbits2.insert(flags::ContextBits2::DANGEROUS_IDEAS);
            }
            Item::Dear_Ernest => {
                self.cbits2.insert(flags::ContextBits2::DEAR_ERNEST);
            }
            Item::Defeat_Indra => {
                self.cbits2.insert(flags::ContextBits2::DEFEAT_INDRA);
            }
            Item::Defeat_MUS_A_M20 => {
                self.cbits2.insert(flags::ContextBits2::DEFEAT_MUS_A_M20);
            }
            Item::Destruction_Pogrom => {
                self.cbits2.insert(flags::ContextBits2::DESTRUCTION_POGROM);
            }
            Item::Drone_Hover => {
                self.cbits2.insert(flags::ContextBits2::DRONE_HOVER);
            }
            Item::Drone_Melee_Damage => {
                self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_DAMAGE);
            }
            Item::Drone_Melee_Damage_2 => {
                self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_DAMAGE_2);
            }
            Item::Drone_Melee_Speed => {
                self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_SPEED);
            }
            Item::Drone_Melee_Speed_2 => {
                self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_SPEED_2);
            }
            Item::Ebih_Alu => {
                self.cbits2.insert(flags::ContextBits2::EBIH_ALU);
            }
            Item::Ebih_Interchange_Block => {
                self.cbits2.insert(flags::ContextBits2::EBIH_INTERCHANGE_BLOCK);
            }
            Item::Ebih_Interchange_Gate => {
                self.cbits2.insert(flags::ContextBits2::EBIH_INTERCHANGE_GATE);
            }
            Item::Ebih_Wasteland_Door => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WASTELAND_DOOR);
            }
            Item::Ebih_Wasteland_Passage_H => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WASTELAND_PASSAGE_H);
            }
            Item::Ebih_Waterfall_Block_Left => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WATERFALL_BLOCK_LEFT);
            }
            Item::Ebih_Waterfall_Block_Right => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WATERFALL_BLOCK_RIGHT);
            }
            Item::Ebih_Waterfall_Wall => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WATERFALL_WALL);
            }
            Item::Ebih_West_Block => {
                self.cbits2.insert(flags::ContextBits2::EBIH_WEST_BLOCK);
            }
            Item::Escape => {
                self.cbits2.insert(flags::ContextBits2::ESCAPE);
            }
            Item::Exit_Breach => {
                self.cbits2.insert(flags::ContextBits2::EXIT_BREACH);
            }
            Item::Eye_Ring => {
                self.cbits2.insert(flags::ContextBits2::EYE_RING);
            }
            Item::Family_Tragedy => {
                self.cbits2.insert(flags::ContextBits2::FAMILY_TRAGEDY);
            }
            Item::Fast_Travel => {
                self.cbits2.insert(flags::ContextBits2::FAST_TRAVEL);
            }
            Item::Flask => {
                self.flask += 1;
            }
            Item::Giguna_Boulder => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_BOULDER);
            }
            Item::Giguna_Dual_Path_Switch => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_DUAL_PATH_SWITCH);
            }
            Item::Giguna_Dual_Path_Wall => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_DUAL_PATH_WALL);
            }
            Item::Giguna_Gateway_Block => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_GATEWAY_BLOCK);
            }
            Item::Giguna_Gateway_Gate => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_GATEWAY_GATE);
            }
            Item::Giguna_Gubi => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_GUBI);
            }
            Item::Giguna_Northeast_Gate => {
                self.cbits2.insert(flags::ContextBits2::GIGUNA_NORTHEAST_GATE);
            }
            Item::Health_Fragment => {
                self.health_fragment += 1;
            }
            Item::Health_Node => {
                self.cbits2.insert(flags::ContextBits2::HEALTH_NODE);
            }
            Item::Health_Upgrade => {
                self.cbits2.insert(flags::ContextBits2::HEALTH_UPGRADE);
            }
            Item::Health_Upgrade_2 => {
                self.cbits2.insert(flags::ContextBits2::HEALTH_UPGRADE_2);
            }
            Item::Health_Upgrade_3 => {
                self.cbits2.insert(flags::ContextBits2::HEALTH_UPGRADE_3);
            }
            Item::Health_Upgrade_4 => {
                self.cbits2.insert(flags::ContextBits2::HEALTH_UPGRADE_4);
            }
            Item::Heretics_Tablet => {
                self.cbits2.insert(flags::ContextBits2::HERETICS_TABLET);
            }
            Item::Hover => {
                self.cbits2.insert(flags::ContextBits2::HOVER);
            }
            Item::Ice_Axe => {
                self.cbits2.insert(flags::ContextBits2::ICE_AXE);
            }
            Item::Infect => {
                self.cbits2.insert(flags::ContextBits2::INFECT);
            }
            Item::Infect_L1 => {
                self.cbits2.insert(flags::ContextBits2::INFECT_L1);
            }
            Item::Infect_L2 => {
                self.cbits2.insert(flags::ContextBits2::INFECT_L2);
            }
            Item::Infect_L3 => {
                self.cbits2.insert(flags::ContextBits2::INFECT_L3);
            }
            Item::Infection_Range => {
                self.cbits2.insert(flags::ContextBits2::INFECTION_RANGE);
            }
            Item::Infection_Range_2 => {
                self.cbits2.insert(flags::ContextBits2::INFECTION_RANGE_2);
            }
            Item::Infection_Range_3 => {
                self.cbits3.insert(flags::ContextBits3::INFECTION_RANGE_3);
            }
            Item::Infection_Speed => {
                self.cbits3.insert(flags::ContextBits3::INFECTION_SPEED);
            }
            Item::Irikar_Gudam => {
                self.cbits3.insert(flags::ContextBits3::IRIKAR_GUDAM);
            }
            Item::Irikar_Royal_Storage_Wall => {
                self.cbits3.insert(flags::ContextBits3::IRIKAR_ROYAL_STORAGE_WALL);
            }
            Item::Lament_for_Fools => {
                self.cbits3.insert(flags::ContextBits3::LAMENT_FOR_FOOLS);
            }
            Item::Ledge_Grab => {
                self.cbits3.insert(flags::ContextBits3::LEDGE_GRAB);
            }
            Item::Letter_from_Trace => {
                self.cbits3.insert(flags::ContextBits3::LETTER_FROM_TRACE);
            }
            Item::Melee_Damage => {
                self.cbits3.insert(flags::ContextBits3::MELEE_DAMAGE);
            }
            Item::Melee_Damage_2 => {
                self.cbits3.insert(flags::ContextBits3::MELEE_DAMAGE_2);
            }
            Item::Melee_Speed => {
                self.cbits3.insert(flags::ContextBits3::MELEE_SPEED);
            }
            Item::Melee_Speed_2 => {
                self.cbits3.insert(flags::ContextBits3::MELEE_SPEED_2);
            }
            Item::Mist_Upgrade => {
                self.cbits3.insert(flags::ContextBits3::MIST_UPGRADE);
            }
            Item::Nanite_Mist => {
                self.cbits3.insert(flags::ContextBits3::NANITE_MIST);
            }
            Item::Nano_Lattice_2 => {
                self.cbits3.insert(flags::ContextBits3::NANO_LATTICE_2);
            }
            Item::Nano_Points => {
                self.cbits3.insert(flags::ContextBits3::NANO_POINTS);
            }
            Item::Nano_Points_2 => {
                self.cbits3.insert(flags::ContextBits3::NANO_POINTS_2);
            }
            Item::Plague_of_Thoughts => {
                self.cbits3.insert(flags::ContextBits3::PLAGUE_OF_THOUGHTS);
            }
            Item::Power_Matrix => {
                self.cbits3.insert(flags::ContextBits3::POWER_MATRIX);
            }
            Item::Ranged_Damage => {
                self.cbits3.insert(flags::ContextBits3::RANGED_DAMAGE);
            }
            Item::Ranged_Damage_2 => {
                self.cbits3.insert(flags::ContextBits3::RANGED_DAMAGE_2);
            }
            Item::Ranged_Speed => {
                self.cbits3.insert(flags::ContextBits3::RANGED_SPEED);
            }
            Item::Ranged_Speed_2 => {
                self.cbits3.insert(flags::ContextBits3::RANGED_SPEED_2);
            }
            Item::Record_Losses => {
                self.cbits3.insert(flags::ContextBits3::RECORD_LOSSES);
            }
            Item::Remote_Drone => {
                self.cbits3.insert(flags::ContextBits3::REMOTE_DRONE);
            }
            Item::Researchers_Missing => {
                self.cbits3.insert(flags::ContextBits3::RESEARCHERS_MISSING);
            }
            Item::Separation => {
                self.cbits3.insert(flags::ContextBits3::SEPARATION);
            }
            Item::Shockwave => {
                self.cbits3.insert(flags::ContextBits3::SHOCKWAVE);
            }
            Item::Slingshot_Charge => {
                self.cbits3.insert(flags::ContextBits3::SLINGSHOT_CHARGE);
            }
            Item::Slingshot_Hook => {
                self.cbits3.insert(flags::ContextBits3::SLINGSHOT_HOOK);
            }
            Item::Slingshot_Weapon => {
                self.cbits3.insert(flags::ContextBits3::SLINGSHOT_WEAPON);
            }
            Item::Sniper_Valley_Rock_1 => {
                self.cbits3.insert(flags::ContextBits3::SNIPER_VALLEY_ROCK_1);
            }
            Item::Sniper_Valley_Rock_2 => {
                self.cbits3.insert(flags::ContextBits3::SNIPER_VALLEY_ROCK_2);
            }
            Item::Station_Power => {
                self.cbits3.insert(flags::ContextBits3::STATION_POWER);
            }
            Item::Storm_Bomb => {
                self.cbits3.insert(flags::ContextBits3::STORM_BOMB);
            }
            Item::Suspension_Bridge => {
                self.cbits3.insert(flags::ContextBits3::SUSPENSION_BRIDGE);
            }
            Item::Switch_36_11 => {
                self.cbits3.insert(flags::ContextBits3::SWITCH_36_11);
            }
            Item::Switch_40_12 => {
                self.cbits3.insert(flags::ContextBits3::SWITCH_40_12);
            }
            Item::Terminal_Breakthrough_1 => {
                self.cbits3.insert(flags::ContextBits3::TERMINAL_BREAKTHROUGH_1);
            }
            Item::Terminal_Breakthrough_2 => {
                self.cbits3.insert(flags::ContextBits3::TERMINAL_BREAKTHROUGH_2);
            }
            Item::The_Ideal_Kiengir => {
                self.cbits3.insert(flags::ContextBits3::THE_IDEAL_KIENGIR);
            }
            Item::Uhrum_Annuna_Corridor_Block => {
                self.cbits3.insert(flags::ContextBits3::UHRUM_ANNUNA_CORRIDOR_BLOCK);
            }
            Item::Uhrum_Waterfall_Wall => {
                self.cbits3.insert(flags::ContextBits3::UHRUM_WATERFALL_WALL);
            }
            Item::Uhrum_Waterfalls_Block => {
                self.cbits3.insert(flags::ContextBits3::UHRUM_WATERFALLS_BLOCK);
            }
            Item::Uhrum_West_Entrance_Gate => {
                self.cbits3.insert(flags::ContextBits3::UHRUM_WEST_ENTRANCE_GATE);
            }
            Item::Uhrum_West_Entrance_Lower_Wall => {
                self.cbits3.insert(flags::ContextBits3::UHRUM_WEST_ENTRANCE_LOWER_WALL);
            }
            Item::Uhrum_West_Entrance_Upper_Wall => {
                self.cbits3.insert(flags::ContextBits3::UHRUM_WEST_ENTRANCE_UPPER_WALL);
            }
            Item::Under_Siege => {
                self.cbits3.insert(flags::ContextBits3::UNDER_SIEGE);
            }
            Item::Underwater_Movement => {
                self.cbits3.insert(flags::ContextBits3::UNDERWATER_MOVEMENT);
            }
            Item::Wall_Climb => {
                self.cbits3.insert(flags::ContextBits3::WALL_CLIMB);
            }
            Item::Water_Movement => {
                self.cbits3.insert(flags::ContextBits3::WATER_MOVEMENT);
            }
            _ => (),
        }
    }

    // test helper for context vars
    fn parse_set_context(&mut self, ckey: &str, cval: &Yaml) -> Result<(), String> {
        match (ckey, cval) {
            ("position", Yaml::String(s)) => self.set_position_raw(SpotId::from_str(s).map_err(|e| format!("{}", e))?),
            ("position", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("energy", Yaml::Integer(i)) => self.set_energy(i16::try_from(*i).map_err(|e| format!("{}", e))?),
            ("energy", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("flasks", Yaml::Integer(i)) => self.set_flasks(i8::try_from(*i).map_err(|e| format!("{}", e))?),
            ("flasks", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("refills", Yaml::Integer(i)) => self.set_refills(i8::try_from(*i).map_err(|e| format!("{}", e))?),
            ("refills", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("mode", Yaml::String(s)) => self.set_mode(enums::Mode::from_str(s).map_err(|e| format!("{}", e))?),
            ("mode", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("save", Yaml::String(s)) => self.set_save(SpotId::from_str(s).map_err(|e| format!("{}", e))?),
            ("save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("breach_save", Yaml::String(s)) => self.set_breach_save(SpotId::from_str(s).map_err(|e| format!("{}", e))?),
            ("breach_save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("indra", Yaml::String(s)) => self.set_indra(SpotId::from_str(s).map_err(|e| format!("{}", e))?),
            ("indra", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("last", Yaml::String(s)) => self.set_last(SpotId::from_str(s).map_err(|e| format!("{}", e))?),
            ("last", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("prev_area", Yaml::String(s)) => self.set_prev_area(AreaId::from_str(s).map_err(|e| format!("{}", e))?),
            ("prev_area", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__amagi__main_area__save", Yaml::Boolean(b)) => self.set_map__amagi__main_area__save(*b),
            ("map__amagi__main_area__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__amagi__west_lake__urn", Yaml::Boolean(b)) => self.set_map__amagi__west_lake__urn(*b),
            ("map__amagi__west_lake__urn", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__annuna__mirror_match__save", Yaml::Boolean(b)) => self.set_map__annuna__mirror_match__save(*b),
            ("map__annuna__mirror_match__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__annuna__west_bridge__save", Yaml::Boolean(b)) => self.set_map__annuna__west_bridge__save(*b),
            ("map__annuna__west_bridge__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__annuna__vertical_room__save", Yaml::Boolean(b)) => self.set_map__annuna__vertical_room__save(*b),
            ("map__annuna__vertical_room__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__annuna__factory_entrance__save", Yaml::Boolean(b)) => self.set_map__annuna__factory_entrance__save(*b),
            ("map__annuna__factory_entrance__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__annuna__center_save__save", Yaml::Boolean(b)) => self.set_map__annuna__center_save__save(*b),
            ("map__annuna__center_save__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__annuna__final_save__save", Yaml::Boolean(b)) => self.set_map__annuna__final_save__save(*b),
            ("map__annuna__final_save__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__ebih__base_camp__save", Yaml::Boolean(b)) => self.set_map__ebih__base_camp__save(*b),
            ("map__ebih__base_camp__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__ebih__waterfall__axe", Yaml::Boolean(b)) => self.set_map__ebih__waterfall__axe(*b),
            ("map__ebih__waterfall__axe", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__ebih__ebih_west__mid_save", Yaml::Boolean(b)) => self.set_map__ebih__ebih_west__mid_save(*b),
            ("map__ebih__ebih_west__mid_save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__ebih__ebih_west__upper_save", Yaml::Boolean(b)) => self.set_map__ebih__ebih_west__upper_save(*b),
            ("map__ebih__ebih_west__upper_save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__ebih__ebih_west__lower_save", Yaml::Boolean(b)) => self.set_map__ebih__ebih_west__lower_save(*b),
            ("map__ebih__ebih_west__lower_save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__ebih__drone_room__urn", Yaml::Boolean(b)) => self.set_map__ebih__drone_room__urn(*b),
            ("map__ebih__drone_room__urn", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__giguna_breach__peak__save", Yaml::Boolean(b)) => self.set_map__giguna_breach__peak__save(*b),
            ("map__giguna_breach__peak__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__giguna_breach__sw_save__save", Yaml::Boolean(b)) => self.set_map__giguna_breach__sw_save__save(*b),
            ("map__giguna_breach__sw_save__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__giguna__giguna_northeast__save", Yaml::Boolean(b)) => self.set_map__giguna__giguna_northeast__save(*b),
            ("map__giguna__giguna_northeast__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__giguna__giguna_base__save", Yaml::Boolean(b)) => self.set_map__giguna__giguna_base__save(*b),
            ("map__giguna__giguna_base__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__giguna__ruins_west__save", Yaml::Boolean(b)) => self.set_map__giguna__ruins_west__save(*b),
            ("map__giguna__ruins_west__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__giguna__ruins_top__save", Yaml::Boolean(b)) => self.set_map__giguna__ruins_top__save(*b),
            ("map__giguna__ruins_top__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__glacier__revival__save", Yaml::Boolean(b)) => self.set_map__glacier__revival__save(*b),
            ("map__glacier__revival__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__irikar_breach__save_room__save", Yaml::Boolean(b)) => self.set_map__irikar_breach__save_room__save(*b),
            ("map__irikar_breach__save_room__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__irikar_breach__gauntlet__save", Yaml::Boolean(b)) => self.set_map__irikar_breach__gauntlet__save(*b),
            ("map__irikar_breach__gauntlet__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__irikar_breach__basement_save__save", Yaml::Boolean(b)) => self.set_map__irikar_breach__basement_save__save(*b),
            ("map__irikar_breach__basement_save__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__irikar__hub__save", Yaml::Boolean(b)) => self.set_map__irikar__hub__save(*b),
            ("map__irikar__hub__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__irikar__sight_room__urn", Yaml::Boolean(b)) => self.set_map__irikar__sight_room__urn(*b),
            ("map__irikar__sight_room__urn", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__uhrum__west_entrance__save", Yaml::Boolean(b)) => self.set_map__uhrum__west_entrance__save(*b),
            ("map__uhrum__west_entrance__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__uhrum__save_room__save", Yaml::Boolean(b)) => self.set_map__uhrum__save_room__save(*b),
            ("map__uhrum__save_room__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__uhrum__annuna_corridor__save", Yaml::Boolean(b)) => self.set_map__uhrum__annuna_corridor__save(*b),
            ("map__uhrum__annuna_corridor__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__uhrum__annuna_corridor__urn", Yaml::Boolean(b)) => self.set_map__uhrum__annuna_corridor__urn(*b),
            ("map__uhrum__annuna_corridor__urn", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("amagi__main_area__ctx__combo", Yaml::Boolean(b)) => self.set_amagi__main_area__ctx__combo(*b),
            ("amagi__main_area__ctx__combo", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("annuna__west_bridge__ctx__doors_opened", Yaml::Boolean(b)) => self.set_annuna__west_bridge__ctx__doors_opened(*b),
            ("annuna__west_bridge__ctx__doors_opened", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("annuna__east_bridge__ctx__combo", Yaml::Boolean(b)) => self.set_annuna__east_bridge__ctx__combo(*b),
            ("annuna__east_bridge__ctx__combo", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("annuna__west_climb__ctx__door_opened", Yaml::Boolean(b)) => self.set_annuna__west_climb__ctx__door_opened(*b),
            ("annuna__west_climb__ctx__door_opened", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("ebih__base_camp__ctx__left_platform_moved", Yaml::Boolean(b)) => self.set_ebih__base_camp__ctx__left_platform_moved(*b),
            ("ebih__base_camp__ctx__left_platform_moved", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("ebih__grid_25_10_12__ctx__door_open", Yaml::Boolean(b)) => self.set_ebih__grid_25_10_12__ctx__door_open(*b),
            ("ebih__grid_25_10_12__ctx__door_open", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("ebih__waterfall__ctx__west_door_open", Yaml::Boolean(b)) => self.set_ebih__waterfall__ctx__west_door_open(*b),
            ("ebih__waterfall__ctx__west_door_open", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("ebih__ebih_west__ctx__door_open", Yaml::Boolean(b)) => self.set_ebih__ebih_west__ctx__door_open(*b),
            ("ebih__ebih_west__ctx__door_open", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("ebih__ebih_east__ctx__platform1_moved", Yaml::Boolean(b)) => self.set_ebih__ebih_east__ctx__platform1_moved(*b),
            ("ebih__ebih_east__ctx__platform1_moved", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("ebih__ebih_east__ctx__platform2_moved", Yaml::Boolean(b)) => self.set_ebih__ebih_east__ctx__platform2_moved(*b),
            ("ebih__ebih_east__ctx__platform2_moved", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("ebih__drone_room__ctx__platform_moved", Yaml::Boolean(b)) => self.set_ebih__drone_room__ctx__platform_moved(*b),
            ("ebih__drone_room__ctx__platform_moved", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("ebih__vertical_interchange__ctx__door_open", Yaml::Boolean(b)) => self.set_ebih__vertical_interchange__ctx__door_open(*b),
            ("ebih__vertical_interchange__ctx__door_open", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna_breach__sw_save__ctx__door_opened", Yaml::Boolean(b)) => self.set_giguna_breach__sw_save__ctx__door_opened(*b),
            ("giguna_breach__sw_save__ctx__door_opened", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__giguna_northeast__ctx__door_opened", Yaml::Boolean(b)) => self.set_giguna__giguna_northeast__ctx__door_opened(*b),
            ("giguna__giguna_northeast__ctx__door_opened", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__carnelian__ctx__door_opened", Yaml::Boolean(b)) => self.set_giguna__carnelian__ctx__door_opened(*b),
            ("giguna__carnelian__ctx__door_opened", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__carnelian__ctx__upper_susar", Yaml::Boolean(b)) => self.set_giguna__carnelian__ctx__upper_susar(*b),
            ("giguna__carnelian__ctx__upper_susar", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__carnelian__ctx__lower_susar", Yaml::Boolean(b)) => self.set_giguna__carnelian__ctx__lower_susar(*b),
            ("giguna__carnelian__ctx__lower_susar", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__west_caverns__ctx__east_susar", Yaml::Boolean(b)) => self.set_giguna__west_caverns__ctx__east_susar(*b),
            ("giguna__west_caverns__ctx__east_susar", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__giguna_base__ctx__door_open", Yaml::Boolean(b)) => self.set_giguna__giguna_base__ctx__door_open(*b),
            ("giguna__giguna_base__ctx__door_open", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__ruins_west__ctx__kishib_handled", Yaml::Boolean(b)) => self.set_giguna__ruins_west__ctx__kishib_handled(*b),
            ("giguna__ruins_west__ctx__kishib_handled", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__ruins_top__ctx__doors_open", Yaml::Boolean(b)) => self.set_giguna__ruins_top__ctx__doors_open(*b),
            ("giguna__ruins_top__ctx__doors_open", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__clouds__ctx__platform_and_portal", Yaml::Boolean(b)) => self.set_giguna__clouds__ctx__platform_and_portal(*b),
            ("giguna__clouds__ctx__platform_and_portal", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__east_caverns__ctx__door_opened", Yaml::Boolean(b)) => self.set_giguna__east_caverns__ctx__door_opened(*b),
            ("giguna__east_caverns__ctx__door_opened", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__east_caverns__ctx__combo_entered", Yaml::Boolean(b)) => self.set_giguna__east_caverns__ctx__combo_entered(*b),
            ("giguna__east_caverns__ctx__combo_entered", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__east_caverns__ctx__upper_susar", Yaml::Boolean(b)) => self.set_giguna__east_caverns__ctx__upper_susar(*b),
            ("giguna__east_caverns__ctx__upper_susar", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__east_caverns__ctx__mid_susar", Yaml::Boolean(b)) => self.set_giguna__east_caverns__ctx__mid_susar(*b),
            ("giguna__east_caverns__ctx__mid_susar", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__east_caverns__ctx__lower_susar", Yaml::Boolean(b)) => self.set_giguna__east_caverns__ctx__lower_susar(*b),
            ("giguna__east_caverns__ctx__lower_susar", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__gateway__ctx__door_opened", Yaml::Boolean(b)) => self.set_giguna__gateway__ctx__door_opened(*b),
            ("giguna__gateway__ctx__door_opened", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("irikar__basement_portal__ctx__platform_moved", Yaml::Boolean(b)) => self.set_irikar__basement_portal__ctx__platform_moved(*b),
            ("irikar__basement_portal__ctx__platform_moved", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("boomerang_steering", Yaml::Boolean(b)) => self.set_boomerang_steering(*b),
            ("boomerang_steering", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("major_glitches", Yaml::Boolean(b)) => self.set_major_glitches(*b),
            ("major_glitches", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("minor_glitches", Yaml::Boolean(b)) => self.set_minor_glitches(*b),
            ("minor_glitches", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            _ => { return Err(format!("Unrecognized context key: {:?}", ckey)); }
        }
        Ok(())
    }

    fn parse_expect_context(ckey: &str, cval: &Yaml) -> Result<Expectation, String> {
        Ok(match (ckey, cval) {
            ("position", Yaml::String(s)) => Expectation::Position(SpotId::from_str(s).map_err(|e| format!("{}", e))?),
            ("position", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("energy", Yaml::Integer(i)) => Expectation::Energy(i16::try_from(*i).map_err(|e| format!("{}", e))?),
            ("energy", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("flasks", Yaml::Integer(i)) => Expectation::Flasks(i8::try_from(*i).map_err(|e| format!("{}", e))?),
            ("flasks", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("refills", Yaml::Integer(i)) => Expectation::Refills(i8::try_from(*i).map_err(|e| format!("{}", e))?),
            ("refills", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("mode", Yaml::String(s)) => Expectation::Mode(enums::Mode::from_str(s).map_err(|e| format!("{}", e))?),
            ("mode", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("save", Yaml::String(s)) => Expectation::Save(SpotId::from_str(s).map_err(|e| format!("{}", e))?),
            ("save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("breach_save", Yaml::String(s)) => Expectation::BreachSave(SpotId::from_str(s).map_err(|e| format!("{}", e))?),
            ("breach_save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("indra", Yaml::String(s)) => Expectation::Indra(SpotId::from_str(s).map_err(|e| format!("{}", e))?),
            ("indra", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("last", Yaml::String(s)) => Expectation::Last(SpotId::from_str(s).map_err(|e| format!("{}", e))?),
            ("last", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("prev_area", Yaml::String(s)) => Expectation::PrevArea(AreaId::from_str(s).map_err(|e| format!("{}", e))?),
            ("prev_area", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__amagi__main_area__save", Yaml::Boolean(b)) => Expectation::MapAmagiMainAreaSave(*b),
            ("map__amagi__main_area__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__amagi__west_lake__urn", Yaml::Boolean(b)) => Expectation::MapAmagiWestLakeUrn(*b),
            ("map__amagi__west_lake__urn", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__annuna__mirror_match__save", Yaml::Boolean(b)) => Expectation::MapAnnunaMirrorMatchSave(*b),
            ("map__annuna__mirror_match__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__annuna__west_bridge__save", Yaml::Boolean(b)) => Expectation::MapAnnunaWestBridgeSave(*b),
            ("map__annuna__west_bridge__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__annuna__vertical_room__save", Yaml::Boolean(b)) => Expectation::MapAnnunaVerticalRoomSave(*b),
            ("map__annuna__vertical_room__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__annuna__factory_entrance__save", Yaml::Boolean(b)) => Expectation::MapAnnunaFactoryEntranceSave(*b),
            ("map__annuna__factory_entrance__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__annuna__center_save__save", Yaml::Boolean(b)) => Expectation::MapAnnunaCenterSaveSave(*b),
            ("map__annuna__center_save__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__annuna__final_save__save", Yaml::Boolean(b)) => Expectation::MapAnnunaFinalSaveSave(*b),
            ("map__annuna__final_save__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__ebih__base_camp__save", Yaml::Boolean(b)) => Expectation::MapEbihBaseCampSave(*b),
            ("map__ebih__base_camp__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__ebih__waterfall__axe", Yaml::Boolean(b)) => Expectation::MapEbihWaterfallAxe(*b),
            ("map__ebih__waterfall__axe", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__ebih__ebih_west__mid_save", Yaml::Boolean(b)) => Expectation::MapEbihEbihWestMidSave(*b),
            ("map__ebih__ebih_west__mid_save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__ebih__ebih_west__upper_save", Yaml::Boolean(b)) => Expectation::MapEbihEbihWestUpperSave(*b),
            ("map__ebih__ebih_west__upper_save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__ebih__ebih_west__lower_save", Yaml::Boolean(b)) => Expectation::MapEbihEbihWestLowerSave(*b),
            ("map__ebih__ebih_west__lower_save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__ebih__drone_room__urn", Yaml::Boolean(b)) => Expectation::MapEbihDroneRoomUrn(*b),
            ("map__ebih__drone_room__urn", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__giguna_breach__peak__save", Yaml::Boolean(b)) => Expectation::MapGigunaBreachPeakSave(*b),
            ("map__giguna_breach__peak__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__giguna_breach__sw_save__save", Yaml::Boolean(b)) => Expectation::MapGigunaBreachSwSaveSave(*b),
            ("map__giguna_breach__sw_save__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__giguna__giguna_northeast__save", Yaml::Boolean(b)) => Expectation::MapGigunaGigunaNortheastSave(*b),
            ("map__giguna__giguna_northeast__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__giguna__giguna_base__save", Yaml::Boolean(b)) => Expectation::MapGigunaGigunaBaseSave(*b),
            ("map__giguna__giguna_base__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__giguna__ruins_west__save", Yaml::Boolean(b)) => Expectation::MapGigunaRuinsWestSave(*b),
            ("map__giguna__ruins_west__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__giguna__ruins_top__save", Yaml::Boolean(b)) => Expectation::MapGigunaRuinsTopSave(*b),
            ("map__giguna__ruins_top__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__glacier__revival__save", Yaml::Boolean(b)) => Expectation::MapGlacierRevivalSave(*b),
            ("map__glacier__revival__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__irikar_breach__save_room__save", Yaml::Boolean(b)) => Expectation::MapIrikarBreachSaveRoomSave(*b),
            ("map__irikar_breach__save_room__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__irikar_breach__gauntlet__save", Yaml::Boolean(b)) => Expectation::MapIrikarBreachGauntletSave(*b),
            ("map__irikar_breach__gauntlet__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__irikar_breach__basement_save__save", Yaml::Boolean(b)) => Expectation::MapIrikarBreachBasementSaveSave(*b),
            ("map__irikar_breach__basement_save__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__irikar__hub__save", Yaml::Boolean(b)) => Expectation::MapIrikarHubSave(*b),
            ("map__irikar__hub__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__irikar__sight_room__urn", Yaml::Boolean(b)) => Expectation::MapIrikarSightRoomUrn(*b),
            ("map__irikar__sight_room__urn", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__uhrum__west_entrance__save", Yaml::Boolean(b)) => Expectation::MapUhrumWestEntranceSave(*b),
            ("map__uhrum__west_entrance__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__uhrum__save_room__save", Yaml::Boolean(b)) => Expectation::MapUhrumSaveRoomSave(*b),
            ("map__uhrum__save_room__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__uhrum__annuna_corridor__save", Yaml::Boolean(b)) => Expectation::MapUhrumAnnunaCorridorSave(*b),
            ("map__uhrum__annuna_corridor__save", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("map__uhrum__annuna_corridor__urn", Yaml::Boolean(b)) => Expectation::MapUhrumAnnunaCorridorUrn(*b),
            ("map__uhrum__annuna_corridor__urn", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("amagi__main_area__ctx__combo", Yaml::Boolean(b)) => Expectation::AmagiMainAreaCtxCombo(*b),
            ("amagi__main_area__ctx__combo", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("annuna__west_bridge__ctx__doors_opened", Yaml::Boolean(b)) => Expectation::AnnunaWestBridgeCtxDoorsOpened(*b),
            ("annuna__west_bridge__ctx__doors_opened", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("annuna__east_bridge__ctx__combo", Yaml::Boolean(b)) => Expectation::AnnunaEastBridgeCtxCombo(*b),
            ("annuna__east_bridge__ctx__combo", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("annuna__west_climb__ctx__door_opened", Yaml::Boolean(b)) => Expectation::AnnunaWestClimbCtxDoorOpened(*b),
            ("annuna__west_climb__ctx__door_opened", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("ebih__base_camp__ctx__left_platform_moved", Yaml::Boolean(b)) => Expectation::EbihBaseCampCtxLeftPlatformMoved(*b),
            ("ebih__base_camp__ctx__left_platform_moved", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("ebih__grid_25_10_12__ctx__door_open", Yaml::Boolean(b)) => Expectation::EbihGrid251012CtxDoorOpen(*b),
            ("ebih__grid_25_10_12__ctx__door_open", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("ebih__waterfall__ctx__west_door_open", Yaml::Boolean(b)) => Expectation::EbihWaterfallCtxWestDoorOpen(*b),
            ("ebih__waterfall__ctx__west_door_open", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("ebih__ebih_west__ctx__door_open", Yaml::Boolean(b)) => Expectation::EbihEbihWestCtxDoorOpen(*b),
            ("ebih__ebih_west__ctx__door_open", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("ebih__ebih_east__ctx__platform1_moved", Yaml::Boolean(b)) => Expectation::EbihEbihEastCtxPlatform1Moved(*b),
            ("ebih__ebih_east__ctx__platform1_moved", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("ebih__ebih_east__ctx__platform2_moved", Yaml::Boolean(b)) => Expectation::EbihEbihEastCtxPlatform2Moved(*b),
            ("ebih__ebih_east__ctx__platform2_moved", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("ebih__drone_room__ctx__platform_moved", Yaml::Boolean(b)) => Expectation::EbihDroneRoomCtxPlatformMoved(*b),
            ("ebih__drone_room__ctx__platform_moved", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("ebih__vertical_interchange__ctx__door_open", Yaml::Boolean(b)) => Expectation::EbihVerticalInterchangeCtxDoorOpen(*b),
            ("ebih__vertical_interchange__ctx__door_open", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna_breach__sw_save__ctx__door_opened", Yaml::Boolean(b)) => Expectation::GigunaBreachSwSaveCtxDoorOpened(*b),
            ("giguna_breach__sw_save__ctx__door_opened", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__giguna_northeast__ctx__door_opened", Yaml::Boolean(b)) => Expectation::GigunaGigunaNortheastCtxDoorOpened(*b),
            ("giguna__giguna_northeast__ctx__door_opened", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__carnelian__ctx__door_opened", Yaml::Boolean(b)) => Expectation::GigunaCarnelianCtxDoorOpened(*b),
            ("giguna__carnelian__ctx__door_opened", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__carnelian__ctx__upper_susar", Yaml::Boolean(b)) => Expectation::GigunaCarnelianCtxUpperSusar(*b),
            ("giguna__carnelian__ctx__upper_susar", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__carnelian__ctx__lower_susar", Yaml::Boolean(b)) => Expectation::GigunaCarnelianCtxLowerSusar(*b),
            ("giguna__carnelian__ctx__lower_susar", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__west_caverns__ctx__east_susar", Yaml::Boolean(b)) => Expectation::GigunaWestCavernsCtxEastSusar(*b),
            ("giguna__west_caverns__ctx__east_susar", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__giguna_base__ctx__door_open", Yaml::Boolean(b)) => Expectation::GigunaGigunaBaseCtxDoorOpen(*b),
            ("giguna__giguna_base__ctx__door_open", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__ruins_west__ctx__kishib_handled", Yaml::Boolean(b)) => Expectation::GigunaRuinsWestCtxKishibHandled(*b),
            ("giguna__ruins_west__ctx__kishib_handled", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__ruins_top__ctx__doors_open", Yaml::Boolean(b)) => Expectation::GigunaRuinsTopCtxDoorsOpen(*b),
            ("giguna__ruins_top__ctx__doors_open", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__clouds__ctx__platform_and_portal", Yaml::Boolean(b)) => Expectation::GigunaCloudsCtxPlatformAndPortal(*b),
            ("giguna__clouds__ctx__platform_and_portal", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__east_caverns__ctx__door_opened", Yaml::Boolean(b)) => Expectation::GigunaEastCavernsCtxDoorOpened(*b),
            ("giguna__east_caverns__ctx__door_opened", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__east_caverns__ctx__combo_entered", Yaml::Boolean(b)) => Expectation::GigunaEastCavernsCtxComboEntered(*b),
            ("giguna__east_caverns__ctx__combo_entered", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__east_caverns__ctx__upper_susar", Yaml::Boolean(b)) => Expectation::GigunaEastCavernsCtxUpperSusar(*b),
            ("giguna__east_caverns__ctx__upper_susar", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__east_caverns__ctx__mid_susar", Yaml::Boolean(b)) => Expectation::GigunaEastCavernsCtxMidSusar(*b),
            ("giguna__east_caverns__ctx__mid_susar", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__east_caverns__ctx__lower_susar", Yaml::Boolean(b)) => Expectation::GigunaEastCavernsCtxLowerSusar(*b),
            ("giguna__east_caverns__ctx__lower_susar", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("giguna__gateway__ctx__door_opened", Yaml::Boolean(b)) => Expectation::GigunaGatewayCtxDoorOpened(*b),
            ("giguna__gateway__ctx__door_opened", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("irikar__basement_portal__ctx__platform_moved", Yaml::Boolean(b)) => Expectation::IrikarBasementPortalCtxPlatformMoved(*b),
            ("irikar__basement_portal__ctx__platform_moved", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Amagi_Dragon_Eye_Passage", Yaml::Boolean(b)) => Expectation::AmagiDragonEyePassage(*b),
            ("Amagi_Dragon_Eye_Passage", Yaml::Integer(i)) => Expectation::AmagiDragonEyePassage(*i > 0),
            ("Amagi_Dragon_Eye_Passage", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Amagi_Stronghold_Boulder_1", Yaml::Boolean(b)) => Expectation::AmagiStrongholdBoulder1(*b),
            ("Amagi_Stronghold_Boulder_1", Yaml::Integer(i)) => Expectation::AmagiStrongholdBoulder1(*i > 0),
            ("Amagi_Stronghold_Boulder_1", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Amagi_Stronghold_Boulder_2", Yaml::Boolean(b)) => Expectation::AmagiStrongholdBoulder2(*b),
            ("Amagi_Stronghold_Boulder_2", Yaml::Integer(i)) => Expectation::AmagiStrongholdBoulder2(*i > 0),
            ("Amagi_Stronghold_Boulder_2", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Amagi_Stronghold_Wall_1", Yaml::Boolean(b)) => Expectation::AmagiStrongholdWall1(*b),
            ("Amagi_Stronghold_Wall_1", Yaml::Integer(i)) => Expectation::AmagiStrongholdWall1(*i > 0),
            ("Amagi_Stronghold_Wall_1", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Amagi_Stronghold_Wall_2", Yaml::Boolean(b)) => Expectation::AmagiStrongholdWall2(*b),
            ("Amagi_Stronghold_Wall_2", Yaml::Integer(i)) => Expectation::AmagiStrongholdWall2(*i > 0),
            ("Amagi_Stronghold_Wall_2", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Amagi_West_Lake_Surface_Wall", Yaml::Boolean(b)) => Expectation::AmagiWestLakeSurfaceWall(*b),
            ("Amagi_West_Lake_Surface_Wall", Yaml::Integer(i)) => Expectation::AmagiWestLakeSurfaceWall(*i > 0),
            ("Amagi_West_Lake_Surface_Wall", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Amashilama", Yaml::Boolean(b)) => Expectation::Amashilama(*b),
            ("Amashilama", Yaml::Integer(i)) => Expectation::Amashilama(*i > 0),
            ("Amashilama", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Annuna_East_Bridge_Gate", Yaml::Boolean(b)) => Expectation::AnnunaEastBridgeGate(*b),
            ("Annuna_East_Bridge_Gate", Yaml::Integer(i)) => Expectation::AnnunaEastBridgeGate(*i > 0),
            ("Annuna_East_Bridge_Gate", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Annuna_Mirror_Match_Switch", Yaml::Boolean(b)) => Expectation::AnnunaMirrorMatchSwitch(*b),
            ("Annuna_Mirror_Match_Switch", Yaml::Integer(i)) => Expectation::AnnunaMirrorMatchSwitch(*i > 0),
            ("Annuna_Mirror_Match_Switch", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Anuman", Yaml::Boolean(b)) => Expectation::Anuman(*b),
            ("Anuman", Yaml::Integer(i)) => Expectation::Anuman(*i > 0),
            ("Anuman", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Anunna_Vertical_Room_Gate", Yaml::Boolean(b)) => Expectation::AnunnaVerticalRoomGate(*b),
            ("Anunna_Vertical_Room_Gate", Yaml::Integer(i)) => Expectation::AnunnaVerticalRoomGate(*i > 0),
            ("Anunna_Vertical_Room_Gate", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Apocalypse_Bomb", Yaml::Boolean(b)) => Expectation::ApocalypseBomb(*b),
            ("Apocalypse_Bomb", Yaml::Integer(i)) => Expectation::ApocalypseBomb(*i > 0),
            ("Apocalypse_Bomb", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Big_Flask", Yaml::Boolean(b)) => Expectation::BigFlask(*b),
            ("Big_Flask", Yaml::Integer(i)) => Expectation::BigFlask(*i > 0),
            ("Big_Flask", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Boomerang", Yaml::Boolean(b)) => Expectation::Boomerang(*b),
            ("Boomerang", Yaml::Integer(i)) => Expectation::Boomerang(*i > 0),
            ("Boomerang", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Breach_Attractor", Yaml::Boolean(b)) => Expectation::BreachAttractor(*b),
            ("Breach_Attractor", Yaml::Integer(i)) => Expectation::BreachAttractor(*i > 0),
            ("Breach_Attractor", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Breach_Sight", Yaml::Boolean(b)) => Expectation::BreachSight(*b),
            ("Breach_Sight", Yaml::Integer(i)) => Expectation::BreachSight(*i > 0),
            ("Breach_Sight", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Bronze_Axe", Yaml::Boolean(b)) => Expectation::BronzeAxe(*b),
            ("Bronze_Axe", Yaml::Integer(i)) => Expectation::BronzeAxe(*i > 0),
            ("Bronze_Axe", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Building_of_the_School", Yaml::Boolean(b)) => Expectation::BuildingOfTheSchool(*b),
            ("Building_of_the_School", Yaml::Integer(i)) => Expectation::BuildingOfTheSchool(*i > 0),
            ("Building_of_the_School", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Commemorative_Speech", Yaml::Boolean(b)) => Expectation::CommemorativeSpeech(*b),
            ("Commemorative_Speech", Yaml::Integer(i)) => Expectation::CommemorativeSpeech(*i > 0),
            ("Commemorative_Speech", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Companies_Layoff", Yaml::Boolean(b)) => Expectation::CompaniesLayoff(*b),
            ("Companies_Layoff", Yaml::Integer(i)) => Expectation::CompaniesLayoff(*i > 0),
            ("Companies_Layoff", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Compass", Yaml::Boolean(b)) => Expectation::Compass(*b),
            ("Compass", Yaml::Integer(i)) => Expectation::Compass(*i > 0),
            ("Compass", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Dangerous_Ideas", Yaml::Boolean(b)) => Expectation::DangerousIdeas(*b),
            ("Dangerous_Ideas", Yaml::Integer(i)) => Expectation::DangerousIdeas(*i > 0),
            ("Dangerous_Ideas", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Dear_Ernest", Yaml::Boolean(b)) => Expectation::DearErnest(*b),
            ("Dear_Ernest", Yaml::Integer(i)) => Expectation::DearErnest(*i > 0),
            ("Dear_Ernest", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Defeat_Indra", Yaml::Boolean(b)) => Expectation::DefeatIndra(*b),
            ("Defeat_Indra", Yaml::Integer(i)) => Expectation::DefeatIndra(*i > 0),
            ("Defeat_Indra", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Defeat_MUS_A_M20", Yaml::Boolean(b)) => Expectation::DefeatMUSAM20(*b),
            ("Defeat_MUS_A_M20", Yaml::Integer(i)) => Expectation::DefeatMUSAM20(*i > 0),
            ("Defeat_MUS_A_M20", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Destruction_Pogrom", Yaml::Boolean(b)) => Expectation::DestructionPogrom(*b),
            ("Destruction_Pogrom", Yaml::Integer(i)) => Expectation::DestructionPogrom(*i > 0),
            ("Destruction_Pogrom", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Drone_Hover", Yaml::Boolean(b)) => Expectation::DroneHover(*b),
            ("Drone_Hover", Yaml::Integer(i)) => Expectation::DroneHover(*i > 0),
            ("Drone_Hover", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Drone_Melee_Damage", Yaml::Boolean(b)) => Expectation::DroneMeleeDamage(*b),
            ("Drone_Melee_Damage", Yaml::Integer(i)) => Expectation::DroneMeleeDamage(*i > 0),
            ("Drone_Melee_Damage", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Drone_Melee_Damage_2", Yaml::Boolean(b)) => Expectation::DroneMeleeDamage2(*b),
            ("Drone_Melee_Damage_2", Yaml::Integer(i)) => Expectation::DroneMeleeDamage2(*i > 0),
            ("Drone_Melee_Damage_2", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Drone_Melee_Speed", Yaml::Boolean(b)) => Expectation::DroneMeleeSpeed(*b),
            ("Drone_Melee_Speed", Yaml::Integer(i)) => Expectation::DroneMeleeSpeed(*i > 0),
            ("Drone_Melee_Speed", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Drone_Melee_Speed_2", Yaml::Boolean(b)) => Expectation::DroneMeleeSpeed2(*b),
            ("Drone_Melee_Speed_2", Yaml::Integer(i)) => Expectation::DroneMeleeSpeed2(*i > 0),
            ("Drone_Melee_Speed_2", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Ebih_Alu", Yaml::Boolean(b)) => Expectation::EbihAlu(*b),
            ("Ebih_Alu", Yaml::Integer(i)) => Expectation::EbihAlu(*i > 0),
            ("Ebih_Alu", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Ebih_Interchange_Block", Yaml::Boolean(b)) => Expectation::EbihInterchangeBlock(*b),
            ("Ebih_Interchange_Block", Yaml::Integer(i)) => Expectation::EbihInterchangeBlock(*i > 0),
            ("Ebih_Interchange_Block", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Ebih_Interchange_Gate", Yaml::Boolean(b)) => Expectation::EbihInterchangeGate(*b),
            ("Ebih_Interchange_Gate", Yaml::Integer(i)) => Expectation::EbihInterchangeGate(*i > 0),
            ("Ebih_Interchange_Gate", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Ebih_Wasteland_Door", Yaml::Boolean(b)) => Expectation::EbihWastelandDoor(*b),
            ("Ebih_Wasteland_Door", Yaml::Integer(i)) => Expectation::EbihWastelandDoor(*i > 0),
            ("Ebih_Wasteland_Door", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Ebih_Wasteland_Passage_H", Yaml::Boolean(b)) => Expectation::EbihWastelandPassageH(*b),
            ("Ebih_Wasteland_Passage_H", Yaml::Integer(i)) => Expectation::EbihWastelandPassageH(*i > 0),
            ("Ebih_Wasteland_Passage_H", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Ebih_Waterfall_Block_Left", Yaml::Boolean(b)) => Expectation::EbihWaterfallBlockLeft(*b),
            ("Ebih_Waterfall_Block_Left", Yaml::Integer(i)) => Expectation::EbihWaterfallBlockLeft(*i > 0),
            ("Ebih_Waterfall_Block_Left", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Ebih_Waterfall_Block_Right", Yaml::Boolean(b)) => Expectation::EbihWaterfallBlockRight(*b),
            ("Ebih_Waterfall_Block_Right", Yaml::Integer(i)) => Expectation::EbihWaterfallBlockRight(*i > 0),
            ("Ebih_Waterfall_Block_Right", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Ebih_Waterfall_Wall", Yaml::Boolean(b)) => Expectation::EbihWaterfallWall(*b),
            ("Ebih_Waterfall_Wall", Yaml::Integer(i)) => Expectation::EbihWaterfallWall(*i > 0),
            ("Ebih_Waterfall_Wall", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Ebih_West_Block", Yaml::Boolean(b)) => Expectation::EbihWestBlock(*b),
            ("Ebih_West_Block", Yaml::Integer(i)) => Expectation::EbihWestBlock(*i > 0),
            ("Ebih_West_Block", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Escape", Yaml::Boolean(b)) => Expectation::Escape(*b),
            ("Escape", Yaml::Integer(i)) => Expectation::Escape(*i > 0),
            ("Escape", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Exit_Breach", Yaml::Boolean(b)) => Expectation::ExitBreach(*b),
            ("Exit_Breach", Yaml::Integer(i)) => Expectation::ExitBreach(*i > 0),
            ("Exit_Breach", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Eye_Ring", Yaml::Boolean(b)) => Expectation::EyeRing(*b),
            ("Eye_Ring", Yaml::Integer(i)) => Expectation::EyeRing(*i > 0),
            ("Eye_Ring", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Family_Tragedy", Yaml::Boolean(b)) => Expectation::FamilyTragedy(*b),
            ("Family_Tragedy", Yaml::Integer(i)) => Expectation::FamilyTragedy(*i > 0),
            ("Family_Tragedy", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Fast_Travel", Yaml::Boolean(b)) => Expectation::FastTravel(*b),
            ("Fast_Travel", Yaml::Integer(i)) => Expectation::FastTravel(*i > 0),
            ("Fast_Travel", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Flask", Yaml::Integer(i)) => Expectation::Flask(i8::try_from(*i).map_err(|e| format!("{}", e))?),
            ("Flask", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Giguna_Boulder", Yaml::Boolean(b)) => Expectation::GigunaBoulder(*b),
            ("Giguna_Boulder", Yaml::Integer(i)) => Expectation::GigunaBoulder(*i > 0),
            ("Giguna_Boulder", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Giguna_Dual_Path_Switch", Yaml::Boolean(b)) => Expectation::GigunaDualPathSwitch(*b),
            ("Giguna_Dual_Path_Switch", Yaml::Integer(i)) => Expectation::GigunaDualPathSwitch(*i > 0),
            ("Giguna_Dual_Path_Switch", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Giguna_Dual_Path_Wall", Yaml::Boolean(b)) => Expectation::GigunaDualPathWall(*b),
            ("Giguna_Dual_Path_Wall", Yaml::Integer(i)) => Expectation::GigunaDualPathWall(*i > 0),
            ("Giguna_Dual_Path_Wall", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Giguna_Gateway_Block", Yaml::Boolean(b)) => Expectation::GigunaGatewayBlock(*b),
            ("Giguna_Gateway_Block", Yaml::Integer(i)) => Expectation::GigunaGatewayBlock(*i > 0),
            ("Giguna_Gateway_Block", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Giguna_Gateway_Gate", Yaml::Boolean(b)) => Expectation::GigunaGatewayGate(*b),
            ("Giguna_Gateway_Gate", Yaml::Integer(i)) => Expectation::GigunaGatewayGate(*i > 0),
            ("Giguna_Gateway_Gate", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Giguna_Gubi", Yaml::Boolean(b)) => Expectation::GigunaGubi(*b),
            ("Giguna_Gubi", Yaml::Integer(i)) => Expectation::GigunaGubi(*i > 0),
            ("Giguna_Gubi", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Giguna_Northeast_Gate", Yaml::Boolean(b)) => Expectation::GigunaNortheastGate(*b),
            ("Giguna_Northeast_Gate", Yaml::Integer(i)) => Expectation::GigunaNortheastGate(*i > 0),
            ("Giguna_Northeast_Gate", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Health_Fragment", Yaml::Integer(i)) => Expectation::HealthFragment(i8::try_from(*i).map_err(|e| format!("{}", e))?),
            ("Health_Fragment", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Health_Node", Yaml::Boolean(b)) => Expectation::HealthNode(*b),
            ("Health_Node", Yaml::Integer(i)) => Expectation::HealthNode(*i > 0),
            ("Health_Node", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Health_Upgrade", Yaml::Boolean(b)) => Expectation::HealthUpgrade(*b),
            ("Health_Upgrade", Yaml::Integer(i)) => Expectation::HealthUpgrade(*i > 0),
            ("Health_Upgrade", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Health_Upgrade_2", Yaml::Boolean(b)) => Expectation::HealthUpgrade2(*b),
            ("Health_Upgrade_2", Yaml::Integer(i)) => Expectation::HealthUpgrade2(*i > 0),
            ("Health_Upgrade_2", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Health_Upgrade_3", Yaml::Boolean(b)) => Expectation::HealthUpgrade3(*b),
            ("Health_Upgrade_3", Yaml::Integer(i)) => Expectation::HealthUpgrade3(*i > 0),
            ("Health_Upgrade_3", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Health_Upgrade_4", Yaml::Boolean(b)) => Expectation::HealthUpgrade4(*b),
            ("Health_Upgrade_4", Yaml::Integer(i)) => Expectation::HealthUpgrade4(*i > 0),
            ("Health_Upgrade_4", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Heretics_Tablet", Yaml::Boolean(b)) => Expectation::HereticsTablet(*b),
            ("Heretics_Tablet", Yaml::Integer(i)) => Expectation::HereticsTablet(*i > 0),
            ("Heretics_Tablet", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Hover", Yaml::Boolean(b)) => Expectation::Hover(*b),
            ("Hover", Yaml::Integer(i)) => Expectation::Hover(*i > 0),
            ("Hover", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Ice_Axe", Yaml::Boolean(b)) => Expectation::IceAxe(*b),
            ("Ice_Axe", Yaml::Integer(i)) => Expectation::IceAxe(*i > 0),
            ("Ice_Axe", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Infect", Yaml::Boolean(b)) => Expectation::Infect(*b),
            ("Infect", Yaml::Integer(i)) => Expectation::Infect(*i > 0),
            ("Infect", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Infect_L1", Yaml::Boolean(b)) => Expectation::InfectL1(*b),
            ("Infect_L1", Yaml::Integer(i)) => Expectation::InfectL1(*i > 0),
            ("Infect_L1", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Infect_L2", Yaml::Boolean(b)) => Expectation::InfectL2(*b),
            ("Infect_L2", Yaml::Integer(i)) => Expectation::InfectL2(*i > 0),
            ("Infect_L2", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Infect_L3", Yaml::Boolean(b)) => Expectation::InfectL3(*b),
            ("Infect_L3", Yaml::Integer(i)) => Expectation::InfectL3(*i > 0),
            ("Infect_L3", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Infection_Range", Yaml::Boolean(b)) => Expectation::InfectionRange(*b),
            ("Infection_Range", Yaml::Integer(i)) => Expectation::InfectionRange(*i > 0),
            ("Infection_Range", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Infection_Range_2", Yaml::Boolean(b)) => Expectation::InfectionRange2(*b),
            ("Infection_Range_2", Yaml::Integer(i)) => Expectation::InfectionRange2(*i > 0),
            ("Infection_Range_2", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Infection_Range_3", Yaml::Boolean(b)) => Expectation::InfectionRange3(*b),
            ("Infection_Range_3", Yaml::Integer(i)) => Expectation::InfectionRange3(*i > 0),
            ("Infection_Range_3", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Infection_Speed", Yaml::Boolean(b)) => Expectation::InfectionSpeed(*b),
            ("Infection_Speed", Yaml::Integer(i)) => Expectation::InfectionSpeed(*i > 0),
            ("Infection_Speed", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Irikar_Gudam", Yaml::Boolean(b)) => Expectation::IrikarGudam(*b),
            ("Irikar_Gudam", Yaml::Integer(i)) => Expectation::IrikarGudam(*i > 0),
            ("Irikar_Gudam", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Irikar_Royal_Storage_Wall", Yaml::Boolean(b)) => Expectation::IrikarRoyalStorageWall(*b),
            ("Irikar_Royal_Storage_Wall", Yaml::Integer(i)) => Expectation::IrikarRoyalStorageWall(*i > 0),
            ("Irikar_Royal_Storage_Wall", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Lament_for_Fools", Yaml::Boolean(b)) => Expectation::LamentForFools(*b),
            ("Lament_for_Fools", Yaml::Integer(i)) => Expectation::LamentForFools(*i > 0),
            ("Lament_for_Fools", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Ledge_Grab", Yaml::Boolean(b)) => Expectation::LedgeGrab(*b),
            ("Ledge_Grab", Yaml::Integer(i)) => Expectation::LedgeGrab(*i > 0),
            ("Ledge_Grab", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Letter_from_Trace", Yaml::Boolean(b)) => Expectation::LetterFromTrace(*b),
            ("Letter_from_Trace", Yaml::Integer(i)) => Expectation::LetterFromTrace(*i > 0),
            ("Letter_from_Trace", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Melee_Damage", Yaml::Boolean(b)) => Expectation::MeleeDamage(*b),
            ("Melee_Damage", Yaml::Integer(i)) => Expectation::MeleeDamage(*i > 0),
            ("Melee_Damage", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Melee_Damage_2", Yaml::Boolean(b)) => Expectation::MeleeDamage2(*b),
            ("Melee_Damage_2", Yaml::Integer(i)) => Expectation::MeleeDamage2(*i > 0),
            ("Melee_Damage_2", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Melee_Speed", Yaml::Boolean(b)) => Expectation::MeleeSpeed(*b),
            ("Melee_Speed", Yaml::Integer(i)) => Expectation::MeleeSpeed(*i > 0),
            ("Melee_Speed", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Melee_Speed_2", Yaml::Boolean(b)) => Expectation::MeleeSpeed2(*b),
            ("Melee_Speed_2", Yaml::Integer(i)) => Expectation::MeleeSpeed2(*i > 0),
            ("Melee_Speed_2", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Mist_Upgrade", Yaml::Boolean(b)) => Expectation::MistUpgrade(*b),
            ("Mist_Upgrade", Yaml::Integer(i)) => Expectation::MistUpgrade(*i > 0),
            ("Mist_Upgrade", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Nanite_Mist", Yaml::Boolean(b)) => Expectation::NaniteMist(*b),
            ("Nanite_Mist", Yaml::Integer(i)) => Expectation::NaniteMist(*i > 0),
            ("Nanite_Mist", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Nano_Lattice_2", Yaml::Boolean(b)) => Expectation::NanoLattice2(*b),
            ("Nano_Lattice_2", Yaml::Integer(i)) => Expectation::NanoLattice2(*i > 0),
            ("Nano_Lattice_2", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Nano_Points", Yaml::Boolean(b)) => Expectation::NanoPoints(*b),
            ("Nano_Points", Yaml::Integer(i)) => Expectation::NanoPoints(*i > 0),
            ("Nano_Points", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Nano_Points_2", Yaml::Boolean(b)) => Expectation::NanoPoints2(*b),
            ("Nano_Points_2", Yaml::Integer(i)) => Expectation::NanoPoints2(*i > 0),
            ("Nano_Points_2", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Plague_of_Thoughts", Yaml::Boolean(b)) => Expectation::PlagueOfThoughts(*b),
            ("Plague_of_Thoughts", Yaml::Integer(i)) => Expectation::PlagueOfThoughts(*i > 0),
            ("Plague_of_Thoughts", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Power_Matrix", Yaml::Boolean(b)) => Expectation::PowerMatrix(*b),
            ("Power_Matrix", Yaml::Integer(i)) => Expectation::PowerMatrix(*i > 0),
            ("Power_Matrix", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Ranged_Damage", Yaml::Boolean(b)) => Expectation::RangedDamage(*b),
            ("Ranged_Damage", Yaml::Integer(i)) => Expectation::RangedDamage(*i > 0),
            ("Ranged_Damage", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Ranged_Damage_2", Yaml::Boolean(b)) => Expectation::RangedDamage2(*b),
            ("Ranged_Damage_2", Yaml::Integer(i)) => Expectation::RangedDamage2(*i > 0),
            ("Ranged_Damage_2", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Ranged_Speed", Yaml::Boolean(b)) => Expectation::RangedSpeed(*b),
            ("Ranged_Speed", Yaml::Integer(i)) => Expectation::RangedSpeed(*i > 0),
            ("Ranged_Speed", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Ranged_Speed_2", Yaml::Boolean(b)) => Expectation::RangedSpeed2(*b),
            ("Ranged_Speed_2", Yaml::Integer(i)) => Expectation::RangedSpeed2(*i > 0),
            ("Ranged_Speed_2", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Record_Losses", Yaml::Boolean(b)) => Expectation::RecordLosses(*b),
            ("Record_Losses", Yaml::Integer(i)) => Expectation::RecordLosses(*i > 0),
            ("Record_Losses", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Remote_Drone", Yaml::Boolean(b)) => Expectation::RemoteDrone(*b),
            ("Remote_Drone", Yaml::Integer(i)) => Expectation::RemoteDrone(*i > 0),
            ("Remote_Drone", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Researchers_Missing", Yaml::Boolean(b)) => Expectation::ResearchersMissing(*b),
            ("Researchers_Missing", Yaml::Integer(i)) => Expectation::ResearchersMissing(*i > 0),
            ("Researchers_Missing", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Separation", Yaml::Boolean(b)) => Expectation::Separation(*b),
            ("Separation", Yaml::Integer(i)) => Expectation::Separation(*i > 0),
            ("Separation", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Shockwave", Yaml::Boolean(b)) => Expectation::Shockwave(*b),
            ("Shockwave", Yaml::Integer(i)) => Expectation::Shockwave(*i > 0),
            ("Shockwave", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Slingshot_Charge", Yaml::Boolean(b)) => Expectation::SlingshotCharge(*b),
            ("Slingshot_Charge", Yaml::Integer(i)) => Expectation::SlingshotCharge(*i > 0),
            ("Slingshot_Charge", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Slingshot_Hook", Yaml::Boolean(b)) => Expectation::SlingshotHook(*b),
            ("Slingshot_Hook", Yaml::Integer(i)) => Expectation::SlingshotHook(*i > 0),
            ("Slingshot_Hook", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Slingshot_Weapon", Yaml::Boolean(b)) => Expectation::SlingshotWeapon(*b),
            ("Slingshot_Weapon", Yaml::Integer(i)) => Expectation::SlingshotWeapon(*i > 0),
            ("Slingshot_Weapon", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Sniper_Valley_Rock_1", Yaml::Boolean(b)) => Expectation::SniperValleyRock1(*b),
            ("Sniper_Valley_Rock_1", Yaml::Integer(i)) => Expectation::SniperValleyRock1(*i > 0),
            ("Sniper_Valley_Rock_1", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Sniper_Valley_Rock_2", Yaml::Boolean(b)) => Expectation::SniperValleyRock2(*b),
            ("Sniper_Valley_Rock_2", Yaml::Integer(i)) => Expectation::SniperValleyRock2(*i > 0),
            ("Sniper_Valley_Rock_2", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Station_Power", Yaml::Boolean(b)) => Expectation::StationPower(*b),
            ("Station_Power", Yaml::Integer(i)) => Expectation::StationPower(*i > 0),
            ("Station_Power", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Storm_Bomb", Yaml::Boolean(b)) => Expectation::StormBomb(*b),
            ("Storm_Bomb", Yaml::Integer(i)) => Expectation::StormBomb(*i > 0),
            ("Storm_Bomb", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Suspension_Bridge", Yaml::Boolean(b)) => Expectation::SuspensionBridge(*b),
            ("Suspension_Bridge", Yaml::Integer(i)) => Expectation::SuspensionBridge(*i > 0),
            ("Suspension_Bridge", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Switch_36_11", Yaml::Boolean(b)) => Expectation::Switch3611(*b),
            ("Switch_36_11", Yaml::Integer(i)) => Expectation::Switch3611(*i > 0),
            ("Switch_36_11", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Switch_40_12", Yaml::Boolean(b)) => Expectation::Switch4012(*b),
            ("Switch_40_12", Yaml::Integer(i)) => Expectation::Switch4012(*i > 0),
            ("Switch_40_12", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Terminal_Breakthrough_1", Yaml::Boolean(b)) => Expectation::TerminalBreakthrough1(*b),
            ("Terminal_Breakthrough_1", Yaml::Integer(i)) => Expectation::TerminalBreakthrough1(*i > 0),
            ("Terminal_Breakthrough_1", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Terminal_Breakthrough_2", Yaml::Boolean(b)) => Expectation::TerminalBreakthrough2(*b),
            ("Terminal_Breakthrough_2", Yaml::Integer(i)) => Expectation::TerminalBreakthrough2(*i > 0),
            ("Terminal_Breakthrough_2", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("The_Ideal_Kiengir", Yaml::Boolean(b)) => Expectation::TheIdealKiengir(*b),
            ("The_Ideal_Kiengir", Yaml::Integer(i)) => Expectation::TheIdealKiengir(*i > 0),
            ("The_Ideal_Kiengir", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Uhrum_Annuna_Corridor_Block", Yaml::Boolean(b)) => Expectation::UhrumAnnunaCorridorBlock(*b),
            ("Uhrum_Annuna_Corridor_Block", Yaml::Integer(i)) => Expectation::UhrumAnnunaCorridorBlock(*i > 0),
            ("Uhrum_Annuna_Corridor_Block", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Uhrum_Waterfall_Wall", Yaml::Boolean(b)) => Expectation::UhrumWaterfallWall(*b),
            ("Uhrum_Waterfall_Wall", Yaml::Integer(i)) => Expectation::UhrumWaterfallWall(*i > 0),
            ("Uhrum_Waterfall_Wall", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Uhrum_Waterfalls_Block", Yaml::Boolean(b)) => Expectation::UhrumWaterfallsBlock(*b),
            ("Uhrum_Waterfalls_Block", Yaml::Integer(i)) => Expectation::UhrumWaterfallsBlock(*i > 0),
            ("Uhrum_Waterfalls_Block", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Uhrum_West_Entrance_Gate", Yaml::Boolean(b)) => Expectation::UhrumWestEntranceGate(*b),
            ("Uhrum_West_Entrance_Gate", Yaml::Integer(i)) => Expectation::UhrumWestEntranceGate(*i > 0),
            ("Uhrum_West_Entrance_Gate", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Uhrum_West_Entrance_Lower_Wall", Yaml::Boolean(b)) => Expectation::UhrumWestEntranceLowerWall(*b),
            ("Uhrum_West_Entrance_Lower_Wall", Yaml::Integer(i)) => Expectation::UhrumWestEntranceLowerWall(*i > 0),
            ("Uhrum_West_Entrance_Lower_Wall", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Uhrum_West_Entrance_Upper_Wall", Yaml::Boolean(b)) => Expectation::UhrumWestEntranceUpperWall(*b),
            ("Uhrum_West_Entrance_Upper_Wall", Yaml::Integer(i)) => Expectation::UhrumWestEntranceUpperWall(*i > 0),
            ("Uhrum_West_Entrance_Upper_Wall", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Under_Siege", Yaml::Boolean(b)) => Expectation::UnderSiege(*b),
            ("Under_Siege", Yaml::Integer(i)) => Expectation::UnderSiege(*i > 0),
            ("Under_Siege", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Underwater_Movement", Yaml::Boolean(b)) => Expectation::UnderwaterMovement(*b),
            ("Underwater_Movement", Yaml::Integer(i)) => Expectation::UnderwaterMovement(*i > 0),
            ("Underwater_Movement", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Wall_Climb", Yaml::Boolean(b)) => Expectation::WallClimb(*b),
            ("Wall_Climb", Yaml::Integer(i)) => Expectation::WallClimb(*i > 0),
            ("Wall_Climb", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            ("Water_Movement", Yaml::Boolean(b)) => Expectation::WaterMovement(*b),
            ("Water_Movement", Yaml::Integer(i)) => Expectation::WaterMovement(*i > 0),
            ("Water_Movement", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
            _ => { return Err(format!("Unrecognized/disallowed expect context key: {:?}", ckey)); }
        })
    }

    fn assert_expectations(&self, exps: &Vec<Expectation>) -> Result<(), String> {
        let mut errs = Vec::new();
        for exp in exps {
            match exp {
                Expectation::Position(e) => {
                    let v = self.position();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "position", e, v));
                    }
                }
                Expectation::Energy(e) => {
                    let v = self.energy();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "energy", e, v));
                    }
                }
                Expectation::Flasks(e) => {
                    let v = self.flasks();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "flasks", e, v));
                    }
                }
                Expectation::Refills(e) => {
                    let v = self.refills();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "refills", e, v));
                    }
                }
                Expectation::Mode(e) => {
                    let v = self.mode();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "mode", e, v));
                    }
                }
                Expectation::Save(e) => {
                    let v = self.save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "save", e, v));
                    }
                }
                Expectation::BreachSave(e) => {
                    let v = self.breach_save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "breach_save", e, v));
                    }
                }
                Expectation::Indra(e) => {
                    let v = self.indra();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "indra", e, v));
                    }
                }
                Expectation::Last(e) => {
                    let v = self.last();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "last", e, v));
                    }
                }
                Expectation::PrevArea(e) => {
                    let v = self.prev_area();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "prev_area", e, v));
                    }
                }
                Expectation::MapAmagiMainAreaSave(e) => {
                    let v = self.map__amagi__main_area__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__amagi__main_area__save", e, v));
                    }
                }
                Expectation::MapAmagiWestLakeUrn(e) => {
                    let v = self.map__amagi__west_lake__urn();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__amagi__west_lake__urn", e, v));
                    }
                }
                Expectation::MapAnnunaMirrorMatchSave(e) => {
                    let v = self.map__annuna__mirror_match__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__annuna__mirror_match__save", e, v));
                    }
                }
                Expectation::MapAnnunaWestBridgeSave(e) => {
                    let v = self.map__annuna__west_bridge__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__annuna__west_bridge__save", e, v));
                    }
                }
                Expectation::MapAnnunaVerticalRoomSave(e) => {
                    let v = self.map__annuna__vertical_room__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__annuna__vertical_room__save", e, v));
                    }
                }
                Expectation::MapAnnunaFactoryEntranceSave(e) => {
                    let v = self.map__annuna__factory_entrance__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__annuna__factory_entrance__save", e, v));
                    }
                }
                Expectation::MapAnnunaCenterSaveSave(e) => {
                    let v = self.map__annuna__center_save__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__annuna__center_save__save", e, v));
                    }
                }
                Expectation::MapAnnunaFinalSaveSave(e) => {
                    let v = self.map__annuna__final_save__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__annuna__final_save__save", e, v));
                    }
                }
                Expectation::MapEbihBaseCampSave(e) => {
                    let v = self.map__ebih__base_camp__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__ebih__base_camp__save", e, v));
                    }
                }
                Expectation::MapEbihWaterfallAxe(e) => {
                    let v = self.map__ebih__waterfall__axe();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__ebih__waterfall__axe", e, v));
                    }
                }
                Expectation::MapEbihEbihWestMidSave(e) => {
                    let v = self.map__ebih__ebih_west__mid_save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__ebih__ebih_west__mid_save", e, v));
                    }
                }
                Expectation::MapEbihEbihWestUpperSave(e) => {
                    let v = self.map__ebih__ebih_west__upper_save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__ebih__ebih_west__upper_save", e, v));
                    }
                }
                Expectation::MapEbihEbihWestLowerSave(e) => {
                    let v = self.map__ebih__ebih_west__lower_save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__ebih__ebih_west__lower_save", e, v));
                    }
                }
                Expectation::MapEbihDroneRoomUrn(e) => {
                    let v = self.map__ebih__drone_room__urn();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__ebih__drone_room__urn", e, v));
                    }
                }
                Expectation::MapGigunaBreachPeakSave(e) => {
                    let v = self.map__giguna_breach__peak__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__giguna_breach__peak__save", e, v));
                    }
                }
                Expectation::MapGigunaBreachSwSaveSave(e) => {
                    let v = self.map__giguna_breach__sw_save__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__giguna_breach__sw_save__save", e, v));
                    }
                }
                Expectation::MapGigunaGigunaNortheastSave(e) => {
                    let v = self.map__giguna__giguna_northeast__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__giguna__giguna_northeast__save", e, v));
                    }
                }
                Expectation::MapGigunaGigunaBaseSave(e) => {
                    let v = self.map__giguna__giguna_base__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__giguna__giguna_base__save", e, v));
                    }
                }
                Expectation::MapGigunaRuinsWestSave(e) => {
                    let v = self.map__giguna__ruins_west__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__giguna__ruins_west__save", e, v));
                    }
                }
                Expectation::MapGigunaRuinsTopSave(e) => {
                    let v = self.map__giguna__ruins_top__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__giguna__ruins_top__save", e, v));
                    }
                }
                Expectation::MapGlacierRevivalSave(e) => {
                    let v = self.map__glacier__revival__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__glacier__revival__save", e, v));
                    }
                }
                Expectation::MapIrikarBreachSaveRoomSave(e) => {
                    let v = self.map__irikar_breach__save_room__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__irikar_breach__save_room__save", e, v));
                    }
                }
                Expectation::MapIrikarBreachGauntletSave(e) => {
                    let v = self.map__irikar_breach__gauntlet__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__irikar_breach__gauntlet__save", e, v));
                    }
                }
                Expectation::MapIrikarBreachBasementSaveSave(e) => {
                    let v = self.map__irikar_breach__basement_save__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__irikar_breach__basement_save__save", e, v));
                    }
                }
                Expectation::MapIrikarHubSave(e) => {
                    let v = self.map__irikar__hub__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__irikar__hub__save", e, v));
                    }
                }
                Expectation::MapIrikarSightRoomUrn(e) => {
                    let v = self.map__irikar__sight_room__urn();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__irikar__sight_room__urn", e, v));
                    }
                }
                Expectation::MapUhrumWestEntranceSave(e) => {
                    let v = self.map__uhrum__west_entrance__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__uhrum__west_entrance__save", e, v));
                    }
                }
                Expectation::MapUhrumSaveRoomSave(e) => {
                    let v = self.map__uhrum__save_room__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__uhrum__save_room__save", e, v));
                    }
                }
                Expectation::MapUhrumAnnunaCorridorSave(e) => {
                    let v = self.map__uhrum__annuna_corridor__save();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__uhrum__annuna_corridor__save", e, v));
                    }
                }
                Expectation::MapUhrumAnnunaCorridorUrn(e) => {
                    let v = self.map__uhrum__annuna_corridor__urn();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "map__uhrum__annuna_corridor__urn", e, v));
                    }
                }
                Expectation::AmagiMainAreaCtxCombo(e) => {
                    let v = self.amagi__main_area__ctx__combo();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "amagi__main_area__ctx__combo", e, v));
                    }
                }
                Expectation::AnnunaWestBridgeCtxDoorsOpened(e) => {
                    let v = self.annuna__west_bridge__ctx__doors_opened();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "annuna__west_bridge__ctx__doors_opened", e, v));
                    }
                }
                Expectation::AnnunaEastBridgeCtxCombo(e) => {
                    let v = self.annuna__east_bridge__ctx__combo();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "annuna__east_bridge__ctx__combo", e, v));
                    }
                }
                Expectation::AnnunaWestClimbCtxDoorOpened(e) => {
                    let v = self.annuna__west_climb__ctx__door_opened();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "annuna__west_climb__ctx__door_opened", e, v));
                    }
                }
                Expectation::EbihBaseCampCtxLeftPlatformMoved(e) => {
                    let v = self.ebih__base_camp__ctx__left_platform_moved();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "ebih__base_camp__ctx__left_platform_moved", e, v));
                    }
                }
                Expectation::EbihGrid251012CtxDoorOpen(e) => {
                    let v = self.ebih__grid_25_10_12__ctx__door_open();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "ebih__grid_25_10_12__ctx__door_open", e, v));
                    }
                }
                Expectation::EbihWaterfallCtxWestDoorOpen(e) => {
                    let v = self.ebih__waterfall__ctx__west_door_open();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "ebih__waterfall__ctx__west_door_open", e, v));
                    }
                }
                Expectation::EbihEbihWestCtxDoorOpen(e) => {
                    let v = self.ebih__ebih_west__ctx__door_open();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "ebih__ebih_west__ctx__door_open", e, v));
                    }
                }
                Expectation::EbihEbihEastCtxPlatform1Moved(e) => {
                    let v = self.ebih__ebih_east__ctx__platform1_moved();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "ebih__ebih_east__ctx__platform1_moved", e, v));
                    }
                }
                Expectation::EbihEbihEastCtxPlatform2Moved(e) => {
                    let v = self.ebih__ebih_east__ctx__platform2_moved();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "ebih__ebih_east__ctx__platform2_moved", e, v));
                    }
                }
                Expectation::EbihDroneRoomCtxPlatformMoved(e) => {
                    let v = self.ebih__drone_room__ctx__platform_moved();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "ebih__drone_room__ctx__platform_moved", e, v));
                    }
                }
                Expectation::EbihVerticalInterchangeCtxDoorOpen(e) => {
                    let v = self.ebih__vertical_interchange__ctx__door_open();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "ebih__vertical_interchange__ctx__door_open", e, v));
                    }
                }
                Expectation::GigunaBreachSwSaveCtxDoorOpened(e) => {
                    let v = self.giguna_breach__sw_save__ctx__door_opened();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "giguna_breach__sw_save__ctx__door_opened", e, v));
                    }
                }
                Expectation::GigunaGigunaNortheastCtxDoorOpened(e) => {
                    let v = self.giguna__giguna_northeast__ctx__door_opened();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "giguna__giguna_northeast__ctx__door_opened", e, v));
                    }
                }
                Expectation::GigunaCarnelianCtxDoorOpened(e) => {
                    let v = self.giguna__carnelian__ctx__door_opened();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "giguna__carnelian__ctx__door_opened", e, v));
                    }
                }
                Expectation::GigunaCarnelianCtxUpperSusar(e) => {
                    let v = self.giguna__carnelian__ctx__upper_susar();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "giguna__carnelian__ctx__upper_susar", e, v));
                    }
                }
                Expectation::GigunaCarnelianCtxLowerSusar(e) => {
                    let v = self.giguna__carnelian__ctx__lower_susar();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "giguna__carnelian__ctx__lower_susar", e, v));
                    }
                }
                Expectation::GigunaWestCavernsCtxEastSusar(e) => {
                    let v = self.giguna__west_caverns__ctx__east_susar();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "giguna__west_caverns__ctx__east_susar", e, v));
                    }
                }
                Expectation::GigunaGigunaBaseCtxDoorOpen(e) => {
                    let v = self.giguna__giguna_base__ctx__door_open();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "giguna__giguna_base__ctx__door_open", e, v));
                    }
                }
                Expectation::GigunaRuinsWestCtxKishibHandled(e) => {
                    let v = self.giguna__ruins_west__ctx__kishib_handled();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "giguna__ruins_west__ctx__kishib_handled", e, v));
                    }
                }
                Expectation::GigunaRuinsTopCtxDoorsOpen(e) => {
                    let v = self.giguna__ruins_top__ctx__doors_open();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "giguna__ruins_top__ctx__doors_open", e, v));
                    }
                }
                Expectation::GigunaCloudsCtxPlatformAndPortal(e) => {
                    let v = self.giguna__clouds__ctx__platform_and_portal();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "giguna__clouds__ctx__platform_and_portal", e, v));
                    }
                }
                Expectation::GigunaEastCavernsCtxDoorOpened(e) => {
                    let v = self.giguna__east_caverns__ctx__door_opened();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "giguna__east_caverns__ctx__door_opened", e, v));
                    }
                }
                Expectation::GigunaEastCavernsCtxComboEntered(e) => {
                    let v = self.giguna__east_caverns__ctx__combo_entered();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "giguna__east_caverns__ctx__combo_entered", e, v));
                    }
                }
                Expectation::GigunaEastCavernsCtxUpperSusar(e) => {
                    let v = self.giguna__east_caverns__ctx__upper_susar();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "giguna__east_caverns__ctx__upper_susar", e, v));
                    }
                }
                Expectation::GigunaEastCavernsCtxMidSusar(e) => {
                    let v = self.giguna__east_caverns__ctx__mid_susar();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "giguna__east_caverns__ctx__mid_susar", e, v));
                    }
                }
                Expectation::GigunaEastCavernsCtxLowerSusar(e) => {
                    let v = self.giguna__east_caverns__ctx__lower_susar();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "giguna__east_caverns__ctx__lower_susar", e, v));
                    }
                }
                Expectation::GigunaGatewayCtxDoorOpened(e) => {
                    let v = self.giguna__gateway__ctx__door_opened();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "giguna__gateway__ctx__door_opened", e, v));
                    }
                }
                Expectation::IrikarBasementPortalCtxPlatformMoved(e) => {
                    let v = self.irikar__basement_portal__ctx__platform_moved();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "irikar__basement_portal__ctx__platform_moved", e, v));
                    }
                }
            Expectation::AmagiDragonEyePassage(e) => {
                let v = self.has(Item::Amagi_Dragon_Eye_Passage);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Amagi_Dragon_Eye_Passage", e, v));
                }
            }
            Expectation::AmagiStrongholdBoulder1(e) => {
                let v = self.has(Item::Amagi_Stronghold_Boulder_1);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Amagi_Stronghold_Boulder_1", e, v));
                }
            }
            Expectation::AmagiStrongholdBoulder2(e) => {
                let v = self.has(Item::Amagi_Stronghold_Boulder_2);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Amagi_Stronghold_Boulder_2", e, v));
                }
            }
            Expectation::AmagiStrongholdWall1(e) => {
                let v = self.has(Item::Amagi_Stronghold_Wall_1);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Amagi_Stronghold_Wall_1", e, v));
                }
            }
            Expectation::AmagiStrongholdWall2(e) => {
                let v = self.has(Item::Amagi_Stronghold_Wall_2);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Amagi_Stronghold_Wall_2", e, v));
                }
            }
            Expectation::AmagiWestLakeSurfaceWall(e) => {
                let v = self.has(Item::Amagi_West_Lake_Surface_Wall);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Amagi_West_Lake_Surface_Wall", e, v));
                }
            }
            Expectation::Amashilama(e) => {
                let v = self.has(Item::Amashilama);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Amashilama", e, v));
                }
            }
            Expectation::AnnunaEastBridgeGate(e) => {
                let v = self.has(Item::Annuna_East_Bridge_Gate);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Annuna_East_Bridge_Gate", e, v));
                }
            }
            Expectation::AnnunaMirrorMatchSwitch(e) => {
                let v = self.has(Item::Annuna_Mirror_Match_Switch);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Annuna_Mirror_Match_Switch", e, v));
                }
            }
            Expectation::Anuman(e) => {
                let v = self.has(Item::Anuman);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Anuman", e, v));
                }
            }
            Expectation::AnunnaVerticalRoomGate(e) => {
                let v = self.has(Item::Anunna_Vertical_Room_Gate);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Anunna_Vertical_Room_Gate", e, v));
                }
            }
            Expectation::ApocalypseBomb(e) => {
                let v = self.has(Item::Apocalypse_Bomb);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Apocalypse_Bomb", e, v));
                }
            }
            Expectation::BigFlask(e) => {
                let v = self.has(Item::Big_Flask);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Big_Flask", e, v));
                }
            }
            Expectation::Boomerang(e) => {
                let v = self.has(Item::Boomerang);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Boomerang", e, v));
                }
            }
            Expectation::BreachAttractor(e) => {
                let v = self.has(Item::Breach_Attractor);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Breach_Attractor", e, v));
                }
            }
            Expectation::BreachSight(e) => {
                let v = self.has(Item::Breach_Sight);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Breach_Sight", e, v));
                }
            }
            Expectation::BronzeAxe(e) => {
                let v = self.has(Item::Bronze_Axe);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Bronze_Axe", e, v));
                }
            }
            Expectation::BuildingOfTheSchool(e) => {
                let v = self.has(Item::Building_of_the_School);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Building_of_the_School", e, v));
                }
            }
            Expectation::CommemorativeSpeech(e) => {
                let v = self.has(Item::Commemorative_Speech);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Commemorative_Speech", e, v));
                }
            }
            Expectation::CompaniesLayoff(e) => {
                let v = self.has(Item::Companies_Layoff);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Companies_Layoff", e, v));
                }
            }
            Expectation::Compass(e) => {
                let v = self.has(Item::Compass);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Compass", e, v));
                }
            }
            Expectation::DangerousIdeas(e) => {
                let v = self.has(Item::Dangerous_Ideas);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Dangerous_Ideas", e, v));
                }
            }
            Expectation::DearErnest(e) => {
                let v = self.has(Item::Dear_Ernest);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Dear_Ernest", e, v));
                }
            }
            Expectation::DefeatIndra(e) => {
                let v = self.has(Item::Defeat_Indra);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Defeat_Indra", e, v));
                }
            }
            Expectation::DefeatMUSAM20(e) => {
                let v = self.has(Item::Defeat_MUS_A_M20);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Defeat_MUS_A_M20", e, v));
                }
            }
            Expectation::DestructionPogrom(e) => {
                let v = self.has(Item::Destruction_Pogrom);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Destruction_Pogrom", e, v));
                }
            }
            Expectation::DroneHover(e) => {
                let v = self.has(Item::Drone_Hover);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Drone_Hover", e, v));
                }
            }
            Expectation::DroneMeleeDamage(e) => {
                let v = self.has(Item::Drone_Melee_Damage);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Drone_Melee_Damage", e, v));
                }
            }
            Expectation::DroneMeleeDamage2(e) => {
                let v = self.has(Item::Drone_Melee_Damage_2);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Drone_Melee_Damage_2", e, v));
                }
            }
            Expectation::DroneMeleeSpeed(e) => {
                let v = self.has(Item::Drone_Melee_Speed);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Drone_Melee_Speed", e, v));
                }
            }
            Expectation::DroneMeleeSpeed2(e) => {
                let v = self.has(Item::Drone_Melee_Speed_2);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Drone_Melee_Speed_2", e, v));
                }
            }
            Expectation::EbihAlu(e) => {
                let v = self.has(Item::Ebih_Alu);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Ebih_Alu", e, v));
                }
            }
            Expectation::EbihInterchangeBlock(e) => {
                let v = self.has(Item::Ebih_Interchange_Block);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Ebih_Interchange_Block", e, v));
                }
            }
            Expectation::EbihInterchangeGate(e) => {
                let v = self.has(Item::Ebih_Interchange_Gate);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Ebih_Interchange_Gate", e, v));
                }
            }
            Expectation::EbihWastelandDoor(e) => {
                let v = self.has(Item::Ebih_Wasteland_Door);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Ebih_Wasteland_Door", e, v));
                }
            }
            Expectation::EbihWastelandPassageH(e) => {
                let v = self.has(Item::Ebih_Wasteland_Passage_H);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Ebih_Wasteland_Passage_H", e, v));
                }
            }
            Expectation::EbihWaterfallBlockLeft(e) => {
                let v = self.has(Item::Ebih_Waterfall_Block_Left);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Ebih_Waterfall_Block_Left", e, v));
                }
            }
            Expectation::EbihWaterfallBlockRight(e) => {
                let v = self.has(Item::Ebih_Waterfall_Block_Right);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Ebih_Waterfall_Block_Right", e, v));
                }
            }
            Expectation::EbihWaterfallWall(e) => {
                let v = self.has(Item::Ebih_Waterfall_Wall);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Ebih_Waterfall_Wall", e, v));
                }
            }
            Expectation::EbihWestBlock(e) => {
                let v = self.has(Item::Ebih_West_Block);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Ebih_West_Block", e, v));
                }
            }
            Expectation::Escape(e) => {
                let v = self.has(Item::Escape);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Escape", e, v));
                }
            }
            Expectation::ExitBreach(e) => {
                let v = self.has(Item::Exit_Breach);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Exit_Breach", e, v));
                }
            }
            Expectation::EyeRing(e) => {
                let v = self.has(Item::Eye_Ring);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Eye_Ring", e, v));
                }
            }
            Expectation::FamilyTragedy(e) => {
                let v = self.has(Item::Family_Tragedy);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Family_Tragedy", e, v));
                }
            }
            Expectation::FastTravel(e) => {
                let v = self.has(Item::Fast_Travel);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Fast_Travel", e, v));
                }
            }
            Expectation::Flask(e) => {
                let v = self.count(Item::Flask);
                if v != <i8 as Into<i16>>::into(*e) {
                    errs.push(format!("Expected {} = {}, got: {}", "Flask", e, v));
                }
            }
            Expectation::GigunaBoulder(e) => {
                let v = self.has(Item::Giguna_Boulder);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Giguna_Boulder", e, v));
                }
            }
            Expectation::GigunaDualPathSwitch(e) => {
                let v = self.has(Item::Giguna_Dual_Path_Switch);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Giguna_Dual_Path_Switch", e, v));
                }
            }
            Expectation::GigunaDualPathWall(e) => {
                let v = self.has(Item::Giguna_Dual_Path_Wall);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Giguna_Dual_Path_Wall", e, v));
                }
            }
            Expectation::GigunaGatewayBlock(e) => {
                let v = self.has(Item::Giguna_Gateway_Block);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Giguna_Gateway_Block", e, v));
                }
            }
            Expectation::GigunaGatewayGate(e) => {
                let v = self.has(Item::Giguna_Gateway_Gate);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Giguna_Gateway_Gate", e, v));
                }
            }
            Expectation::GigunaGubi(e) => {
                let v = self.has(Item::Giguna_Gubi);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Giguna_Gubi", e, v));
                }
            }
            Expectation::GigunaNortheastGate(e) => {
                let v = self.has(Item::Giguna_Northeast_Gate);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Giguna_Northeast_Gate", e, v));
                }
            }
            Expectation::HealthFragment(e) => {
                let v = self.count(Item::Health_Fragment);
                if v != <i8 as Into<i16>>::into(*e) {
                    errs.push(format!("Expected {} = {}, got: {}", "Health_Fragment", e, v));
                }
            }
            Expectation::HealthNode(e) => {
                let v = self.has(Item::Health_Node);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Health_Node", e, v));
                }
            }
            Expectation::HealthUpgrade(e) => {
                let v = self.has(Item::Health_Upgrade);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Health_Upgrade", e, v));
                }
            }
            Expectation::HealthUpgrade2(e) => {
                let v = self.has(Item::Health_Upgrade_2);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Health_Upgrade_2", e, v));
                }
            }
            Expectation::HealthUpgrade3(e) => {
                let v = self.has(Item::Health_Upgrade_3);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Health_Upgrade_3", e, v));
                }
            }
            Expectation::HealthUpgrade4(e) => {
                let v = self.has(Item::Health_Upgrade_4);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Health_Upgrade_4", e, v));
                }
            }
            Expectation::HereticsTablet(e) => {
                let v = self.has(Item::Heretics_Tablet);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Heretics_Tablet", e, v));
                }
            }
            Expectation::Hover(e) => {
                let v = self.has(Item::Hover);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Hover", e, v));
                }
            }
            Expectation::IceAxe(e) => {
                let v = self.has(Item::Ice_Axe);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Ice_Axe", e, v));
                }
            }
            Expectation::Infect(e) => {
                let v = self.has(Item::Infect);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Infect", e, v));
                }
            }
            Expectation::InfectL1(e) => {
                let v = self.has(Item::Infect_L1);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Infect_L1", e, v));
                }
            }
            Expectation::InfectL2(e) => {
                let v = self.has(Item::Infect_L2);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Infect_L2", e, v));
                }
            }
            Expectation::InfectL3(e) => {
                let v = self.has(Item::Infect_L3);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Infect_L3", e, v));
                }
            }
            Expectation::InfectionRange(e) => {
                let v = self.has(Item::Infection_Range);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Infection_Range", e, v));
                }
            }
            Expectation::InfectionRange2(e) => {
                let v = self.has(Item::Infection_Range_2);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Infection_Range_2", e, v));
                }
            }
            Expectation::InfectionRange3(e) => {
                let v = self.has(Item::Infection_Range_3);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Infection_Range_3", e, v));
                }
            }
            Expectation::InfectionSpeed(e) => {
                let v = self.has(Item::Infection_Speed);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Infection_Speed", e, v));
                }
            }
            Expectation::IrikarGudam(e) => {
                let v = self.has(Item::Irikar_Gudam);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Irikar_Gudam", e, v));
                }
            }
            Expectation::IrikarRoyalStorageWall(e) => {
                let v = self.has(Item::Irikar_Royal_Storage_Wall);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Irikar_Royal_Storage_Wall", e, v));
                }
            }
            Expectation::LamentForFools(e) => {
                let v = self.has(Item::Lament_for_Fools);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Lament_for_Fools", e, v));
                }
            }
            Expectation::LedgeGrab(e) => {
                let v = self.has(Item::Ledge_Grab);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Ledge_Grab", e, v));
                }
            }
            Expectation::LetterFromTrace(e) => {
                let v = self.has(Item::Letter_from_Trace);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Letter_from_Trace", e, v));
                }
            }
            Expectation::MeleeDamage(e) => {
                let v = self.has(Item::Melee_Damage);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Melee_Damage", e, v));
                }
            }
            Expectation::MeleeDamage2(e) => {
                let v = self.has(Item::Melee_Damage_2);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Melee_Damage_2", e, v));
                }
            }
            Expectation::MeleeSpeed(e) => {
                let v = self.has(Item::Melee_Speed);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Melee_Speed", e, v));
                }
            }
            Expectation::MeleeSpeed2(e) => {
                let v = self.has(Item::Melee_Speed_2);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Melee_Speed_2", e, v));
                }
            }
            Expectation::MistUpgrade(e) => {
                let v = self.has(Item::Mist_Upgrade);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Mist_Upgrade", e, v));
                }
            }
            Expectation::NaniteMist(e) => {
                let v = self.has(Item::Nanite_Mist);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Nanite_Mist", e, v));
                }
            }
            Expectation::NanoLattice2(e) => {
                let v = self.has(Item::Nano_Lattice_2);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Nano_Lattice_2", e, v));
                }
            }
            Expectation::NanoPoints(e) => {
                let v = self.has(Item::Nano_Points);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Nano_Points", e, v));
                }
            }
            Expectation::NanoPoints2(e) => {
                let v = self.has(Item::Nano_Points_2);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Nano_Points_2", e, v));
                }
            }
            Expectation::PlagueOfThoughts(e) => {
                let v = self.has(Item::Plague_of_Thoughts);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Plague_of_Thoughts", e, v));
                }
            }
            Expectation::PowerMatrix(e) => {
                let v = self.has(Item::Power_Matrix);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Power_Matrix", e, v));
                }
            }
            Expectation::RangedDamage(e) => {
                let v = self.has(Item::Ranged_Damage);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Ranged_Damage", e, v));
                }
            }
            Expectation::RangedDamage2(e) => {
                let v = self.has(Item::Ranged_Damage_2);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Ranged_Damage_2", e, v));
                }
            }
            Expectation::RangedSpeed(e) => {
                let v = self.has(Item::Ranged_Speed);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Ranged_Speed", e, v));
                }
            }
            Expectation::RangedSpeed2(e) => {
                let v = self.has(Item::Ranged_Speed_2);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Ranged_Speed_2", e, v));
                }
            }
            Expectation::RecordLosses(e) => {
                let v = self.has(Item::Record_Losses);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Record_Losses", e, v));
                }
            }
            Expectation::RemoteDrone(e) => {
                let v = self.has(Item::Remote_Drone);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Remote_Drone", e, v));
                }
            }
            Expectation::ResearchersMissing(e) => {
                let v = self.has(Item::Researchers_Missing);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Researchers_Missing", e, v));
                }
            }
            Expectation::Separation(e) => {
                let v = self.has(Item::Separation);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Separation", e, v));
                }
            }
            Expectation::Shockwave(e) => {
                let v = self.has(Item::Shockwave);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Shockwave", e, v));
                }
            }
            Expectation::SlingshotCharge(e) => {
                let v = self.has(Item::Slingshot_Charge);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Slingshot_Charge", e, v));
                }
            }
            Expectation::SlingshotHook(e) => {
                let v = self.has(Item::Slingshot_Hook);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Slingshot_Hook", e, v));
                }
            }
            Expectation::SlingshotWeapon(e) => {
                let v = self.has(Item::Slingshot_Weapon);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Slingshot_Weapon", e, v));
                }
            }
            Expectation::SniperValleyRock1(e) => {
                let v = self.has(Item::Sniper_Valley_Rock_1);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Sniper_Valley_Rock_1", e, v));
                }
            }
            Expectation::SniperValleyRock2(e) => {
                let v = self.has(Item::Sniper_Valley_Rock_2);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Sniper_Valley_Rock_2", e, v));
                }
            }
            Expectation::StationPower(e) => {
                let v = self.has(Item::Station_Power);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Station_Power", e, v));
                }
            }
            Expectation::StormBomb(e) => {
                let v = self.has(Item::Storm_Bomb);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Storm_Bomb", e, v));
                }
            }
            Expectation::SuspensionBridge(e) => {
                let v = self.has(Item::Suspension_Bridge);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Suspension_Bridge", e, v));
                }
            }
            Expectation::Switch3611(e) => {
                let v = self.has(Item::Switch_36_11);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Switch_36_11", e, v));
                }
            }
            Expectation::Switch4012(e) => {
                let v = self.has(Item::Switch_40_12);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Switch_40_12", e, v));
                }
            }
            Expectation::TerminalBreakthrough1(e) => {
                let v = self.has(Item::Terminal_Breakthrough_1);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Terminal_Breakthrough_1", e, v));
                }
            }
            Expectation::TerminalBreakthrough2(e) => {
                let v = self.has(Item::Terminal_Breakthrough_2);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Terminal_Breakthrough_2", e, v));
                }
            }
            Expectation::TheIdealKiengir(e) => {
                let v = self.has(Item::The_Ideal_Kiengir);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "The_Ideal_Kiengir", e, v));
                }
            }
            Expectation::UhrumAnnunaCorridorBlock(e) => {
                let v = self.has(Item::Uhrum_Annuna_Corridor_Block);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Uhrum_Annuna_Corridor_Block", e, v));
                }
            }
            Expectation::UhrumWaterfallWall(e) => {
                let v = self.has(Item::Uhrum_Waterfall_Wall);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Uhrum_Waterfall_Wall", e, v));
                }
            }
            Expectation::UhrumWaterfallsBlock(e) => {
                let v = self.has(Item::Uhrum_Waterfalls_Block);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Uhrum_Waterfalls_Block", e, v));
                }
            }
            Expectation::UhrumWestEntranceGate(e) => {
                let v = self.has(Item::Uhrum_West_Entrance_Gate);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Uhrum_West_Entrance_Gate", e, v));
                }
            }
            Expectation::UhrumWestEntranceLowerWall(e) => {
                let v = self.has(Item::Uhrum_West_Entrance_Lower_Wall);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Uhrum_West_Entrance_Lower_Wall", e, v));
                }
            }
            Expectation::UhrumWestEntranceUpperWall(e) => {
                let v = self.has(Item::Uhrum_West_Entrance_Upper_Wall);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Uhrum_West_Entrance_Upper_Wall", e, v));
                }
            }
            Expectation::UnderSiege(e) => {
                let v = self.has(Item::Under_Siege);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Under_Siege", e, v));
                }
            }
            Expectation::UnderwaterMovement(e) => {
                let v = self.has(Item::Underwater_Movement);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Underwater_Movement", e, v));
                }
            }
            Expectation::WallClimb(e) => {
                let v = self.has(Item::Wall_Climb);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Wall_Climb", e, v));
                }
            }
            Expectation::WaterMovement(e) => {
                let v = self.has(Item::Water_Movement);
                if v != *e {
                    errs.push(format!("Expected {} = {}, got: {}", "Water_Movement", e, v));
                }
            }
            }
        }
        if errs.is_empty() {
            Ok(())
        } else {
            Err(errs.join("\n"))
        }
    }

    fn position(&self) -> SpotId {
        self.position
    }
    fn set_position_raw(&mut self, pos: SpotId) {
        self.position = pos;
    }
    fn set_position(&mut self, pos: SpotId, world: &graph::World) {
        let area = get_area(pos);
        match area {
            AreaId::Amagi__Grid_31_19 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Amagi__Liru_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Amagi__Main_Area => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Amagi__West_Lake => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Apocalypse => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Apocalypse_Hallway => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Center_Save => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                    self.cbits1.insert(flags::ContextBits1::MAP__ANNUNA__CENTER_SAVE__SAVE);
                }
            }
            AreaId::Annuna__East_Bridge => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__East_Climb => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__East_Hideout => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Egg_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Factory_Access => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Factory_Entrance => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                    self.cbits1.insert(flags::ContextBits1::MAP__ANNUNA__FACTORY_ENTRANCE__SAVE);
                }
            }
            AreaId::Annuna__Final_Save => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                    self.cbits1.insert(flags::ContextBits1::MAP__ANNUNA__FINAL_SAVE__SAVE);
                }
            }
            AreaId::Annuna__Lower_Hallway => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Mirror_Match => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Seals => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Sniper_Valley => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Twisty_Passages => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Udug_Gate => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__Vertical_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__West_Bridge => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Annuna__West_Climb => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Antarctica__East => {
                if get_area(self.position) != area {
                    self.save = SpotId::Antarctica__East__Save_Point;
                }
            }
            AreaId::Ebih__Base_Camp => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Boss_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__By_Garage => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Drone_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Ebih_East => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Ebih_West => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Gem_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Grid_21_2_6 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Grid_25_10_12 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Grid_25_2_6 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Grid_26_10_11 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Observation_Tower_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Vertical_Interchange => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Ebih__Waterfall => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Antechamber => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Breachable_Wall => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Carnelian => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Clouds => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Dual_Path => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__East_Caverns => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Far_Corner => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Gateway => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Giguna_Base => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Giguna_Northeast => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Gubi_Lair => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Hard_Rock => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Helipad => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Labyrinth => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Labyrinth_East => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Lamassu => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Mural => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Ruins_Center => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Ruins_East => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Ruins_Top => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Ruins_West => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Separator => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Vertical_Interchange => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__Wasteland => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__West_Caverns => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna__West_Tower => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Antechamber => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Ascent => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Below_Chimney => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Central => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Chimney => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Cubby => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Fire_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Grid_14_10_11 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Peak => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Pink_Clouds => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Robopede => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__Slingshot => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Giguna_Breach__SW_Save => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Apocalypse_Entry => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Boomerang_Antechamber => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Boomerang_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Compass_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Dock_Outside => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Grid_31_9_12 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Grid_32_7_10 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Grid_37_38_9 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Grid_39_40_7_9 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Grid_42_10 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Grid_43_10_11 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Lake_Main_Entrance => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Ledge_Grab_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Peak => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Revival => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__The_Big_Drop => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Glacier__Vertical_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Interior__Building_Interior => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Interior__Bunker_Interior => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Interior__Cave_Behind_Waterfall => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Interior__Ebih_Cave => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Interior__Garage => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Interior__Outpost_Interior => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Interior__Tent_Interior => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Abandoned_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Airy => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Basement_Pipes => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Basement_Portal => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Boss_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__East_Rooftops => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Empty_Foyer => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Hub => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Lamassu => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Midwest => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar__Sight_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Basement_Save => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Exit_Corridor => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Flappy_Drone => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Four_way => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Gauntlet => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Hover_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Neon_Corridor => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Sandy_Lair => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Save_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Uhrum_Connector => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Irikar_Breach__Worm_Rave => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Menu__Breach_Map => {
                if get_area(self.position) != area {
                    rules::action_save_last(self, world, pos);
                }
            }
            AreaId::Menu__Kiengir_Map => {
                if get_area(self.position) != area {
                    rules::action_save_last(self, world, pos);
                }
            }
            AreaId::Menu__Warp_Only => {
                if get_area(self.position) != area {
                    rules::action_save_last(self, world, pos);
                }
            }
            AreaId::Uhrum__Annuna_Corridor => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Uhrum__Artillery_Practice => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Uhrum__East_Lake => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Uhrum__Glitchy_Corridor => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Uhrum__Save_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                    self.cbits1.insert(flags::ContextBits1::MAP__UHRUM__SAVE_ROOM__SAVE);
                }
            }
            AreaId::Uhrum__Siege_Corridor => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Uhrum__Tulip_Tower => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Uhrum__Waterfalls => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            AreaId::Uhrum__West_Entrance => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, world, pos);
                }
            }
            _ => (),
        }
        if self.position != pos {
            match pos {
                SpotId::Amagi__Main_Area__Enemy_Side => {
                    self.cbits1.insert(flags::ContextBits1::MAP__AMAGI__MAIN_AREA__SAVE);

                }
                SpotId::Amagi__Main_Area__Save_Point => {
                    self.cbits1.insert(flags::ContextBits1::MAP__AMAGI__MAIN_AREA__SAVE);

                }
                SpotId::Amagi__West_Lake__Stronghold_Ceiling_Left => {
                    self.cbits1.insert(flags::ContextBits1::MAP__AMAGI__WEST_LAKE__URN);

                }
                SpotId::Amagi__West_Lake__Stronghold_Item => {
                    self.cbits1.insert(flags::ContextBits1::MAP__AMAGI__WEST_LAKE__URN);

                }
                SpotId::Amagi__West_Lake__Stronghold_Middle_Column => {
                    self.cbits1.insert(flags::ContextBits1::MAP__AMAGI__WEST_LAKE__URN);

                }
                SpotId::Amagi__West_Lake__Stronghold_Rear_Wall => {
                    self.cbits1.insert(flags::ContextBits1::MAP__AMAGI__WEST_LAKE__URN);

                }
                SpotId::Amagi__West_Lake__Stronghold_Top => {
                    self.cbits1.insert(flags::ContextBits1::MAP__AMAGI__WEST_LAKE__URN);

                }
                SpotId::Annuna__Mirror_Match__Eastward => {
                    self.cbits1.insert(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE);

                }
                SpotId::Annuna__Mirror_Match__Save_Point => {
                    self.cbits1.insert(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE);

                }
                SpotId::Annuna__Mirror_Match__West_Gap => {
                    self.cbits1.insert(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE);

                }
                SpotId::Ebih__Base_Camp__Save_Point => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__BASE_CAMP__SAVE);

                }
                SpotId::Ebih__Drone_Room__Item => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__DRONE_ROOM__URN);

                }
                SpotId::Ebih__Drone_Room__Middle_Platform => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__DRONE_ROOM__URN);

                }
                SpotId::Ebih__Drone_Room__Pit_Left => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__DRONE_ROOM__URN);

                }
                SpotId::Ebih__Drone_Room__Portal => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__DRONE_ROOM__URN);

                }
                SpotId::Ebih__Drone_Room__West_6 => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__DRONE_ROOM__URN);

                }
                SpotId::Ebih__Ebih_West__Above_Chute => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE);

                }
                SpotId::Ebih__Ebih_West__East_10 => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__MID_SAVE);

                }
                SpotId::Ebih__Ebih_West__East_7 => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE);

                }
                SpotId::Ebih__Ebih_West__Lower_Platform => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE);

                }
                SpotId::Ebih__Ebih_West__Lower_Save => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE);

                }
                SpotId::Ebih__Ebih_West__Medium_High_Platform => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE);

                }
                SpotId::Ebih__Ebih_West__Mid_Save => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__MID_SAVE);

                }
                SpotId::Ebih__Ebih_West__Upper_Save => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE);

                }
                SpotId::Ebih__Ebih_West__West_13 => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE);

                }
                SpotId::Ebih__Waterfall__Alcove => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__WATERFALL__AXE);

                }
                SpotId::Ebih__Waterfall__Alcove_Left => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__WATERFALL__AXE);

                }
                SpotId::Ebih__Waterfall__Under_Waterfall => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__WATERFALL__AXE);

                }
                SpotId::Ebih__Waterfall__Waterfall_Center_Center => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__WATERFALL__AXE);

                }
                SpotId::Ebih__Waterfall__Waterfall_Center_Left => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__WATERFALL__AXE);

                }
                SpotId::Ebih__Waterfall__Waterfall_Left => {
                    self.cbits1.insert(flags::ContextBits1::MAP__EBIH__WATERFALL__AXE);

                }
                SpotId::Giguna__Giguna_Base__Save_Point => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE);

                }
                SpotId::Giguna__Giguna_Base__Staircase_Bottom => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE);

                }
                SpotId::Giguna__Giguna_Base__Table => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE);

                }
                SpotId::Giguna__Giguna_Base__West_16 => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE);

                }
                SpotId::Giguna__Giguna_Northeast__Gate_Left => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);

                }
                SpotId::Giguna__Giguna_Northeast__Gate_Vent => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);

                }
                SpotId::Giguna__Giguna_Northeast__Save_Point => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);

                }
                SpotId::Giguna__Giguna_Northeast__Step => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);

                }
                SpotId::Giguna__Giguna_Northeast__West_10 => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);

                }
                SpotId::Giguna__Ruins_Top__Save_Point => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);

                }
                SpotId::Giguna__Ruins_Top__Switch => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);

                }
                SpotId::Giguna__Ruins_Top__Turret_Balcony_East => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);

                }
                SpotId::Giguna__Ruins_Top__Turret_Balcony_West => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);

                }
                SpotId::Giguna__Ruins_Top__West_Pillar => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);

                }
                SpotId::Giguna__Ruins_West__East_9 => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE);

                }
                SpotId::Giguna__Ruins_West__Nook => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE);

                }
                SpotId::Giguna__Ruins_West__Platform => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE);

                }
                SpotId::Giguna__Ruins_West__Save_Point => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE);

                }
                SpotId::Giguna_Breach__Peak__Save_Point => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA_BREACH__PEAK__SAVE);

                }
                SpotId::Giguna_Breach__SW_Save__East_12 => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE);

                }
                SpotId::Giguna_Breach__SW_Save__Lower_Platform => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE);

                }
                SpotId::Giguna_Breach__SW_Save__Save_Point => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE);

                }
                SpotId::Glacier__Revival__Save_Point => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE);

                }
                SpotId::Glacier__Revival__West_8 => {
                    self.cbits1.insert(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE);

                }
                SpotId::Irikar__Hub__Bowl_Hole => {
                    self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);

                }
                SpotId::Irikar__Hub__Bowl_Middle_Platform_Center => {
                    self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);

                }
                SpotId::Irikar__Hub__Bowl_Middle_Platform_West => {
                    self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);

                }
                SpotId::Irikar__Hub__Bowl_Platform_3 => {
                    self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);

                }
                SpotId::Irikar__Hub__Save_Point => {
                    self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);

                }
                SpotId::Irikar__Sight_Room__Item_Pedestal => {
                    self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR__SIGHT_ROOM__URN);

                }
                SpotId::Irikar__Sight_Room__Portal => {
                    self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR__SIGHT_ROOM__URN);

                }
                SpotId::Irikar_Breach__Basement_Save__Save_Point => {
                    self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR_BREACH__BASEMENT_SAVE__SAVE);

                }
                SpotId::Irikar_Breach__Gauntlet__East_22 => {
                    self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE);

                }
                SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Entry => {
                    self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE);

                }
                SpotId::Irikar_Breach__Gauntlet__Hidden_Path_Upper_Right => {
                    self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE);

                }
                SpotId::Irikar_Breach__Gauntlet__Save_Point => {
                    self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE);

                }
                SpotId::Irikar_Breach__Save_Room__Save_Point => {
                    self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE);

                }
                SpotId::Irikar_Breach__Save_Room__Upper_Area => {
                    self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE);

                }
                SpotId::Irikar_Breach__Save_Room__West => {
                    self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE);

                }
                SpotId::Uhrum__Annuna_Corridor__Block_West => {
                    self.cbits1.insert(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE);

                }
                SpotId::Uhrum__Annuna_Corridor__Pedestal => {
                    self.cbits1.insert(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__URN);

                }
                SpotId::Uhrum__Annuna_Corridor__Save_Point => {
                    self.cbits1.insert(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE);

                }
                SpotId::Uhrum__Annuna_Corridor__Upper_Trees => {
                    self.cbits1.insert(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__URN);

                }
                SpotId::Uhrum__Annuna_Corridor__West_26 => {
                    self.cbits1.insert(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE);

                }
                SpotId::Uhrum__West_Entrance__Lower_Wall_West => {
                    self.cbits1.insert(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE);

                }
                SpotId::Uhrum__West_Entrance__Sand => {
                    self.cbits1.insert(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE);

                }
                SpotId::Uhrum__West_Entrance__Save_Point => {
                    self.cbits1.insert(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE);

                }
                SpotId::Uhrum__West_Entrance__Southeast_Tree => {
                    self.cbits1.insert(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE);

                }
                _ => (),
            }
        }
        self.position = pos;
    }

    fn reload_game(&mut self, world: &graph::World) {
        self.reset_all(world);
        self.cbits1.remove(flags::ContextBits1::AMAGI__MAIN_AREA__CTX__COMBO);
        self.cbits1.remove(flags::ContextBits1::ANNUNA__EAST_BRIDGE__CTX__COMBO);
        self.cbits1.remove(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED);
    }

    fn reset_all(&mut self, world: &graph::World) {
        self.cbits1.remove(flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED);
        self.cbits1.remove(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED);
        self.cbits1.remove(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED);
        self.cbits1.remove(flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED);
        self.cbits1.remove(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__UPPER_SUSAR);
        self.cbits1.remove(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__LOWER_SUSAR);
        self.cbits1.remove(flags::ContextBits1::GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR);
        self.cbits1.remove(flags::ContextBits1::GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED);
        self.cbits1.remove(flags::ContextBits1::GIGUNA__CLOUDS__CTX__PLATFORM_AND_PORTAL);
        self.cbits1.remove(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR);
        self.cbits1.remove(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR);
        self.cbits1.remove(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR);
        self.cbits1.remove(flags::ContextBits1::GIGUNA__GATEWAY__CTX__DOOR_OPENED);
        self.cbits1.remove(flags::ContextBits1::IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED);
    }

    fn reset_region(&mut self, region_id: RegionId, world: &graph::World) {
    }
    fn reset_area(&mut self, area_id: AreaId, world: &graph::World) {
        match area_id {
            AreaId::Ebih__Base_Camp => {
                self.cbits1.remove(flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED);
            }
            AreaId::Ebih__Ebih_East => {
                self.cbits1.remove(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED);
                self.cbits1.remove(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED);
            }
            AreaId::Ebih__Drone_Room => {
                self.cbits1.remove(flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED);
            }
            AreaId::Giguna__Carnelian => {
                self.cbits1.remove(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__UPPER_SUSAR);
                self.cbits1.remove(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__LOWER_SUSAR);
            }
            AreaId::Giguna__West_Caverns => {
                self.cbits1.remove(flags::ContextBits1::GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR);
            }
            AreaId::Giguna__Ruins_West => {
                self.cbits1.remove(flags::ContextBits1::GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED);
            }
            AreaId::Giguna__Clouds => {
                self.cbits1.remove(flags::ContextBits1::GIGUNA__CLOUDS__CTX__PLATFORM_AND_PORTAL);
            }
            AreaId::Giguna__East_Caverns => {
                self.cbits1.remove(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR);
                self.cbits1.remove(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR);
                self.cbits1.remove(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR);
            }
            AreaId::Giguna__Gateway => {
                self.cbits1.remove(flags::ContextBits1::GIGUNA__GATEWAY__CTX__DOOR_OPENED);
            }
            AreaId::Irikar__Basement_Portal => {
                self.cbits1.remove(flags::ContextBits1::IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED);
            }
            _ => (),
        }
    }
    fn can_afford(&self, cost: &Currency) -> bool {
        match cost {
            Currency::Free => true,
            Currency::Energy(c) => self.energy >= *c,
            Currency::Flasks(c) => self.flasks >= *c,
            Currency::Refills(c) => self.refills >= *c,
        }
    }
    fn amount_could_afford(&self, cost: &Currency) -> i16 {
        match cost {
            Currency::Free => 1,
            Currency::Energy(_) => self.energy.into(),
            Currency::Flasks(_) => self.flasks.into(),
            Currency::Refills(_) => self.refills.into(),
        }
    }
    fn spend(&mut self, cost: &Currency) {
        match cost {
            Currency::Free => (),
            Currency::Energy(c) => self.energy -= *c,
            Currency::Flasks(c) => self.flasks -= *c,
            Currency::Refills(c) => self.refills -= *c,
        }
    }

    fn visit(&mut self, loc_id: LocationId) {
        match loc_id {
            LocationId::Amagi__Main_Area__Way_Off_To_The_Side__Item => self.cbits3.insert(flags::ContextBits3::VISITED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM),
            LocationId::Amagi__Liru_Room__Shrine__Item => self.cbits3.insert(flags::ContextBits3::VISITED_AMAGI__LIRU_ROOM__SHRINE__ITEM),
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Break_Wall => self.cbits3.insert(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL),
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Defeat_MUS_A_M20 => self.cbits3.insert(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20),
            LocationId::Amagi__West_Lake__Cavern_Tear_Duct__Remote_Flask => self.cbits3.insert(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK),
            LocationId::Amagi__West_Lake__Cavern_Eye__Item => self.cbits3.insert(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM),
            LocationId::Amagi__West_Lake__Cavern_Rear_Pillar__Boss_Reward => self.cbits3.insert(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD),
            LocationId::Amagi__West_Lake__Stronghold_Top__Remote_Urn => self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN),
            LocationId::Amagi__West_Lake__Stronghold_Item__Item => self.cbits3.insert(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM),
            LocationId::Amagi__West_Lake__Stronghold_Item__Break_Wall => self.cbits3.insert(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL),
            LocationId::Amagi__West_Lake__Stronghold_Rear_Wall__Break_Left_Wall => self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL),
            LocationId::Amagi__West_Lake__Stronghold_Middle_Column__Break_Wall => self.cbits3.insert(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL),
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Left__Knock_Down_Left_Boulder => self.cbits3.insert(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER),
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Right__Knock_Down_Right_Boulder => self.cbits3.insert(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER),
            LocationId::Amagi__West_Lake__Stronghold_Front_Room__Break_Wall => self.cbits3.insert(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL),
            LocationId::Amagi__West_Lake__Stronghold_Front_Door__Break_Wall => self.cbits3.insert(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL),
            LocationId::Amagi__West_Lake__Surface_Wall_Right__Break_Wall => self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL),
            LocationId::Amagi__West_Lake__Surface_Wall_Left__Break_Wall => self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL),
            LocationId::Annuna__Mirror_Match__Save_Point__Fight => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT),
            LocationId::Annuna__Mirror_Match__Below_Switch__Hit_Switch => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH),
            LocationId::Annuna__Mirror_Match__Plinth__Item => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM),
            LocationId::Annuna__Mirror_Match__Waving_Distance__Shockwave_Flask => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK),
            LocationId::Annuna__Mirror_Match__East_26_Lower__Remote_Flask => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK),
            LocationId::Annuna__Mirror_Match__East_26_Upper__Remote_Flask => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK),
            LocationId::Annuna__West_Bridge__Plinth__Item => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM),
            LocationId::Annuna__East_Bridge__Gate_Button__Switch => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH),
            LocationId::Annuna__East_Bridge__Below_Gate_Button__Switch_from_Below => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW),
            LocationId::Annuna__East_Bridge__Tower_Gate__Tablet => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET),
            LocationId::Annuna__East_Bridge__Tower_Secret__Item => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM),
            LocationId::Annuna__Sniper_Valley__Bridge_End__Health_Pickup => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP),
            LocationId::Annuna__Sniper_Valley__Table__Item => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM),
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_West__Break_Outer_Wall => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL),
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_East__Break_Outer_Wall => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL),
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_West__Break_Inner_Wall => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL),
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_East__Break_Inner_Wall => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL),
            LocationId::Annuna__Sniper_Valley__Cavern_Cache__Item => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM),
            LocationId::Annuna__Twisty_Passages__Top__Tablet => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET),
            LocationId::Annuna__Twisty_Passages__Northwest_Alcove__Refill => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL),
            LocationId::Annuna__West_Climb__Cache__Item => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__WEST_CLIMB__CACHE__ITEM),
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Boss_Fight => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT),
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Fill_It_Up => self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP),
            LocationId::Antarctica__Shed__Interior__Shelf => self.cbits4.insert(flags::ContextBits4::VISITED_ANTARCTICA__SHED__INTERIOR__SHELF),
            LocationId::Antarctica__Building_2__Behind_Boxes__Note => self.cbits4.insert(flags::ContextBits4::VISITED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE),
            LocationId::Antarctica__Power_Room__Switch__Flip => self.cbits4.insert(flags::ContextBits4::VISITED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP),
            LocationId::Ebih__Base_Camp__Left_Platform_Moved__Item_From_The_Side => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE),
            LocationId::Ebih__Base_Camp__Top_Platform__Item => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM),
            LocationId::Ebih__By_Garage__Crawlspace__Fragment => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT),
            LocationId::Ebih__Grid_25_10_12__East_10__Remote_Bush => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH),
            LocationId::Ebih__Grid_25_10_12__Hidden_Bush__Behind_Bush => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH),
            LocationId::Ebih__Waterfall__Alcove_Right__Block_Right => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT),
            LocationId::Ebih__Waterfall__Waterfall_Center_Center__Both_Blocks => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS),
            LocationId::Ebih__Waterfall__Alcove_Left__Block_Left => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT),
            LocationId::Ebih__Waterfall__Alcove__Pedestal => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__PEDESTAL),
            LocationId::Ebih__Waterfall__Alcove__Block_Right => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT),
            LocationId::Ebih__Waterfall__Alcove__Block_Left => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT),
            LocationId::Ebih__Waterfall__Wall_Right__Break_Wall => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL),
            LocationId::Ebih__Waterfall__Wall_Right__Break_Through_Wall => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL),
            LocationId::Ebih__Waterfall__Wall_Left__Break_Wall => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL),
            LocationId::Ebih__Waterfall__Wall_Left__Break_Through_Wall => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL),
            LocationId::Ebih__Ebih_West__Alcove__Tablet => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__ALCOVE__TABLET),
            LocationId::Ebih__Ebih_West__Block_Left__Break_Block => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK),
            LocationId::Ebih__Ebih_West__Block_Right__Break_Block => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK),
            LocationId::Ebih__Ebih_East__Lower_Moving_Platform__Remote_Urn => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN),
            LocationId::Ebih__Ebih_East__Corner__Urn => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__CORNER__URN),
            LocationId::Ebih__Ebih_East__Dispenser__Vend => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__DISPENSER__VEND),
            LocationId::Ebih__Ebih_East__East_Ledge__Note => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE),
            LocationId::Ebih__Boss_Room__Boss__Hack_Alu => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__HACK_ALU),
            LocationId::Ebih__Boss_Room__Boss__Fight_Alu => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU),
            LocationId::Ebih__Boss_Room__Boss__Boss_Reward => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD),
            LocationId::Ebih__Boss_Room__East_Ledge__Item => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM),
            LocationId::Ebih__Drone_Room__Item__Urn => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN),
            LocationId::Ebih__Drone_Room__Item__Urn_Collection_Skip => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP),
            LocationId::Ebih__Drone_Room__Item__Urn_Fast_Travel => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL),
            LocationId::Ebih__Drone_Room__Middle_Platform__Urn_Quick_Grab => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB),
            LocationId::Ebih__Grid_25_2_6__Pit__Item => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__GRID_25_2_6__PIT__ITEM),
            LocationId::Ebih__Grid_26_10_11__Ledge__Note => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__GRID_26_10_11__LEDGE__NOTE),
            LocationId::Ebih__Vertical_Interchange__Switch__Activate_Switch => self.cbits4.insert(flags::ContextBits4::VISITED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH),
            LocationId::Giguna_Breach__Chimney__Cache__Flask => self.cbits4.insert(flags::ContextBits4::VISITED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK),
            LocationId::Giguna_Breach__Cubby__Rocks__Health => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH),
            LocationId::Giguna_Breach__Slingshot__Ravine__Urn => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN),
            LocationId::Giguna__Giguna_Northeast__Gate_Button__Open_Gate => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE),
            LocationId::Giguna__Giguna_Northeast__Gate_Right__Remote_Button => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON),
            LocationId::Giguna__Giguna_Northeast__Door__Remote_Flask => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK),
            LocationId::Giguna__Giguna_Northeast__Vault__Item => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM),
            LocationId::Giguna__Carnelian__Vault__Item => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__CARNELIAN__VAULT__ITEM),
            LocationId::Giguna__West_Caverns__Cache__Item => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__WEST_CAVERNS__CACHE__ITEM),
            LocationId::Giguna__West_Caverns__Bush__Item => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__WEST_CAVERNS__BUSH__ITEM),
            LocationId::Giguna__Wasteland__Door_Right__Health => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH),
            LocationId::Giguna__Wasteland__Passage_East__Clear_Horizontal_Passage_Manually => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY),
            LocationId::Giguna__Wasteland__Passage_East__Mist_through_Horizontal_Passage => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE),
            LocationId::Giguna__Wasteland__Passage_Cache__Clear_Horizontal_Passage_Manually => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY),
            LocationId::Giguna__Wasteland__Passage_Cache__Mist_through_Horizontal_Passage => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE),
            LocationId::Giguna__Giguna_Base__Ruin__Item => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_BASE__RUIN__ITEM),
            LocationId::Giguna__Giguna_Base__Table__News => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_BASE__TABLE__NEWS),
            LocationId::Giguna__Ruins_East__Way_Up_High__Item => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM),
            LocationId::Giguna__Ruins_Center__Tablet__Item => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__RUINS_CENTER__TABLET__ITEM),
            LocationId::Giguna__Ruins_Top__Small_Ledge__Shockwave_Flask => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK),
            LocationId::Giguna__Ruins_Top__Flask__Flask => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__RUINS_TOP__FLASK__FLASK),
            LocationId::Giguna__West_Tower__Top__Tablet => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__WEST_TOWER__TOP__TABLET),
            LocationId::Giguna__Far_Corner__Grass__Obscured_Item => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM),
            LocationId::Giguna__Helipad__Tablet_Ledge__Tablet => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET),
            LocationId::Giguna__Clouds__Cache__Item => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__CLOUDS__CACHE__ITEM),
            LocationId::Giguna__Lamassu__Deposit__Flask => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__LAMASSU__DEPOSIT__FLASK),
            LocationId::Giguna__Dual_Path__Below_Left_Switch__Remote_Switch => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH),
            LocationId::Giguna__Dual_Path__Left_Switch__Hit_Switch => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH),
            LocationId::Giguna__Dual_Path__Base_of_Wall__Break_Wall => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL),
            LocationId::Giguna__Dual_Path__Base_of_Wall__Mist_into_Wall => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL),
            LocationId::Giguna__Dual_Path__Wall_Secret__Health => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH),
            LocationId::Giguna__Dual_Path__Right_Switch__Hit_Switch => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH),
            LocationId::Giguna__Dual_Path__Below_Right_Switch__Remote_Switch => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH),
            LocationId::Giguna__Hard_Rock__Rock_Right__Shockwave_Boulder => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER),
            LocationId::Giguna__Hard_Rock__Rock_Right__Enter_Rock_as_Mist => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST),
            LocationId::Giguna__Hard_Rock__Rock_Center__Tablet => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET),
            LocationId::Giguna__Hard_Rock__Rock_Left__Shockwave_Boulder => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER),
            LocationId::Giguna__Hard_Rock__Rock_Left__Enter_Rock_as_Mist => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST),
            LocationId::Giguna__East_Caverns__Hidden_Passage_Center__Hidden_Flask => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK),
            LocationId::Giguna__Gateway__Block_Left__Shockwave => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE),
            LocationId::Giguna__Gateway__Block_Right__Shockwave => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE),
            LocationId::Giguna__Gateway__Flask_Ledge__Item => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM),
            LocationId::Giguna__Gateway__Button__Hit_Switch => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH),
            LocationId::Giguna__Antechamber__Statue_Head__Tablet => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET),
            LocationId::Giguna__Gubi_Lair__Center_Platform__Hack_Gubi => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI),
            LocationId::Giguna__Gubi_Lair__Center_Platform__Fight_Gubi => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI),
            LocationId::Giguna__Gubi_Lair__Center_Platform__Boss_Reward => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD),
            LocationId::Giguna__Gubi_Lair__Pedestal__Axe => self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE),
            LocationId::Glacier__Compass_Room__Center__Table => self.cbits5.insert(flags::ContextBits5::VISITED_GLACIER__COMPASS_ROOM__CENTER__TABLE),
            LocationId::Glacier__The_Big_Drop__Water_Surface__Drown => self.cbits5.insert(flags::ContextBits5::VISITED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN),
            LocationId::Glacier__Vertical_Room__Under_Switch__Switch => self.cbits5.insert(flags::ContextBits5::VISITED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH),
            LocationId::Glacier__Vertical_Room__Peak__Flask => self.cbits5.insert(flags::ContextBits5::VISITED_GLACIER__VERTICAL_ROOM__PEAK__FLASK),
            LocationId::Glacier__Boomerang_Room__Pedestal__Item => self.cbits5.insert(flags::ContextBits5::VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM),
            LocationId::Glacier__Boomerang_Room__Pedestal__Switch => self.cbits5.insert(flags::ContextBits5::VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH),
            LocationId::Glacier__Ledge_Grab_Room__Cliff_Bottom__Quick_Grab => self.cbits5.insert(flags::ContextBits5::VISITED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB),
            LocationId::Glacier__Ledge_Grab_Room__Pedestal__Item => self.cbits5.insert(flags::ContextBits5::VISITED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM),
            LocationId::Glacier__Apocalypse_Entry__Grate_Ledge__Escape => self.cbits5.insert(flags::ContextBits5::VISITED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE),
            LocationId::Interior__Bunker_Interior__Desk__Note => self.cbits5.insert(flags::ContextBits5::VISITED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE),
            LocationId::Interior__Building_Interior__Entry__Remote_Urn => self.cbits5.insert(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN),
            LocationId::Interior__Building_Interior__Entry__Urn_Collection_Skip => self.cbits5.insert(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP),
            LocationId::Interior__Building_Interior__Corner__Urn => self.cbits5.insert(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__CORNER__URN),
            LocationId::Interior__Tent_Interior__Desk__Note => self.cbits5.insert(flags::ContextBits5::VISITED_INTERIOR__TENT_INTERIOR__DESK__NOTE),
            LocationId::Interior__Garage__Boxes__Under_Boxes => self.cbits5.insert(flags::ContextBits5::VISITED_INTERIOR__GARAGE__BOXES__UNDER_BOXES),
            LocationId::Interior__Ebih_Cave__Entry__Health => self.cbits5.insert(flags::ContextBits5::VISITED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH),
            LocationId::Interior__Outpost_Interior__Bookshelf__Note => self.cbits5.insert(flags::ContextBits5::VISITED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE),
            LocationId::Irikar_Breach__Gauntlet__Hidden_Path_Reward__Item => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM),
            LocationId::Irikar_Breach__Hover_Room__Bottom__Item => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM),
            LocationId::Irikar_Breach__Worm_Rave__Corner__Item => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM),
            LocationId::Irikar__Hub__Sat_Tower_Top_Ledge__Tablet => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET),
            LocationId::Irikar__Hub__Dagger_Altar__Weapon => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON),
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL),
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Mist_into_Wall => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL),
            LocationId::Irikar__Hub__Royal_Storage_in_Wall__Item => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM),
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN),
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Collection_Skip => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP),
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Fast_Travel => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL),
            LocationId::Irikar__Abandoned_Room__Corner_Core__Core => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE),
            LocationId::Irikar__Basement_Pipes__Left_Vertical_Pipe__Health_Pickup => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP),
            LocationId::Irikar__Boss_Room__Bulls_Feet__Defeat_Gudam => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM),
            LocationId::Irikar__Boss_Room__Bulls_Feet__Shockwave_Gudam => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM),
            LocationId::Irikar__Boss_Room__Bulls_Feet__Boss_Reward => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD),
            LocationId::Irikar__Boss_Room__Healthy_Rooftop__Health => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH),
            LocationId::Irikar__East_Rooftops__Top_Rooftop__Tablet => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET),
            LocationId::Irikar__Lamassu__Desk__Item => self.cbits6.insert(flags::ContextBits6::VISITED_IRIKAR__LAMASSU__DESK__ITEM),
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_1 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1),
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_2 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2),
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_3 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3),
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_4 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4),
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_5 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5),
            LocationId::Menu__Upgrade_Menu__Physiology__Mist_Upgrade => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE),
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_1 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1),
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_2 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2),
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_3 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3),
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_1 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1),
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_2 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2),
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_3 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3),
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_1 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1),
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_2 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2),
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_3 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3),
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_1 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1),
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_2 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2),
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_3 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3),
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_1 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1),
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_2 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2),
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_3 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3),
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_1 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1),
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_2 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2),
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_3 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3),
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_1 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1),
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_2 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2),
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_1 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1),
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_2 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2),
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_3 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3),
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_1 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1),
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_2 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2),
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_3 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3),
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_1 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1),
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_2 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2),
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_3 => self.cbits6.insert(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3),
            LocationId::Uhrum__West_Entrance__Inner_Dais__Item => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM),
            LocationId::Uhrum__West_Entrance__Gate_Switch__Open_Gate => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE),
            LocationId::Uhrum__West_Entrance__Upper_Wall_West__Mist_through_Wall => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL),
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Charge_through_Wall => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL),
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Spin_through_Wall => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL),
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Mist_through_Wall => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL),
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Charge_through_Wall => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL),
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Spin_through_Wall => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL),
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Mist_through_Wall => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL),
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Charge_through_Wall => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL),
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Spin_through_Wall => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL),
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Mist_through_Wall => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL),
            LocationId::Uhrum__West_Entrance__Sand__Refill => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__SAND__REFILL),
            LocationId::Uhrum__Siege_Corridor__Western_Cache__Core => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE),
            LocationId::Uhrum__Siege_Corridor__Center_Box__Box => self.cbits6.insert(flags::ContextBits6::VISITED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX),
            LocationId::Uhrum__Siege_Corridor__Upper_Rock_Item__Urn => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN),
            LocationId::Uhrum__Siege_Corridor__Pond__Item => self.cbits6.insert(flags::ContextBits6::VISITED_UHRUM__SIEGE_CORRIDOR__POND__ITEM),
            LocationId::Uhrum__Waterfalls__Ceiling_Cache__Flask => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK),
            LocationId::Uhrum__Waterfalls__Barrier_West__Charge_through_Wall => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL),
            LocationId::Uhrum__Waterfalls__Barrier_West__Spin_through_Wall => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL),
            LocationId::Uhrum__Waterfalls__Barrier_West__Mist_through_Wall => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL),
            LocationId::Uhrum__Waterfalls__Barrier_East__Charge_through_Wall => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL),
            LocationId::Uhrum__Waterfalls__Barrier_East__Spin_through_Wall => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL),
            LocationId::Uhrum__Waterfalls__Barrier_East__Mist_through_Wall => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL),
            LocationId::Uhrum__Waterfalls__Below_Block__Shockwave_Block => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK),
            LocationId::Uhrum__Waterfalls__Above_Block__Block => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK),
            LocationId::Uhrum__Waterfalls__East_26__Block => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__EAST_26__BLOCK),
            LocationId::Uhrum__Waterfalls__West_Water_Nook__Tablet => self.cbits7.insert(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET),
            LocationId::Uhrum__Annuna_Corridor__Upper_Trees__Remote_Urn => self.cbits6.insert(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN),
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn => self.cbits6.insert(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN),
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Collection_Skip => self.cbits6.insert(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP),
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Fast_Travel => self.cbits6.insert(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL),
            LocationId::Uhrum__Annuna_Corridor__Block_West__Dislodge_Block => self.cbits6.insert(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK),
            LocationId::Uhrum__Annuna_Corridor__Block_East__Dislodge_Block => self.cbits6.insert(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK),
            LocationId::Uhrum__Annuna_Corridor__East_Cubby__Tablet => self.cbits6.insert(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET),
            LocationId::Uhrum__Annuna_Corridor__Statue__Item => self.cbits6.insert(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM),
        }
    }
    fn skip(&mut self, loc_id: LocationId) {
        match loc_id {
            LocationId::Amagi__Main_Area__Way_Off_To_The_Side__Item =>  {
                if !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM);
                }
            }
            LocationId::Amagi__Liru_Room__Shrine__Item =>  {
                if !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__LIRU_ROOM__SHRINE__ITEM) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__LIRU_ROOM__SHRINE__ITEM);
                }
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Break_Wall =>  {
                if !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL);
                }
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Defeat_MUS_A_M20 =>  {
                if !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20);
                }
            }
            LocationId::Amagi__West_Lake__Cavern_Tear_Duct__Remote_Flask =>  {
                if !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK);
                }
            }
            LocationId::Amagi__West_Lake__Cavern_Eye__Item =>  {
                if !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM);
                }
            }
            LocationId::Amagi__West_Lake__Cavern_Rear_Pillar__Boss_Reward =>  {
                if !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD);
                }
            }
            LocationId::Amagi__West_Lake__Stronghold_Top__Remote_Urn =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN);
                }
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Item =>  {
                if !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM);
                }
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Break_Wall =>  {
                if !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL);
                }
            }
            LocationId::Amagi__West_Lake__Stronghold_Rear_Wall__Break_Left_Wall =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL);
                }
            }
            LocationId::Amagi__West_Lake__Stronghold_Middle_Column__Break_Wall =>  {
                if !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL);
                }
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Left__Knock_Down_Left_Boulder =>  {
                if !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER);
                }
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Right__Knock_Down_Right_Boulder =>  {
                if !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER);
                }
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Room__Break_Wall =>  {
                if !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL);
                }
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Door__Break_Wall =>  {
                if !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL);
                }
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Right__Break_Wall =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL);
                }
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Left__Break_Wall =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL);
                }
            }
            LocationId::Annuna__Mirror_Match__Save_Point__Fight =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT);
                }
            }
            LocationId::Annuna__Mirror_Match__Below_Switch__Hit_Switch =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH);
                }
            }
            LocationId::Annuna__Mirror_Match__Plinth__Item =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM);
                }
            }
            LocationId::Annuna__Mirror_Match__Waving_Distance__Shockwave_Flask =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK);
                }
            }
            LocationId::Annuna__Mirror_Match__East_26_Lower__Remote_Flask =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK);
                }
            }
            LocationId::Annuna__Mirror_Match__East_26_Upper__Remote_Flask =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK);
                }
            }
            LocationId::Annuna__West_Bridge__Plinth__Item =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM);
                }
            }
            LocationId::Annuna__East_Bridge__Gate_Button__Switch =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH);
                }
            }
            LocationId::Annuna__East_Bridge__Below_Gate_Button__Switch_from_Below =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW);
                }
            }
            LocationId::Annuna__East_Bridge__Tower_Gate__Tablet =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET);
                }
            }
            LocationId::Annuna__East_Bridge__Tower_Secret__Item =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM);
                }
            }
            LocationId::Annuna__Sniper_Valley__Bridge_End__Health_Pickup =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP);
                }
            }
            LocationId::Annuna__Sniper_Valley__Table__Item =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM);
                }
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_West__Break_Outer_Wall =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL);
                }
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_East__Break_Outer_Wall =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL);
                }
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_West__Break_Inner_Wall =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL);
                }
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_East__Break_Inner_Wall =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL);
                }
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Cache__Item =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM);
                }
            }
            LocationId::Annuna__Twisty_Passages__Top__Tablet =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET);
                }
            }
            LocationId::Annuna__Twisty_Passages__Northwest_Alcove__Refill =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL);
                }
            }
            LocationId::Annuna__West_Climb__Cache__Item =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__WEST_CLIMB__CACHE__ITEM) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_ANNUNA__WEST_CLIMB__CACHE__ITEM);
                }
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Boss_Fight =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT);
                }
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Fill_It_Up =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP) {
                    self.cbits7.insert(flags::ContextBits7::SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP);
                }
            }
            LocationId::Antarctica__Shed__Interior__Shelf =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANTARCTICA__SHED__INTERIOR__SHELF) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_ANTARCTICA__SHED__INTERIOR__SHELF);
                }
            }
            LocationId::Antarctica__Building_2__Behind_Boxes__Note =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE);
                }
            }
            LocationId::Antarctica__Power_Room__Switch__Flip =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP);
                }
            }
            LocationId::Ebih__Base_Camp__Left_Platform_Moved__Item_From_The_Side =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE);
                }
            }
            LocationId::Ebih__Base_Camp__Top_Platform__Item =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM);
                }
            }
            LocationId::Ebih__By_Garage__Crawlspace__Fragment =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT);
                }
            }
            LocationId::Ebih__Grid_25_10_12__East_10__Remote_Bush =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH);
                }
            }
            LocationId::Ebih__Grid_25_10_12__Hidden_Bush__Behind_Bush =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH);
                }
            }
            LocationId::Ebih__Waterfall__Alcove_Right__Block_Right =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT);
                }
            }
            LocationId::Ebih__Waterfall__Waterfall_Center_Center__Both_Blocks =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS);
                }
            }
            LocationId::Ebih__Waterfall__Alcove_Left__Block_Left =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT);
                }
            }
            LocationId::Ebih__Waterfall__Alcove__Pedestal =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__PEDESTAL) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__PEDESTAL);
                }
            }
            LocationId::Ebih__Waterfall__Alcove__Block_Right =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT);
                }
            }
            LocationId::Ebih__Waterfall__Alcove__Block_Left =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT);
                }
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Wall =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL);
                }
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Through_Wall =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL);
                }
            }
            LocationId::Ebih__Waterfall__Wall_Left__Break_Wall =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL);
                }
            }
            LocationId::Ebih__Waterfall__Wall_Left__Break_Through_Wall =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL);
                }
            }
            LocationId::Ebih__Ebih_West__Alcove__Tablet =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__ALCOVE__TABLET) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__ALCOVE__TABLET);
                }
            }
            LocationId::Ebih__Ebih_West__Block_Left__Break_Block =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK);
                }
            }
            LocationId::Ebih__Ebih_West__Block_Right__Break_Block =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK);
                }
            }
            LocationId::Ebih__Ebih_East__Lower_Moving_Platform__Remote_Urn =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN);
                }
            }
            LocationId::Ebih__Ebih_East__Corner__Urn =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__CORNER__URN) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__CORNER__URN);
                }
            }
            LocationId::Ebih__Ebih_East__Dispenser__Vend =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__DISPENSER__VEND) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__DISPENSER__VEND);
                }
            }
            LocationId::Ebih__Ebih_East__East_Ledge__Note =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE);
                }
            }
            LocationId::Ebih__Boss_Room__Boss__Hack_Alu =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__HACK_ALU) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__HACK_ALU);
                }
            }
            LocationId::Ebih__Boss_Room__Boss__Fight_Alu =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU);
                }
            }
            LocationId::Ebih__Boss_Room__Boss__Boss_Reward =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD);
                }
            }
            LocationId::Ebih__Boss_Room__East_Ledge__Item =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM);
                }
            }
            LocationId::Ebih__Drone_Room__Item__Urn =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN);
                }
            }
            LocationId::Ebih__Drone_Room__Item__Urn_Collection_Skip =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP);
                }
            }
            LocationId::Ebih__Drone_Room__Item__Urn_Fast_Travel =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL);
                }
            }
            LocationId::Ebih__Drone_Room__Middle_Platform__Urn_Quick_Grab =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB);
                }
            }
            LocationId::Ebih__Grid_25_2_6__Pit__Item =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_25_2_6__PIT__ITEM) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__GRID_25_2_6__PIT__ITEM);
                }
            }
            LocationId::Ebih__Grid_26_10_11__Ledge__Note =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_26_10_11__LEDGE__NOTE) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__GRID_26_10_11__LEDGE__NOTE);
                }
            }
            LocationId::Ebih__Vertical_Interchange__Switch__Activate_Switch =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH);
                }
            }
            LocationId::Giguna_Breach__Chimney__Cache__Flask =>  {
                if !self.cbits4.contains(flags::ContextBits4::VISITED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK);
                }
            }
            LocationId::Giguna_Breach__Cubby__Rocks__Health =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH);
                }
            }
            LocationId::Giguna_Breach__Slingshot__Ravine__Urn =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN);
                }
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Button__Open_Gate =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE);
                }
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Right__Remote_Button =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON);
                }
            }
            LocationId::Giguna__Giguna_Northeast__Door__Remote_Flask =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK);
                }
            }
            LocationId::Giguna__Giguna_Northeast__Vault__Item =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM);
                }
            }
            LocationId::Giguna__Carnelian__Vault__Item =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__CARNELIAN__VAULT__ITEM) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__CARNELIAN__VAULT__ITEM);
                }
            }
            LocationId::Giguna__West_Caverns__Cache__Item =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WEST_CAVERNS__CACHE__ITEM) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__WEST_CAVERNS__CACHE__ITEM);
                }
            }
            LocationId::Giguna__West_Caverns__Bush__Item =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WEST_CAVERNS__BUSH__ITEM) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__WEST_CAVERNS__BUSH__ITEM);
                }
            }
            LocationId::Giguna__Wasteland__Door_Right__Health =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH);
                }
            }
            LocationId::Giguna__Wasteland__Passage_East__Clear_Horizontal_Passage_Manually =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
                }
            }
            LocationId::Giguna__Wasteland__Passage_East__Mist_through_Horizontal_Passage =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE);
                }
            }
            LocationId::Giguna__Wasteland__Passage_Cache__Clear_Horizontal_Passage_Manually =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
                }
            }
            LocationId::Giguna__Wasteland__Passage_Cache__Mist_through_Horizontal_Passage =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE);
                }
            }
            LocationId::Giguna__Giguna_Base__Ruin__Item =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_BASE__RUIN__ITEM) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_BASE__RUIN__ITEM);
                }
            }
            LocationId::Giguna__Giguna_Base__Table__News =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_BASE__TABLE__NEWS) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_BASE__TABLE__NEWS);
                }
            }
            LocationId::Giguna__Ruins_East__Way_Up_High__Item =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM);
                }
            }
            LocationId::Giguna__Ruins_Center__Tablet__Item =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_CENTER__TABLET__ITEM) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_CENTER__TABLET__ITEM);
                }
            }
            LocationId::Giguna__Ruins_Top__Small_Ledge__Shockwave_Flask =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK);
                }
            }
            LocationId::Giguna__Ruins_Top__Flask__Flask =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_TOP__FLASK__FLASK) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_TOP__FLASK__FLASK);
                }
            }
            LocationId::Giguna__West_Tower__Top__Tablet =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WEST_TOWER__TOP__TABLET) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__WEST_TOWER__TOP__TABLET);
                }
            }
            LocationId::Giguna__Far_Corner__Grass__Obscured_Item =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM);
                }
            }
            LocationId::Giguna__Helipad__Tablet_Ledge__Tablet =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET);
                }
            }
            LocationId::Giguna__Clouds__Cache__Item =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__CLOUDS__CACHE__ITEM) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__CLOUDS__CACHE__ITEM);
                }
            }
            LocationId::Giguna__Lamassu__Deposit__Flask =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__LAMASSU__DEPOSIT__FLASK) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__LAMASSU__DEPOSIT__FLASK);
                }
            }
            LocationId::Giguna__Dual_Path__Below_Left_Switch__Remote_Switch =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH);
                }
            }
            LocationId::Giguna__Dual_Path__Left_Switch__Hit_Switch =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH);
                }
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Break_Wall =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL);
                }
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Mist_into_Wall =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL);
                }
            }
            LocationId::Giguna__Dual_Path__Wall_Secret__Health =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH);
                }
            }
            LocationId::Giguna__Dual_Path__Right_Switch__Hit_Switch =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH);
                }
            }
            LocationId::Giguna__Dual_Path__Below_Right_Switch__Remote_Switch =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH);
                }
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Shockwave_Boulder =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER);
                }
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Enter_Rock_as_Mist =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST);
                }
            }
            LocationId::Giguna__Hard_Rock__Rock_Center__Tablet =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET);
                }
            }
            LocationId::Giguna__Hard_Rock__Rock_Left__Shockwave_Boulder =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER);
                }
            }
            LocationId::Giguna__Hard_Rock__Rock_Left__Enter_Rock_as_Mist =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST);
                }
            }
            LocationId::Giguna__East_Caverns__Hidden_Passage_Center__Hidden_Flask =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK);
                }
            }
            LocationId::Giguna__Gateway__Block_Left__Shockwave =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE);
                }
            }
            LocationId::Giguna__Gateway__Block_Right__Shockwave =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE);
                }
            }
            LocationId::Giguna__Gateway__Flask_Ledge__Item =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM);
                }
            }
            LocationId::Giguna__Gateway__Button__Hit_Switch =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH);
                }
            }
            LocationId::Giguna__Antechamber__Statue_Head__Tablet =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET) {
                    self.cbits8.insert(flags::ContextBits8::SKIPPED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET);
                }
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Hack_Gubi =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI);
                }
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Fight_Gubi =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI);
                }
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Boss_Reward =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD);
                }
            }
            LocationId::Giguna__Gubi_Lair__Pedestal__Axe =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE);
                }
            }
            LocationId::Glacier__Compass_Room__Center__Table =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__COMPASS_ROOM__CENTER__TABLE) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GLACIER__COMPASS_ROOM__CENTER__TABLE);
                }
            }
            LocationId::Glacier__The_Big_Drop__Water_Surface__Drown =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN);
                }
            }
            LocationId::Glacier__Vertical_Room__Under_Switch__Switch =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH);
                }
            }
            LocationId::Glacier__Vertical_Room__Peak__Flask =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__VERTICAL_ROOM__PEAK__FLASK) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GLACIER__VERTICAL_ROOM__PEAK__FLASK);
                }
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Item =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM);
                }
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Switch =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH);
                }
            }
            LocationId::Glacier__Ledge_Grab_Room__Cliff_Bottom__Quick_Grab =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB);
                }
            }
            LocationId::Glacier__Ledge_Grab_Room__Pedestal__Item =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM);
                }
            }
            LocationId::Glacier__Apocalypse_Entry__Grate_Ledge__Escape =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE);
                }
            }
            LocationId::Interior__Bunker_Interior__Desk__Note =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE);
                }
            }
            LocationId::Interior__Building_Interior__Entry__Remote_Urn =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN);
                }
            }
            LocationId::Interior__Building_Interior__Entry__Urn_Collection_Skip =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP);
                }
            }
            LocationId::Interior__Building_Interior__Corner__Urn =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__CORNER__URN) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__CORNER__URN);
                }
            }
            LocationId::Interior__Tent_Interior__Desk__Note =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__TENT_INTERIOR__DESK__NOTE) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_INTERIOR__TENT_INTERIOR__DESK__NOTE);
                }
            }
            LocationId::Interior__Garage__Boxes__Under_Boxes =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__GARAGE__BOXES__UNDER_BOXES) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_INTERIOR__GARAGE__BOXES__UNDER_BOXES);
                }
            }
            LocationId::Interior__Ebih_Cave__Entry__Health =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH);
                }
            }
            LocationId::Interior__Outpost_Interior__Bookshelf__Note =>  {
                if !self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE);
                }
            }
            LocationId::Irikar_Breach__Gauntlet__Hidden_Path_Reward__Item =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM);
                }
            }
            LocationId::Irikar_Breach__Hover_Room__Bottom__Item =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM);
                }
            }
            LocationId::Irikar_Breach__Worm_Rave__Corner__Item =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM);
                }
            }
            LocationId::Irikar__Hub__Sat_Tower_Top_Ledge__Tablet =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET);
                }
            }
            LocationId::Irikar__Hub__Dagger_Altar__Weapon =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON);
                }
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL);
                }
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Mist_into_Wall =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL);
                }
            }
            LocationId::Irikar__Hub__Royal_Storage_in_Wall__Item =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM);
                }
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN);
                }
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Collection_Skip =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP);
                }
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Fast_Travel =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL);
                }
            }
            LocationId::Irikar__Abandoned_Room__Corner_Core__Core =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE);
                }
            }
            LocationId::Irikar__Basement_Pipes__Left_Vertical_Pipe__Health_Pickup =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP);
                }
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Defeat_Gudam =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM);
                }
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Shockwave_Gudam =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM);
                }
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Boss_Reward =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD);
                }
            }
            LocationId::Irikar__Boss_Room__Healthy_Rooftop__Health =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH);
                }
            }
            LocationId::Irikar__East_Rooftops__Top_Rooftop__Tablet =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET);
                }
            }
            LocationId::Irikar__Lamassu__Desk__Item =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__LAMASSU__DESK__ITEM) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_IRIKAR__LAMASSU__DESK__ITEM);
                }
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_1 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1);
                }
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_2 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2);
                }
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_3 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3);
                }
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_4 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4);
                }
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_5 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5);
                }
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Mist_Upgrade =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE);
                }
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_1 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1);
                }
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_2 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2);
                }
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_3 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3);
                }
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_1 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1);
                }
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_2 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2) {
                    self.cbits9.insert(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2);
                }
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_3 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3);
                }
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_1 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1);
                }
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_2 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2);
                }
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_3 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3);
                }
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_1 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1);
                }
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_2 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2);
                }
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_3 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3);
                }
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_1 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1);
                }
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_2 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2);
                }
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_3 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3);
                }
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_1 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1);
                }
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_2 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2);
                }
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_3 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3);
                }
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_1 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1);
                }
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_2 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2);
                }
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_1 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1);
                }
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_2 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2);
                }
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_3 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3);
                }
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_1 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1);
                }
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_2 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2);
                }
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_3 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3);
                }
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_1 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1);
                }
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_2 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2);
                }
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_3 =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3);
                }
            }
            LocationId::Uhrum__West_Entrance__Inner_Dais__Item =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM);
                }
            }
            LocationId::Uhrum__West_Entrance__Gate_Switch__Open_Gate =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE);
                }
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_West__Mist_through_Wall =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL) {
                    self.cbits11.insert(flags::ContextBits11::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL);
                }
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Charge_through_Wall =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL);
                }
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Spin_through_Wall =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL) {
                    self.cbits11.insert(flags::ContextBits11::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL);
                }
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Mist_through_Wall =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL);
                }
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Charge_through_Wall =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL);
                }
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Spin_through_Wall =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL);
                }
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Mist_through_Wall =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL);
                }
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Charge_through_Wall =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL);
                }
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Spin_through_Wall =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL);
                }
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Mist_through_Wall =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL);
                }
            }
            LocationId::Uhrum__West_Entrance__Sand__Refill =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__SAND__REFILL) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__SAND__REFILL);
                }
            }
            LocationId::Uhrum__Siege_Corridor__Western_Cache__Core =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE);
                }
            }
            LocationId::Uhrum__Siege_Corridor__Center_Box__Box =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX);
                }
            }
            LocationId::Uhrum__Siege_Corridor__Upper_Rock_Item__Urn =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN);
                }
            }
            LocationId::Uhrum__Siege_Corridor__Pond__Item =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__SIEGE_CORRIDOR__POND__ITEM) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__POND__ITEM);
                }
            }
            LocationId::Uhrum__Waterfalls__Ceiling_Cache__Flask =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK);
                }
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Charge_through_Wall =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL);
                }
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Spin_through_Wall =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL);
                }
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Mist_through_Wall =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL);
                }
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Charge_through_Wall =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL);
                }
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Spin_through_Wall =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL);
                }
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Mist_through_Wall =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL);
                }
            }
            LocationId::Uhrum__Waterfalls__Below_Block__Shockwave_Block =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK);
                }
            }
            LocationId::Uhrum__Waterfalls__Above_Block__Block =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK);
                }
            }
            LocationId::Uhrum__Waterfalls__East_26__Block =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__EAST_26__BLOCK) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__EAST_26__BLOCK);
                }
            }
            LocationId::Uhrum__Waterfalls__West_Water_Nook__Tablet =>  {
                if !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET);
                }
            }
            LocationId::Uhrum__Annuna_Corridor__Upper_Trees__Remote_Urn =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN);
                }
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN);
                }
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Collection_Skip =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP);
                }
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Fast_Travel =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL);
                }
            }
            LocationId::Uhrum__Annuna_Corridor__Block_West__Dislodge_Block =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK);
                }
            }
            LocationId::Uhrum__Annuna_Corridor__Block_East__Dislodge_Block =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK);
                }
            }
            LocationId::Uhrum__Annuna_Corridor__East_Cubby__Tablet =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET);
                }
            }
            LocationId::Uhrum__Annuna_Corridor__Statue__Item =>  {
                if !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM) {
                    self.cbits10.insert(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM);
                }
            }
        }
    }
    fn reset(&mut self, loc_id: LocationId) {
        match loc_id {
            LocationId::Amagi__Main_Area__Way_Off_To_The_Side__Item => {
                self.cbits3.remove(flags::ContextBits3::VISITED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM);
            }
            LocationId::Amagi__Liru_Room__Shrine__Item => {
                self.cbits3.remove(flags::ContextBits3::VISITED_AMAGI__LIRU_ROOM__SHRINE__ITEM);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__LIRU_ROOM__SHRINE__ITEM);
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Break_Wall => {
                self.cbits3.remove(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL);
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Defeat_MUS_A_M20 => {
                self.cbits3.remove(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20);
            }
            LocationId::Amagi__West_Lake__Cavern_Tear_Duct__Remote_Flask => {
                self.cbits3.remove(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK);
            }
            LocationId::Amagi__West_Lake__Cavern_Eye__Item => {
                self.cbits3.remove(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM);
            }
            LocationId::Amagi__West_Lake__Cavern_Rear_Pillar__Boss_Reward => {
                self.cbits3.remove(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD);
            }
            LocationId::Amagi__West_Lake__Stronghold_Top__Remote_Urn => {
                self.cbits4.remove(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN);
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Item => {
                self.cbits3.remove(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM);
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Break_Wall => {
                self.cbits3.remove(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL);
            }
            LocationId::Amagi__West_Lake__Stronghold_Rear_Wall__Break_Left_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL);
            }
            LocationId::Amagi__West_Lake__Stronghold_Middle_Column__Break_Wall => {
                self.cbits3.remove(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL);
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Left__Knock_Down_Left_Boulder => {
                self.cbits3.remove(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER);
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Right__Knock_Down_Right_Boulder => {
                self.cbits3.remove(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER);
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Room__Break_Wall => {
                self.cbits3.remove(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL);
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Door__Break_Wall => {
                self.cbits3.remove(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL);
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Right__Break_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL);
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Left__Break_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL);
            }
            LocationId::Annuna__Mirror_Match__Save_Point__Fight => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT);
            }
            LocationId::Annuna__Mirror_Match__Below_Switch__Hit_Switch => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH);
            }
            LocationId::Annuna__Mirror_Match__Plinth__Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM);
            }
            LocationId::Annuna__Mirror_Match__Waving_Distance__Shockwave_Flask => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK);
            }
            LocationId::Annuna__Mirror_Match__East_26_Lower__Remote_Flask => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK);
            }
            LocationId::Annuna__Mirror_Match__East_26_Upper__Remote_Flask => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK);
            }
            LocationId::Annuna__West_Bridge__Plinth__Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM);
            }
            LocationId::Annuna__East_Bridge__Gate_Button__Switch => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH);
            }
            LocationId::Annuna__East_Bridge__Below_Gate_Button__Switch_from_Below => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW);
            }
            LocationId::Annuna__East_Bridge__Tower_Gate__Tablet => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET);
            }
            LocationId::Annuna__East_Bridge__Tower_Secret__Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM);
            }
            LocationId::Annuna__Sniper_Valley__Bridge_End__Health_Pickup => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP);
            }
            LocationId::Annuna__Sniper_Valley__Table__Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_West__Break_Outer_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_East__Break_Outer_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_West__Break_Inner_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_East__Break_Inner_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Cache__Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM);
            }
            LocationId::Annuna__Twisty_Passages__Top__Tablet => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET);
            }
            LocationId::Annuna__Twisty_Passages__Northwest_Alcove__Refill => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL);
            }
            LocationId::Annuna__West_Climb__Cache__Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__WEST_CLIMB__CACHE__ITEM);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_ANNUNA__WEST_CLIMB__CACHE__ITEM);
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Boss_Fight => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT);
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Fill_It_Up => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP);
                self.cbits7.remove(flags::ContextBits7::SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP);
            }
            LocationId::Antarctica__Shed__Interior__Shelf => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANTARCTICA__SHED__INTERIOR__SHELF);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_ANTARCTICA__SHED__INTERIOR__SHELF);
            }
            LocationId::Antarctica__Building_2__Behind_Boxes__Note => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE);
            }
            LocationId::Antarctica__Power_Room__Switch__Flip => {
                self.cbits4.remove(flags::ContextBits4::VISITED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP);
            }
            LocationId::Ebih__Base_Camp__Left_Platform_Moved__Item_From_The_Side => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE);
            }
            LocationId::Ebih__Base_Camp__Top_Platform__Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM);
            }
            LocationId::Ebih__By_Garage__Crawlspace__Fragment => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT);
            }
            LocationId::Ebih__Grid_25_10_12__East_10__Remote_Bush => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH);
            }
            LocationId::Ebih__Grid_25_10_12__Hidden_Bush__Behind_Bush => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH);
            }
            LocationId::Ebih__Waterfall__Alcove_Right__Block_Right => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT);
            }
            LocationId::Ebih__Waterfall__Waterfall_Center_Center__Both_Blocks => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS);
            }
            LocationId::Ebih__Waterfall__Alcove_Left__Block_Left => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT);
            }
            LocationId::Ebih__Waterfall__Alcove__Pedestal => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__PEDESTAL);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__PEDESTAL);
            }
            LocationId::Ebih__Waterfall__Alcove__Block_Right => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT);
            }
            LocationId::Ebih__Waterfall__Alcove__Block_Left => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT);
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL);
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Through_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL);
            }
            LocationId::Ebih__Waterfall__Wall_Left__Break_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL);
            }
            LocationId::Ebih__Waterfall__Wall_Left__Break_Through_Wall => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL);
            }
            LocationId::Ebih__Ebih_West__Alcove__Tablet => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__ALCOVE__TABLET);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__ALCOVE__TABLET);
            }
            LocationId::Ebih__Ebih_West__Block_Left__Break_Block => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK);
            }
            LocationId::Ebih__Ebih_West__Block_Right__Break_Block => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK);
            }
            LocationId::Ebih__Ebih_East__Lower_Moving_Platform__Remote_Urn => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN);
            }
            LocationId::Ebih__Ebih_East__Corner__Urn => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__CORNER__URN);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__CORNER__URN);
            }
            LocationId::Ebih__Ebih_East__Dispenser__Vend => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__DISPENSER__VEND);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__DISPENSER__VEND);
            }
            LocationId::Ebih__Ebih_East__East_Ledge__Note => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE);
            }
            LocationId::Ebih__Boss_Room__Boss__Hack_Alu => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__HACK_ALU);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__HACK_ALU);
            }
            LocationId::Ebih__Boss_Room__Boss__Fight_Alu => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU);
            }
            LocationId::Ebih__Boss_Room__Boss__Boss_Reward => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD);
            }
            LocationId::Ebih__Boss_Room__East_Ledge__Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM);
            }
            LocationId::Ebih__Drone_Room__Item__Urn => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN);
            }
            LocationId::Ebih__Drone_Room__Item__Urn_Collection_Skip => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP);
            }
            LocationId::Ebih__Drone_Room__Item__Urn_Fast_Travel => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL);
            }
            LocationId::Ebih__Drone_Room__Middle_Platform__Urn_Quick_Grab => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB);
            }
            LocationId::Ebih__Grid_25_2_6__Pit__Item => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__GRID_25_2_6__PIT__ITEM);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__GRID_25_2_6__PIT__ITEM);
            }
            LocationId::Ebih__Grid_26_10_11__Ledge__Note => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__GRID_26_10_11__LEDGE__NOTE);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__GRID_26_10_11__LEDGE__NOTE);
            }
            LocationId::Ebih__Vertical_Interchange__Switch__Activate_Switch => {
                self.cbits4.remove(flags::ContextBits4::VISITED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH);
            }
            LocationId::Giguna_Breach__Chimney__Cache__Flask => {
                self.cbits4.remove(flags::ContextBits4::VISITED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK);
            }
            LocationId::Giguna_Breach__Cubby__Rocks__Health => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH);
            }
            LocationId::Giguna_Breach__Slingshot__Ravine__Urn => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN);
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Button__Open_Gate => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE);
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Right__Remote_Button => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON);
            }
            LocationId::Giguna__Giguna_Northeast__Door__Remote_Flask => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK);
            }
            LocationId::Giguna__Giguna_Northeast__Vault__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM);
            }
            LocationId::Giguna__Carnelian__Vault__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__CARNELIAN__VAULT__ITEM);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__CARNELIAN__VAULT__ITEM);
            }
            LocationId::Giguna__West_Caverns__Cache__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__WEST_CAVERNS__CACHE__ITEM);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__WEST_CAVERNS__CACHE__ITEM);
            }
            LocationId::Giguna__West_Caverns__Bush__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__WEST_CAVERNS__BUSH__ITEM);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__WEST_CAVERNS__BUSH__ITEM);
            }
            LocationId::Giguna__Wasteland__Door_Right__Health => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH);
            }
            LocationId::Giguna__Wasteland__Passage_East__Clear_Horizontal_Passage_Manually => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
            }
            LocationId::Giguna__Wasteland__Passage_East__Mist_through_Horizontal_Passage => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE);
            }
            LocationId::Giguna__Wasteland__Passage_Cache__Clear_Horizontal_Passage_Manually => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
            }
            LocationId::Giguna__Wasteland__Passage_Cache__Mist_through_Horizontal_Passage => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE);
            }
            LocationId::Giguna__Giguna_Base__Ruin__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_BASE__RUIN__ITEM);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_BASE__RUIN__ITEM);
            }
            LocationId::Giguna__Giguna_Base__Table__News => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_BASE__TABLE__NEWS);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_BASE__TABLE__NEWS);
            }
            LocationId::Giguna__Ruins_East__Way_Up_High__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM);
            }
            LocationId::Giguna__Ruins_Center__Tablet__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__RUINS_CENTER__TABLET__ITEM);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_CENTER__TABLET__ITEM);
            }
            LocationId::Giguna__Ruins_Top__Small_Ledge__Shockwave_Flask => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK);
            }
            LocationId::Giguna__Ruins_Top__Flask__Flask => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__RUINS_TOP__FLASK__FLASK);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_TOP__FLASK__FLASK);
            }
            LocationId::Giguna__West_Tower__Top__Tablet => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__WEST_TOWER__TOP__TABLET);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__WEST_TOWER__TOP__TABLET);
            }
            LocationId::Giguna__Far_Corner__Grass__Obscured_Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM);
            }
            LocationId::Giguna__Helipad__Tablet_Ledge__Tablet => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET);
            }
            LocationId::Giguna__Clouds__Cache__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__CLOUDS__CACHE__ITEM);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__CLOUDS__CACHE__ITEM);
            }
            LocationId::Giguna__Lamassu__Deposit__Flask => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__LAMASSU__DEPOSIT__FLASK);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__LAMASSU__DEPOSIT__FLASK);
            }
            LocationId::Giguna__Dual_Path__Below_Left_Switch__Remote_Switch => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH);
            }
            LocationId::Giguna__Dual_Path__Left_Switch__Hit_Switch => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH);
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Break_Wall => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL);
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Mist_into_Wall => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL);
            }
            LocationId::Giguna__Dual_Path__Wall_Secret__Health => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH);
            }
            LocationId::Giguna__Dual_Path__Right_Switch__Hit_Switch => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH);
            }
            LocationId::Giguna__Dual_Path__Below_Right_Switch__Remote_Switch => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH);
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Shockwave_Boulder => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER);
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Enter_Rock_as_Mist => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST);
            }
            LocationId::Giguna__Hard_Rock__Rock_Center__Tablet => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET);
            }
            LocationId::Giguna__Hard_Rock__Rock_Left__Shockwave_Boulder => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER);
            }
            LocationId::Giguna__Hard_Rock__Rock_Left__Enter_Rock_as_Mist => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST);
            }
            LocationId::Giguna__East_Caverns__Hidden_Passage_Center__Hidden_Flask => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK);
            }
            LocationId::Giguna__Gateway__Block_Left__Shockwave => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE);
            }
            LocationId::Giguna__Gateway__Block_Right__Shockwave => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE);
            }
            LocationId::Giguna__Gateway__Flask_Ledge__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM);
            }
            LocationId::Giguna__Gateway__Button__Hit_Switch => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH);
            }
            LocationId::Giguna__Antechamber__Statue_Head__Tablet => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET);
                self.cbits8.remove(flags::ContextBits8::SKIPPED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET);
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Hack_Gubi => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI);
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Fight_Gubi => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI);
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Boss_Reward => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD);
            }
            LocationId::Giguna__Gubi_Lair__Pedestal__Axe => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE);
            }
            LocationId::Glacier__Compass_Room__Center__Table => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GLACIER__COMPASS_ROOM__CENTER__TABLE);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GLACIER__COMPASS_ROOM__CENTER__TABLE);
            }
            LocationId::Glacier__The_Big_Drop__Water_Surface__Drown => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN);
            }
            LocationId::Glacier__Vertical_Room__Under_Switch__Switch => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH);
            }
            LocationId::Glacier__Vertical_Room__Peak__Flask => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GLACIER__VERTICAL_ROOM__PEAK__FLASK);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GLACIER__VERTICAL_ROOM__PEAK__FLASK);
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM);
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Switch => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH);
            }
            LocationId::Glacier__Ledge_Grab_Room__Cliff_Bottom__Quick_Grab => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB);
            }
            LocationId::Glacier__Ledge_Grab_Room__Pedestal__Item => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM);
            }
            LocationId::Glacier__Apocalypse_Entry__Grate_Ledge__Escape => {
                self.cbits5.remove(flags::ContextBits5::VISITED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE);
            }
            LocationId::Interior__Bunker_Interior__Desk__Note => {
                self.cbits5.remove(flags::ContextBits5::VISITED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE);
            }
            LocationId::Interior__Building_Interior__Entry__Remote_Urn => {
                self.cbits5.remove(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN);
            }
            LocationId::Interior__Building_Interior__Entry__Urn_Collection_Skip => {
                self.cbits5.remove(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP);
            }
            LocationId::Interior__Building_Interior__Corner__Urn => {
                self.cbits5.remove(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__CORNER__URN);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__CORNER__URN);
            }
            LocationId::Interior__Tent_Interior__Desk__Note => {
                self.cbits5.remove(flags::ContextBits5::VISITED_INTERIOR__TENT_INTERIOR__DESK__NOTE);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_INTERIOR__TENT_INTERIOR__DESK__NOTE);
            }
            LocationId::Interior__Garage__Boxes__Under_Boxes => {
                self.cbits5.remove(flags::ContextBits5::VISITED_INTERIOR__GARAGE__BOXES__UNDER_BOXES);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_INTERIOR__GARAGE__BOXES__UNDER_BOXES);
            }
            LocationId::Interior__Ebih_Cave__Entry__Health => {
                self.cbits5.remove(flags::ContextBits5::VISITED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH);
            }
            LocationId::Interior__Outpost_Interior__Bookshelf__Note => {
                self.cbits5.remove(flags::ContextBits5::VISITED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE);
            }
            LocationId::Irikar_Breach__Gauntlet__Hidden_Path_Reward__Item => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM);
            }
            LocationId::Irikar_Breach__Hover_Room__Bottom__Item => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM);
            }
            LocationId::Irikar_Breach__Worm_Rave__Corner__Item => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM);
            }
            LocationId::Irikar__Hub__Sat_Tower_Top_Ledge__Tablet => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET);
            }
            LocationId::Irikar__Hub__Dagger_Altar__Weapon => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON);
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL);
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Mist_into_Wall => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL);
            }
            LocationId::Irikar__Hub__Royal_Storage_in_Wall__Item => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM);
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN);
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Collection_Skip => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP);
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Fast_Travel => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL);
            }
            LocationId::Irikar__Abandoned_Room__Corner_Core__Core => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE);
            }
            LocationId::Irikar__Basement_Pipes__Left_Vertical_Pipe__Health_Pickup => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP);
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Defeat_Gudam => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM);
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Shockwave_Gudam => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM);
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Boss_Reward => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD);
            }
            LocationId::Irikar__Boss_Room__Healthy_Rooftop__Health => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH);
            }
            LocationId::Irikar__East_Rooftops__Top_Rooftop__Tablet => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET);
            }
            LocationId::Irikar__Lamassu__Desk__Item => {
                self.cbits6.remove(flags::ContextBits6::VISITED_IRIKAR__LAMASSU__DESK__ITEM);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_IRIKAR__LAMASSU__DESK__ITEM);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_4 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_5 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Mist_Upgrade => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2);
                self.cbits9.remove(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_1 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_2 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_3 => {
                self.cbits6.remove(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3);
            }
            LocationId::Uhrum__West_Entrance__Inner_Dais__Item => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM);
            }
            LocationId::Uhrum__West_Entrance__Gate_Switch__Open_Gate => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE);
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_West__Mist_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL);
                self.cbits11.remove(flags::ContextBits11::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Charge_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Spin_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL);
                self.cbits11.remove(flags::ContextBits11::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Mist_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Charge_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Spin_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Mist_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Charge_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Spin_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Mist_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Sand__Refill => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__SAND__REFILL);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__SAND__REFILL);
            }
            LocationId::Uhrum__Siege_Corridor__Western_Cache__Core => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE);
            }
            LocationId::Uhrum__Siege_Corridor__Center_Box__Box => {
                self.cbits6.remove(flags::ContextBits6::VISITED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX);
            }
            LocationId::Uhrum__Siege_Corridor__Upper_Rock_Item__Urn => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN);
            }
            LocationId::Uhrum__Siege_Corridor__Pond__Item => {
                self.cbits6.remove(flags::ContextBits6::VISITED_UHRUM__SIEGE_CORRIDOR__POND__ITEM);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__POND__ITEM);
            }
            LocationId::Uhrum__Waterfalls__Ceiling_Cache__Flask => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK);
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Charge_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Spin_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Mist_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Charge_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Spin_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Mist_through_Wall => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL);
            }
            LocationId::Uhrum__Waterfalls__Below_Block__Shockwave_Block => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK);
            }
            LocationId::Uhrum__Waterfalls__Above_Block__Block => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK);
            }
            LocationId::Uhrum__Waterfalls__East_26__Block => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__EAST_26__BLOCK);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__EAST_26__BLOCK);
            }
            LocationId::Uhrum__Waterfalls__West_Water_Nook__Tablet => {
                self.cbits7.remove(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET);
            }
            LocationId::Uhrum__Annuna_Corridor__Upper_Trees__Remote_Urn => {
                self.cbits6.remove(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN);
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn => {
                self.cbits6.remove(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN);
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Collection_Skip => {
                self.cbits6.remove(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP);
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Fast_Travel => {
                self.cbits6.remove(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL);
            }
            LocationId::Uhrum__Annuna_Corridor__Block_West__Dislodge_Block => {
                self.cbits6.remove(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK);
            }
            LocationId::Uhrum__Annuna_Corridor__Block_East__Dislodge_Block => {
                self.cbits6.remove(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK);
            }
            LocationId::Uhrum__Annuna_Corridor__East_Cubby__Tablet => {
                self.cbits6.remove(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET);
            }
            LocationId::Uhrum__Annuna_Corridor__Statue__Item => {
                self.cbits6.remove(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM);
                self.cbits10.remove(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM);
            }
        }
    }
    
    fn todo(&self, loc_id: LocationId) -> bool {
        match loc_id {
            LocationId::Amagi__Main_Area__Way_Off_To_The_Side__Item => {
                !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM)
            }
            LocationId::Amagi__Liru_Room__Shrine__Item => {
                !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__LIRU_ROOM__SHRINE__ITEM)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__LIRU_ROOM__SHRINE__ITEM)
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Break_Wall => {
                !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Defeat_MUS_A_M20 => {
                !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20)
            }
            LocationId::Amagi__West_Lake__Cavern_Tear_Duct__Remote_Flask => {
                !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK)
            }
            LocationId::Amagi__West_Lake__Cavern_Eye__Item => {
                !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM)
            }
            LocationId::Amagi__West_Lake__Cavern_Rear_Pillar__Boss_Reward => {
                !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD)
            }
            LocationId::Amagi__West_Lake__Stronghold_Top__Remote_Urn => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN)
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Item => {
                !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM)
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Break_Wall => {
                !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Stronghold_Rear_Wall__Break_Left_Wall => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL)
            }
            LocationId::Amagi__West_Lake__Stronghold_Middle_Column__Break_Wall => {
                !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Left__Knock_Down_Left_Boulder => {
                !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER)
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Right__Knock_Down_Right_Boulder => {
                !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER)
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Room__Break_Wall => {
                !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Door__Break_Wall => {
                !self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Right__Break_Wall => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Left__Break_Wall => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL)
            }
            LocationId::Annuna__Mirror_Match__Save_Point__Fight => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT)
            }
            LocationId::Annuna__Mirror_Match__Below_Switch__Hit_Switch => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH)
            }
            LocationId::Annuna__Mirror_Match__Plinth__Item => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM)
            }
            LocationId::Annuna__Mirror_Match__Waving_Distance__Shockwave_Flask => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK)
            }
            LocationId::Annuna__Mirror_Match__East_26_Lower__Remote_Flask => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK)
            }
            LocationId::Annuna__Mirror_Match__East_26_Upper__Remote_Flask => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK)
            }
            LocationId::Annuna__West_Bridge__Plinth__Item => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM)
            }
            LocationId::Annuna__East_Bridge__Gate_Button__Switch => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH)
            }
            LocationId::Annuna__East_Bridge__Below_Gate_Button__Switch_from_Below => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW)
            }
            LocationId::Annuna__East_Bridge__Tower_Gate__Tablet => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET)
            }
            LocationId::Annuna__East_Bridge__Tower_Secret__Item => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM)
            }
            LocationId::Annuna__Sniper_Valley__Bridge_End__Health_Pickup => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP)
            }
            LocationId::Annuna__Sniper_Valley__Table__Item => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_West__Break_Outer_Wall => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_East__Break_Outer_Wall => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_West__Break_Inner_Wall => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_East__Break_Inner_Wall => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Cache__Item => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM)
            }
            LocationId::Annuna__Twisty_Passages__Top__Tablet => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET)
            }
            LocationId::Annuna__Twisty_Passages__Northwest_Alcove__Refill => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL)
            }
            LocationId::Annuna__West_Climb__Cache__Item => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__WEST_CLIMB__CACHE__ITEM)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_ANNUNA__WEST_CLIMB__CACHE__ITEM)
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Boss_Fight => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT)
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Fill_It_Up => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP)
                && !self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP)
            }
            LocationId::Antarctica__Shed__Interior__Shelf => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANTARCTICA__SHED__INTERIOR__SHELF)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_ANTARCTICA__SHED__INTERIOR__SHELF)
            }
            LocationId::Antarctica__Building_2__Behind_Boxes__Note => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE)
            }
            LocationId::Antarctica__Power_Room__Switch__Flip => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP)
            }
            LocationId::Ebih__Base_Camp__Left_Platform_Moved__Item_From_The_Side => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE)
            }
            LocationId::Ebih__Base_Camp__Top_Platform__Item => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM)
            }
            LocationId::Ebih__By_Garage__Crawlspace__Fragment => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT)
            }
            LocationId::Ebih__Grid_25_10_12__East_10__Remote_Bush => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH)
            }
            LocationId::Ebih__Grid_25_10_12__Hidden_Bush__Behind_Bush => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH)
            }
            LocationId::Ebih__Waterfall__Alcove_Right__Block_Right => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT)
            }
            LocationId::Ebih__Waterfall__Waterfall_Center_Center__Both_Blocks => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS)
            }
            LocationId::Ebih__Waterfall__Alcove_Left__Block_Left => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT)
            }
            LocationId::Ebih__Waterfall__Alcove__Pedestal => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__PEDESTAL)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__PEDESTAL)
            }
            LocationId::Ebih__Waterfall__Alcove__Block_Right => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT)
            }
            LocationId::Ebih__Waterfall__Alcove__Block_Left => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT)
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Wall => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL)
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Through_Wall => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL)
            }
            LocationId::Ebih__Waterfall__Wall_Left__Break_Wall => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL)
            }
            LocationId::Ebih__Waterfall__Wall_Left__Break_Through_Wall => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL)
            }
            LocationId::Ebih__Ebih_West__Alcove__Tablet => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__ALCOVE__TABLET)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__ALCOVE__TABLET)
            }
            LocationId::Ebih__Ebih_West__Block_Left__Break_Block => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK)
            }
            LocationId::Ebih__Ebih_West__Block_Right__Break_Block => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK)
            }
            LocationId::Ebih__Ebih_East__Lower_Moving_Platform__Remote_Urn => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN)
            }
            LocationId::Ebih__Ebih_East__Corner__Urn => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__CORNER__URN)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__CORNER__URN)
            }
            LocationId::Ebih__Ebih_East__Dispenser__Vend => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__DISPENSER__VEND)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__DISPENSER__VEND)
            }
            LocationId::Ebih__Ebih_East__East_Ledge__Note => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE)
            }
            LocationId::Ebih__Boss_Room__Boss__Hack_Alu => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__HACK_ALU)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__HACK_ALU)
            }
            LocationId::Ebih__Boss_Room__Boss__Fight_Alu => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU)
            }
            LocationId::Ebih__Boss_Room__Boss__Boss_Reward => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD)
            }
            LocationId::Ebih__Boss_Room__East_Ledge__Item => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM)
            }
            LocationId::Ebih__Drone_Room__Item__Urn => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN)
            }
            LocationId::Ebih__Drone_Room__Item__Urn_Collection_Skip => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP)
            }
            LocationId::Ebih__Drone_Room__Item__Urn_Fast_Travel => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL)
            }
            LocationId::Ebih__Drone_Room__Middle_Platform__Urn_Quick_Grab => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB)
            }
            LocationId::Ebih__Grid_25_2_6__Pit__Item => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_25_2_6__PIT__ITEM)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__GRID_25_2_6__PIT__ITEM)
            }
            LocationId::Ebih__Grid_26_10_11__Ledge__Note => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_26_10_11__LEDGE__NOTE)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__GRID_26_10_11__LEDGE__NOTE)
            }
            LocationId::Ebih__Vertical_Interchange__Switch__Activate_Switch => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH)
            }
            LocationId::Giguna_Breach__Chimney__Cache__Flask => {
                !self.cbits4.contains(flags::ContextBits4::VISITED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK)
            }
            LocationId::Giguna_Breach__Cubby__Rocks__Health => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH)
            }
            LocationId::Giguna_Breach__Slingshot__Ravine__Urn => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN)
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Button__Open_Gate => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE)
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Right__Remote_Button => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON)
            }
            LocationId::Giguna__Giguna_Northeast__Door__Remote_Flask => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK)
            }
            LocationId::Giguna__Giguna_Northeast__Vault__Item => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM)
            }
            LocationId::Giguna__Carnelian__Vault__Item => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__CARNELIAN__VAULT__ITEM)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__CARNELIAN__VAULT__ITEM)
            }
            LocationId::Giguna__West_Caverns__Cache__Item => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WEST_CAVERNS__CACHE__ITEM)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WEST_CAVERNS__CACHE__ITEM)
            }
            LocationId::Giguna__West_Caverns__Bush__Item => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WEST_CAVERNS__BUSH__ITEM)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WEST_CAVERNS__BUSH__ITEM)
            }
            LocationId::Giguna__Wasteland__Door_Right__Health => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH)
            }
            LocationId::Giguna__Wasteland__Passage_East__Clear_Horizontal_Passage_Manually => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY)
            }
            LocationId::Giguna__Wasteland__Passage_East__Mist_through_Horizontal_Passage => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE)
            }
            LocationId::Giguna__Wasteland__Passage_Cache__Clear_Horizontal_Passage_Manually => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY)
            }
            LocationId::Giguna__Wasteland__Passage_Cache__Mist_through_Horizontal_Passage => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE)
            }
            LocationId::Giguna__Giguna_Base__Ruin__Item => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_BASE__RUIN__ITEM)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_BASE__RUIN__ITEM)
            }
            LocationId::Giguna__Giguna_Base__Table__News => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_BASE__TABLE__NEWS)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_BASE__TABLE__NEWS)
            }
            LocationId::Giguna__Ruins_East__Way_Up_High__Item => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM)
            }
            LocationId::Giguna__Ruins_Center__Tablet__Item => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_CENTER__TABLET__ITEM)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_CENTER__TABLET__ITEM)
            }
            LocationId::Giguna__Ruins_Top__Small_Ledge__Shockwave_Flask => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK)
            }
            LocationId::Giguna__Ruins_Top__Flask__Flask => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_TOP__FLASK__FLASK)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_TOP__FLASK__FLASK)
            }
            LocationId::Giguna__West_Tower__Top__Tablet => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WEST_TOWER__TOP__TABLET)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WEST_TOWER__TOP__TABLET)
            }
            LocationId::Giguna__Far_Corner__Grass__Obscured_Item => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM)
            }
            LocationId::Giguna__Helipad__Tablet_Ledge__Tablet => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET)
            }
            LocationId::Giguna__Clouds__Cache__Item => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__CLOUDS__CACHE__ITEM)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__CLOUDS__CACHE__ITEM)
            }
            LocationId::Giguna__Lamassu__Deposit__Flask => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__LAMASSU__DEPOSIT__FLASK)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__LAMASSU__DEPOSIT__FLASK)
            }
            LocationId::Giguna__Dual_Path__Below_Left_Switch__Remote_Switch => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH)
            }
            LocationId::Giguna__Dual_Path__Left_Switch__Hit_Switch => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH)
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Break_Wall => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL)
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Mist_into_Wall => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL)
            }
            LocationId::Giguna__Dual_Path__Wall_Secret__Health => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH)
            }
            LocationId::Giguna__Dual_Path__Right_Switch__Hit_Switch => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH)
            }
            LocationId::Giguna__Dual_Path__Below_Right_Switch__Remote_Switch => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH)
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Shockwave_Boulder => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER)
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Enter_Rock_as_Mist => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST)
            }
            LocationId::Giguna__Hard_Rock__Rock_Center__Tablet => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET)
            }
            LocationId::Giguna__Hard_Rock__Rock_Left__Shockwave_Boulder => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER)
            }
            LocationId::Giguna__Hard_Rock__Rock_Left__Enter_Rock_as_Mist => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST)
            }
            LocationId::Giguna__East_Caverns__Hidden_Passage_Center__Hidden_Flask => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK)
            }
            LocationId::Giguna__Gateway__Block_Left__Shockwave => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE)
            }
            LocationId::Giguna__Gateway__Block_Right__Shockwave => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE)
            }
            LocationId::Giguna__Gateway__Flask_Ledge__Item => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM)
            }
            LocationId::Giguna__Gateway__Button__Hit_Switch => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH)
            }
            LocationId::Giguna__Antechamber__Statue_Head__Tablet => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET)
                && !self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET)
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Hack_Gubi => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI)
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Fight_Gubi => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI)
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Boss_Reward => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD)
            }
            LocationId::Giguna__Gubi_Lair__Pedestal__Axe => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE)
            }
            LocationId::Glacier__Compass_Room__Center__Table => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__COMPASS_ROOM__CENTER__TABLE)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__COMPASS_ROOM__CENTER__TABLE)
            }
            LocationId::Glacier__The_Big_Drop__Water_Surface__Drown => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN)
            }
            LocationId::Glacier__Vertical_Room__Under_Switch__Switch => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH)
            }
            LocationId::Glacier__Vertical_Room__Peak__Flask => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__VERTICAL_ROOM__PEAK__FLASK)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__VERTICAL_ROOM__PEAK__FLASK)
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Item => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM)
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Switch => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH)
            }
            LocationId::Glacier__Ledge_Grab_Room__Cliff_Bottom__Quick_Grab => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB)
            }
            LocationId::Glacier__Ledge_Grab_Room__Pedestal__Item => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM)
            }
            LocationId::Glacier__Apocalypse_Entry__Grate_Ledge__Escape => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE)
            }
            LocationId::Interior__Bunker_Interior__Desk__Note => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE)
            }
            LocationId::Interior__Building_Interior__Entry__Remote_Urn => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN)
            }
            LocationId::Interior__Building_Interior__Entry__Urn_Collection_Skip => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP)
            }
            LocationId::Interior__Building_Interior__Corner__Urn => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__CORNER__URN)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__CORNER__URN)
            }
            LocationId::Interior__Tent_Interior__Desk__Note => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__TENT_INTERIOR__DESK__NOTE)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__TENT_INTERIOR__DESK__NOTE)
            }
            LocationId::Interior__Garage__Boxes__Under_Boxes => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__GARAGE__BOXES__UNDER_BOXES)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__GARAGE__BOXES__UNDER_BOXES)
            }
            LocationId::Interior__Ebih_Cave__Entry__Health => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH)
            }
            LocationId::Interior__Outpost_Interior__Bookshelf__Note => {
                !self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE)
            }
            LocationId::Irikar_Breach__Gauntlet__Hidden_Path_Reward__Item => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM)
            }
            LocationId::Irikar_Breach__Hover_Room__Bottom__Item => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM)
            }
            LocationId::Irikar_Breach__Worm_Rave__Corner__Item => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM)
            }
            LocationId::Irikar__Hub__Sat_Tower_Top_Ledge__Tablet => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET)
            }
            LocationId::Irikar__Hub__Dagger_Altar__Weapon => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON)
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL)
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Mist_into_Wall => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL)
            }
            LocationId::Irikar__Hub__Royal_Storage_in_Wall__Item => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM)
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN)
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Collection_Skip => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP)
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Fast_Travel => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL)
            }
            LocationId::Irikar__Abandoned_Room__Corner_Core__Core => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE)
            }
            LocationId::Irikar__Basement_Pipes__Left_Vertical_Pipe__Health_Pickup => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP)
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Defeat_Gudam => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM)
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Shockwave_Gudam => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM)
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Boss_Reward => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD)
            }
            LocationId::Irikar__Boss_Room__Healthy_Rooftop__Health => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH)
            }
            LocationId::Irikar__East_Rooftops__Top_Rooftop__Tablet => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET)
            }
            LocationId::Irikar__Lamassu__Desk__Item => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__LAMASSU__DESK__ITEM)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__LAMASSU__DESK__ITEM)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_1 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_2 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_3 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_4 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_5 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Mist_Upgrade => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_1 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_2 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_3 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_1 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_2 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2)
                && !self.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_3 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_1 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_2 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_3 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_1 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_2 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_3 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_1 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_2 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_3 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_1 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_2 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_3 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_1 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_2 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_1 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_2 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_3 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_1 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_2 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_3 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_1 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_2 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_3 => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3)
            }
            LocationId::Uhrum__West_Entrance__Inner_Dais__Item => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM)
            }
            LocationId::Uhrum__West_Entrance__Gate_Switch__Open_Gate => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE)
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_West__Mist_through_Wall => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL)
                && !self.cbits11.contains(flags::ContextBits11::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Charge_through_Wall => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Spin_through_Wall => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL)
                && !self.cbits11.contains(flags::ContextBits11::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Mist_through_Wall => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Charge_through_Wall => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Spin_through_Wall => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Mist_through_Wall => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Charge_through_Wall => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Spin_through_Wall => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Mist_through_Wall => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Sand__Refill => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__SAND__REFILL)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__SAND__REFILL)
            }
            LocationId::Uhrum__Siege_Corridor__Western_Cache__Core => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE)
            }
            LocationId::Uhrum__Siege_Corridor__Center_Box__Box => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX)
            }
            LocationId::Uhrum__Siege_Corridor__Upper_Rock_Item__Urn => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN)
            }
            LocationId::Uhrum__Siege_Corridor__Pond__Item => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__SIEGE_CORRIDOR__POND__ITEM)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__POND__ITEM)
            }
            LocationId::Uhrum__Waterfalls__Ceiling_Cache__Flask => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK)
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Charge_through_Wall => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Spin_through_Wall => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Mist_through_Wall => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Charge_through_Wall => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Spin_through_Wall => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Mist_through_Wall => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Below_Block__Shockwave_Block => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK)
            }
            LocationId::Uhrum__Waterfalls__Above_Block__Block => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK)
            }
            LocationId::Uhrum__Waterfalls__East_26__Block => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__EAST_26__BLOCK)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__EAST_26__BLOCK)
            }
            LocationId::Uhrum__Waterfalls__West_Water_Nook__Tablet => {
                !self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET)
            }
            LocationId::Uhrum__Annuna_Corridor__Upper_Trees__Remote_Urn => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN)
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN)
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Collection_Skip => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP)
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Fast_Travel => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL)
            }
            LocationId::Uhrum__Annuna_Corridor__Block_West__Dislodge_Block => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK)
            }
            LocationId::Uhrum__Annuna_Corridor__Block_East__Dislodge_Block => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK)
            }
            LocationId::Uhrum__Annuna_Corridor__East_Cubby__Tablet => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET)
            }
            LocationId::Uhrum__Annuna_Corridor__Statue__Item => {
                !self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM)
                && !self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM)
            }
        }
    }
    fn visited(&self, loc_id: LocationId) -> bool {
        match loc_id {
            LocationId::Amagi__Main_Area__Way_Off_To_The_Side__Item => {
                self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM)
            }
            LocationId::Amagi__Liru_Room__Shrine__Item => {
                self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__LIRU_ROOM__SHRINE__ITEM)
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Break_Wall => {
                self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Defeat_MUS_A_M20 => {
                self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20)
            }
            LocationId::Amagi__West_Lake__Cavern_Tear_Duct__Remote_Flask => {
                self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK)
            }
            LocationId::Amagi__West_Lake__Cavern_Eye__Item => {
                self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM)
            }
            LocationId::Amagi__West_Lake__Cavern_Rear_Pillar__Boss_Reward => {
                self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD)
            }
            LocationId::Amagi__West_Lake__Stronghold_Top__Remote_Urn => {
                self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN)
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Item => {
                self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM)
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Break_Wall => {
                self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Stronghold_Rear_Wall__Break_Left_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL)
            }
            LocationId::Amagi__West_Lake__Stronghold_Middle_Column__Break_Wall => {
                self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Left__Knock_Down_Left_Boulder => {
                self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER)
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Right__Knock_Down_Right_Boulder => {
                self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER)
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Room__Break_Wall => {
                self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Door__Break_Wall => {
                self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Right__Break_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Left__Break_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL)
            }
            LocationId::Annuna__Mirror_Match__Save_Point__Fight => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT)
            }
            LocationId::Annuna__Mirror_Match__Below_Switch__Hit_Switch => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH)
            }
            LocationId::Annuna__Mirror_Match__Plinth__Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM)
            }
            LocationId::Annuna__Mirror_Match__Waving_Distance__Shockwave_Flask => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK)
            }
            LocationId::Annuna__Mirror_Match__East_26_Lower__Remote_Flask => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK)
            }
            LocationId::Annuna__Mirror_Match__East_26_Upper__Remote_Flask => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK)
            }
            LocationId::Annuna__West_Bridge__Plinth__Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM)
            }
            LocationId::Annuna__East_Bridge__Gate_Button__Switch => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH)
            }
            LocationId::Annuna__East_Bridge__Below_Gate_Button__Switch_from_Below => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW)
            }
            LocationId::Annuna__East_Bridge__Tower_Gate__Tablet => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET)
            }
            LocationId::Annuna__East_Bridge__Tower_Secret__Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM)
            }
            LocationId::Annuna__Sniper_Valley__Bridge_End__Health_Pickup => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP)
            }
            LocationId::Annuna__Sniper_Valley__Table__Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_West__Break_Outer_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_East__Break_Outer_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_West__Break_Inner_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_East__Break_Inner_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Cache__Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM)
            }
            LocationId::Annuna__Twisty_Passages__Top__Tablet => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET)
            }
            LocationId::Annuna__Twisty_Passages__Northwest_Alcove__Refill => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL)
            }
            LocationId::Annuna__West_Climb__Cache__Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__WEST_CLIMB__CACHE__ITEM)
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Boss_Fight => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT)
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Fill_It_Up => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP)
            }
            LocationId::Antarctica__Shed__Interior__Shelf => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANTARCTICA__SHED__INTERIOR__SHELF)
            }
            LocationId::Antarctica__Building_2__Behind_Boxes__Note => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE)
            }
            LocationId::Antarctica__Power_Room__Switch__Flip => {
                self.cbits4.contains(flags::ContextBits4::VISITED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP)
            }
            LocationId::Ebih__Base_Camp__Left_Platform_Moved__Item_From_The_Side => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE)
            }
            LocationId::Ebih__Base_Camp__Top_Platform__Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM)
            }
            LocationId::Ebih__By_Garage__Crawlspace__Fragment => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT)
            }
            LocationId::Ebih__Grid_25_10_12__East_10__Remote_Bush => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH)
            }
            LocationId::Ebih__Grid_25_10_12__Hidden_Bush__Behind_Bush => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH)
            }
            LocationId::Ebih__Waterfall__Alcove_Right__Block_Right => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT)
            }
            LocationId::Ebih__Waterfall__Waterfall_Center_Center__Both_Blocks => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS)
            }
            LocationId::Ebih__Waterfall__Alcove_Left__Block_Left => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT)
            }
            LocationId::Ebih__Waterfall__Alcove__Pedestal => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__PEDESTAL)
            }
            LocationId::Ebih__Waterfall__Alcove__Block_Right => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT)
            }
            LocationId::Ebih__Waterfall__Alcove__Block_Left => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT)
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL)
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Through_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL)
            }
            LocationId::Ebih__Waterfall__Wall_Left__Break_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL)
            }
            LocationId::Ebih__Waterfall__Wall_Left__Break_Through_Wall => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL)
            }
            LocationId::Ebih__Ebih_West__Alcove__Tablet => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__ALCOVE__TABLET)
            }
            LocationId::Ebih__Ebih_West__Block_Left__Break_Block => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK)
            }
            LocationId::Ebih__Ebih_West__Block_Right__Break_Block => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK)
            }
            LocationId::Ebih__Ebih_East__Lower_Moving_Platform__Remote_Urn => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN)
            }
            LocationId::Ebih__Ebih_East__Corner__Urn => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__CORNER__URN)
            }
            LocationId::Ebih__Ebih_East__Dispenser__Vend => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__DISPENSER__VEND)
            }
            LocationId::Ebih__Ebih_East__East_Ledge__Note => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE)
            }
            LocationId::Ebih__Boss_Room__Boss__Hack_Alu => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__HACK_ALU)
            }
            LocationId::Ebih__Boss_Room__Boss__Fight_Alu => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU)
            }
            LocationId::Ebih__Boss_Room__Boss__Boss_Reward => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD)
            }
            LocationId::Ebih__Boss_Room__East_Ledge__Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM)
            }
            LocationId::Ebih__Drone_Room__Item__Urn => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN)
            }
            LocationId::Ebih__Drone_Room__Item__Urn_Collection_Skip => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP)
            }
            LocationId::Ebih__Drone_Room__Item__Urn_Fast_Travel => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL)
            }
            LocationId::Ebih__Drone_Room__Middle_Platform__Urn_Quick_Grab => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB)
            }
            LocationId::Ebih__Grid_25_2_6__Pit__Item => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_25_2_6__PIT__ITEM)
            }
            LocationId::Ebih__Grid_26_10_11__Ledge__Note => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_26_10_11__LEDGE__NOTE)
            }
            LocationId::Ebih__Vertical_Interchange__Switch__Activate_Switch => {
                self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH)
            }
            LocationId::Giguna_Breach__Chimney__Cache__Flask => {
                self.cbits4.contains(flags::ContextBits4::VISITED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK)
            }
            LocationId::Giguna_Breach__Cubby__Rocks__Health => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH)
            }
            LocationId::Giguna_Breach__Slingshot__Ravine__Urn => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN)
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Button__Open_Gate => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE)
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Right__Remote_Button => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON)
            }
            LocationId::Giguna__Giguna_Northeast__Door__Remote_Flask => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK)
            }
            LocationId::Giguna__Giguna_Northeast__Vault__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM)
            }
            LocationId::Giguna__Carnelian__Vault__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__CARNELIAN__VAULT__ITEM)
            }
            LocationId::Giguna__West_Caverns__Cache__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WEST_CAVERNS__CACHE__ITEM)
            }
            LocationId::Giguna__West_Caverns__Bush__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WEST_CAVERNS__BUSH__ITEM)
            }
            LocationId::Giguna__Wasteland__Door_Right__Health => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH)
            }
            LocationId::Giguna__Wasteland__Passage_East__Clear_Horizontal_Passage_Manually => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY)
            }
            LocationId::Giguna__Wasteland__Passage_East__Mist_through_Horizontal_Passage => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE)
            }
            LocationId::Giguna__Wasteland__Passage_Cache__Clear_Horizontal_Passage_Manually => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY)
            }
            LocationId::Giguna__Wasteland__Passage_Cache__Mist_through_Horizontal_Passage => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE)
            }
            LocationId::Giguna__Giguna_Base__Ruin__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_BASE__RUIN__ITEM)
            }
            LocationId::Giguna__Giguna_Base__Table__News => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_BASE__TABLE__NEWS)
            }
            LocationId::Giguna__Ruins_East__Way_Up_High__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM)
            }
            LocationId::Giguna__Ruins_Center__Tablet__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_CENTER__TABLET__ITEM)
            }
            LocationId::Giguna__Ruins_Top__Small_Ledge__Shockwave_Flask => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK)
            }
            LocationId::Giguna__Ruins_Top__Flask__Flask => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_TOP__FLASK__FLASK)
            }
            LocationId::Giguna__West_Tower__Top__Tablet => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WEST_TOWER__TOP__TABLET)
            }
            LocationId::Giguna__Far_Corner__Grass__Obscured_Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM)
            }
            LocationId::Giguna__Helipad__Tablet_Ledge__Tablet => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET)
            }
            LocationId::Giguna__Clouds__Cache__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__CLOUDS__CACHE__ITEM)
            }
            LocationId::Giguna__Lamassu__Deposit__Flask => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__LAMASSU__DEPOSIT__FLASK)
            }
            LocationId::Giguna__Dual_Path__Below_Left_Switch__Remote_Switch => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH)
            }
            LocationId::Giguna__Dual_Path__Left_Switch__Hit_Switch => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH)
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Break_Wall => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL)
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Mist_into_Wall => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL)
            }
            LocationId::Giguna__Dual_Path__Wall_Secret__Health => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH)
            }
            LocationId::Giguna__Dual_Path__Right_Switch__Hit_Switch => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH)
            }
            LocationId::Giguna__Dual_Path__Below_Right_Switch__Remote_Switch => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH)
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Shockwave_Boulder => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER)
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Enter_Rock_as_Mist => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST)
            }
            LocationId::Giguna__Hard_Rock__Rock_Center__Tablet => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET)
            }
            LocationId::Giguna__Hard_Rock__Rock_Left__Shockwave_Boulder => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER)
            }
            LocationId::Giguna__Hard_Rock__Rock_Left__Enter_Rock_as_Mist => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST)
            }
            LocationId::Giguna__East_Caverns__Hidden_Passage_Center__Hidden_Flask => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK)
            }
            LocationId::Giguna__Gateway__Block_Left__Shockwave => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE)
            }
            LocationId::Giguna__Gateway__Block_Right__Shockwave => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE)
            }
            LocationId::Giguna__Gateway__Flask_Ledge__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM)
            }
            LocationId::Giguna__Gateway__Button__Hit_Switch => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH)
            }
            LocationId::Giguna__Antechamber__Statue_Head__Tablet => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET)
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Hack_Gubi => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI)
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Fight_Gubi => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI)
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Boss_Reward => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD)
            }
            LocationId::Giguna__Gubi_Lair__Pedestal__Axe => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE)
            }
            LocationId::Glacier__Compass_Room__Center__Table => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__COMPASS_ROOM__CENTER__TABLE)
            }
            LocationId::Glacier__The_Big_Drop__Water_Surface__Drown => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN)
            }
            LocationId::Glacier__Vertical_Room__Under_Switch__Switch => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH)
            }
            LocationId::Glacier__Vertical_Room__Peak__Flask => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__VERTICAL_ROOM__PEAK__FLASK)
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM)
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Switch => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH)
            }
            LocationId::Glacier__Ledge_Grab_Room__Cliff_Bottom__Quick_Grab => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB)
            }
            LocationId::Glacier__Ledge_Grab_Room__Pedestal__Item => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM)
            }
            LocationId::Glacier__Apocalypse_Entry__Grate_Ledge__Escape => {
                self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE)
            }
            LocationId::Interior__Bunker_Interior__Desk__Note => {
                self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE)
            }
            LocationId::Interior__Building_Interior__Entry__Remote_Urn => {
                self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN)
            }
            LocationId::Interior__Building_Interior__Entry__Urn_Collection_Skip => {
                self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP)
            }
            LocationId::Interior__Building_Interior__Corner__Urn => {
                self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__CORNER__URN)
            }
            LocationId::Interior__Tent_Interior__Desk__Note => {
                self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__TENT_INTERIOR__DESK__NOTE)
            }
            LocationId::Interior__Garage__Boxes__Under_Boxes => {
                self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__GARAGE__BOXES__UNDER_BOXES)
            }
            LocationId::Interior__Ebih_Cave__Entry__Health => {
                self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH)
            }
            LocationId::Interior__Outpost_Interior__Bookshelf__Note => {
                self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE)
            }
            LocationId::Irikar_Breach__Gauntlet__Hidden_Path_Reward__Item => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM)
            }
            LocationId::Irikar_Breach__Hover_Room__Bottom__Item => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM)
            }
            LocationId::Irikar_Breach__Worm_Rave__Corner__Item => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM)
            }
            LocationId::Irikar__Hub__Sat_Tower_Top_Ledge__Tablet => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET)
            }
            LocationId::Irikar__Hub__Dagger_Altar__Weapon => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON)
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL)
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Mist_into_Wall => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL)
            }
            LocationId::Irikar__Hub__Royal_Storage_in_Wall__Item => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM)
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN)
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Collection_Skip => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP)
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Fast_Travel => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL)
            }
            LocationId::Irikar__Abandoned_Room__Corner_Core__Core => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE)
            }
            LocationId::Irikar__Basement_Pipes__Left_Vertical_Pipe__Health_Pickup => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP)
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Defeat_Gudam => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM)
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Shockwave_Gudam => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM)
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Boss_Reward => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD)
            }
            LocationId::Irikar__Boss_Room__Healthy_Rooftop__Health => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH)
            }
            LocationId::Irikar__East_Rooftops__Top_Rooftop__Tablet => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET)
            }
            LocationId::Irikar__Lamassu__Desk__Item => {
                self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__LAMASSU__DESK__ITEM)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_4 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_5 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Mist_Upgrade => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_1 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_2 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_3 => {
                self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3)
            }
            LocationId::Uhrum__West_Entrance__Inner_Dais__Item => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM)
            }
            LocationId::Uhrum__West_Entrance__Gate_Switch__Open_Gate => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE)
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_West__Mist_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Charge_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Spin_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Mist_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Charge_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Spin_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Mist_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Charge_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Spin_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Mist_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Sand__Refill => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__SAND__REFILL)
            }
            LocationId::Uhrum__Siege_Corridor__Western_Cache__Core => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE)
            }
            LocationId::Uhrum__Siege_Corridor__Center_Box__Box => {
                self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX)
            }
            LocationId::Uhrum__Siege_Corridor__Upper_Rock_Item__Urn => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN)
            }
            LocationId::Uhrum__Siege_Corridor__Pond__Item => {
                self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__SIEGE_CORRIDOR__POND__ITEM)
            }
            LocationId::Uhrum__Waterfalls__Ceiling_Cache__Flask => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK)
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Charge_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Spin_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Mist_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Charge_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Spin_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Mist_through_Wall => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Below_Block__Shockwave_Block => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK)
            }
            LocationId::Uhrum__Waterfalls__Above_Block__Block => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK)
            }
            LocationId::Uhrum__Waterfalls__East_26__Block => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__EAST_26__BLOCK)
            }
            LocationId::Uhrum__Waterfalls__West_Water_Nook__Tablet => {
                self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET)
            }
            LocationId::Uhrum__Annuna_Corridor__Upper_Trees__Remote_Urn => {
                self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN)
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn => {
                self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN)
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Collection_Skip => {
                self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP)
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Fast_Travel => {
                self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL)
            }
            LocationId::Uhrum__Annuna_Corridor__Block_West__Dislodge_Block => {
                self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK)
            }
            LocationId::Uhrum__Annuna_Corridor__Block_East__Dislodge_Block => {
                self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK)
            }
            LocationId::Uhrum__Annuna_Corridor__East_Cubby__Tablet => {
                self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET)
            }
            LocationId::Uhrum__Annuna_Corridor__Statue__Item => {
                self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM)
            }
        }
    }
    fn skipped(&self, loc_id: LocationId) -> bool {
        match loc_id {
            LocationId::Amagi__Main_Area__Way_Off_To_The_Side__Item => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM)
            }
            LocationId::Amagi__Liru_Room__Shrine__Item => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__LIRU_ROOM__SHRINE__ITEM)
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Break_Wall => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Defeat_MUS_A_M20 => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20)
            }
            LocationId::Amagi__West_Lake__Cavern_Tear_Duct__Remote_Flask => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK)
            }
            LocationId::Amagi__West_Lake__Cavern_Eye__Item => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM)
            }
            LocationId::Amagi__West_Lake__Cavern_Rear_Pillar__Boss_Reward => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD)
            }
            LocationId::Amagi__West_Lake__Stronghold_Top__Remote_Urn => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN)
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Item => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM)
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Break_Wall => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Stronghold_Rear_Wall__Break_Left_Wall => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL)
            }
            LocationId::Amagi__West_Lake__Stronghold_Middle_Column__Break_Wall => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Left__Knock_Down_Left_Boulder => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER)
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Right__Knock_Down_Right_Boulder => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER)
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Room__Break_Wall => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Door__Break_Wall => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Right__Break_Wall => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL)
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Left__Break_Wall => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL)
            }
            LocationId::Annuna__Mirror_Match__Save_Point__Fight => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT)
            }
            LocationId::Annuna__Mirror_Match__Below_Switch__Hit_Switch => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH)
            }
            LocationId::Annuna__Mirror_Match__Plinth__Item => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM)
            }
            LocationId::Annuna__Mirror_Match__Waving_Distance__Shockwave_Flask => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK)
            }
            LocationId::Annuna__Mirror_Match__East_26_Lower__Remote_Flask => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK)
            }
            LocationId::Annuna__Mirror_Match__East_26_Upper__Remote_Flask => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK)
            }
            LocationId::Annuna__West_Bridge__Plinth__Item => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM)
            }
            LocationId::Annuna__East_Bridge__Gate_Button__Switch => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH)
            }
            LocationId::Annuna__East_Bridge__Below_Gate_Button__Switch_from_Below => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW)
            }
            LocationId::Annuna__East_Bridge__Tower_Gate__Tablet => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET)
            }
            LocationId::Annuna__East_Bridge__Tower_Secret__Item => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM)
            }
            LocationId::Annuna__Sniper_Valley__Bridge_End__Health_Pickup => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP)
            }
            LocationId::Annuna__Sniper_Valley__Table__Item => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_West__Break_Outer_Wall => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_East__Break_Outer_Wall => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_West__Break_Inner_Wall => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_East__Break_Inner_Wall => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL)
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Cache__Item => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM)
            }
            LocationId::Annuna__Twisty_Passages__Top__Tablet => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET)
            }
            LocationId::Annuna__Twisty_Passages__Northwest_Alcove__Refill => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL)
            }
            LocationId::Annuna__West_Climb__Cache__Item => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_ANNUNA__WEST_CLIMB__CACHE__ITEM)
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Boss_Fight => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT)
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Fill_It_Up => {
                self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP)
            }
            LocationId::Antarctica__Shed__Interior__Shelf => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_ANTARCTICA__SHED__INTERIOR__SHELF)
            }
            LocationId::Antarctica__Building_2__Behind_Boxes__Note => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE)
            }
            LocationId::Antarctica__Power_Room__Switch__Flip => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP)
            }
            LocationId::Ebih__Base_Camp__Left_Platform_Moved__Item_From_The_Side => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE)
            }
            LocationId::Ebih__Base_Camp__Top_Platform__Item => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM)
            }
            LocationId::Ebih__By_Garage__Crawlspace__Fragment => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT)
            }
            LocationId::Ebih__Grid_25_10_12__East_10__Remote_Bush => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH)
            }
            LocationId::Ebih__Grid_25_10_12__Hidden_Bush__Behind_Bush => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH)
            }
            LocationId::Ebih__Waterfall__Alcove_Right__Block_Right => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT)
            }
            LocationId::Ebih__Waterfall__Waterfall_Center_Center__Both_Blocks => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS)
            }
            LocationId::Ebih__Waterfall__Alcove_Left__Block_Left => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT)
            }
            LocationId::Ebih__Waterfall__Alcove__Pedestal => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__PEDESTAL)
            }
            LocationId::Ebih__Waterfall__Alcove__Block_Right => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT)
            }
            LocationId::Ebih__Waterfall__Alcove__Block_Left => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT)
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Wall => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL)
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Through_Wall => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL)
            }
            LocationId::Ebih__Waterfall__Wall_Left__Break_Wall => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL)
            }
            LocationId::Ebih__Waterfall__Wall_Left__Break_Through_Wall => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL)
            }
            LocationId::Ebih__Ebih_West__Alcove__Tablet => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__ALCOVE__TABLET)
            }
            LocationId::Ebih__Ebih_West__Block_Left__Break_Block => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK)
            }
            LocationId::Ebih__Ebih_West__Block_Right__Break_Block => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK)
            }
            LocationId::Ebih__Ebih_East__Lower_Moving_Platform__Remote_Urn => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN)
            }
            LocationId::Ebih__Ebih_East__Corner__Urn => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__CORNER__URN)
            }
            LocationId::Ebih__Ebih_East__Dispenser__Vend => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__DISPENSER__VEND)
            }
            LocationId::Ebih__Ebih_East__East_Ledge__Note => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE)
            }
            LocationId::Ebih__Boss_Room__Boss__Hack_Alu => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__HACK_ALU)
            }
            LocationId::Ebih__Boss_Room__Boss__Fight_Alu => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU)
            }
            LocationId::Ebih__Boss_Room__Boss__Boss_Reward => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD)
            }
            LocationId::Ebih__Boss_Room__East_Ledge__Item => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM)
            }
            LocationId::Ebih__Drone_Room__Item__Urn => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN)
            }
            LocationId::Ebih__Drone_Room__Item__Urn_Collection_Skip => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP)
            }
            LocationId::Ebih__Drone_Room__Item__Urn_Fast_Travel => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL)
            }
            LocationId::Ebih__Drone_Room__Middle_Platform__Urn_Quick_Grab => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB)
            }
            LocationId::Ebih__Grid_25_2_6__Pit__Item => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__GRID_25_2_6__PIT__ITEM)
            }
            LocationId::Ebih__Grid_26_10_11__Ledge__Note => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__GRID_26_10_11__LEDGE__NOTE)
            }
            LocationId::Ebih__Vertical_Interchange__Switch__Activate_Switch => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH)
            }
            LocationId::Giguna_Breach__Chimney__Cache__Flask => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK)
            }
            LocationId::Giguna_Breach__Cubby__Rocks__Health => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH)
            }
            LocationId::Giguna_Breach__Slingshot__Ravine__Urn => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN)
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Button__Open_Gate => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE)
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Right__Remote_Button => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON)
            }
            LocationId::Giguna__Giguna_Northeast__Door__Remote_Flask => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK)
            }
            LocationId::Giguna__Giguna_Northeast__Vault__Item => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM)
            }
            LocationId::Giguna__Carnelian__Vault__Item => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__CARNELIAN__VAULT__ITEM)
            }
            LocationId::Giguna__West_Caverns__Cache__Item => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WEST_CAVERNS__CACHE__ITEM)
            }
            LocationId::Giguna__West_Caverns__Bush__Item => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WEST_CAVERNS__BUSH__ITEM)
            }
            LocationId::Giguna__Wasteland__Door_Right__Health => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH)
            }
            LocationId::Giguna__Wasteland__Passage_East__Clear_Horizontal_Passage_Manually => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY)
            }
            LocationId::Giguna__Wasteland__Passage_East__Mist_through_Horizontal_Passage => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE)
            }
            LocationId::Giguna__Wasteland__Passage_Cache__Clear_Horizontal_Passage_Manually => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY)
            }
            LocationId::Giguna__Wasteland__Passage_Cache__Mist_through_Horizontal_Passage => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE)
            }
            LocationId::Giguna__Giguna_Base__Ruin__Item => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_BASE__RUIN__ITEM)
            }
            LocationId::Giguna__Giguna_Base__Table__News => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_BASE__TABLE__NEWS)
            }
            LocationId::Giguna__Ruins_East__Way_Up_High__Item => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM)
            }
            LocationId::Giguna__Ruins_Center__Tablet__Item => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_CENTER__TABLET__ITEM)
            }
            LocationId::Giguna__Ruins_Top__Small_Ledge__Shockwave_Flask => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK)
            }
            LocationId::Giguna__Ruins_Top__Flask__Flask => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_TOP__FLASK__FLASK)
            }
            LocationId::Giguna__West_Tower__Top__Tablet => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WEST_TOWER__TOP__TABLET)
            }
            LocationId::Giguna__Far_Corner__Grass__Obscured_Item => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM)
            }
            LocationId::Giguna__Helipad__Tablet_Ledge__Tablet => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET)
            }
            LocationId::Giguna__Clouds__Cache__Item => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__CLOUDS__CACHE__ITEM)
            }
            LocationId::Giguna__Lamassu__Deposit__Flask => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__LAMASSU__DEPOSIT__FLASK)
            }
            LocationId::Giguna__Dual_Path__Below_Left_Switch__Remote_Switch => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH)
            }
            LocationId::Giguna__Dual_Path__Left_Switch__Hit_Switch => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH)
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Break_Wall => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL)
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Mist_into_Wall => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL)
            }
            LocationId::Giguna__Dual_Path__Wall_Secret__Health => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH)
            }
            LocationId::Giguna__Dual_Path__Right_Switch__Hit_Switch => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH)
            }
            LocationId::Giguna__Dual_Path__Below_Right_Switch__Remote_Switch => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH)
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Shockwave_Boulder => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER)
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Enter_Rock_as_Mist => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST)
            }
            LocationId::Giguna__Hard_Rock__Rock_Center__Tablet => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET)
            }
            LocationId::Giguna__Hard_Rock__Rock_Left__Shockwave_Boulder => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER)
            }
            LocationId::Giguna__Hard_Rock__Rock_Left__Enter_Rock_as_Mist => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST)
            }
            LocationId::Giguna__East_Caverns__Hidden_Passage_Center__Hidden_Flask => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK)
            }
            LocationId::Giguna__Gateway__Block_Left__Shockwave => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE)
            }
            LocationId::Giguna__Gateway__Block_Right__Shockwave => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE)
            }
            LocationId::Giguna__Gateway__Flask_Ledge__Item => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM)
            }
            LocationId::Giguna__Gateway__Button__Hit_Switch => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH)
            }
            LocationId::Giguna__Antechamber__Statue_Head__Tablet => {
                self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET)
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Hack_Gubi => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI)
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Fight_Gubi => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI)
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Boss_Reward => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD)
            }
            LocationId::Giguna__Gubi_Lair__Pedestal__Axe => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE)
            }
            LocationId::Glacier__Compass_Room__Center__Table => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__COMPASS_ROOM__CENTER__TABLE)
            }
            LocationId::Glacier__The_Big_Drop__Water_Surface__Drown => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN)
            }
            LocationId::Glacier__Vertical_Room__Under_Switch__Switch => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH)
            }
            LocationId::Glacier__Vertical_Room__Peak__Flask => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__VERTICAL_ROOM__PEAK__FLASK)
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Item => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM)
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Switch => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH)
            }
            LocationId::Glacier__Ledge_Grab_Room__Cliff_Bottom__Quick_Grab => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB)
            }
            LocationId::Glacier__Ledge_Grab_Room__Pedestal__Item => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM)
            }
            LocationId::Glacier__Apocalypse_Entry__Grate_Ledge__Escape => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE)
            }
            LocationId::Interior__Bunker_Interior__Desk__Note => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE)
            }
            LocationId::Interior__Building_Interior__Entry__Remote_Urn => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN)
            }
            LocationId::Interior__Building_Interior__Entry__Urn_Collection_Skip => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP)
            }
            LocationId::Interior__Building_Interior__Corner__Urn => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__CORNER__URN)
            }
            LocationId::Interior__Tent_Interior__Desk__Note => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__TENT_INTERIOR__DESK__NOTE)
            }
            LocationId::Interior__Garage__Boxes__Under_Boxes => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__GARAGE__BOXES__UNDER_BOXES)
            }
            LocationId::Interior__Ebih_Cave__Entry__Health => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH)
            }
            LocationId::Interior__Outpost_Interior__Bookshelf__Note => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE)
            }
            LocationId::Irikar_Breach__Gauntlet__Hidden_Path_Reward__Item => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM)
            }
            LocationId::Irikar_Breach__Hover_Room__Bottom__Item => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM)
            }
            LocationId::Irikar_Breach__Worm_Rave__Corner__Item => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM)
            }
            LocationId::Irikar__Hub__Sat_Tower_Top_Ledge__Tablet => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET)
            }
            LocationId::Irikar__Hub__Dagger_Altar__Weapon => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON)
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL)
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Mist_into_Wall => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL)
            }
            LocationId::Irikar__Hub__Royal_Storage_in_Wall__Item => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM)
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN)
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Collection_Skip => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP)
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Fast_Travel => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL)
            }
            LocationId::Irikar__Abandoned_Room__Corner_Core__Core => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE)
            }
            LocationId::Irikar__Basement_Pipes__Left_Vertical_Pipe__Health_Pickup => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP)
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Defeat_Gudam => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM)
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Shockwave_Gudam => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM)
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Boss_Reward => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD)
            }
            LocationId::Irikar__Boss_Room__Healthy_Rooftop__Health => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH)
            }
            LocationId::Irikar__East_Rooftops__Top_Rooftop__Tablet => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET)
            }
            LocationId::Irikar__Lamassu__Desk__Item => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__LAMASSU__DESK__ITEM)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_1 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_2 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_3 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_4 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_5 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5)
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Mist_Upgrade => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_1 => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_2 => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_3 => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_1 => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_2 => {
                self.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_3 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_1 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_2 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_3 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_1 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_2 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2)
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_3 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_1 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_2 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_3 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_1 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_2 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_3 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_1 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_2 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_1 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_2 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2)
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_3 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_1 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_2 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_3 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_1 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_2 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2)
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_3 => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3)
            }
            LocationId::Uhrum__West_Entrance__Inner_Dais__Item => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM)
            }
            LocationId::Uhrum__West_Entrance__Gate_Switch__Open_Gate => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE)
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_West__Mist_through_Wall => {
                self.cbits11.contains(flags::ContextBits11::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Charge_through_Wall => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Spin_through_Wall => {
                self.cbits11.contains(flags::ContextBits11::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Mist_through_Wall => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Charge_through_Wall => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Spin_through_Wall => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Mist_through_Wall => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Charge_through_Wall => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Spin_through_Wall => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Mist_through_Wall => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__West_Entrance__Sand__Refill => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__SAND__REFILL)
            }
            LocationId::Uhrum__Siege_Corridor__Western_Cache__Core => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE)
            }
            LocationId::Uhrum__Siege_Corridor__Center_Box__Box => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX)
            }
            LocationId::Uhrum__Siege_Corridor__Upper_Rock_Item__Urn => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN)
            }
            LocationId::Uhrum__Siege_Corridor__Pond__Item => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__POND__ITEM)
            }
            LocationId::Uhrum__Waterfalls__Ceiling_Cache__Flask => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK)
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Charge_through_Wall => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Spin_through_Wall => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Mist_through_Wall => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Charge_through_Wall => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Spin_through_Wall => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Mist_through_Wall => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL)
            }
            LocationId::Uhrum__Waterfalls__Below_Block__Shockwave_Block => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK)
            }
            LocationId::Uhrum__Waterfalls__Above_Block__Block => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK)
            }
            LocationId::Uhrum__Waterfalls__East_26__Block => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__EAST_26__BLOCK)
            }
            LocationId::Uhrum__Waterfalls__West_Water_Nook__Tablet => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET)
            }
            LocationId::Uhrum__Annuna_Corridor__Upper_Trees__Remote_Urn => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN)
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN)
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Collection_Skip => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP)
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Fast_Travel => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL)
            }
            LocationId::Uhrum__Annuna_Corridor__Block_West__Dislodge_Block => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK)
            }
            LocationId::Uhrum__Annuna_Corridor__Block_East__Dislodge_Block => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK)
            }
            LocationId::Uhrum__Annuna_Corridor__East_Cubby__Tablet => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET)
            }
            LocationId::Uhrum__Annuna_Corridor__Statue__Item => {
                self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM)
            }
        }
    }

    fn all_spot_checks(&self, id: SpotId) -> bool {
        false
    }
    fn all_area_checks(&self, id: AreaId) -> bool {
        false
    }
    fn all_region_checks(&self, id: RegionId) -> bool {
        false
    }
    fn get_movement_state(&self, world: &graph::World) -> movements::MovementState {
        movements::get_movement_state(self, world)
    }

    fn local_travel_time(&self, movement_state: movements::MovementState, dest: SpotId) -> u32 {
        movements::local_travel_time(movement_state, self.position, dest)
    }

    fn count_visits(&self) -> u32 {
        self.cbits3.intersection(flags::ContextBits3::ALL_VISIT_FLAGS).bits().count_ones()
            + self.cbits4.intersection(flags::ContextBits4::ALL_VISIT_FLAGS).bits().count_ones()
            + self.cbits5.intersection(flags::ContextBits5::ALL_VISIT_FLAGS).bits().count_ones()
            + self.cbits6.intersection(flags::ContextBits6::ALL_VISIT_FLAGS).bits().count_ones()
            + self.cbits7.intersection(flags::ContextBits7::ALL_VISIT_FLAGS).bits().count_ones()
    }
    fn count_skips(&self) -> u32 {
        self.cbits7.intersection(flags::ContextBits7::ALL_SKIP_FLAGS).bits().count_ones()
            + self.cbits8.intersection(flags::ContextBits8::ALL_SKIP_FLAGS).bits().count_ones()
            + self.cbits9.intersection(flags::ContextBits9::ALL_SKIP_FLAGS).bits().count_ones()
            + self.cbits10.intersection(flags::ContextBits10::ALL_SKIP_FLAGS).bits().count_ones()
            + self.cbits11.intersection(flags::ContextBits11::ALL_SKIP_FLAGS).bits().count_ones()
    }
    fn progress(&self) -> u32 {
        let visits = self.count_visits();
        if visits <= 0 {
            0
        } else {
            visits * 100 / (Self::World::NUM_LOCATIONS - self.count_skips())
        }
    }

    fn diff(&self, old: &Context) -> String {
        let mut list: Vec<String> = Vec::new();

        if old.position != self.position {
            list.push(format!("position: {:?} → {:?}", old.position, self.position));
        }
        if old.energy != self.energy {
            list.push(format!("energy: {:?} → {:?}", old.energy, self.energy));
        }
        if old.flasks != self.flasks {
            list.push(format!("flasks: {:?} → {:?}", old.flasks, self.flasks));
        }
        if old.refills != self.refills {
            list.push(format!("refills: {:?} → {:?}", old.refills, self.refills));
        }
        if old.mode != self.mode {
            list.push(format!("mode: {:?} → {:?}", old.mode, self.mode));
        }
        if old.save != self.save {
            list.push(format!("save: {:?} → {:?}", old.save, self.save));
        }
        if old.breach_save != self.breach_save {
            list.push(format!("breach_save: {:?} → {:?}", old.breach_save, self.breach_save));
        }
        if old.indra != self.indra {
            list.push(format!("indra: {:?} → {:?}", old.indra, self.indra));
        }
        if old.last != self.last {
            list.push(format!("last: {:?} → {:?}", old.last, self.last));
        }
        if old.prev_area != self.prev_area {
            list.push(format!("prev_area: {:?} → {:?}", old.prev_area, self.prev_area));
        }
        if old.flask != self.flask {
            list.push(format!("Flask: {:+}", self.flask - old.flask));
        }
        if old.health_fragment != self.health_fragment {
            list.push(format!("Health_Fragment: {:+}", self.health_fragment - old.health_fragment));
        }
    // bitflags
        let n = self.cbits1.contains(flags::ContextBits1::MAP__AMAGI__MAIN_AREA__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__AMAGI__MAIN_AREA__SAVE);
        if n != p {
            list.push(format!("{}MAP__AMAGI__MAIN_AREA__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__AMAGI__WEST_LAKE__URN);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__AMAGI__WEST_LAKE__URN);
        if n != p {
            list.push(format!("{}MAP__AMAGI__WEST_LAKE__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE);
        if n != p {
            list.push(format!("{}MAP__ANNUNA__MIRROR_MATCH__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__WEST_BRIDGE__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__WEST_BRIDGE__SAVE);
        if n != p {
            list.push(format!("{}MAP__ANNUNA__WEST_BRIDGE__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE);
        if n != p {
            list.push(format!("{}MAP__ANNUNA__VERTICAL_ROOM__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__FACTORY_ENTRANCE__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__FACTORY_ENTRANCE__SAVE);
        if n != p {
            list.push(format!("{}MAP__ANNUNA__FACTORY_ENTRANCE__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__CENTER_SAVE__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__CENTER_SAVE__SAVE);
        if n != p {
            list.push(format!("{}MAP__ANNUNA__CENTER_SAVE__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__FINAL_SAVE__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__FINAL_SAVE__SAVE);
        if n != p {
            list.push(format!("{}MAP__ANNUNA__FINAL_SAVE__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__EBIH__BASE_CAMP__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__EBIH__BASE_CAMP__SAVE);
        if n != p {
            list.push(format!("{}MAP__EBIH__BASE_CAMP__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__EBIH__WATERFALL__AXE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__EBIH__WATERFALL__AXE);
        if n != p {
            list.push(format!("{}MAP__EBIH__WATERFALL__AXE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__MID_SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__MID_SAVE);
        if n != p {
            list.push(format!("{}MAP__EBIH__EBIH_WEST__MID_SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE);
        if n != p {
            list.push(format!("{}MAP__EBIH__EBIH_WEST__UPPER_SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE);
        if n != p {
            list.push(format!("{}MAP__EBIH__EBIH_WEST__LOWER_SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__EBIH__DRONE_ROOM__URN);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__EBIH__DRONE_ROOM__URN);
        if n != p {
            list.push(format!("{}MAP__EBIH__DRONE_ROOM__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__GIGUNA_BREACH__PEAK__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__GIGUNA_BREACH__PEAK__SAVE);
        if n != p {
            list.push(format!("{}MAP__GIGUNA_BREACH__PEAK__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE);
        if n != p {
            list.push(format!("{}MAP__GIGUNA_BREACH__SW_SAVE__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);
        if n != p {
            list.push(format!("{}MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE);
        if n != p {
            list.push(format!("{}MAP__GIGUNA__GIGUNA_BASE__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE);
        if n != p {
            list.push(format!("{}MAP__GIGUNA__RUINS_WEST__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);
        if n != p {
            list.push(format!("{}MAP__GIGUNA__RUINS_TOP__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE);
        if n != p {
            list.push(format!("{}MAP__GLACIER__REVIVAL__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE);
        if n != p {
            list.push(format!("{}MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE);
        if n != p {
            list.push(format!("{}MAP__IRIKAR_BREACH__GAUNTLET__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__IRIKAR_BREACH__BASEMENT_SAVE__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__IRIKAR_BREACH__BASEMENT_SAVE__SAVE);
        if n != p {
            list.push(format!("{}MAP__IRIKAR_BREACH__BASEMENT_SAVE__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);
        if n != p {
            list.push(format!("{}MAP__IRIKAR__HUB__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__IRIKAR__SIGHT_ROOM__URN);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__IRIKAR__SIGHT_ROOM__URN);
        if n != p {
            list.push(format!("{}MAP__IRIKAR__SIGHT_ROOM__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE);
        if n != p {
            list.push(format!("{}MAP__UHRUM__WEST_ENTRANCE__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__UHRUM__SAVE_ROOM__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__UHRUM__SAVE_ROOM__SAVE);
        if n != p {
            list.push(format!("{}MAP__UHRUM__SAVE_ROOM__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE);
        if n != p {
            list.push(format!("{}MAP__UHRUM__ANNUNA_CORRIDOR__SAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__URN);
        let p = old.cbits1.contains(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__URN);
        if n != p {
            list.push(format!("{}MAP__UHRUM__ANNUNA_CORRIDOR__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::AMAGI__MAIN_AREA__CTX__COMBO);
        let p = old.cbits1.contains(flags::ContextBits1::AMAGI__MAIN_AREA__CTX__COMBO);
        if n != p {
            list.push(format!("{}AMAGI__MAIN_AREA__CTX__COMBO", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::ANNUNA__WEST_BRIDGE__CTX__DOORS_OPENED);
        let p = old.cbits1.contains(flags::ContextBits1::ANNUNA__WEST_BRIDGE__CTX__DOORS_OPENED);
        if n != p {
            list.push(format!("{}ANNUNA__WEST_BRIDGE__CTX__DOORS_OPENED", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::ANNUNA__EAST_BRIDGE__CTX__COMBO);
        let p = old.cbits1.contains(flags::ContextBits1::ANNUNA__EAST_BRIDGE__CTX__COMBO);
        if n != p {
            list.push(format!("{}ANNUNA__EAST_BRIDGE__CTX__COMBO", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::ANNUNA__WEST_CLIMB__CTX__DOOR_OPENED);
        let p = old.cbits1.contains(flags::ContextBits1::ANNUNA__WEST_CLIMB__CTX__DOOR_OPENED);
        if n != p {
            list.push(format!("{}ANNUNA__WEST_CLIMB__CTX__DOOR_OPENED", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED);
        let p = old.cbits1.contains(flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED);
        if n != p {
            list.push(format!("{}EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::EBIH__GRID_25_10_12__CTX__DOOR_OPEN);
        let p = old.cbits1.contains(flags::ContextBits1::EBIH__GRID_25_10_12__CTX__DOOR_OPEN);
        if n != p {
            list.push(format!("{}EBIH__GRID_25_10_12__CTX__DOOR_OPEN", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::EBIH__WATERFALL__CTX__WEST_DOOR_OPEN);
        let p = old.cbits1.contains(flags::ContextBits1::EBIH__WATERFALL__CTX__WEST_DOOR_OPEN);
        if n != p {
            list.push(format!("{}EBIH__WATERFALL__CTX__WEST_DOOR_OPEN", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::EBIH__EBIH_WEST__CTX__DOOR_OPEN);
        let p = old.cbits1.contains(flags::ContextBits1::EBIH__EBIH_WEST__CTX__DOOR_OPEN);
        if n != p {
            list.push(format!("{}EBIH__EBIH_WEST__CTX__DOOR_OPEN", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED);
        let p = old.cbits1.contains(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED);
        if n != p {
            list.push(format!("{}EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED);
        let p = old.cbits1.contains(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED);
        if n != p {
            list.push(format!("{}EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED);
        let p = old.cbits1.contains(flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED);
        if n != p {
            list.push(format!("{}EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::EBIH__VERTICAL_INTERCHANGE__CTX__DOOR_OPEN);
        let p = old.cbits1.contains(flags::ContextBits1::EBIH__VERTICAL_INTERCHANGE__CTX__DOOR_OPEN);
        if n != p {
            list.push(format!("{}EBIH__VERTICAL_INTERCHANGE__CTX__DOOR_OPEN", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::GIGUNA_BREACH__SW_SAVE__CTX__DOOR_OPENED);
        let p = old.cbits1.contains(flags::ContextBits1::GIGUNA_BREACH__SW_SAVE__CTX__DOOR_OPENED);
        if n != p {
            list.push(format!("{}GIGUNA_BREACH__SW_SAVE__CTX__DOOR_OPENED", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::GIGUNA__GIGUNA_NORTHEAST__CTX__DOOR_OPENED);
        let p = old.cbits1.contains(flags::ContextBits1::GIGUNA__GIGUNA_NORTHEAST__CTX__DOOR_OPENED);
        if n != p {
            list.push(format!("{}GIGUNA__GIGUNA_NORTHEAST__CTX__DOOR_OPENED", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__DOOR_OPENED);
        let p = old.cbits1.contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__DOOR_OPENED);
        if n != p {
            list.push(format!("{}GIGUNA__CARNELIAN__CTX__DOOR_OPENED", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__UPPER_SUSAR);
        let p = old.cbits1.contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__UPPER_SUSAR);
        if n != p {
            list.push(format!("{}GIGUNA__CARNELIAN__CTX__UPPER_SUSAR", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__LOWER_SUSAR);
        let p = old.cbits1.contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__LOWER_SUSAR);
        if n != p {
            list.push(format!("{}GIGUNA__CARNELIAN__CTX__LOWER_SUSAR", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR);
        let p = old.cbits1.contains(flags::ContextBits1::GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR);
        if n != p {
            list.push(format!("{}GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::GIGUNA__GIGUNA_BASE__CTX__DOOR_OPEN);
        let p = old.cbits1.contains(flags::ContextBits1::GIGUNA__GIGUNA_BASE__CTX__DOOR_OPEN);
        if n != p {
            list.push(format!("{}GIGUNA__GIGUNA_BASE__CTX__DOOR_OPEN", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED);
        let p = old.cbits1.contains(flags::ContextBits1::GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED);
        if n != p {
            list.push(format!("{}GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::GIGUNA__RUINS_TOP__CTX__DOORS_OPEN);
        let p = old.cbits1.contains(flags::ContextBits1::GIGUNA__RUINS_TOP__CTX__DOORS_OPEN);
        if n != p {
            list.push(format!("{}GIGUNA__RUINS_TOP__CTX__DOORS_OPEN", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::GIGUNA__CLOUDS__CTX__PLATFORM_AND_PORTAL);
        let p = old.cbits1.contains(flags::ContextBits1::GIGUNA__CLOUDS__CTX__PLATFORM_AND_PORTAL);
        if n != p {
            list.push(format!("{}GIGUNA__CLOUDS__CTX__PLATFORM_AND_PORTAL", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__DOOR_OPENED);
        let p = old.cbits1.contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__DOOR_OPENED);
        if n != p {
            list.push(format!("{}GIGUNA__EAST_CAVERNS__CTX__DOOR_OPENED", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED);
        let p = old.cbits1.contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED);
        if n != p {
            list.push(format!("{}GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR);
        let p = old.cbits1.contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR);
        if n != p {
            list.push(format!("{}GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR);
        let p = old.cbits1.contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR);
        if n != p {
            list.push(format!("{}GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR);
        let p = old.cbits1.contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR);
        if n != p {
            list.push(format!("{}GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::GIGUNA__GATEWAY__CTX__DOOR_OPENED);
        let p = old.cbits1.contains(flags::ContextBits1::GIGUNA__GATEWAY__CTX__DOOR_OPENED);
        if n != p {
            list.push(format!("{}GIGUNA__GATEWAY__CTX__DOOR_OPENED", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED);
        let p = old.cbits1.contains(flags::ContextBits1::IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED);
        if n != p {
            list.push(format!("{}IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::BOOMERANG_STEERING);
        let p = old.cbits1.contains(flags::ContextBits1::BOOMERANG_STEERING);
        if n != p {
            list.push(format!("{}BOOMERANG_STEERING", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MAJOR_GLITCHES);
        let p = old.cbits1.contains(flags::ContextBits1::MAJOR_GLITCHES);
        if n != p {
            list.push(format!("{}MAJOR_GLITCHES", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::MINOR_GLITCHES);
        let p = old.cbits1.contains(flags::ContextBits1::MINOR_GLITCHES);
        if n != p {
            list.push(format!("{}MINOR_GLITCHES", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::AMAGI_DRAGON_EYE_PASSAGE);
        let p = old.cbits1.contains(flags::ContextBits1::AMAGI_DRAGON_EYE_PASSAGE);
        if n != p {
            list.push(format!("{}AMAGI_DRAGON_EYE_PASSAGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits1.contains(flags::ContextBits1::AMAGI_STRONGHOLD_BOULDER_1);
        let p = old.cbits1.contains(flags::ContextBits1::AMAGI_STRONGHOLD_BOULDER_1);
        if n != p {
            list.push(format!("{}AMAGI_STRONGHOLD_BOULDER_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_2);
        let p = old.cbits2.contains(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_2);
        if n != p {
            list.push(format!("{}AMAGI_STRONGHOLD_BOULDER_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_1);
        let p = old.cbits2.contains(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_1);
        if n != p {
            list.push(format!("{}AMAGI_STRONGHOLD_WALL_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_2);
        let p = old.cbits2.contains(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_2);
        if n != p {
            list.push(format!("{}AMAGI_STRONGHOLD_WALL_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::AMAGI_WEST_LAKE_SURFACE_WALL);
        let p = old.cbits2.contains(flags::ContextBits2::AMAGI_WEST_LAKE_SURFACE_WALL);
        if n != p {
            list.push(format!("{}AMAGI_WEST_LAKE_SURFACE_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::AMASHILAMA);
        let p = old.cbits2.contains(flags::ContextBits2::AMASHILAMA);
        if n != p {
            list.push(format!("{}AMASHILAMA", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::ANNUNA_EAST_BRIDGE_GATE);
        let p = old.cbits2.contains(flags::ContextBits2::ANNUNA_EAST_BRIDGE_GATE);
        if n != p {
            list.push(format!("{}ANNUNA_EAST_BRIDGE_GATE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::ANNUNA_MIRROR_MATCH_SWITCH);
        let p = old.cbits2.contains(flags::ContextBits2::ANNUNA_MIRROR_MATCH_SWITCH);
        if n != p {
            list.push(format!("{}ANNUNA_MIRROR_MATCH_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::ANUMAN);
        let p = old.cbits2.contains(flags::ContextBits2::ANUMAN);
        if n != p {
            list.push(format!("{}ANUMAN", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::ANUNNA_VERTICAL_ROOM_GATE);
        let p = old.cbits2.contains(flags::ContextBits2::ANUNNA_VERTICAL_ROOM_GATE);
        if n != p {
            list.push(format!("{}ANUNNA_VERTICAL_ROOM_GATE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::APOCALYPSE_BOMB);
        let p = old.cbits2.contains(flags::ContextBits2::APOCALYPSE_BOMB);
        if n != p {
            list.push(format!("{}APOCALYPSE_BOMB", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::BIG_FLASK);
        let p = old.cbits2.contains(flags::ContextBits2::BIG_FLASK);
        if n != p {
            list.push(format!("{}BIG_FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::BOOMERANG);
        let p = old.cbits2.contains(flags::ContextBits2::BOOMERANG);
        if n != p {
            list.push(format!("{}BOOMERANG", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::BREACH_ATTRACTOR);
        let p = old.cbits2.contains(flags::ContextBits2::BREACH_ATTRACTOR);
        if n != p {
            list.push(format!("{}BREACH_ATTRACTOR", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::BREACH_SIGHT);
        let p = old.cbits2.contains(flags::ContextBits2::BREACH_SIGHT);
        if n != p {
            list.push(format!("{}BREACH_SIGHT", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::BRONZE_AXE);
        let p = old.cbits2.contains(flags::ContextBits2::BRONZE_AXE);
        if n != p {
            list.push(format!("{}BRONZE_AXE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::BUILDING_OF_THE_SCHOOL);
        let p = old.cbits2.contains(flags::ContextBits2::BUILDING_OF_THE_SCHOOL);
        if n != p {
            list.push(format!("{}BUILDING_OF_THE_SCHOOL", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::COMMEMORATIVE_SPEECH);
        let p = old.cbits2.contains(flags::ContextBits2::COMMEMORATIVE_SPEECH);
        if n != p {
            list.push(format!("{}COMMEMORATIVE_SPEECH", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::COMPANIES_LAYOFF);
        let p = old.cbits2.contains(flags::ContextBits2::COMPANIES_LAYOFF);
        if n != p {
            list.push(format!("{}COMPANIES_LAYOFF", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::COMPASS);
        let p = old.cbits2.contains(flags::ContextBits2::COMPASS);
        if n != p {
            list.push(format!("{}COMPASS", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DANGEROUS_IDEAS);
        let p = old.cbits2.contains(flags::ContextBits2::DANGEROUS_IDEAS);
        if n != p {
            list.push(format!("{}DANGEROUS_IDEAS", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DEAR_ERNEST);
        let p = old.cbits2.contains(flags::ContextBits2::DEAR_ERNEST);
        if n != p {
            list.push(format!("{}DEAR_ERNEST", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DEFEAT_INDRA);
        let p = old.cbits2.contains(flags::ContextBits2::DEFEAT_INDRA);
        if n != p {
            list.push(format!("{}DEFEAT_INDRA", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DEFEAT_MUS_A_M20);
        let p = old.cbits2.contains(flags::ContextBits2::DEFEAT_MUS_A_M20);
        if n != p {
            list.push(format!("{}DEFEAT_MUS_A_M20", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DESTRUCTION_POGROM);
        let p = old.cbits2.contains(flags::ContextBits2::DESTRUCTION_POGROM);
        if n != p {
            list.push(format!("{}DESTRUCTION_POGROM", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DRONE_HOVER);
        let p = old.cbits2.contains(flags::ContextBits2::DRONE_HOVER);
        if n != p {
            list.push(format!("{}DRONE_HOVER", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DRONE_MELEE_DAMAGE);
        let p = old.cbits2.contains(flags::ContextBits2::DRONE_MELEE_DAMAGE);
        if n != p {
            list.push(format!("{}DRONE_MELEE_DAMAGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DRONE_MELEE_DAMAGE_2);
        let p = old.cbits2.contains(flags::ContextBits2::DRONE_MELEE_DAMAGE_2);
        if n != p {
            list.push(format!("{}DRONE_MELEE_DAMAGE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DRONE_MELEE_SPEED);
        let p = old.cbits2.contains(flags::ContextBits2::DRONE_MELEE_SPEED);
        if n != p {
            list.push(format!("{}DRONE_MELEE_SPEED", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::DRONE_MELEE_SPEED_2);
        let p = old.cbits2.contains(flags::ContextBits2::DRONE_MELEE_SPEED_2);
        if n != p {
            list.push(format!("{}DRONE_MELEE_SPEED_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::EBIH_ALU);
        let p = old.cbits2.contains(flags::ContextBits2::EBIH_ALU);
        if n != p {
            list.push(format!("{}EBIH_ALU", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::EBIH_INTERCHANGE_BLOCK);
        let p = old.cbits2.contains(flags::ContextBits2::EBIH_INTERCHANGE_BLOCK);
        if n != p {
            list.push(format!("{}EBIH_INTERCHANGE_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::EBIH_INTERCHANGE_GATE);
        let p = old.cbits2.contains(flags::ContextBits2::EBIH_INTERCHANGE_GATE);
        if n != p {
            list.push(format!("{}EBIH_INTERCHANGE_GATE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::EBIH_WASTELAND_DOOR);
        let p = old.cbits2.contains(flags::ContextBits2::EBIH_WASTELAND_DOOR);
        if n != p {
            list.push(format!("{}EBIH_WASTELAND_DOOR", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::EBIH_WASTELAND_PASSAGE_H);
        let p = old.cbits2.contains(flags::ContextBits2::EBIH_WASTELAND_PASSAGE_H);
        if n != p {
            list.push(format!("{}EBIH_WASTELAND_PASSAGE_H", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::EBIH_WATERFALL_BLOCK_LEFT);
        let p = old.cbits2.contains(flags::ContextBits2::EBIH_WATERFALL_BLOCK_LEFT);
        if n != p {
            list.push(format!("{}EBIH_WATERFALL_BLOCK_LEFT", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::EBIH_WATERFALL_BLOCK_RIGHT);
        let p = old.cbits2.contains(flags::ContextBits2::EBIH_WATERFALL_BLOCK_RIGHT);
        if n != p {
            list.push(format!("{}EBIH_WATERFALL_BLOCK_RIGHT", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::EBIH_WATERFALL_WALL);
        let p = old.cbits2.contains(flags::ContextBits2::EBIH_WATERFALL_WALL);
        if n != p {
            list.push(format!("{}EBIH_WATERFALL_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::EBIH_WEST_BLOCK);
        let p = old.cbits2.contains(flags::ContextBits2::EBIH_WEST_BLOCK);
        if n != p {
            list.push(format!("{}EBIH_WEST_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::ESCAPE);
        let p = old.cbits2.contains(flags::ContextBits2::ESCAPE);
        if n != p {
            list.push(format!("{}ESCAPE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::EXIT_BREACH);
        let p = old.cbits2.contains(flags::ContextBits2::EXIT_BREACH);
        if n != p {
            list.push(format!("{}EXIT_BREACH", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::EYE_RING);
        let p = old.cbits2.contains(flags::ContextBits2::EYE_RING);
        if n != p {
            list.push(format!("{}EYE_RING", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::FAMILY_TRAGEDY);
        let p = old.cbits2.contains(flags::ContextBits2::FAMILY_TRAGEDY);
        if n != p {
            list.push(format!("{}FAMILY_TRAGEDY", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::FAST_TRAVEL);
        let p = old.cbits2.contains(flags::ContextBits2::FAST_TRAVEL);
        if n != p {
            list.push(format!("{}FAST_TRAVEL", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::GIGUNA_BOULDER);
        let p = old.cbits2.contains(flags::ContextBits2::GIGUNA_BOULDER);
        if n != p {
            list.push(format!("{}GIGUNA_BOULDER", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::GIGUNA_DUAL_PATH_SWITCH);
        let p = old.cbits2.contains(flags::ContextBits2::GIGUNA_DUAL_PATH_SWITCH);
        if n != p {
            list.push(format!("{}GIGUNA_DUAL_PATH_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::GIGUNA_DUAL_PATH_WALL);
        let p = old.cbits2.contains(flags::ContextBits2::GIGUNA_DUAL_PATH_WALL);
        if n != p {
            list.push(format!("{}GIGUNA_DUAL_PATH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::GIGUNA_GATEWAY_BLOCK);
        let p = old.cbits2.contains(flags::ContextBits2::GIGUNA_GATEWAY_BLOCK);
        if n != p {
            list.push(format!("{}GIGUNA_GATEWAY_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::GIGUNA_GATEWAY_GATE);
        let p = old.cbits2.contains(flags::ContextBits2::GIGUNA_GATEWAY_GATE);
        if n != p {
            list.push(format!("{}GIGUNA_GATEWAY_GATE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::GIGUNA_GUBI);
        let p = old.cbits2.contains(flags::ContextBits2::GIGUNA_GUBI);
        if n != p {
            list.push(format!("{}GIGUNA_GUBI", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::GIGUNA_NORTHEAST_GATE);
        let p = old.cbits2.contains(flags::ContextBits2::GIGUNA_NORTHEAST_GATE);
        if n != p {
            list.push(format!("{}GIGUNA_NORTHEAST_GATE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::HEALTH_NODE);
        let p = old.cbits2.contains(flags::ContextBits2::HEALTH_NODE);
        if n != p {
            list.push(format!("{}HEALTH_NODE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::HEALTH_UPGRADE);
        let p = old.cbits2.contains(flags::ContextBits2::HEALTH_UPGRADE);
        if n != p {
            list.push(format!("{}HEALTH_UPGRADE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::HEALTH_UPGRADE_2);
        let p = old.cbits2.contains(flags::ContextBits2::HEALTH_UPGRADE_2);
        if n != p {
            list.push(format!("{}HEALTH_UPGRADE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::HEALTH_UPGRADE_3);
        let p = old.cbits2.contains(flags::ContextBits2::HEALTH_UPGRADE_3);
        if n != p {
            list.push(format!("{}HEALTH_UPGRADE_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::HEALTH_UPGRADE_4);
        let p = old.cbits2.contains(flags::ContextBits2::HEALTH_UPGRADE_4);
        if n != p {
            list.push(format!("{}HEALTH_UPGRADE_4", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::HERETICS_TABLET);
        let p = old.cbits2.contains(flags::ContextBits2::HERETICS_TABLET);
        if n != p {
            list.push(format!("{}HERETICS_TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::HOVER);
        let p = old.cbits2.contains(flags::ContextBits2::HOVER);
        if n != p {
            list.push(format!("{}HOVER", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::ICE_AXE);
        let p = old.cbits2.contains(flags::ContextBits2::ICE_AXE);
        if n != p {
            list.push(format!("{}ICE_AXE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::INFECT);
        let p = old.cbits2.contains(flags::ContextBits2::INFECT);
        if n != p {
            list.push(format!("{}INFECT", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::INFECT_L1);
        let p = old.cbits2.contains(flags::ContextBits2::INFECT_L1);
        if n != p {
            list.push(format!("{}INFECT_L1", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::INFECT_L2);
        let p = old.cbits2.contains(flags::ContextBits2::INFECT_L2);
        if n != p {
            list.push(format!("{}INFECT_L2", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::INFECT_L3);
        let p = old.cbits2.contains(flags::ContextBits2::INFECT_L3);
        if n != p {
            list.push(format!("{}INFECT_L3", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::INFECTION_RANGE);
        let p = old.cbits2.contains(flags::ContextBits2::INFECTION_RANGE);
        if n != p {
            list.push(format!("{}INFECTION_RANGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits2.contains(flags::ContextBits2::INFECTION_RANGE_2);
        let p = old.cbits2.contains(flags::ContextBits2::INFECTION_RANGE_2);
        if n != p {
            list.push(format!("{}INFECTION_RANGE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::INFECTION_RANGE_3);
        let p = old.cbits3.contains(flags::ContextBits3::INFECTION_RANGE_3);
        if n != p {
            list.push(format!("{}INFECTION_RANGE_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::INFECTION_SPEED);
        let p = old.cbits3.contains(flags::ContextBits3::INFECTION_SPEED);
        if n != p {
            list.push(format!("{}INFECTION_SPEED", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::IRIKAR_GUDAM);
        let p = old.cbits3.contains(flags::ContextBits3::IRIKAR_GUDAM);
        if n != p {
            list.push(format!("{}IRIKAR_GUDAM", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::IRIKAR_ROYAL_STORAGE_WALL);
        let p = old.cbits3.contains(flags::ContextBits3::IRIKAR_ROYAL_STORAGE_WALL);
        if n != p {
            list.push(format!("{}IRIKAR_ROYAL_STORAGE_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::LAMENT_FOR_FOOLS);
        let p = old.cbits3.contains(flags::ContextBits3::LAMENT_FOR_FOOLS);
        if n != p {
            list.push(format!("{}LAMENT_FOR_FOOLS", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::LEDGE_GRAB);
        let p = old.cbits3.contains(flags::ContextBits3::LEDGE_GRAB);
        if n != p {
            list.push(format!("{}LEDGE_GRAB", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::LETTER_FROM_TRACE);
        let p = old.cbits3.contains(flags::ContextBits3::LETTER_FROM_TRACE);
        if n != p {
            list.push(format!("{}LETTER_FROM_TRACE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::MELEE_DAMAGE);
        let p = old.cbits3.contains(flags::ContextBits3::MELEE_DAMAGE);
        if n != p {
            list.push(format!("{}MELEE_DAMAGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::MELEE_DAMAGE_2);
        let p = old.cbits3.contains(flags::ContextBits3::MELEE_DAMAGE_2);
        if n != p {
            list.push(format!("{}MELEE_DAMAGE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::MELEE_SPEED);
        let p = old.cbits3.contains(flags::ContextBits3::MELEE_SPEED);
        if n != p {
            list.push(format!("{}MELEE_SPEED", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::MELEE_SPEED_2);
        let p = old.cbits3.contains(flags::ContextBits3::MELEE_SPEED_2);
        if n != p {
            list.push(format!("{}MELEE_SPEED_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::MIST_UPGRADE);
        let p = old.cbits3.contains(flags::ContextBits3::MIST_UPGRADE);
        if n != p {
            list.push(format!("{}MIST_UPGRADE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::NANITE_MIST);
        let p = old.cbits3.contains(flags::ContextBits3::NANITE_MIST);
        if n != p {
            list.push(format!("{}NANITE_MIST", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::NANO_LATTICE_2);
        let p = old.cbits3.contains(flags::ContextBits3::NANO_LATTICE_2);
        if n != p {
            list.push(format!("{}NANO_LATTICE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::NANO_POINTS);
        let p = old.cbits3.contains(flags::ContextBits3::NANO_POINTS);
        if n != p {
            list.push(format!("{}NANO_POINTS", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::NANO_POINTS_2);
        let p = old.cbits3.contains(flags::ContextBits3::NANO_POINTS_2);
        if n != p {
            list.push(format!("{}NANO_POINTS_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::PLAGUE_OF_THOUGHTS);
        let p = old.cbits3.contains(flags::ContextBits3::PLAGUE_OF_THOUGHTS);
        if n != p {
            list.push(format!("{}PLAGUE_OF_THOUGHTS", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::POWER_MATRIX);
        let p = old.cbits3.contains(flags::ContextBits3::POWER_MATRIX);
        if n != p {
            list.push(format!("{}POWER_MATRIX", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::RANGED_DAMAGE);
        let p = old.cbits3.contains(flags::ContextBits3::RANGED_DAMAGE);
        if n != p {
            list.push(format!("{}RANGED_DAMAGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::RANGED_DAMAGE_2);
        let p = old.cbits3.contains(flags::ContextBits3::RANGED_DAMAGE_2);
        if n != p {
            list.push(format!("{}RANGED_DAMAGE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::RANGED_SPEED);
        let p = old.cbits3.contains(flags::ContextBits3::RANGED_SPEED);
        if n != p {
            list.push(format!("{}RANGED_SPEED", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::RANGED_SPEED_2);
        let p = old.cbits3.contains(flags::ContextBits3::RANGED_SPEED_2);
        if n != p {
            list.push(format!("{}RANGED_SPEED_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::RECORD_LOSSES);
        let p = old.cbits3.contains(flags::ContextBits3::RECORD_LOSSES);
        if n != p {
            list.push(format!("{}RECORD_LOSSES", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::REMOTE_DRONE);
        let p = old.cbits3.contains(flags::ContextBits3::REMOTE_DRONE);
        if n != p {
            list.push(format!("{}REMOTE_DRONE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::RESEARCHERS_MISSING);
        let p = old.cbits3.contains(flags::ContextBits3::RESEARCHERS_MISSING);
        if n != p {
            list.push(format!("{}RESEARCHERS_MISSING", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SEPARATION);
        let p = old.cbits3.contains(flags::ContextBits3::SEPARATION);
        if n != p {
            list.push(format!("{}SEPARATION", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SHOCKWAVE);
        let p = old.cbits3.contains(flags::ContextBits3::SHOCKWAVE);
        if n != p {
            list.push(format!("{}SHOCKWAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SLINGSHOT_CHARGE);
        let p = old.cbits3.contains(flags::ContextBits3::SLINGSHOT_CHARGE);
        if n != p {
            list.push(format!("{}SLINGSHOT_CHARGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SLINGSHOT_HOOK);
        let p = old.cbits3.contains(flags::ContextBits3::SLINGSHOT_HOOK);
        if n != p {
            list.push(format!("{}SLINGSHOT_HOOK", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SLINGSHOT_WEAPON);
        let p = old.cbits3.contains(flags::ContextBits3::SLINGSHOT_WEAPON);
        if n != p {
            list.push(format!("{}SLINGSHOT_WEAPON", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SNIPER_VALLEY_ROCK_1);
        let p = old.cbits3.contains(flags::ContextBits3::SNIPER_VALLEY_ROCK_1);
        if n != p {
            list.push(format!("{}SNIPER_VALLEY_ROCK_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SNIPER_VALLEY_ROCK_2);
        let p = old.cbits3.contains(flags::ContextBits3::SNIPER_VALLEY_ROCK_2);
        if n != p {
            list.push(format!("{}SNIPER_VALLEY_ROCK_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::STATION_POWER);
        let p = old.cbits3.contains(flags::ContextBits3::STATION_POWER);
        if n != p {
            list.push(format!("{}STATION_POWER", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::STORM_BOMB);
        let p = old.cbits3.contains(flags::ContextBits3::STORM_BOMB);
        if n != p {
            list.push(format!("{}STORM_BOMB", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SUSPENSION_BRIDGE);
        let p = old.cbits3.contains(flags::ContextBits3::SUSPENSION_BRIDGE);
        if n != p {
            list.push(format!("{}SUSPENSION_BRIDGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SWITCH_36_11);
        let p = old.cbits3.contains(flags::ContextBits3::SWITCH_36_11);
        if n != p {
            list.push(format!("{}SWITCH_36_11", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::SWITCH_40_12);
        let p = old.cbits3.contains(flags::ContextBits3::SWITCH_40_12);
        if n != p {
            list.push(format!("{}SWITCH_40_12", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::TERMINAL_BREAKTHROUGH_1);
        let p = old.cbits3.contains(flags::ContextBits3::TERMINAL_BREAKTHROUGH_1);
        if n != p {
            list.push(format!("{}TERMINAL_BREAKTHROUGH_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::TERMINAL_BREAKTHROUGH_2);
        let p = old.cbits3.contains(flags::ContextBits3::TERMINAL_BREAKTHROUGH_2);
        if n != p {
            list.push(format!("{}TERMINAL_BREAKTHROUGH_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::THE_IDEAL_KIENGIR);
        let p = old.cbits3.contains(flags::ContextBits3::THE_IDEAL_KIENGIR);
        if n != p {
            list.push(format!("{}THE_IDEAL_KIENGIR", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::UHRUM_ANNUNA_CORRIDOR_BLOCK);
        let p = old.cbits3.contains(flags::ContextBits3::UHRUM_ANNUNA_CORRIDOR_BLOCK);
        if n != p {
            list.push(format!("{}UHRUM_ANNUNA_CORRIDOR_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::UHRUM_WATERFALL_WALL);
        let p = old.cbits3.contains(flags::ContextBits3::UHRUM_WATERFALL_WALL);
        if n != p {
            list.push(format!("{}UHRUM_WATERFALL_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::UHRUM_WATERFALLS_BLOCK);
        let p = old.cbits3.contains(flags::ContextBits3::UHRUM_WATERFALLS_BLOCK);
        if n != p {
            list.push(format!("{}UHRUM_WATERFALLS_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::UHRUM_WEST_ENTRANCE_GATE);
        let p = old.cbits3.contains(flags::ContextBits3::UHRUM_WEST_ENTRANCE_GATE);
        if n != p {
            list.push(format!("{}UHRUM_WEST_ENTRANCE_GATE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::UHRUM_WEST_ENTRANCE_LOWER_WALL);
        let p = old.cbits3.contains(flags::ContextBits3::UHRUM_WEST_ENTRANCE_LOWER_WALL);
        if n != p {
            list.push(format!("{}UHRUM_WEST_ENTRANCE_LOWER_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::UHRUM_WEST_ENTRANCE_UPPER_WALL);
        let p = old.cbits3.contains(flags::ContextBits3::UHRUM_WEST_ENTRANCE_UPPER_WALL);
        if n != p {
            list.push(format!("{}UHRUM_WEST_ENTRANCE_UPPER_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::UNDER_SIEGE);
        let p = old.cbits3.contains(flags::ContextBits3::UNDER_SIEGE);
        if n != p {
            list.push(format!("{}UNDER_SIEGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::UNDERWATER_MOVEMENT);
        let p = old.cbits3.contains(flags::ContextBits3::UNDERWATER_MOVEMENT);
        if n != p {
            list.push(format!("{}UNDERWATER_MOVEMENT", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::WALL_CLIMB);
        let p = old.cbits3.contains(flags::ContextBits3::WALL_CLIMB);
        if n != p {
            list.push(format!("{}WALL_CLIMB", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::WATER_MOVEMENT);
        let p = old.cbits3.contains(flags::ContextBits3::WATER_MOVEMENT);
        if n != p {
            list.push(format!("{}WATER_MOVEMENT", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__LIRU_ROOM__SHRINE__ITEM);
        let p = old.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__LIRU_ROOM__SHRINE__ITEM);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__LIRU_ROOM__SHRINE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM);
        let p = old.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM);
        let p = old.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD);
        let p = old.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL);
        let p = old.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20);
        let p = old.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK);
        let p = old.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER);
        let p = old.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER);
        let p = old.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL);
        let p = old.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL);
        let p = old.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL);
        let p = old.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM);
        let p = old.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL);
        let p = old.cbits3.contains(flags::ContextBits3::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL);
        if n != p {
            list.push(format!("{}VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__WEST_CLIMB__CACHE__ITEM);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANNUNA__WEST_CLIMB__CACHE__ITEM);
        if n != p {
            list.push(format!("{}VISITED_ANNUNA__WEST_CLIMB__CACHE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE);
        if n != p {
            list.push(format!("{}VISITED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP);
        if n != p {
            list.push(format!("{}VISITED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_ANTARCTICA__SHED__INTERIOR__SHELF);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_ANTARCTICA__SHED__INTERIOR__SHELF);
        if n != p {
            list.push(format!("{}VISITED_ANTARCTICA__SHED__INTERIOR__SHELF", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE);
        if n != p {
            list.push(format!("{}VISITED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM);
        if n != p {
            list.push(format!("{}VISITED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD);
        if n != p {
            list.push(format!("{}VISITED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU);
        if n != p {
            list.push(format!("{}VISITED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__HACK_ALU);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__BOSS__HACK_ALU);
        if n != p {
            list.push(format!("{}VISITED_EBIH__BOSS_ROOM__BOSS__HACK_ALU", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM);
        if n != p {
            list.push(format!("{}VISITED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT);
        if n != p {
            list.push(format!("{}VISITED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN);
        if n != p {
            list.push(format!("{}VISITED_EBIH__DRONE_ROOM__ITEM__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP);
        if n != p {
            list.push(format!("{}VISITED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL);
        if n != p {
            list.push(format!("{}VISITED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB);
        if n != p {
            list.push(format!("{}VISITED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__CORNER__URN);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__CORNER__URN);
        if n != p {
            list.push(format!("{}VISITED_EBIH__EBIH_EAST__CORNER__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__DISPENSER__VEND);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__DISPENSER__VEND);
        if n != p {
            list.push(format!("{}VISITED_EBIH__EBIH_EAST__DISPENSER__VEND", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE);
        if n != p {
            list.push(format!("{}VISITED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN);
        if n != p {
            list.push(format!("{}VISITED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__ALCOVE__TABLET);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__ALCOVE__TABLET);
        if n != p {
            list.push(format!("{}VISITED_EBIH__EBIH_WEST__ALCOVE__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK);
        if n != p {
            list.push(format!("{}VISITED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK);
        if n != p {
            list.push(format!("{}VISITED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH);
        if n != p {
            list.push(format!("{}VISITED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH);
        if n != p {
            list.push(format!("{}VISITED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_25_2_6__PIT__ITEM);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_25_2_6__PIT__ITEM);
        if n != p {
            list.push(format!("{}VISITED_EBIH__GRID_25_2_6__PIT__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_26_10_11__LEDGE__NOTE);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__GRID_26_10_11__LEDGE__NOTE);
        if n != p {
            list.push(format!("{}VISITED_EBIH__GRID_26_10_11__LEDGE__NOTE", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH);
        if n != p {
            list.push(format!("{}VISITED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT);
        if n != p {
            list.push(format!("{}VISITED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT);
        if n != p {
            list.push(format!("{}VISITED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT);
        if n != p {
            list.push(format!("{}VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT);
        if n != p {
            list.push(format!("{}VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__PEDESTAL);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__ALCOVE__PEDESTAL);
        if n != p {
            list.push(format!("{}VISITED_EBIH__WATERFALL__ALCOVE__PEDESTAL", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL);
        if n != p {
            list.push(format!("{}VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL);
        if n != p {
            list.push(format!("{}VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS);
        if n != p {
            list.push(format!("{}VISITED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS", if n { "+" } else { "-" }));
        }
        let n = self.cbits4.contains(flags::ContextBits4::VISITED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK);
        let p = old.cbits4.contains(flags::ContextBits4::VISITED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__CARNELIAN__VAULT__ITEM);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__CARNELIAN__VAULT__ITEM);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__CARNELIAN__VAULT__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__CLOUDS__CACHE__ITEM);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__CLOUDS__CACHE__ITEM);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__CLOUDS__CACHE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_BASE__RUIN__ITEM);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_BASE__RUIN__ITEM);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__GIGUNA_BASE__RUIN__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_BASE__TABLE__NEWS);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_BASE__TABLE__NEWS);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__GIGUNA_BASE__TABLE__NEWS", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__LAMASSU__DEPOSIT__FLASK);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__LAMASSU__DEPOSIT__FLASK);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__LAMASSU__DEPOSIT__FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_CENTER__TABLET__ITEM);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_CENTER__TABLET__ITEM);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__RUINS_CENTER__TABLET__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_TOP__FLASK__FLASK);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_TOP__FLASK__FLASK);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__RUINS_TOP__FLASK__FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WEST_CAVERNS__BUSH__ITEM);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WEST_CAVERNS__BUSH__ITEM);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__WEST_CAVERNS__BUSH__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WEST_CAVERNS__CACHE__ITEM);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WEST_CAVERNS__CACHE__ITEM);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__WEST_CAVERNS__CACHE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WEST_TOWER__TOP__TABLET);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GIGUNA__WEST_TOWER__TOP__TABLET);
        if n != p {
            list.push(format!("{}VISITED_GIGUNA__WEST_TOWER__TOP__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE);
        if n != p {
            list.push(format!("{}VISITED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM);
        if n != p {
            list.push(format!("{}VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH);
        if n != p {
            list.push(format!("{}VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__COMPASS_ROOM__CENTER__TABLE);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__COMPASS_ROOM__CENTER__TABLE);
        if n != p {
            list.push(format!("{}VISITED_GLACIER__COMPASS_ROOM__CENTER__TABLE", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB);
        if n != p {
            list.push(format!("{}VISITED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM);
        if n != p {
            list.push(format!("{}VISITED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN);
        if n != p {
            list.push(format!("{}VISITED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__VERTICAL_ROOM__PEAK__FLASK);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__VERTICAL_ROOM__PEAK__FLASK);
        if n != p {
            list.push(format!("{}VISITED_GLACIER__VERTICAL_ROOM__PEAK__FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH);
        if n != p {
            list.push(format!("{}VISITED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__CORNER__URN);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__CORNER__URN);
        if n != p {
            list.push(format!("{}VISITED_INTERIOR__BUILDING_INTERIOR__CORNER__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN);
        if n != p {
            list.push(format!("{}VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP);
        if n != p {
            list.push(format!("{}VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE);
        if n != p {
            list.push(format!("{}VISITED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH);
        if n != p {
            list.push(format!("{}VISITED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__GARAGE__BOXES__UNDER_BOXES);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__GARAGE__BOXES__UNDER_BOXES);
        if n != p {
            list.push(format!("{}VISITED_INTERIOR__GARAGE__BOXES__UNDER_BOXES", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE);
        if n != p {
            list.push(format!("{}VISITED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE", if n { "+" } else { "-" }));
        }
        let n = self.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__TENT_INTERIOR__DESK__NOTE);
        let p = old.cbits5.contains(flags::ContextBits5::VISITED_INTERIOR__TENT_INTERIOR__DESK__NOTE);
        if n != p {
            list.push(format!("{}VISITED_INTERIOR__TENT_INTERIOR__DESK__NOTE", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__LAMASSU__DESK__ITEM);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__LAMASSU__DESK__ITEM);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR__LAMASSU__DESK__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL);
        if n != p {
            list.push(format!("{}VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE);
        if n != p {
            list.push(format!("{}VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX", if n { "+" } else { "-" }));
        }
        let n = self.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__SIEGE_CORRIDOR__POND__ITEM);
        let p = old.cbits6.contains(flags::ContextBits6::VISITED_UHRUM__SIEGE_CORRIDOR__POND__ITEM);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__SIEGE_CORRIDOR__POND__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__EAST_26__BLOCK);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__EAST_26__BLOCK);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WATERFALLS__EAST_26__BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__SAND__REFILL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__SAND__REFILL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WEST_ENTRANCE__SAND__REFILL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL);
        if n != p {
            list.push(format!("{}VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__LIRU_ROOM__SHRINE__ITEM);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__LIRU_ROOM__SHRINE__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__LIRU_ROOM__SHRINE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL);
        let p = old.cbits7.contains(flags::ContextBits7::SKIPPED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_ANNUNA__WEST_CLIMB__CACHE__ITEM);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_ANNUNA__WEST_CLIMB__CACHE__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_ANNUNA__WEST_CLIMB__CACHE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE);
        if n != p {
            list.push(format!("{}SKIPPED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP);
        if n != p {
            list.push(format!("{}SKIPPED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_ANTARCTICA__SHED__INTERIOR__SHELF);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_ANTARCTICA__SHED__INTERIOR__SHELF);
        if n != p {
            list.push(format!("{}SKIPPED_ANTARCTICA__SHED__INTERIOR__SHELF", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__HACK_ALU);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__BOSS__HACK_ALU);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__BOSS_ROOM__BOSS__HACK_ALU", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__DRONE_ROOM__ITEM__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__CORNER__URN);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__CORNER__URN);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__EBIH_EAST__CORNER__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__DISPENSER__VEND);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__DISPENSER__VEND);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__EBIH_EAST__DISPENSER__VEND", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__ALCOVE__TABLET);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__ALCOVE__TABLET);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__EBIH_WEST__ALCOVE__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__GRID_25_2_6__PIT__ITEM);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__GRID_25_2_6__PIT__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__GRID_25_2_6__PIT__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__GRID_26_10_11__LEDGE__NOTE);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__GRID_26_10_11__LEDGE__NOTE);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__GRID_26_10_11__LEDGE__NOTE", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__PEDESTAL);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__ALCOVE__PEDESTAL);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__WATERFALL__ALCOVE__PEDESTAL", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS);
        if n != p {
            list.push(format!("{}SKIPPED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__CARNELIAN__VAULT__ITEM);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__CARNELIAN__VAULT__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__CARNELIAN__VAULT__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__CLOUDS__CACHE__ITEM);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__CLOUDS__CACHE__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__CLOUDS__CACHE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_BASE__RUIN__ITEM);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_BASE__RUIN__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__GIGUNA_BASE__RUIN__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_BASE__TABLE__NEWS);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_BASE__TABLE__NEWS);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__GIGUNA_BASE__TABLE__NEWS", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON", if n { "+" } else { "-" }));
        }
        let n = self.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM);
        let p = old.cbits8.contains(flags::ContextBits8::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__LAMASSU__DEPOSIT__FLASK);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__LAMASSU__DEPOSIT__FLASK);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__LAMASSU__DEPOSIT__FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_CENTER__TABLET__ITEM);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_CENTER__TABLET__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__RUINS_CENTER__TABLET__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_TOP__FLASK__FLASK);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_TOP__FLASK__FLASK);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__RUINS_TOP__FLASK__FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WEST_CAVERNS__BUSH__ITEM);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WEST_CAVERNS__BUSH__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__WEST_CAVERNS__BUSH__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WEST_CAVERNS__CACHE__ITEM);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WEST_CAVERNS__CACHE__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__WEST_CAVERNS__CACHE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WEST_TOWER__TOP__TABLET);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GIGUNA__WEST_TOWER__TOP__TABLET);
        if n != p {
            list.push(format!("{}SKIPPED_GIGUNA__WEST_TOWER__TOP__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE);
        if n != p {
            list.push(format!("{}SKIPPED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH);
        if n != p {
            list.push(format!("{}SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__COMPASS_ROOM__CENTER__TABLE);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__COMPASS_ROOM__CENTER__TABLE);
        if n != p {
            list.push(format!("{}SKIPPED_GLACIER__COMPASS_ROOM__CENTER__TABLE", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB);
        if n != p {
            list.push(format!("{}SKIPPED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN);
        if n != p {
            list.push(format!("{}SKIPPED_GLACIER__THE_BIG_DROP__WATER_SURFACE__DROWN", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__VERTICAL_ROOM__PEAK__FLASK);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__VERTICAL_ROOM__PEAK__FLASK);
        if n != p {
            list.push(format!("{}SKIPPED_GLACIER__VERTICAL_ROOM__PEAK__FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH);
        if n != p {
            list.push(format!("{}SKIPPED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__CORNER__URN);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__CORNER__URN);
        if n != p {
            list.push(format!("{}SKIPPED_INTERIOR__BUILDING_INTERIOR__CORNER__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN);
        if n != p {
            list.push(format!("{}SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP);
        if n != p {
            list.push(format!("{}SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE);
        if n != p {
            list.push(format!("{}SKIPPED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH);
        if n != p {
            list.push(format!("{}SKIPPED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__GARAGE__BOXES__UNDER_BOXES);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__GARAGE__BOXES__UNDER_BOXES);
        if n != p {
            list.push(format!("{}SKIPPED_INTERIOR__GARAGE__BOXES__UNDER_BOXES", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE);
        if n != p {
            list.push(format!("{}SKIPPED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__TENT_INTERIOR__DESK__NOTE);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_INTERIOR__TENT_INTERIOR__DESK__NOTE);
        if n != p {
            list.push(format!("{}SKIPPED_INTERIOR__TENT_INTERIOR__DESK__NOTE", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__LAMASSU__DESK__ITEM);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__LAMASSU__DESK__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR__LAMASSU__DESK__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL);
        if n != p {
            list.push(format!("{}SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2);
        let p = old.cbits9.contains(flags::ContextBits9::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE);
        if n != p {
            list.push(format!("{}SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__POND__ITEM);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__POND__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__SIEGE_CORRIDOR__POND__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__EAST_26__BLOCK);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__EAST_26__BLOCK);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WATERFALLS__EAST_26__BLOCK", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__SAND__REFILL);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__SAND__REFILL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WEST_ENTRANCE__SAND__REFILL", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL);
        let p = old.cbits10.contains(flags::ContextBits10::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits11.contains(flags::ContextBits11::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL);
        let p = old.cbits11.contains(flags::ContextBits11::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        let n = self.cbits11.contains(flags::ContextBits11::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL);
        let p = old.cbits11.contains(flags::ContextBits11::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL);
        if n != p {
            list.push(format!("{}SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL", if n { "+" } else { "-" }));
        }
        if list.is_empty() {
            String::from("NONE")
        } else {
            list.join("\n")
        }
    }
}

impl Context {
    // settings
    pub fn boomerang_steering(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::BOOMERANG_STEERING)
    }
    pub fn set_boomerang_steering(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::BOOMERANG_STEERING, val);
    }
    pub fn major_glitches(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAJOR_GLITCHES)
    }
    pub fn set_major_glitches(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAJOR_GLITCHES, val);
    }
    pub fn minor_glitches(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MINOR_GLITCHES)
    }
    pub fn set_minor_glitches(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MINOR_GLITCHES, val);
    }
    // context
    pub fn position(&self) -> SpotId {
        self.position
    }
    pub fn energy(&self) -> i16 {
        self.energy
    }
    pub fn set_energy(&mut self, val: i16) {
        self.energy = val;
    }
    pub fn flasks(&self) -> i8 {
        self.flasks
    }
    pub fn set_flasks(&mut self, val: i8) {
        self.flasks = val;
    }
    pub fn refills(&self) -> i8 {
        self.refills
    }
    pub fn set_refills(&mut self, val: i8) {
        self.refills = val;
    }
    pub fn mode(&self) -> enums::Mode {
        self.mode
    }
    pub fn set_mode(&mut self, val: enums::Mode) {
        self.mode = val;
    }
    pub fn save(&self) -> SpotId {
        self.save
    }
    pub fn set_save(&mut self, val: SpotId) {
        self.save = val;
    }
    pub fn breach_save(&self) -> SpotId {
        self.breach_save
    }
    pub fn set_breach_save(&mut self, val: SpotId) {
        self.breach_save = val;
    }
    pub fn indra(&self) -> SpotId {
        self.indra
    }
    pub fn set_indra(&mut self, val: SpotId) {
        self.indra = val;
    }
    pub fn last(&self) -> SpotId {
        self.last
    }
    pub fn set_last(&mut self, val: SpotId) {
        self.last = val;
    }
    pub fn prev_area(&self) -> AreaId {
        self.prev_area
    }
    pub fn set_prev_area(&mut self, val: AreaId) {
        self.prev_area = val;
    }
    pub fn map__amagi__main_area__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__AMAGI__MAIN_AREA__SAVE)
    }
    pub fn set_map__amagi__main_area__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__AMAGI__MAIN_AREA__SAVE, val);
    }
    pub fn map__amagi__west_lake__urn(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__AMAGI__WEST_LAKE__URN)
    }
    pub fn set_map__amagi__west_lake__urn(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__AMAGI__WEST_LAKE__URN, val);
    }
    pub fn map__annuna__mirror_match__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE)
    }
    pub fn set_map__annuna__mirror_match__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE, val);
    }
    pub fn map__annuna__west_bridge__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__WEST_BRIDGE__SAVE)
    }
    pub fn set_map__annuna__west_bridge__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__ANNUNA__WEST_BRIDGE__SAVE, val);
    }
    pub fn map__annuna__vertical_room__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE)
    }
    pub fn set_map__annuna__vertical_room__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE, val);
    }
    pub fn map__annuna__factory_entrance__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__FACTORY_ENTRANCE__SAVE)
    }
    pub fn set_map__annuna__factory_entrance__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__ANNUNA__FACTORY_ENTRANCE__SAVE, val);
    }
    pub fn map__annuna__center_save__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__CENTER_SAVE__SAVE)
    }
    pub fn set_map__annuna__center_save__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__ANNUNA__CENTER_SAVE__SAVE, val);
    }
    pub fn map__annuna__final_save__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__ANNUNA__FINAL_SAVE__SAVE)
    }
    pub fn set_map__annuna__final_save__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__ANNUNA__FINAL_SAVE__SAVE, val);
    }
    pub fn map__ebih__base_camp__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__EBIH__BASE_CAMP__SAVE)
    }
    pub fn set_map__ebih__base_camp__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__EBIH__BASE_CAMP__SAVE, val);
    }
    pub fn map__ebih__waterfall__axe(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__EBIH__WATERFALL__AXE)
    }
    pub fn set_map__ebih__waterfall__axe(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__EBIH__WATERFALL__AXE, val);
    }
    pub fn map__ebih__ebih_west__mid_save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__MID_SAVE)
    }
    pub fn set_map__ebih__ebih_west__mid_save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__EBIH__EBIH_WEST__MID_SAVE, val);
    }
    pub fn map__ebih__ebih_west__upper_save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE)
    }
    pub fn set_map__ebih__ebih_west__upper_save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE, val);
    }
    pub fn map__ebih__ebih_west__lower_save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE)
    }
    pub fn set_map__ebih__ebih_west__lower_save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE, val);
    }
    pub fn map__ebih__drone_room__urn(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__EBIH__DRONE_ROOM__URN)
    }
    pub fn set_map__ebih__drone_room__urn(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__EBIH__DRONE_ROOM__URN, val);
    }
    pub fn map__giguna_breach__peak__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__GIGUNA_BREACH__PEAK__SAVE)
    }
    pub fn set_map__giguna_breach__peak__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__GIGUNA_BREACH__PEAK__SAVE, val);
    }
    pub fn map__giguna_breach__sw_save__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE)
    }
    pub fn set_map__giguna_breach__sw_save__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE, val);
    }
    pub fn map__giguna__giguna_northeast__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE)
    }
    pub fn set_map__giguna__giguna_northeast__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE, val);
    }
    pub fn map__giguna__giguna_base__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE)
    }
    pub fn set_map__giguna__giguna_base__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE, val);
    }
    pub fn map__giguna__ruins_west__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE)
    }
    pub fn set_map__giguna__ruins_west__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE, val);
    }
    pub fn map__giguna__ruins_top__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE)
    }
    pub fn set_map__giguna__ruins_top__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE, val);
    }
    pub fn map__glacier__revival__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE)
    }
    pub fn set_map__glacier__revival__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE, val);
    }
    pub fn map__irikar_breach__save_room__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE)
    }
    pub fn set_map__irikar_breach__save_room__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE, val);
    }
    pub fn map__irikar_breach__gauntlet__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE)
    }
    pub fn set_map__irikar_breach__gauntlet__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE, val);
    }
    pub fn map__irikar_breach__basement_save__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__IRIKAR_BREACH__BASEMENT_SAVE__SAVE)
    }
    pub fn set_map__irikar_breach__basement_save__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__IRIKAR_BREACH__BASEMENT_SAVE__SAVE, val);
    }
    pub fn map__irikar__hub__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE)
    }
    pub fn set_map__irikar__hub__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE, val);
    }
    pub fn map__irikar__sight_room__urn(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__IRIKAR__SIGHT_ROOM__URN)
    }
    pub fn set_map__irikar__sight_room__urn(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__IRIKAR__SIGHT_ROOM__URN, val);
    }
    pub fn map__uhrum__west_entrance__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE)
    }
    pub fn set_map__uhrum__west_entrance__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE, val);
    }
    pub fn map__uhrum__save_room__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__UHRUM__SAVE_ROOM__SAVE)
    }
    pub fn set_map__uhrum__save_room__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__UHRUM__SAVE_ROOM__SAVE, val);
    }
    pub fn map__uhrum__annuna_corridor__save(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE)
    }
    pub fn set_map__uhrum__annuna_corridor__save(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE, val);
    }
    pub fn map__uhrum__annuna_corridor__urn(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__URN)
    }
    pub fn set_map__uhrum__annuna_corridor__urn(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__URN, val);
    }
    pub fn amagi__main_area__ctx__combo(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::AMAGI__MAIN_AREA__CTX__COMBO)
    }
    pub fn set_amagi__main_area__ctx__combo(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::AMAGI__MAIN_AREA__CTX__COMBO, val);
    }
    pub fn annuna__west_bridge__ctx__doors_opened(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::ANNUNA__WEST_BRIDGE__CTX__DOORS_OPENED)
    }
    pub fn set_annuna__west_bridge__ctx__doors_opened(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::ANNUNA__WEST_BRIDGE__CTX__DOORS_OPENED, val);
    }
    pub fn annuna__east_bridge__ctx__combo(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::ANNUNA__EAST_BRIDGE__CTX__COMBO)
    }
    pub fn set_annuna__east_bridge__ctx__combo(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::ANNUNA__EAST_BRIDGE__CTX__COMBO, val);
    }
    pub fn annuna__west_climb__ctx__door_opened(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::ANNUNA__WEST_CLIMB__CTX__DOOR_OPENED)
    }
    pub fn set_annuna__west_climb__ctx__door_opened(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::ANNUNA__WEST_CLIMB__CTX__DOOR_OPENED, val);
    }
    pub fn ebih__base_camp__ctx__left_platform_moved(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED)
    }
    pub fn set_ebih__base_camp__ctx__left_platform_moved(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED, val);
    }
    pub fn ebih__grid_25_10_12__ctx__door_open(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::EBIH__GRID_25_10_12__CTX__DOOR_OPEN)
    }
    pub fn set_ebih__grid_25_10_12__ctx__door_open(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::EBIH__GRID_25_10_12__CTX__DOOR_OPEN, val);
    }
    pub fn ebih__waterfall__ctx__west_door_open(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::EBIH__WATERFALL__CTX__WEST_DOOR_OPEN)
    }
    pub fn set_ebih__waterfall__ctx__west_door_open(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::EBIH__WATERFALL__CTX__WEST_DOOR_OPEN, val);
    }
    pub fn ebih__ebih_west__ctx__door_open(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::EBIH__EBIH_WEST__CTX__DOOR_OPEN)
    }
    pub fn set_ebih__ebih_west__ctx__door_open(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::EBIH__EBIH_WEST__CTX__DOOR_OPEN, val);
    }
    pub fn ebih__ebih_east__ctx__platform1_moved(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED)
    }
    pub fn set_ebih__ebih_east__ctx__platform1_moved(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED, val);
    }
    pub fn ebih__ebih_east__ctx__platform2_moved(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED)
    }
    pub fn set_ebih__ebih_east__ctx__platform2_moved(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED, val);
    }
    pub fn ebih__drone_room__ctx__platform_moved(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED)
    }
    pub fn set_ebih__drone_room__ctx__platform_moved(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED, val);
    }
    pub fn ebih__vertical_interchange__ctx__door_open(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::EBIH__VERTICAL_INTERCHANGE__CTX__DOOR_OPEN)
    }
    pub fn set_ebih__vertical_interchange__ctx__door_open(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::EBIH__VERTICAL_INTERCHANGE__CTX__DOOR_OPEN, val);
    }
    pub fn giguna_breach__sw_save__ctx__door_opened(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::GIGUNA_BREACH__SW_SAVE__CTX__DOOR_OPENED)
    }
    pub fn set_giguna_breach__sw_save__ctx__door_opened(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::GIGUNA_BREACH__SW_SAVE__CTX__DOOR_OPENED, val);
    }
    pub fn giguna__giguna_northeast__ctx__door_opened(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::GIGUNA__GIGUNA_NORTHEAST__CTX__DOOR_OPENED)
    }
    pub fn set_giguna__giguna_northeast__ctx__door_opened(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::GIGUNA__GIGUNA_NORTHEAST__CTX__DOOR_OPENED, val);
    }
    pub fn giguna__carnelian__ctx__door_opened(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__DOOR_OPENED)
    }
    pub fn set_giguna__carnelian__ctx__door_opened(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__DOOR_OPENED, val);
    }
    pub fn giguna__carnelian__ctx__upper_susar(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__UPPER_SUSAR)
    }
    pub fn set_giguna__carnelian__ctx__upper_susar(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__UPPER_SUSAR, val);
    }
    pub fn giguna__carnelian__ctx__lower_susar(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__LOWER_SUSAR)
    }
    pub fn set_giguna__carnelian__ctx__lower_susar(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__LOWER_SUSAR, val);
    }
    pub fn giguna__west_caverns__ctx__east_susar(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR)
    }
    pub fn set_giguna__west_caverns__ctx__east_susar(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR, val);
    }
    pub fn giguna__giguna_base__ctx__door_open(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::GIGUNA__GIGUNA_BASE__CTX__DOOR_OPEN)
    }
    pub fn set_giguna__giguna_base__ctx__door_open(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::GIGUNA__GIGUNA_BASE__CTX__DOOR_OPEN, val);
    }
    pub fn giguna__ruins_west__ctx__kishib_handled(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED)
    }
    pub fn set_giguna__ruins_west__ctx__kishib_handled(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED, val);
    }
    pub fn giguna__ruins_top__ctx__doors_open(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::GIGUNA__RUINS_TOP__CTX__DOORS_OPEN)
    }
    pub fn set_giguna__ruins_top__ctx__doors_open(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::GIGUNA__RUINS_TOP__CTX__DOORS_OPEN, val);
    }
    pub fn giguna__clouds__ctx__platform_and_portal(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::GIGUNA__CLOUDS__CTX__PLATFORM_AND_PORTAL)
    }
    pub fn set_giguna__clouds__ctx__platform_and_portal(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::GIGUNA__CLOUDS__CTX__PLATFORM_AND_PORTAL, val);
    }
    pub fn giguna__east_caverns__ctx__door_opened(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__DOOR_OPENED)
    }
    pub fn set_giguna__east_caverns__ctx__door_opened(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__DOOR_OPENED, val);
    }
    pub fn giguna__east_caverns__ctx__combo_entered(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED)
    }
    pub fn set_giguna__east_caverns__ctx__combo_entered(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED, val);
    }
    pub fn giguna__east_caverns__ctx__upper_susar(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR)
    }
    pub fn set_giguna__east_caverns__ctx__upper_susar(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR, val);
    }
    pub fn giguna__east_caverns__ctx__mid_susar(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR)
    }
    pub fn set_giguna__east_caverns__ctx__mid_susar(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR, val);
    }
    pub fn giguna__east_caverns__ctx__lower_susar(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR)
    }
    pub fn set_giguna__east_caverns__ctx__lower_susar(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR, val);
    }
    pub fn giguna__gateway__ctx__door_opened(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::GIGUNA__GATEWAY__CTX__DOOR_OPENED)
    }
    pub fn set_giguna__gateway__ctx__door_opened(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::GIGUNA__GATEWAY__CTX__DOOR_OPENED, val);
    }
    pub fn irikar__basement_portal__ctx__platform_moved(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED)
    }
    pub fn set_irikar__basement_portal__ctx__platform_moved(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED, val);
    }
}

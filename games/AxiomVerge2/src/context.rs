//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

#![allow(non_snake_case)]
#![allow(unused)]

use crate::graph::{self, *};
use crate::items::Item;
use crate::movements;
use crate::prices::Currency;
use crate::rules;
use analyzer::context;
use analyzer::world::World;
use enum_map::EnumMap;

pub mod enums {
    use std::fmt;
    #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd, Default)]
    pub enum Mode {
        #[default]
        Indra,
        Drone,
    }
    impl fmt::Display for Mode {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            match self {
                Mode::Indra => write!(f, "{}", "Indra"),
                Mode::Drone => write!(f, "{}", "Drone"),
            }
        }
    }
    impl std::str::FromStr for Mode {
        type Err = String;

        fn from_str(s: &str) -> Result<Self, Self::Err> {
            match s {
                "Drone" => Ok(Mode::Drone),
                "Indra" => Ok(Mode::Indra),
                _ => Err(format!("Could not recognize as a Mode: {}", s)),
            }
        }
    }
}

pub mod data {
    #[allow(unused_imports)]
    use crate::context::enums;
    use crate::graph::*;
    pub fn breach(spot_id: SpotId) -> bool {
        match spot_id {
            _ => false,
        }
    }
    pub fn water(spot_id: SpotId) -> bool {
        match spot_id {
            SpotId::Amagi__Cave_Behind_Waterfall__Bottom => false,
            SpotId::Amagi__Cave_Behind_Waterfall__Middle => false,
            SpotId::Amagi__Cave_Behind_Waterfall__Top => false,
            SpotId::Amagi__Grid_31_19__East => true,
            SpotId::Amagi__Grid_31_19__West => true,
            SpotId::Amagi__Liru_Room__Bottom => true,
            SpotId::Amagi__Liru_Room__East_Passage => true,
            SpotId::Amagi__Liru_Room__Hidden_Enemies => true,
            SpotId::Amagi__Liru_Room__Hidden_Exit => true,
            SpotId::Amagi__Liru_Room__Platform_1_Left => true,
            SpotId::Amagi__Liru_Room__Platform_1_Right => true,
            SpotId::Amagi__Liru_Room__Platform_2_Left => true,
            SpotId::Amagi__Liru_Room__Platform_2_Right => true,
            SpotId::Amagi__Liru_Room__Platform_3_Left => true,
            SpotId::Amagi__Liru_Room__Platform_3_Right => true,
            SpotId::Amagi__Liru_Room__Platform_4_Left => true,
            SpotId::Amagi__Liru_Room__Platform_4_Right => true,
            SpotId::Amagi__Liru_Room__Shrine => true,
            SpotId::Amagi__Liru_Room__West_19 => true,
            SpotId::Amagi__Liru_Room__West_20 => true,
            SpotId::Amagi__Main_Area__Broken_Wall => true,
            SpotId::Amagi__Main_Area__Carving => false,
            SpotId::Amagi__Main_Area__Catwalk_Broken_Part => true,
            SpotId::Amagi__Main_Area__Catwalk_Center => true,
            SpotId::Amagi__Main_Area__Catwalk_East_Edge => true,
            SpotId::Amagi__Main_Area__Cliff => true,
            SpotId::Amagi__Main_Area__East_15 => false,
            SpotId::Amagi__Main_Area__East_19 => true,
            SpotId::Amagi__Main_Area__East_Ledge => true,
            SpotId::Amagi__Main_Area__Enemy_Side => true,
            SpotId::Amagi__Main_Area__Flat_Ruin => true,
            SpotId::Amagi__Main_Area__Half_Pillar => true,
            SpotId::Amagi__Main_Area__Platform_2 => true,
            SpotId::Amagi__Main_Area__Platform_3 => true,
            SpotId::Amagi__Main_Area__Save_Point => true,
            SpotId::Amagi__Main_Area__Secret_Outcropping => false,
            SpotId::Amagi__Main_Area__Secret_Waterfall => false,
            SpotId::Amagi__Main_Area__Shallow_End => true,
            SpotId::Amagi__Main_Area__Small_Cliff => true,
            SpotId::Amagi__Main_Area__Upper_Platform => true,
            SpotId::Amagi__Main_Area__Wall_Stuck_Spot => true,
            SpotId::Amagi__Main_Area__Waters_Edge => false,
            SpotId::Amagi__Main_Area__Way_Off_To_The_Side => false,
            SpotId::Amagi__Main_Area__West_15 => false,
            SpotId::Amagi__Main_Area__West_18 => true,
            SpotId::Amagi__Main_Area__West_19 => true,
            SpotId::Amagi__Main_Area__West_Mini_Hill => true,
            SpotId::Amagi__Main_Area__West_Shelf => true,
            SpotId::Amagi__Main_Area__West_Side => true,
            SpotId::Amagi__West_Lake__Cavern_Back_Teeth => true,
            SpotId::Amagi__West_Lake__Cavern_Chin => true,
            SpotId::Amagi__West_Lake__Cavern_Eye => true,
            SpotId::Amagi__West_Lake__Cavern_Front_Pillar => true,
            SpotId::Amagi__West_Lake__Cavern_Front_Teeth => true,
            SpotId::Amagi__West_Lake__Cavern_Jaw => true,
            SpotId::Amagi__West_Lake__Cavern_Lower_Trachea => true,
            SpotId::Amagi__West_Lake__Cavern_Middle_Pillar => true,
            SpotId::Amagi__West_Lake__Cavern_Neck => true,
            SpotId::Amagi__West_Lake__Cavern_Rear_Pillar => true,
            SpotId::Amagi__West_Lake__Cavern_Refill_Station => true,
            SpotId::Amagi__West_Lake__Cavern_Tear_Duct => true,
            SpotId::Amagi__West_Lake__East_15 => false,
            SpotId::Amagi__West_Lake__East_18 => true,
            SpotId::Amagi__West_Lake__East_19 => true,
            SpotId::Amagi__West_Lake__East_20 => true,
            SpotId::Amagi__West_Lake__East_Bank => true,
            SpotId::Amagi__West_Lake__East_Platform => true,
            SpotId::Amagi__West_Lake__East_Shore => false,
            SpotId::Amagi__West_Lake__Left_of_Enemy => true,
            SpotId::Amagi__West_Lake__Northeast_Platform => true,
            SpotId::Amagi__West_Lake__Northwest_Platform => true,
            SpotId::Amagi__West_Lake__Pillar => true,
            SpotId::Amagi__West_Lake__Pillar_Platform => true,
            SpotId::Amagi__West_Lake__Small_Hill => true,
            SpotId::Amagi__West_Lake__Some_Rock => true,
            SpotId::Amagi__West_Lake__Somewhat_Central_Platform => true,
            SpotId::Amagi__West_Lake__Stronghold_Ceiling_Left => true,
            SpotId::Amagi__West_Lake__Stronghold_Ceiling_Right => true,
            SpotId::Amagi__West_Lake__Stronghold_Front_Door => true,
            SpotId::Amagi__West_Lake__Stronghold_Front_Room => true,
            SpotId::Amagi__West_Lake__Stronghold_Item => true,
            SpotId::Amagi__West_Lake__Stronghold_Middle_Column => true,
            SpotId::Amagi__West_Lake__Stronghold_Rear_Wall => true,
            SpotId::Amagi__West_Lake__Stronghold_Top => true,
            SpotId::Amagi__West_Lake__Surface_Wall_Left => false,
            SpotId::Amagi__West_Lake__Surface_Wall_Right => false,
            SpotId::Amagi__West_Lake__Tentacle_Gap => true,
            SpotId::Amagi__West_Lake__Upper_Center_Platform => true,
            SpotId::Amagi__West_Lake__Water_Surface => false,
            SpotId::Amagi__West_Lake__West_15 => false,
            SpotId::Amagi__West_Lake__West_Bank => true,
            SpotId::Amagi__West_Lake__West_Cliff => true,
            SpotId::Amagi__West_Lake__West_Platform => true,
            SpotId::Amagi__West_Lake__West_Shore => false,
            _ => false,
        }
    }
}

pub mod flags {
    use bitflags::bitflags;

    bitflags! {
        #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash)]
        pub struct ContextBits1 : u32 {
            const AMAGI__MAIN_AREA__CTX__COMBO = 1 << 0;
            const EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED = 1 << 1;
            const EBIH__GRID_25_10_12__CTX__DOOR_OPEN = 1 << 2;
            const EBIH__WATERFALL__CTX__LEFT_BLOCK = 1 << 3;
            const EBIH__WATERFALL__CTX__RIGHT_BLOCK = 1 << 4;
            const EBIH__WATERFALL__CTX__WEST_DOOR_OPEN = 1 << 5;
            const EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED = 1 << 6;
            const EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED = 1 << 7;
            const EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED = 1 << 8;
            const BOOMERANG_STEERING = 1 << 9;
            const MAJOR_GLITCHES = 1 << 10;
            const MINOR_GLITCHES = 1 << 11;
            const AMAGI_DRAGON_EYE_PASSAGE = 1 << 12;
            const AMAGI_STRONGHOLD_BOULDER_1 = 1 << 13;
            const AMAGI_STRONGHOLD_BOULDER_2 = 1 << 14;
            const AMAGI_STRONGHOLD_WALL_1 = 1 << 15;
            const AMAGI_STRONGHOLD_WALL_2 = 1 << 16;
            const AMAGI_WEST_LAKE_SURFACE_WALL = 1 << 17;
            const AMASHILAMA = 1 << 18;
            const ANUMAN = 1 << 19;
            const APOCALYPSE_BOMB = 1 << 20;
            const BOOMERANG = 1 << 21;
            const DEFEAT_EBIH_ALU = 1 << 22;
            const DEFEAT_MUS_A_M20 = 1 << 23;
            const DRONE_HOVER = 1 << 24;
            const ICE_AXE = 1 << 25;
            const INFECTION_SPEED = 1 << 26;
            const LEDGE_GRAB = 1 << 27;
            const MIST_UPGRADE = 1 << 28;
            const NANITE_MIST = 1 << 29;
            const REMOTE_DRONE = 1 << 30;
            const SHOCKWAVE = 1 << 31;
        }
    }
    bitflags! {
        #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash)]
        pub struct ContextBits2 : u8 {
            const SLINGSHOT_HOOK = 1 << 0;
            const STATION_POWER = 1 << 1;
            const SWITCH_36_11 = 1 << 2;
            const SWITCH_40_12 = 1 << 3;
            const UNDERWATER_MOVEMENT = 1 << 4;
            const WALL_CLIMB = 1 << 5;
        }
    }
}

#[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash)]
pub enum Status {
    #[default]
    None,
    Visited,
    Skipped,
}

#[derive(Clone, Debug, Eq, PartialEq, Hash)]
pub struct Context {
    // context vars
    pub position: SpotId,
    pub save: SpotId,
    pub mode: enums::Mode,
    pub indra: SpotId,
    pub last: SpotId,
    pub prev_area: AreaId,
    pub energy: i32,
    pub flasks: i32,
    // settings
    // items
    pub drone_melee_damage: i8,
    pub drone_melee_speed: i8,
    pub flask: i8,
    pub health_upgrade: i8,
    pub infect: i8,
    pub infection_range: i8,
    pub melee_damage: i8,
    pub melee_speed: i8,
    pub nano_points: i8,
    pub ranged_damage: i8,
    pub ranged_speed: i8,
    // bitflags
    pub cbits1: flags::ContextBits1,
    pub cbits2: flags::ContextBits2,
    // other
    pub status: EnumMap<LocationId, Status>,
    visits: i32,
    skips: i32,
}

impl Default for Context {
    fn default() -> Context {
        Context {
            position: SpotId::Antarctica__West__Helipad,
            save: SpotId::Antarctica__West__Helipad,
            mode: enums::Mode::Indra,
            indra: SpotId::None,
            last: SpotId::None,
            prev_area: AreaId::Antarctica__West,
            energy: 0,
            flasks: 0,
            // settings
            // items
            drone_melee_damage: Default::default(),
            drone_melee_speed: Default::default(),
            flask: Default::default(),
            health_upgrade: Default::default(),
            infect: Default::default(),
            infection_range: Default::default(),
            melee_damage: Default::default(),
            melee_speed: Default::default(),
            nano_points: Default::default(),
            ranged_damage: Default::default(),
            ranged_speed: Default::default(),
            // bitflags
            cbits1: Default::default(),
            cbits2: Default::default(),
            // other
            status: Default::default(),
            visits: Default::default(),
            skips: Default::default(),
        }
    }
}

impl context::Ctx for Context {
    type World = graph::World;
    type ItemId = Item;
    type AreaId = AreaId;
    type RegionId = RegionId;
    type MovementState = movements::MovementState;
    const NUM_ITEMS: i32 = 37;

    fn has(&self, item: Item) -> bool {
        match item {
            Item::Amagi_Dragon_Eye_Passage => self
                .cbits1
                .contains(flags::ContextBits1::AMAGI_DRAGON_EYE_PASSAGE),
            Item::Amagi_Stronghold_Boulder_1 => self
                .cbits1
                .contains(flags::ContextBits1::AMAGI_STRONGHOLD_BOULDER_1),
            Item::Amagi_Stronghold_Boulder_2 => self
                .cbits1
                .contains(flags::ContextBits1::AMAGI_STRONGHOLD_BOULDER_2),
            Item::Amagi_Stronghold_Wall_1 => self
                .cbits1
                .contains(flags::ContextBits1::AMAGI_STRONGHOLD_WALL_1),
            Item::Amagi_Stronghold_Wall_2 => self
                .cbits1
                .contains(flags::ContextBits1::AMAGI_STRONGHOLD_WALL_2),
            Item::Amagi_West_Lake_Surface_Wall => self
                .cbits1
                .contains(flags::ContextBits1::AMAGI_WEST_LAKE_SURFACE_WALL),
            Item::Amashilama => self.cbits1.contains(flags::ContextBits1::AMASHILAMA),
            Item::Anuman => self.cbits1.contains(flags::ContextBits1::ANUMAN),
            Item::Apocalypse_Bomb => self.cbits1.contains(flags::ContextBits1::APOCALYPSE_BOMB),
            Item::Boomerang => self.cbits1.contains(flags::ContextBits1::BOOMERANG),
            Item::Defeat_Ebih_Alu => self.cbits1.contains(flags::ContextBits1::DEFEAT_EBIH_ALU),
            Item::Defeat_MUS_A_M20 => self.cbits1.contains(flags::ContextBits1::DEFEAT_MUS_A_M20),
            Item::Drone_Hover => self.cbits1.contains(flags::ContextBits1::DRONE_HOVER),
            Item::Drone_Melee_Damage => self.drone_melee_damage >= 1,
            Item::Drone_Melee_Speed => self.drone_melee_speed >= 1,
            Item::Flask => self.flask >= 1,
            Item::Health_Upgrade => self.health_upgrade >= 1,
            Item::Ice_Axe => self.cbits1.contains(flags::ContextBits1::ICE_AXE),
            Item::Infect => self.infect >= 1,
            Item::Infection_Range => self.infection_range >= 1,
            Item::Infection_Speed => self.cbits1.contains(flags::ContextBits1::INFECTION_SPEED),
            Item::Ledge_Grab => self.cbits1.contains(flags::ContextBits1::LEDGE_GRAB),
            Item::Melee_Damage => self.melee_damage >= 1,
            Item::Melee_Speed => self.melee_speed >= 1,
            Item::Mist_Upgrade => self.cbits1.contains(flags::ContextBits1::MIST_UPGRADE),
            Item::Nanite_Mist => self.cbits1.contains(flags::ContextBits1::NANITE_MIST),
            Item::Nano_Points => self.nano_points >= 1,
            Item::Ranged_Damage => self.ranged_damage >= 1,
            Item::Ranged_Speed => self.ranged_speed >= 1,
            Item::Remote_Drone => self.cbits1.contains(flags::ContextBits1::REMOTE_DRONE),
            Item::Shockwave => self.cbits1.contains(flags::ContextBits1::SHOCKWAVE),
            Item::Slingshot_Hook => self.cbits2.contains(flags::ContextBits2::SLINGSHOT_HOOK),
            Item::Station_Power => self.cbits2.contains(flags::ContextBits2::STATION_POWER),
            Item::Switch_36_11 => self.cbits2.contains(flags::ContextBits2::SWITCH_36_11),
            Item::Switch_40_12 => self.cbits2.contains(flags::ContextBits2::SWITCH_40_12),
            Item::Underwater_Movement => self
                .cbits2
                .contains(flags::ContextBits2::UNDERWATER_MOVEMENT),
            Item::Wall_Climb => self.cbits2.contains(flags::ContextBits2::WALL_CLIMB),
            _ => false,
        }
    }
    fn count(&self, item: Item) -> i16 {
        match item {
            Item::Amagi_Dragon_Eye_Passage => self
                .cbits1
                .contains(flags::ContextBits1::AMAGI_DRAGON_EYE_PASSAGE)
                .into(),
            Item::Amagi_Stronghold_Boulder_1 => self
                .cbits1
                .contains(flags::ContextBits1::AMAGI_STRONGHOLD_BOULDER_1)
                .into(),
            Item::Amagi_Stronghold_Boulder_2 => self
                .cbits1
                .contains(flags::ContextBits1::AMAGI_STRONGHOLD_BOULDER_2)
                .into(),
            Item::Amagi_Stronghold_Wall_1 => self
                .cbits1
                .contains(flags::ContextBits1::AMAGI_STRONGHOLD_WALL_1)
                .into(),
            Item::Amagi_Stronghold_Wall_2 => self
                .cbits1
                .contains(flags::ContextBits1::AMAGI_STRONGHOLD_WALL_2)
                .into(),
            Item::Amagi_West_Lake_Surface_Wall => self
                .cbits1
                .contains(flags::ContextBits1::AMAGI_WEST_LAKE_SURFACE_WALL)
                .into(),
            Item::Amashilama => self.cbits1.contains(flags::ContextBits1::AMASHILAMA).into(),
            Item::Anuman => self.cbits1.contains(flags::ContextBits1::ANUMAN).into(),
            Item::Apocalypse_Bomb => self
                .cbits1
                .contains(flags::ContextBits1::APOCALYPSE_BOMB)
                .into(),
            Item::Boomerang => self.cbits1.contains(flags::ContextBits1::BOOMERANG).into(),
            Item::Defeat_Ebih_Alu => self
                .cbits1
                .contains(flags::ContextBits1::DEFEAT_EBIH_ALU)
                .into(),
            Item::Defeat_MUS_A_M20 => self
                .cbits1
                .contains(flags::ContextBits1::DEFEAT_MUS_A_M20)
                .into(),
            Item::Drone_Hover => self
                .cbits1
                .contains(flags::ContextBits1::DRONE_HOVER)
                .into(),
            Item::Drone_Melee_Damage => self.drone_melee_damage.into(),
            Item::Drone_Melee_Speed => self.drone_melee_speed.into(),
            Item::Flask => self.flask.into(),
            Item::Health_Upgrade => self.health_upgrade.into(),
            Item::Ice_Axe => self.cbits1.contains(flags::ContextBits1::ICE_AXE).into(),
            Item::Infect => self.infect.into(),
            Item::Infection_Range => self.infection_range.into(),
            Item::Infection_Speed => self
                .cbits1
                .contains(flags::ContextBits1::INFECTION_SPEED)
                .into(),
            Item::Ledge_Grab => self.cbits1.contains(flags::ContextBits1::LEDGE_GRAB).into(),
            Item::Melee_Damage => self.melee_damage.into(),
            Item::Melee_Speed => self.melee_speed.into(),
            Item::Mist_Upgrade => self
                .cbits1
                .contains(flags::ContextBits1::MIST_UPGRADE)
                .into(),
            Item::Nanite_Mist => self
                .cbits1
                .contains(flags::ContextBits1::NANITE_MIST)
                .into(),
            Item::Nano_Points => self.nano_points.into(),
            Item::Ranged_Damage => self.ranged_damage.into(),
            Item::Ranged_Speed => self.ranged_speed.into(),
            Item::Remote_Drone => self
                .cbits1
                .contains(flags::ContextBits1::REMOTE_DRONE)
                .into(),
            Item::Shockwave => self.cbits1.contains(flags::ContextBits1::SHOCKWAVE).into(),
            Item::Slingshot_Hook => self
                .cbits2
                .contains(flags::ContextBits2::SLINGSHOT_HOOK)
                .into(),
            Item::Station_Power => self
                .cbits2
                .contains(flags::ContextBits2::STATION_POWER)
                .into(),
            Item::Switch_36_11 => self
                .cbits2
                .contains(flags::ContextBits2::SWITCH_36_11)
                .into(),
            Item::Switch_40_12 => self
                .cbits2
                .contains(flags::ContextBits2::SWITCH_40_12)
                .into(),
            Item::Underwater_Movement => self
                .cbits2
                .contains(flags::ContextBits2::UNDERWATER_MOVEMENT)
                .into(),
            Item::Wall_Climb => self.cbits2.contains(flags::ContextBits2::WALL_CLIMB).into(),
            _ => 0,
        }
    }
    fn collect(&mut self, item: Item) {
        match item {
            Item::Amagi_Dragon_Eye_Passage => {
                self.cbits1.insert(flags::ContextBits1::AMAGI_DRAGON_EYE_PASSAGE);
            },
            Item::Amagi_Stronghold_Boulder_1 => {
                self.cbits1.insert(flags::ContextBits1::AMAGI_STRONGHOLD_BOULDER_1);
            },
            Item::Amagi_Stronghold_Boulder_2 => {
                self.cbits1.insert(flags::ContextBits1::AMAGI_STRONGHOLD_BOULDER_2);
            },
            Item::Amagi_Stronghold_Wall_1 => {
                self.cbits1.insert(flags::ContextBits1::AMAGI_STRONGHOLD_WALL_1);
            },
            Item::Amagi_Stronghold_Wall_2 => {
                self.cbits1.insert(flags::ContextBits1::AMAGI_STRONGHOLD_WALL_2);
            },
            Item::Amagi_West_Lake_Surface_Wall => {
                self.cbits1.insert(flags::ContextBits1::AMAGI_WEST_LAKE_SURFACE_WALL);
            },
            Item::Amashilama => {
                self.cbits1.insert(flags::ContextBits1::AMASHILAMA);
                rules::action_save__glacier__revival__save_point(self);
            },
            Item::Anuman => {
                self.cbits1.insert(flags::ContextBits1::ANUMAN);
            },
            Item::Apocalypse_Bomb => {
                self.cbits1.insert(flags::ContextBits1::APOCALYPSE_BOMB);
            },
            Item::Boomerang => {
                self.cbits1.insert(flags::ContextBits1::BOOMERANG);
            },
            Item::Defeat_Ebih_Alu => {
                self.cbits1.insert(flags::ContextBits1::DEFEAT_EBIH_ALU);
            },
            Item::Defeat_MUS_A_M20 => {
                self.cbits1.insert(flags::ContextBits1::DEFEAT_MUS_A_M20);
            },
            Item::Drone_Hover => {
                self.cbits1.insert(flags::ContextBits1::DRONE_HOVER);
            },
            Item::Drone_Melee_Damage => {
                self.drone_melee_damage += 1;
            },
            Item::Drone_Melee_Speed => {
                self.drone_melee_speed += 1;
            },
            Item::Flask => {
                self.flask += 1;
                rules::action_flasks__1(self);
            },
            Item::Health_Upgrade => {
                self.health_upgrade += 1;
            },
            Item::Ice_Axe => {
                self.cbits1.insert(flags::ContextBits1::ICE_AXE);
            },
            Item::Infect => {
                self.infect += 1;
                rules::action_energy__max_energy(self);
            },
            Item::Infection_Range => {
                self.infection_range += 1;
            },
            Item::Infection_Speed => {
                self.cbits1.insert(flags::ContextBits1::INFECTION_SPEED);
            },
            Item::Ledge_Grab => {
                self.cbits1.insert(flags::ContextBits1::LEDGE_GRAB);
            },
            Item::Melee_Damage => {
                self.melee_damage += 1;
            },
            Item::Melee_Speed => {
                self.melee_speed += 1;
            },
            Item::Mist_Upgrade => {
                self.cbits1.insert(flags::ContextBits1::MIST_UPGRADE);
            },
            Item::Nanite_Mist => {
                self.cbits1.insert(flags::ContextBits1::NANITE_MIST);
            },
            Item::Nano_Points => {
                self.nano_points += 1;
            },
            Item::Ranged_Damage => {
                self.ranged_damage += 1;
            },
            Item::Ranged_Speed => {
                self.ranged_speed += 1;
            },
            Item::Remote_Drone => {
                self.cbits1.insert(flags::ContextBits1::REMOTE_DRONE);
            },
            Item::Shockwave => {
                self.cbits1.insert(flags::ContextBits1::SHOCKWAVE);
            },
            Item::Slingshot_Hook => {
                self.cbits2.insert(flags::ContextBits2::SLINGSHOT_HOOK);
            },
            Item::Station_Power => {
                self.cbits2.insert(flags::ContextBits2::STATION_POWER);
            },
            Item::Switch_36_11 => {
                self.cbits2.insert(flags::ContextBits2::SWITCH_36_11);
            },
            Item::Switch_40_12 => {
                self.cbits2.insert(flags::ContextBits2::SWITCH_40_12);
            },
            Item::Underwater_Movement => {
                self.cbits2.insert(flags::ContextBits2::UNDERWATER_MOVEMENT);
            },
            Item::Wall_Climb => {
                self.cbits2.insert(flags::ContextBits2::WALL_CLIMB);
            },
            Item::Health_Node => rules::action_energy__max_energy(self),
            Item::Amagi_Stronghold_Wall_And_Boulder_1 => rules::action_skip__amagi__west_lake__stronghold_ceiling_left__knock_down_left_boulder_add_item__amagi_stronghold_wall_1_add_item__amagi_stronghold_boulder_1(self),
            Item::Amagi_Stronghold_Boulder_And_Wall_2 => rules::action_skip__amagi__west_lake__stronghold_ceiling_right__knock_down_right_boulder_add_item__amagi_stronghold_wall_2_add_item__amagi_stronghold_boulder_2(self),
            _ => (),
        }
    }

    fn position(&self) -> SpotId {
        self.position
    }
    fn set_position(&mut self, pos: SpotId) {
        let area = get_area(pos);
        match area {
            AreaId::Amagi__Cave_Behind_Waterfall => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Amagi__Grid_31_19 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Amagi__Liru_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Amagi__Main_Area => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Amagi__West_Lake => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Antarctica__East => {
                if get_area(self.position) != area {
                    self.save = SpotId::Antarctica__East__Save_Point;
                }
            }
            AreaId::Ebih__Base_Camp => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Boss_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Building_Interior => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Bunker_Interior => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__By_Garage => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Cave => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Drone_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Ebih_East => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Ebih_West => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Garage => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Grid_21_1_5 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Grid_25_10_12 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Grid_25_2_6 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Grid_26_10_11 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Observation_Tower_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Tent_Interior => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Ebih__Waterfall => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Giguna__Giguna_Northeast => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Apocalypse_Entry => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Boomerang_Antechamber => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Boomerang_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Compass_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Dock_Outside => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Grid_31_9_12 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Grid_32_7_10 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Grid_37_38_9 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Grid_39_40_7_9 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Grid_42_10 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Grid_43_10_11 => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Lake_Main_Entrance => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Ledge_Grab_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Peak => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Revival => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__The_Big_Drop => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            AreaId::Glacier__Vertical_Room => {
                if get_area(self.position) != area {
                    rules::action_reset_old_area__newpos(self, pos);
                }
            }
            _ => (),
        }
        self.position = pos;
    }

    fn reload_game(&mut self) {
        self.reset_all();
        self.cbits1
            .remove(flags::ContextBits1::AMAGI__MAIN_AREA__CTX__COMBO);
    }

    fn reset_all(&mut self) {
        self.cbits1
            .remove(flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED);
        self.cbits1
            .remove(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED);
        self.cbits1
            .remove(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED);
        self.cbits1
            .remove(flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED);
    }

    fn reset_region(&mut self, region_id: RegionId) {}
    fn reset_area(&mut self, area_id: AreaId) {
        match area_id {
            AreaId::Ebih__Base_Camp => {
                self.cbits1
                    .remove(flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED);
            }
            AreaId::Ebih__Ebih_East => {
                self.cbits1
                    .remove(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED);
                self.cbits1
                    .remove(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED);
            }
            AreaId::Ebih__Drone_Room => {
                self.cbits1
                    .remove(flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED);
            }
            _ => (),
        }
    }
    fn can_afford(&self, cost: &Currency) -> bool {
        match cost {
            Currency::Free => true,
            Currency::Energy(c) => self.energy >= *c,
            Currency::Flasks(c) => self.flasks >= *c,
        }
    }
    fn spend(&mut self, cost: &Currency) {
        match cost {
            Currency::Free => (),
            Currency::Energy(c) => self.energy -= *c,
            Currency::Flasks(c) => self.flasks -= *c,
        }
    }

    fn visit(&mut self, loc_id: LocationId) {
        self.status[loc_id] = Status::Visited;
        self.visits += 1;
    }
    fn skip(&mut self, loc_id: LocationId) {
        if self.status[loc_id] == Status::None {
            self.status[loc_id] = Status::Skipped;
            self.skips += 1;
        }
    }
    fn reset(&mut self, loc_id: LocationId) {
        match self.status[loc_id] {
            Status::Visited => self.visits -= 1,
            Status::Skipped => self.skips -= 1,
            _ => (),
        }
        self.status[loc_id] = Status::None;
    }

    fn todo(&self, loc_id: LocationId) -> bool {
        self.status[loc_id] == Status::None
    }
    fn visited(&self, loc_id: LocationId) -> bool {
        self.status[loc_id] == Status::Visited
    }
    fn skipped(&self, loc_id: LocationId) -> bool {
        self.status[loc_id] == Status::Skipped
    }

    fn all_spot_checks(&self, id: SpotId) -> bool {
        let r = spot_locations(id);
        for status in self.status.as_slice()[r.start..r.end].iter() {
            if status == &Status::None {
                return false;
            }
        }
        true
    }
    fn all_area_checks(&self, id: AreaId) -> bool {
        let r = area_locations(id);
        for status in self.status.as_slice()[r.start..r.end].iter() {
            if status == &Status::None {
                return false;
            }
        }
        true
    }
    fn all_region_checks(&self, id: RegionId) -> bool {
        let r = region_locations(id);
        for status in self.status.as_slice()[r.start..r.end].iter() {
            if status == &Status::None {
                return false;
            }
        }
        true
    }
    fn get_movement_state(&self) -> movements::MovementState {
        movements::get_movement_state(self)
    }

    fn local_travel_time(&self, movement_state: movements::MovementState, dest: SpotId) -> i32 {
        movements::local_travel_time(self, movement_state, self.position, dest)
    }

    fn count_visits(&self) -> i32 {
        self.visits
    }
    fn count_skips(&self) -> i32 {
        self.skips
    }
    fn progress(&self) -> i32 {
        if self.visits <= 0 {
            0
        } else {
            self.visits * 100 / (Self::World::NUM_LOCATIONS - self.skips)
        }
    }
}

impl Context {
    // settings
    pub fn boomerang_steering(&self) -> bool {
        self.cbits1
            .contains(flags::ContextBits1::BOOMERANG_STEERING)
    }
    pub fn set_boomerang_steering(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::BOOMERANG_STEERING, val);
    }
    pub fn major_glitches(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MAJOR_GLITCHES)
    }
    pub fn set_major_glitches(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MAJOR_GLITCHES, val);
    }
    pub fn minor_glitches(&self) -> bool {
        self.cbits1.contains(flags::ContextBits1::MINOR_GLITCHES)
    }
    pub fn set_minor_glitches(&mut self, val: bool) {
        self.cbits1.set(flags::ContextBits1::MINOR_GLITCHES, val);
    }
    // context
    pub fn position(&self) -> SpotId {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.position,
                },
            },
        }
    }
    pub fn save(&self) -> SpotId {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.save,
                },
            },
        }
    }
    pub fn set_save(&mut self, val: SpotId) {
        self.save = val;
    }
    pub fn mode(&self) -> enums::Mode {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.mode,
                },
            },
        }
    }
    pub fn set_mode(&mut self, val: enums::Mode) {
        self.mode = val;
    }
    pub fn indra(&self) -> SpotId {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.indra,
                },
            },
        }
    }
    pub fn set_indra(&mut self, val: SpotId) {
        self.indra = val;
    }
    pub fn last(&self) -> SpotId {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.last,
                },
            },
        }
    }
    pub fn set_last(&mut self, val: SpotId) {
        self.last = val;
    }
    pub fn prev_area(&self) -> AreaId {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.prev_area,
                },
            },
        }
    }
    pub fn set_prev_area(&mut self, val: AreaId) {
        self.prev_area = val;
    }
    pub fn energy(&self) -> i32 {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.energy,
                },
            },
        }
    }
    pub fn set_energy(&mut self, val: i32) {
        self.energy = val;
    }
    pub fn flasks(&self) -> i32 {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self.flasks,
                },
            },
        }
    }
    pub fn set_flasks(&mut self, val: i32) {
        self.flasks = val;
    }
    pub fn amagi__main_area__ctx__combo(&self) -> bool {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self
                        .cbits1
                        .contains(flags::ContextBits1::AMAGI__MAIN_AREA__CTX__COMBO),
                },
            },
        }
    }
    pub fn set_amagi__main_area__ctx__combo(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::AMAGI__MAIN_AREA__CTX__COMBO, val);
    }
    pub fn ebih__base_camp__ctx__left_platform_moved(&self) -> bool {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self
                        .cbits1
                        .contains(flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED),
                },
            },
        }
    }
    pub fn set_ebih__base_camp__ctx__left_platform_moved(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED,
            val,
        );
    }
    pub fn ebih__grid_25_10_12__ctx__door_open(&self) -> bool {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self
                        .cbits1
                        .contains(flags::ContextBits1::EBIH__GRID_25_10_12__CTX__DOOR_OPEN),
                },
            },
        }
    }
    pub fn set_ebih__grid_25_10_12__ctx__door_open(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::EBIH__GRID_25_10_12__CTX__DOOR_OPEN,
            val,
        );
    }
    pub fn ebih__waterfall__ctx__left_block(&self) -> bool {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self
                        .cbits1
                        .contains(flags::ContextBits1::EBIH__WATERFALL__CTX__LEFT_BLOCK),
                },
            },
        }
    }
    pub fn set_ebih__waterfall__ctx__left_block(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::EBIH__WATERFALL__CTX__LEFT_BLOCK, val);
    }
    pub fn ebih__waterfall__ctx__right_block(&self) -> bool {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self
                        .cbits1
                        .contains(flags::ContextBits1::EBIH__WATERFALL__CTX__RIGHT_BLOCK),
                },
            },
        }
    }
    pub fn set_ebih__waterfall__ctx__right_block(&mut self, val: bool) {
        self.cbits1
            .set(flags::ContextBits1::EBIH__WATERFALL__CTX__RIGHT_BLOCK, val);
    }
    pub fn ebih__waterfall__ctx__west_door_open(&self) -> bool {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self
                        .cbits1
                        .contains(flags::ContextBits1::EBIH__WATERFALL__CTX__WEST_DOOR_OPEN),
                },
            },
        }
    }
    pub fn set_ebih__waterfall__ctx__west_door_open(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::EBIH__WATERFALL__CTX__WEST_DOOR_OPEN,
            val,
        );
    }
    pub fn ebih__ebih_east__ctx__platform1_moved(&self) -> bool {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self
                        .cbits1
                        .contains(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED),
                },
            },
        }
    }
    pub fn set_ebih__ebih_east__ctx__platform1_moved(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED,
            val,
        );
    }
    pub fn ebih__ebih_east__ctx__platform2_moved(&self) -> bool {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self
                        .cbits1
                        .contains(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED),
                },
            },
        }
    }
    pub fn set_ebih__ebih_east__ctx__platform2_moved(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED,
            val,
        );
    }
    pub fn ebih__drone_room__ctx__platform_moved(&self) -> bool {
        match self.position {
            _ => match get_area(self.position) {
                _ => match get_region(self.position) {
                    _ => self
                        .cbits1
                        .contains(flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED),
                },
            },
        }
    }
    pub fn set_ebih__drone_room__ctx__platform_moved(&mut self, val: bool) {
        self.cbits1.set(
            flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED,
            val,
        );
    }
    // test helper for items
    pub fn add_item(&mut self, item: Item) {
        match item {
            Item::Amagi_Dragon_Eye_Passage => {
                self.cbits1
                    .insert(flags::ContextBits1::AMAGI_DRAGON_EYE_PASSAGE);
            }
            Item::Amagi_Stronghold_Boulder_1 => {
                self.cbits1
                    .insert(flags::ContextBits1::AMAGI_STRONGHOLD_BOULDER_1);
            }
            Item::Amagi_Stronghold_Boulder_2 => {
                self.cbits1
                    .insert(flags::ContextBits1::AMAGI_STRONGHOLD_BOULDER_2);
            }
            Item::Amagi_Stronghold_Wall_1 => {
                self.cbits1
                    .insert(flags::ContextBits1::AMAGI_STRONGHOLD_WALL_1);
            }
            Item::Amagi_Stronghold_Wall_2 => {
                self.cbits1
                    .insert(flags::ContextBits1::AMAGI_STRONGHOLD_WALL_2);
            }
            Item::Amagi_West_Lake_Surface_Wall => {
                self.cbits1
                    .insert(flags::ContextBits1::AMAGI_WEST_LAKE_SURFACE_WALL);
            }
            Item::Amashilama => {
                self.cbits1.insert(flags::ContextBits1::AMASHILAMA);
            }
            Item::Anuman => {
                self.cbits1.insert(flags::ContextBits1::ANUMAN);
            }
            Item::Apocalypse_Bomb => {
                self.cbits1.insert(flags::ContextBits1::APOCALYPSE_BOMB);
            }
            Item::Boomerang => {
                self.cbits1.insert(flags::ContextBits1::BOOMERANG);
            }
            Item::Defeat_Ebih_Alu => {
                self.cbits1.insert(flags::ContextBits1::DEFEAT_EBIH_ALU);
            }
            Item::Defeat_MUS_A_M20 => {
                self.cbits1.insert(flags::ContextBits1::DEFEAT_MUS_A_M20);
            }
            Item::Drone_Hover => {
                self.cbits1.insert(flags::ContextBits1::DRONE_HOVER);
            }
            Item::Drone_Melee_Damage => {
                self.drone_melee_damage += 1;
            }
            Item::Drone_Melee_Speed => {
                self.drone_melee_speed += 1;
            }
            Item::Flask => {
                self.flask += 1;
            }
            Item::Health_Upgrade => {
                self.health_upgrade += 1;
            }
            Item::Ice_Axe => {
                self.cbits1.insert(flags::ContextBits1::ICE_AXE);
            }
            Item::Infect => {
                self.infect += 1;
            }
            Item::Infection_Range => {
                self.infection_range += 1;
            }
            Item::Infection_Speed => {
                self.cbits1.insert(flags::ContextBits1::INFECTION_SPEED);
            }
            Item::Ledge_Grab => {
                self.cbits1.insert(flags::ContextBits1::LEDGE_GRAB);
            }
            Item::Melee_Damage => {
                self.melee_damage += 1;
            }
            Item::Melee_Speed => {
                self.melee_speed += 1;
            }
            Item::Mist_Upgrade => {
                self.cbits1.insert(flags::ContextBits1::MIST_UPGRADE);
            }
            Item::Nanite_Mist => {
                self.cbits1.insert(flags::ContextBits1::NANITE_MIST);
            }
            Item::Nano_Points => {
                self.nano_points += 1;
            }
            Item::Ranged_Damage => {
                self.ranged_damage += 1;
            }
            Item::Ranged_Speed => {
                self.ranged_speed += 1;
            }
            Item::Remote_Drone => {
                self.cbits1.insert(flags::ContextBits1::REMOTE_DRONE);
            }
            Item::Shockwave => {
                self.cbits1.insert(flags::ContextBits1::SHOCKWAVE);
            }
            Item::Slingshot_Hook => {
                self.cbits2.insert(flags::ContextBits2::SLINGSHOT_HOOK);
            }
            Item::Station_Power => {
                self.cbits2.insert(flags::ContextBits2::STATION_POWER);
            }
            Item::Switch_36_11 => {
                self.cbits2.insert(flags::ContextBits2::SWITCH_36_11);
            }
            Item::Switch_40_12 => {
                self.cbits2.insert(flags::ContextBits2::SWITCH_40_12);
            }
            Item::Underwater_Movement => {
                self.cbits2.insert(flags::ContextBits2::UNDERWATER_MOVEMENT);
            }
            Item::Wall_Climb => {
                self.cbits2.insert(flags::ContextBits2::WALL_CLIMB);
            }
            _ => (),
        }
    }
}

//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::{data, enums, flags, Context};
use crate::graph::{self, *};
use crate::graph_enums::*;
use crate::items::Item;
use crate::movements;
use crate::prices::Currency;
use crate::rules;
use analyzer::matchertrie::matcher::*;
use analyzer::matchertrie::observe::*;
use analyzer::matchertrie::trie::Node;
use analyzer::solutions::Solution;
use std::sync::{Arc, Mutex};

#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub enum OneObservation {
    Position(SpotId),
    EnergyEq(i16),
    EnergyGe(i16, bool),
    EnergyLe(i16, bool),
    EnergyRange(i16, i16, bool),
    FlasksEq(i8),
    FlasksGe(i8, bool),
    FlasksLe(i8, bool),
    FlasksRange(i8, i8, bool),
    RefillsEq(i8),
    RefillsGe(i8, bool),
    RefillsLe(i8, bool),
    RefillsRange(i8, i8, bool),
    Mode(enums::Mode),
    Save(SpotId),
    BreachSave(SpotId),
    Indra(SpotId),
    Last(SpotId),
    PrevArea(AreaId),
    // items
    FlaskEq(i8),
    FlaskGe(i8, bool),
    FlaskLe(i8, bool),
    FlaskRange(i8, i8, bool),
    HealthFragmentEq(i8),
    HealthFragmentGe(i8, bool),
    HealthFragmentLe(i8, bool),
    HealthFragmentRange(i8, i8, bool),
    // bitflags
    CBits1 {
        mask: flags::ContextBits1,
        result: flags::ContextBits1,
    },
    CBits2 {
        mask: flags::ContextBits2,
        result: flags::ContextBits2,
    },
    CBits3 {
        mask: flags::ContextBits3,
        result: flags::ContextBits3,
    },
    CBits4 {
        mask: flags::ContextBits4,
        result: flags::ContextBits4,
    },
    CBits5 {
        mask: flags::ContextBits5,
        result: flags::ContextBits5,
    },
    CBits6 {
        mask: flags::ContextBits6,
        result: flags::ContextBits6,
    },
    CBits7 {
        mask: flags::ContextBits7,
        result: flags::ContextBits7,
    },
    CBits8 {
        mask: flags::ContextBits8,
        result: flags::ContextBits8,
    },
    CBits9 {
        mask: flags::ContextBits9,
        result: flags::ContextBits9,
    },
    CBits10 {
        mask: flags::ContextBits10,
        result: flags::ContextBits10,
    },
    CBits11 {
        mask: flags::ContextBits11,
        result: flags::ContextBits11,
    },
}

#[derive(Debug, Default)]
pub struct FullObservation {
    // context vars: observed or not. Ints get comparisons as well
    position: bool,
    energy: IntegerObservation<i16>,
    flasks: IntegerObservation<i8>,
    refills: IntegerObservation<i8>,
    mode: bool,
    save: bool,
    breach_save: bool,
    indra: bool,
    last: bool,
    prev_area: bool,
    // items
    flask: IntegerObservation<i8>,
    health_fragment: IntegerObservation<i8>,
    // bitflags: optionally a mask
    cbits1: Option<flags::ContextBits1>,
    cbits2: Option<flags::ContextBits2>,
    cbits3: Option<flags::ContextBits3>,
    cbits4: Option<flags::ContextBits4>,
    cbits5: Option<flags::ContextBits5>,
    cbits6: Option<flags::ContextBits6>,
    cbits7: Option<flags::ContextBits7>,
    cbits8: Option<flags::ContextBits8>,
    cbits9: Option<flags::ContextBits9>,
    cbits10: Option<flags::ContextBits10>,
    cbits11: Option<flags::ContextBits11>,
}

impl FullObservation {
    fn fields_observed(&self) -> usize {
        let mut fields = 0;
        if self.position {
            fields += 1;
        }
        if self.energy != IntegerObservation::Unknown {
            fields += 1;
        }
        if self.flasks != IntegerObservation::Unknown {
            fields += 1;
        }
        if self.refills != IntegerObservation::Unknown {
            fields += 1;
        }
        if self.mode {
            fields += 1;
        }
        if self.save {
            fields += 1;
        }
        if self.breach_save {
            fields += 1;
        }
        if self.indra {
            fields += 1;
        }
        if self.last {
            fields += 1;
        }
        if self.prev_area {
            fields += 1;
        }
        if self.flask != IntegerObservation::Unknown {
            fields += 1;
        }
        if self.health_fragment != IntegerObservation::Unknown {
            fields += 1;
        }
        if self.cbits1.is_some() {
            fields += 1;
        }
        if self.cbits2.is_some() {
            fields += 1;
        }
        if self.cbits3.is_some() {
            fields += 1;
        }
        if self.cbits4.is_some() {
            fields += 1;
        }
        if self.cbits5.is_some() {
            fields += 1;
        }
        if self.cbits6.is_some() {
            fields += 1;
        }
        if self.cbits7.is_some() {
            fields += 1;
        }
        if self.cbits8.is_some() {
            fields += 1;
        }
        if self.cbits9.is_some() {
            fields += 1;
        }
        if self.cbits10.is_some() {
            fields += 1;
        }
        if self.cbits11.is_some() {
            fields += 1;
        }
        fields
    }

    pub fn to_vec(&self, ctx: &Context) -> Vec<OneObservation> {
        let mut vec = Vec::with_capacity(self.fields_observed());
        if self.position {
            vec.push(OneObservation::Position(ctx.position));
        }
        match self.energy {
            IntegerObservation::Unknown => (),
            IntegerObservation::Eq(i) => vec.push(OneObservation::EnergyEq(i)),
            IntegerObservation::Ge(i) => vec.push(OneObservation::EnergyGe(i, ctx.energy() >= i)),
            IntegerObservation::Le(i) => vec.push(OneObservation::EnergyLe(i, ctx.energy() <= i)),
            IntegerObservation::Range(lo, hi) => vec.push(OneObservation::EnergyRange(
                lo,
                hi,
                ctx.energy >= lo && ctx.energy <= hi,
            )),
        }
        match self.flasks {
            IntegerObservation::Unknown => (),
            IntegerObservation::Eq(i) => vec.push(OneObservation::FlasksEq(i)),
            IntegerObservation::Ge(i) => vec.push(OneObservation::FlasksGe(i, ctx.flasks() >= i)),
            IntegerObservation::Le(i) => vec.push(OneObservation::FlasksLe(i, ctx.flasks() <= i)),
            IntegerObservation::Range(lo, hi) => vec.push(OneObservation::FlasksRange(
                lo,
                hi,
                ctx.flasks >= lo && ctx.flasks <= hi,
            )),
        }
        match self.refills {
            IntegerObservation::Unknown => (),
            IntegerObservation::Eq(i) => vec.push(OneObservation::RefillsEq(i)),
            IntegerObservation::Ge(i) => vec.push(OneObservation::RefillsGe(i, ctx.refills() >= i)),
            IntegerObservation::Le(i) => vec.push(OneObservation::RefillsLe(i, ctx.refills() <= i)),
            IntegerObservation::Range(lo, hi) => vec.push(OneObservation::RefillsRange(
                lo,
                hi,
                ctx.refills >= lo && ctx.refills <= hi,
            )),
        }
        if self.mode {
            vec.push(OneObservation::Mode(ctx.mode));
        }
        if self.save {
            vec.push(OneObservation::Save(ctx.save));
        }
        if self.breach_save {
            vec.push(OneObservation::BreachSave(ctx.breach_save));
        }
        if self.indra {
            vec.push(OneObservation::Indra(ctx.indra));
        }
        if self.last {
            vec.push(OneObservation::Last(ctx.last));
        }
        if self.prev_area {
            vec.push(OneObservation::PrevArea(ctx.prev_area));
        }
        match self.flask {
            IntegerObservation::Unknown => (),
            IntegerObservation::Eq(i) => vec.push(OneObservation::FlaskEq(i)),
            IntegerObservation::Ge(i) => vec.push(OneObservation::FlaskGe(i, ctx.flask >= i)),
            IntegerObservation::Le(i) => vec.push(OneObservation::FlaskLe(i, ctx.flask <= i)),
            IntegerObservation::Range(lo, hi) => vec.push(OneObservation::FlaskRange(
                lo,
                hi,
                ctx.flask >= lo && ctx.flask <= hi,
            )),
        }
        match self.health_fragment {
            IntegerObservation::Unknown => (),
            IntegerObservation::Eq(i) => vec.push(OneObservation::HealthFragmentEq(i)),
            IntegerObservation::Ge(i) => vec.push(OneObservation::HealthFragmentGe(
                i,
                ctx.health_fragment >= i,
            )),
            IntegerObservation::Le(i) => vec.push(OneObservation::HealthFragmentLe(
                i,
                ctx.health_fragment <= i,
            )),
            IntegerObservation::Range(lo, hi) => vec.push(OneObservation::HealthFragmentRange(
                lo,
                hi,
                ctx.health_fragment >= lo && ctx.health_fragment <= hi,
            )),
        }
        if let Some(mask) = self.cbits1 {
            vec.push(OneObservation::CBits1 {
                mask,
                result: mask & ctx.cbits1,
            });
        }
        if let Some(mask) = self.cbits2 {
            vec.push(OneObservation::CBits2 {
                mask,
                result: mask & ctx.cbits2,
            });
        }
        if let Some(mask) = self.cbits3 {
            vec.push(OneObservation::CBits3 {
                mask,
                result: mask & ctx.cbits3,
            });
        }
        if let Some(mask) = self.cbits4 {
            vec.push(OneObservation::CBits4 {
                mask,
                result: mask & ctx.cbits4,
            });
        }
        if let Some(mask) = self.cbits5 {
            vec.push(OneObservation::CBits5 {
                mask,
                result: mask & ctx.cbits5,
            });
        }
        if let Some(mask) = self.cbits6 {
            vec.push(OneObservation::CBits6 {
                mask,
                result: mask & ctx.cbits6,
            });
        }
        if let Some(mask) = self.cbits7 {
            vec.push(OneObservation::CBits7 {
                mask,
                result: mask & ctx.cbits7,
            });
        }
        if let Some(mask) = self.cbits8 {
            vec.push(OneObservation::CBits8 {
                mask,
                result: mask & ctx.cbits8,
            });
        }
        if let Some(mask) = self.cbits9 {
            vec.push(OneObservation::CBits9 {
                mask,
                result: mask & ctx.cbits9,
            });
        }
        if let Some(mask) = self.cbits10 {
            vec.push(OneObservation::CBits10 {
                mask,
                result: mask & ctx.cbits10,
            });
        }
        if let Some(mask) = self.cbits11 {
            vec.push(OneObservation::CBits11 {
                mask,
                result: mask & ctx.cbits11,
            });
        }
        vec
    }

    pub fn apply(&mut self, obs: OneObservation) {
        match obs {
            OneObservation::Position(v) => {
                self.position = true;
            }
            OneObservation::EnergyEq(v) => {
                self.energy = self.energy.combine(IntegerObservation::Eq(v));
            }
            OneObservation::EnergyGe(lo, res) => {
                self.energy = self.energy.combine(if res {
                    IntegerObservation::Ge(lo)
                } else {
                    IntegerObservation::Le(lo - 1)
                });
            }
            OneObservation::EnergyLe(hi, res) => {
                self.energy = self.energy.combine(if res {
                    IntegerObservation::Le(hi)
                } else {
                    IntegerObservation::Ge(hi + 1)
                });
            }
            OneObservation::EnergyRange(lo, hi, res) => {
                assert!(
                    res,
                    "Negated ranges/multiple additive ranges not supported, use Eq instead"
                );
                self.energy = self.energy.combine(IntegerObservation::Range(lo, hi));
            }
            OneObservation::FlasksEq(v) => {
                self.flasks = self.flasks.combine(IntegerObservation::Eq(v));
            }
            OneObservation::FlasksGe(lo, res) => {
                self.flasks = self.flasks.combine(if res {
                    IntegerObservation::Ge(lo)
                } else {
                    IntegerObservation::Le(lo - 1)
                });
            }
            OneObservation::FlasksLe(hi, res) => {
                self.flasks = self.flasks.combine(if res {
                    IntegerObservation::Le(hi)
                } else {
                    IntegerObservation::Ge(hi + 1)
                });
            }
            OneObservation::FlasksRange(lo, hi, res) => {
                assert!(
                    res,
                    "Negated ranges/multiple additive ranges not supported, use Eq instead"
                );
                self.flasks = self.flasks.combine(IntegerObservation::Range(lo, hi));
            }
            OneObservation::RefillsEq(v) => {
                self.refills = self.refills.combine(IntegerObservation::Eq(v));
            }
            OneObservation::RefillsGe(lo, res) => {
                self.refills = self.refills.combine(if res {
                    IntegerObservation::Ge(lo)
                } else {
                    IntegerObservation::Le(lo - 1)
                });
            }
            OneObservation::RefillsLe(hi, res) => {
                self.refills = self.refills.combine(if res {
                    IntegerObservation::Le(hi)
                } else {
                    IntegerObservation::Ge(hi + 1)
                });
            }
            OneObservation::RefillsRange(lo, hi, res) => {
                assert!(
                    res,
                    "Negated ranges/multiple additive ranges not supported, use Eq instead"
                );
                self.refills = self.refills.combine(IntegerObservation::Range(lo, hi));
            }
            OneObservation::Mode(v) => {
                self.mode = true;
            }
            OneObservation::Save(v) => {
                self.save = true;
            }
            OneObservation::BreachSave(v) => {
                self.breach_save = true;
            }
            OneObservation::Indra(v) => {
                self.indra = true;
            }
            OneObservation::Last(v) => {
                self.last = true;
            }
            OneObservation::PrevArea(v) => {
                self.prev_area = true;
            }
            OneObservation::FlaskEq(v) => {
                self.flask = self.flask.combine(IntegerObservation::Eq(v));
            }
            OneObservation::FlaskGe(lo, res) => {
                self.flask = self.flask.combine(if res {
                    IntegerObservation::Ge(lo)
                } else {
                    IntegerObservation::Le(lo - 1)
                });
            }
            OneObservation::FlaskLe(hi, res) => {
                self.flask = self.flask.combine(if res {
                    IntegerObservation::Le(hi)
                } else {
                    IntegerObservation::Ge(hi + 1)
                });
            }
            OneObservation::FlaskRange(lo, hi, res) => {
                assert!(
                    res,
                    "Negated ranges/multiple additive ranges not supported, use Eq instead"
                );
                self.flask = self.flask.combine(IntegerObservation::Range(lo, hi));
            }
            OneObservation::HealthFragmentEq(v) => {
                self.health_fragment = self.health_fragment.combine(IntegerObservation::Eq(v));
            }
            OneObservation::HealthFragmentGe(lo, res) => {
                self.health_fragment = self.health_fragment.combine(if res {
                    IntegerObservation::Ge(lo)
                } else {
                    IntegerObservation::Le(lo - 1)
                });
            }
            OneObservation::HealthFragmentLe(hi, res) => {
                self.health_fragment = self.health_fragment.combine(if res {
                    IntegerObservation::Le(hi)
                } else {
                    IntegerObservation::Ge(hi + 1)
                });
            }
            OneObservation::HealthFragmentRange(lo, hi, res) => {
                assert!(
                    res,
                    "Negated ranges/multiple additive ranges not supported, use Eq instead"
                );
                self.health_fragment = self
                    .health_fragment
                    .combine(IntegerObservation::Range(lo, hi));
            }
            OneObservation::CBits1 { mask, .. } => {
                if let Some(old_mask) = self.cbits1 {
                    self.cbits1 = Some(old_mask | mask);
                } else {
                    self.cbits1 = Some(mask);
                }
            }
            OneObservation::CBits2 { mask, .. } => {
                if let Some(old_mask) = self.cbits2 {
                    self.cbits2 = Some(old_mask | mask);
                } else {
                    self.cbits2 = Some(mask);
                }
            }
            OneObservation::CBits3 { mask, .. } => {
                if let Some(old_mask) = self.cbits3 {
                    self.cbits3 = Some(old_mask | mask);
                } else {
                    self.cbits3 = Some(mask);
                }
            }
            OneObservation::CBits4 { mask, .. } => {
                if let Some(old_mask) = self.cbits4 {
                    self.cbits4 = Some(old_mask | mask);
                } else {
                    self.cbits4 = Some(mask);
                }
            }
            OneObservation::CBits5 { mask, .. } => {
                if let Some(old_mask) = self.cbits5 {
                    self.cbits5 = Some(old_mask | mask);
                } else {
                    self.cbits5 = Some(mask);
                }
            }
            OneObservation::CBits6 { mask, .. } => {
                if let Some(old_mask) = self.cbits6 {
                    self.cbits6 = Some(old_mask | mask);
                } else {
                    self.cbits6 = Some(mask);
                }
            }
            OneObservation::CBits7 { mask, .. } => {
                if let Some(old_mask) = self.cbits7 {
                    self.cbits7 = Some(old_mask | mask);
                } else {
                    self.cbits7 = Some(mask);
                }
            }
            OneObservation::CBits8 { mask, .. } => {
                if let Some(old_mask) = self.cbits8 {
                    self.cbits8 = Some(old_mask | mask);
                } else {
                    self.cbits8 = Some(mask);
                }
            }
            OneObservation::CBits9 { mask, .. } => {
                if let Some(old_mask) = self.cbits9 {
                    self.cbits9 = Some(old_mask | mask);
                } else {
                    self.cbits9 = Some(mask);
                }
            }
            OneObservation::CBits10 { mask, .. } => {
                if let Some(old_mask) = self.cbits10 {
                    self.cbits10 = Some(old_mask | mask);
                } else {
                    self.cbits10 = Some(mask);
                }
            }
            OneObservation::CBits11 { mask, .. } => {
                if let Some(old_mask) = self.cbits11 {
                    self.cbits11 = Some(old_mask | mask);
                } else {
                    self.cbits11 = Some(mask);
                }
            }
        }
    }
}

#[derive(Debug)]
pub enum ObservationMatcher {
    PositionLookup(LookupMatcher<Node<Self>, SpotId, (Arc<Solution<Context>>, usize)>),
    EnergyLookup(LookupMatcher<Node<Self>, i16, (Arc<Solution<Context>>, usize)>),
    EnergyGe {
        lo: i16,
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    EnergyLe {
        hi: i16,
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    EnergyRange {
        lo: i16,
        hi: i16,
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    FlasksLookup(LookupMatcher<Node<Self>, i8, (Arc<Solution<Context>>, usize)>),
    FlasksGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    FlasksLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    FlasksRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    RefillsLookup(LookupMatcher<Node<Self>, i8, (Arc<Solution<Context>>, usize)>),
    RefillsGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    RefillsLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    RefillsRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    ModeLookup(LookupMatcher<Node<Self>, enums::Mode, (Arc<Solution<Context>>, usize)>),
    SaveLookup(LookupMatcher<Node<Self>, SpotId, (Arc<Solution<Context>>, usize)>),
    BreachSaveLookup(LookupMatcher<Node<Self>, SpotId, (Arc<Solution<Context>>, usize)>),
    IndraLookup(LookupMatcher<Node<Self>, SpotId, (Arc<Solution<Context>>, usize)>),
    LastLookup(LookupMatcher<Node<Self>, SpotId, (Arc<Solution<Context>>, usize)>),
    PrevAreaLookup(LookupMatcher<Node<Self>, AreaId, (Arc<Solution<Context>>, usize)>),
    // items
    FlaskLookup(LookupMatcher<Node<Self>, i8, (Arc<Solution<Context>>, usize)>),
    FlaskGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    FlaskLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    FlaskRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    HealthFragmentLookup(LookupMatcher<Node<Self>, i8, (Arc<Solution<Context>>, usize)>),
    HealthFragmentGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    HealthFragmentLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    HealthFragmentRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    // bitflags
    LookupCBits1 {
        mask: flags::ContextBits1,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits1, (Arc<Solution<Context>>, usize)>,
    },
    LookupCBits2 {
        mask: flags::ContextBits2,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits2, (Arc<Solution<Context>>, usize)>,
    },
    LookupCBits3 {
        mask: flags::ContextBits3,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits3, (Arc<Solution<Context>>, usize)>,
    },
    LookupCBits4 {
        mask: flags::ContextBits4,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits4, (Arc<Solution<Context>>, usize)>,
    },
    LookupCBits5 {
        mask: flags::ContextBits5,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits5, (Arc<Solution<Context>>, usize)>,
    },
    LookupCBits6 {
        mask: flags::ContextBits6,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits6, (Arc<Solution<Context>>, usize)>,
    },
    LookupCBits7 {
        mask: flags::ContextBits7,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits7, (Arc<Solution<Context>>, usize)>,
    },
    LookupCBits8 {
        mask: flags::ContextBits8,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits8, (Arc<Solution<Context>>, usize)>,
    },
    LookupCBits9 {
        mask: flags::ContextBits9,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits9, (Arc<Solution<Context>>, usize)>,
    },
    LookupCBits10 {
        mask: flags::ContextBits10,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits10, (Arc<Solution<Context>>, usize)>,
    },
    LookupCBits11 {
        mask: flags::ContextBits11,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits11, (Arc<Solution<Context>>, usize)>,
    },
}

impl Default for ObservationMatcher {
    fn default() -> Self {
        Self::PositionLookup(LookupMatcher::new())
    }
}

impl MatcherDispatch for ObservationMatcher {
    type Node = Node<Self>;
    type Struct = Context;
    type Value = (Arc<Solution<Context>>, usize);
    fn new(obs: &OneObservation) -> (Arc<Mutex<Node<Self>>>, Self) {
        match obs {
            &OneObservation::Position(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::PositionLookup(m))
            }
            &OneObservation::EnergyEq(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::EnergyLookup(m))
            }
            &OneObservation::EnergyGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::EnergyGe { lo, matcher })
            }
            &OneObservation::EnergyLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::EnergyLe { hi, matcher })
            }
            &OneObservation::EnergyRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::EnergyRange { lo, hi, matcher })
            }
            &OneObservation::FlasksEq(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::FlasksLookup(m))
            }
            &OneObservation::FlasksGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlasksGe { lo, matcher })
            }
            &OneObservation::FlasksLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlasksLe { hi, matcher })
            }
            &OneObservation::FlasksRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlasksRange { lo, hi, matcher })
            }
            &OneObservation::RefillsEq(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::RefillsLookup(m))
            }
            &OneObservation::RefillsGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::RefillsGe { lo, matcher })
            }
            &OneObservation::RefillsLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::RefillsLe { hi, matcher })
            }
            &OneObservation::RefillsRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::RefillsRange { lo, hi, matcher })
            }
            &OneObservation::Mode(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::ModeLookup(m))
            }
            &OneObservation::Save(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::SaveLookup(m))
            }
            &OneObservation::BreachSave(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::BreachSaveLookup(m))
            }
            &OneObservation::Indra(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::IndraLookup(m))
            }
            &OneObservation::Last(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::LastLookup(m))
            }
            &OneObservation::PrevArea(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::PrevAreaLookup(m))
            }
            &OneObservation::FlaskEq(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::FlaskLookup(m))
            }
            &OneObservation::FlaskGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlaskGe { lo, matcher })
            }
            &OneObservation::FlaskLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlaskLe { hi, matcher })
            }
            &OneObservation::FlaskRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlaskRange { lo, hi, matcher })
            }
            &OneObservation::HealthFragmentEq(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::HealthFragmentLookup(m))
            }
            &OneObservation::HealthFragmentGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::HealthFragmentGe { lo, matcher })
            }
            &OneObservation::HealthFragmentLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::HealthFragmentLe { hi, matcher })
            }
            &OneObservation::HealthFragmentRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (
                    node,
                    ObservationMatcher::HealthFragmentRange { lo, hi, matcher },
                )
            }
            &OneObservation::CBits1 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits1 { mask, matcher })
            }
            &OneObservation::CBits2 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits2 { mask, matcher })
            }
            &OneObservation::CBits3 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits3 { mask, matcher })
            }
            &OneObservation::CBits4 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits4 { mask, matcher })
            }
            &OneObservation::CBits5 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits5 { mask, matcher })
            }
            &OneObservation::CBits6 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits6 { mask, matcher })
            }
            &OneObservation::CBits7 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits7 { mask, matcher })
            }
            &OneObservation::CBits8 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits8 { mask, matcher })
            }
            &OneObservation::CBits9 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits9 { mask, matcher })
            }
            &OneObservation::CBits10 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits10 { mask, matcher })
            }
            &OneObservation::CBits11 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits11 { mask, matcher })
            }
        }
    }

    fn lookup(&self, val: &Context) -> (Option<Arc<Mutex<Node<Self>>>>, Option<Self::Value>) {
        match self {
            Self::PositionLookup(m) => m.lookup(val.position),
            Self::EnergyLookup(m) => m.lookup(val.energy),
            Self::EnergyGe { lo, matcher } => matcher.lookup(val.energy >= *lo),
            Self::EnergyLe { hi, matcher } => matcher.lookup(val.energy <= *hi),
            Self::EnergyRange { lo, hi, matcher } => {
                matcher.lookup(val.energy >= *lo && val.energy <= *hi)
            }
            Self::FlasksLookup(m) => m.lookup(val.flasks),
            Self::FlasksGe { lo, matcher } => matcher.lookup(val.flasks >= *lo),
            Self::FlasksLe { hi, matcher } => matcher.lookup(val.flasks <= *hi),
            Self::FlasksRange { lo, hi, matcher } => {
                matcher.lookup(val.flasks >= *lo && val.flasks <= *hi)
            }
            Self::RefillsLookup(m) => m.lookup(val.refills),
            Self::RefillsGe { lo, matcher } => matcher.lookup(val.refills >= *lo),
            Self::RefillsLe { hi, matcher } => matcher.lookup(val.refills <= *hi),
            Self::RefillsRange { lo, hi, matcher } => {
                matcher.lookup(val.refills >= *lo && val.refills <= *hi)
            }
            Self::ModeLookup(m) => m.lookup(val.mode),
            Self::SaveLookup(m) => m.lookup(val.save),
            Self::BreachSaveLookup(m) => m.lookup(val.breach_save),
            Self::IndraLookup(m) => m.lookup(val.indra),
            Self::LastLookup(m) => m.lookup(val.last),
            Self::PrevAreaLookup(m) => m.lookup(val.prev_area),
            Self::FlaskLookup(m) => m.lookup(val.flask),
            Self::FlaskGe { lo, matcher } => matcher.lookup(val.flask >= *lo),
            Self::FlaskLe { hi, matcher } => matcher.lookup(val.flask <= *hi),
            Self::FlaskRange { lo, hi, matcher } => {
                matcher.lookup(val.flask >= *lo && val.flask <= *hi)
            }
            Self::HealthFragmentLookup(m) => m.lookup(val.health_fragment),
            Self::HealthFragmentGe { lo, matcher } => matcher.lookup(val.health_fragment >= *lo),
            Self::HealthFragmentLe { hi, matcher } => matcher.lookup(val.health_fragment <= *hi),
            Self::HealthFragmentRange { lo, hi, matcher } => {
                matcher.lookup(val.health_fragment >= *lo && val.health_fragment <= *hi)
            }
            Self::LookupCBits1 { mask, matcher } => matcher.lookup(val.cbits1 & *mask),
            Self::LookupCBits2 { mask, matcher } => matcher.lookup(val.cbits2 & *mask),
            Self::LookupCBits3 { mask, matcher } => matcher.lookup(val.cbits3 & *mask),
            Self::LookupCBits4 { mask, matcher } => matcher.lookup(val.cbits4 & *mask),
            Self::LookupCBits5 { mask, matcher } => matcher.lookup(val.cbits5 & *mask),
            Self::LookupCBits6 { mask, matcher } => matcher.lookup(val.cbits6 & *mask),
            Self::LookupCBits7 { mask, matcher } => matcher.lookup(val.cbits7 & *mask),
            Self::LookupCBits8 { mask, matcher } => matcher.lookup(val.cbits8 & *mask),
            Self::LookupCBits9 { mask, matcher } => matcher.lookup(val.cbits9 & *mask),
            Self::LookupCBits10 { mask, matcher } => matcher.lookup(val.cbits10 & *mask),
            Self::LookupCBits11 { mask, matcher } => matcher.lookup(val.cbits11 & *mask),
        }
    }

    fn insert(&mut self, obs: &OneObservation) -> Option<Arc<Mutex<Node<Self>>>> {
        match (self, obs) {
            (Self::PositionLookup(m), OneObservation::Position(v)) => Some(m.insert(*v)),
            (Self::EnergyLookup(m), OneObservation::EnergyEq(v)) => Some(m.insert(*v)),
            (Self::EnergyGe { lo, matcher }, OneObservation::EnergyGe(lo2, v)) if lo2 == lo => {
                Some(matcher.insert(*v))
            }
            (Self::EnergyLe { hi, matcher }, OneObservation::EnergyLe(hi2, v)) if hi2 == hi => {
                Some(matcher.insert(*v))
            }
            (Self::EnergyRange { lo, hi, matcher }, OneObservation::EnergyRange(lo2, hi2, v))
                if lo2 == lo && hi2 == hi =>
            {
                Some(matcher.insert(*v))
            }
            (Self::FlasksLookup(m), OneObservation::FlasksEq(v)) => Some(m.insert(*v)),
            (Self::FlasksGe { lo, matcher }, OneObservation::FlasksGe(lo2, v)) if lo2 == lo => {
                Some(matcher.insert(*v))
            }
            (Self::FlasksLe { hi, matcher }, OneObservation::FlasksLe(hi2, v)) if hi2 == hi => {
                Some(matcher.insert(*v))
            }
            (Self::FlasksRange { lo, hi, matcher }, OneObservation::FlasksRange(lo2, hi2, v))
                if lo2 == lo && hi2 == hi =>
            {
                Some(matcher.insert(*v))
            }
            (Self::RefillsLookup(m), OneObservation::RefillsEq(v)) => Some(m.insert(*v)),
            (Self::RefillsGe { lo, matcher }, OneObservation::RefillsGe(lo2, v)) if lo2 == lo => {
                Some(matcher.insert(*v))
            }
            (Self::RefillsLe { hi, matcher }, OneObservation::RefillsLe(hi2, v)) if hi2 == hi => {
                Some(matcher.insert(*v))
            }
            (Self::RefillsRange { lo, hi, matcher }, OneObservation::RefillsRange(lo2, hi2, v))
                if lo2 == lo && hi2 == hi =>
            {
                Some(matcher.insert(*v))
            }
            (Self::ModeLookup(m), OneObservation::Mode(v)) => Some(m.insert(*v)),
            (Self::SaveLookup(m), OneObservation::Save(v)) => Some(m.insert(*v)),
            (Self::BreachSaveLookup(m), OneObservation::BreachSave(v)) => Some(m.insert(*v)),
            (Self::IndraLookup(m), OneObservation::Indra(v)) => Some(m.insert(*v)),
            (Self::LastLookup(m), OneObservation::Last(v)) => Some(m.insert(*v)),
            (Self::PrevAreaLookup(m), OneObservation::PrevArea(v)) => Some(m.insert(*v)),
            (Self::FlaskLookup(m), OneObservation::FlaskEq(v)) => Some(m.insert(*v)),
            (Self::FlaskGe { lo, matcher }, OneObservation::FlaskGe(lo2, v)) if lo2 == lo => {
                Some(matcher.insert(*v))
            }
            (Self::FlaskLe { hi, matcher }, OneObservation::FlaskLe(hi2, v)) if hi2 == hi => {
                Some(matcher.insert(*v))
            }
            (Self::FlaskRange { lo, hi, matcher }, OneObservation::FlaskRange(lo2, hi2, v))
                if lo2 == lo && hi2 == hi =>
            {
                Some(matcher.insert(*v))
            }
            (Self::HealthFragmentLookup(m), OneObservation::HealthFragmentEq(v)) => {
                Some(m.insert(*v))
            }
            (Self::HealthFragmentGe { lo, matcher }, OneObservation::HealthFragmentGe(lo2, v))
                if lo2 == lo =>
            {
                Some(matcher.insert(*v))
            }
            (Self::HealthFragmentLe { hi, matcher }, OneObservation::HealthFragmentLe(hi2, v))
                if hi2 == hi =>
            {
                Some(matcher.insert(*v))
            }
            (
                Self::HealthFragmentRange { lo, hi, matcher },
                OneObservation::HealthFragmentRange(lo2, hi2, v),
            ) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
            (
                Self::LookupCBits1 { mask, matcher },
                OneObservation::CBits1 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits2 { mask, matcher },
                OneObservation::CBits2 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits3 { mask, matcher },
                OneObservation::CBits3 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits4 { mask, matcher },
                OneObservation::CBits4 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits5 { mask, matcher },
                OneObservation::CBits5 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits6 { mask, matcher },
                OneObservation::CBits6 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits7 { mask, matcher },
                OneObservation::CBits7 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits8 { mask, matcher },
                OneObservation::CBits8 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits9 { mask, matcher },
                OneObservation::CBits9 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits10 { mask, matcher },
                OneObservation::CBits10 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits11 { mask, matcher },
                OneObservation::CBits11 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            _ => None,
        }
    }

    fn set_value(&mut self, obs: &OneObservation, value: Self::Value) {
        match (self, obs) {
            (Self::PositionLookup(m), OneObservation::Position(v)) => m.set_value(*v, value),
            (Self::EnergyLookup(m), OneObservation::EnergyEq(v)) => m.set_value(*v, value),
            (Self::EnergyGe { lo, matcher }, OneObservation::EnergyGe(lo2, v)) if lo2 == lo => {
                matcher.set_value(*v, value)
            }
            (Self::EnergyLe { hi, matcher }, OneObservation::EnergyLe(hi2, v)) if hi2 == hi => {
                matcher.set_value(*v, value)
            }
            (Self::EnergyRange { lo, hi, matcher }, OneObservation::EnergyRange(lo2, hi2, v))
                if lo2 == lo && hi2 == hi =>
            {
                matcher.set_value(*v, value)
            }
            (Self::FlasksLookup(m), OneObservation::FlasksEq(v)) => m.set_value(*v, value),
            (Self::FlasksGe { lo, matcher }, OneObservation::FlasksGe(lo2, v)) if lo2 == lo => {
                matcher.set_value(*v, value)
            }
            (Self::FlasksLe { hi, matcher }, OneObservation::FlasksLe(hi2, v)) if hi2 == hi => {
                matcher.set_value(*v, value)
            }
            (Self::FlasksRange { lo, hi, matcher }, OneObservation::FlasksRange(lo2, hi2, v))
                if lo2 == lo && hi2 == hi =>
            {
                matcher.set_value(*v, value)
            }
            (Self::RefillsLookup(m), OneObservation::RefillsEq(v)) => m.set_value(*v, value),
            (Self::RefillsGe { lo, matcher }, OneObservation::RefillsGe(lo2, v)) if lo2 == lo => {
                matcher.set_value(*v, value)
            }
            (Self::RefillsLe { hi, matcher }, OneObservation::RefillsLe(hi2, v)) if hi2 == hi => {
                matcher.set_value(*v, value)
            }
            (Self::RefillsRange { lo, hi, matcher }, OneObservation::RefillsRange(lo2, hi2, v))
                if lo2 == lo && hi2 == hi =>
            {
                matcher.set_value(*v, value)
            }
            (Self::ModeLookup(m), OneObservation::Mode(v)) => m.set_value(*v, value),
            (Self::SaveLookup(m), OneObservation::Save(v)) => m.set_value(*v, value),
            (Self::BreachSaveLookup(m), OneObservation::BreachSave(v)) => m.set_value(*v, value),
            (Self::IndraLookup(m), OneObservation::Indra(v)) => m.set_value(*v, value),
            (Self::LastLookup(m), OneObservation::Last(v)) => m.set_value(*v, value),
            (Self::PrevAreaLookup(m), OneObservation::PrevArea(v)) => m.set_value(*v, value),
            (Self::FlaskLookup(m), OneObservation::FlaskEq(v)) => m.set_value(*v, value),
            (Self::FlaskGe { lo, matcher }, OneObservation::FlaskGe(lo2, v)) if lo2 == lo => {
                matcher.set_value(*v, value)
            }
            (Self::FlaskLe { hi, matcher }, OneObservation::FlaskLe(hi2, v)) if hi2 == hi => {
                matcher.set_value(*v, value)
            }
            (Self::FlaskRange { lo, hi, matcher }, OneObservation::FlaskRange(lo2, hi2, v))
                if lo2 == lo && hi2 == hi =>
            {
                matcher.set_value(*v, value)
            }
            (Self::HealthFragmentLookup(m), OneObservation::HealthFragmentEq(v)) => {
                m.set_value(*v, value)
            }
            (Self::HealthFragmentGe { lo, matcher }, OneObservation::HealthFragmentGe(lo2, v))
                if lo2 == lo =>
            {
                matcher.set_value(*v, value)
            }
            (Self::HealthFragmentLe { hi, matcher }, OneObservation::HealthFragmentLe(hi2, v))
                if hi2 == hi =>
            {
                matcher.set_value(*v, value)
            }
            (
                Self::HealthFragmentRange { lo, hi, matcher },
                OneObservation::HealthFragmentRange(lo2, hi2, v),
            ) if lo2 == lo && hi2 == hi => matcher.set_value(*v, value),
            (
                Self::LookupCBits1 { mask, matcher },
                OneObservation::CBits1 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.set_value(*result, value),
            (
                Self::LookupCBits2 { mask, matcher },
                OneObservation::CBits2 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.set_value(*result, value),
            (
                Self::LookupCBits3 { mask, matcher },
                OneObservation::CBits3 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.set_value(*result, value),
            (
                Self::LookupCBits4 { mask, matcher },
                OneObservation::CBits4 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.set_value(*result, value),
            (
                Self::LookupCBits5 { mask, matcher },
                OneObservation::CBits5 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.set_value(*result, value),
            (
                Self::LookupCBits6 { mask, matcher },
                OneObservation::CBits6 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.set_value(*result, value),
            (
                Self::LookupCBits7 { mask, matcher },
                OneObservation::CBits7 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.set_value(*result, value),
            (
                Self::LookupCBits8 { mask, matcher },
                OneObservation::CBits8 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.set_value(*result, value),
            (
                Self::LookupCBits9 { mask, matcher },
                OneObservation::CBits9 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.set_value(*result, value),
            (
                Self::LookupCBits10 { mask, matcher },
                OneObservation::CBits10 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.set_value(*result, value),
            (
                Self::LookupCBits11 { mask, matcher },
                OneObservation::CBits11 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.set_value(*result, value),
            _ => (),
        }
    }
}

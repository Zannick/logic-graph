//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::{data, enums, flags, Context};
use crate::graph::{self, *};
use crate::graph_enums::*;
use crate::items::Item;
use crate::movements;
use crate::prices::Currency;
use crate::rules;
use analyzer::matchertrie::*;
use analyzer::observer::*;
use analyzer::solutions::{Solution, SolutionSuffix};
use std::sync::{Arc, Mutex};

#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub enum OneObservation {
    Position(SpotId),
    EnergyExact(i16),
    EnergyEq(i16, bool),
    EnergyGe(i16, bool),
    EnergyLe(i16, bool),
    EnergyRange(i16, i16, bool),
    FlasksExact(i8),
    FlasksEq(i8, bool),
    FlasksGe(i8, bool),
    FlasksLe(i8, bool),
    FlasksRange(i8, i8, bool),
    RefillsExact(i8),
    RefillsEq(i8, bool),
    RefillsGe(i8, bool),
    RefillsLe(i8, bool),
    RefillsRange(i8, i8, bool),
    Mode(enums::Mode),
    Save(SpotId),
    BreachSave(SpotId),
    Indra(SpotId),
    Last(SpotId),
    Portal(SpotId),
    PrevPortal(SpotId),
    PrevArea(AreaId),
    // items
    BigFlaskExact(i8),
    BigFlaskEq(i8, bool),
    BigFlaskGe(i8, bool),
    BigFlaskLe(i8, bool),
    BigFlaskRange(i8, i8, bool),
    FlaskExact(i8),
    FlaskEq(i8, bool),
    FlaskGe(i8, bool),
    FlaskLe(i8, bool),
    FlaskRange(i8, i8, bool),
    HealthFragmentExact(i8),
    HealthFragmentEq(i8, bool),
    HealthFragmentGe(i8, bool),
    HealthFragmentLe(i8, bool),
    HealthFragmentRange(i8, i8, bool),
    // bitflags
    CBits1 {
        mask: flags::ContextBits1,
        result: flags::ContextBits1,
    },
    CBits2 {
        mask: flags::ContextBits2,
        result: flags::ContextBits2,
    },
    CBits3 {
        mask: flags::ContextBits3,
        result: flags::ContextBits3,
    },
    CBits4 {
        mask: flags::ContextBits4,
        result: flags::ContextBits4,
    },
    CBits5 {
        mask: flags::ContextBits5,
        result: flags::ContextBits5,
    },
    CBits6 {
        mask: flags::ContextBits6,
        result: flags::ContextBits6,
    },
    CBits7 {
        mask: flags::ContextBits7,
        result: flags::ContextBits7,
    },
    CBits8 {
        mask: flags::ContextBits8,
        result: flags::ContextBits8,
    },
    CBits9 {
        mask: flags::ContextBits9,
        result: flags::ContextBits9,
    },
    CBits10 {
        mask: flags::ContextBits10,
        result: flags::ContextBits10,
    },
    CBits11 {
        mask: flags::ContextBits11,
        result: flags::ContextBits11,
    },
    CBits12 {
        mask: flags::ContextBits12,
        result: flags::ContextBits12,
    },
    CBits13 {
        mask: flags::ContextBits13,
        result: flags::ContextBits13,
    },
}

#[derive(Debug, Default)]
pub struct FullObservation {
    // context vars: observed or not. Ints get comparisons as well but they are observed-as-true comparisons,
    // or otherwise partitioned as exact
    position: bool,
    energy: IntegerObservation<i16>,
    flasks: IntegerObservation<i8>,
    refills: IntegerObservation<i8>,
    mode: bool,
    save: bool,
    breach_save: bool,
    indra: bool,
    last: bool,
    portal: bool,
    prev_portal: bool,
    prev_area: bool,
    // items
    big_flask: IntegerObservation<i8>,
    flask: IntegerObservation<i8>,
    health_fragment: IntegerObservation<i8>,
    // bitflags: optionally a mask
    cbits1: Option<flags::ContextBits1>,
    cbits2: Option<flags::ContextBits2>,
    cbits3: Option<flags::ContextBits3>,
    cbits4: Option<flags::ContextBits4>,
    cbits5: Option<flags::ContextBits5>,
    cbits6: Option<flags::ContextBits6>,
    cbits7: Option<flags::ContextBits7>,
    cbits8: Option<flags::ContextBits8>,
    cbits9: Option<flags::ContextBits9>,
    cbits10: Option<flags::ContextBits10>,
    cbits11: Option<flags::ContextBits11>,
    cbits12: Option<flags::ContextBits12>,
    cbits13: Option<flags::ContextBits13>,
    pub strict: bool,
}

impl Observer for FullObservation {
    type Ctx = Context;
    type Matcher = ObservationMatcher;

    fn from_victory_state(won: &Context, world: &World) -> Self {
        let mut full_obs = Self::default();
        full_obs.position = true;
        match world.rule_victory {
            RuleVictory::Default => {
                rules::observe_access___escape_invoke_objective(won, world, &mut full_obs);
            }
            RuleVictory::JustObjective => {
                rules::observe_access___invoke_objective(won, world, &mut full_obs);
            }
            RuleVictory::Bench => {
                rules::observe_access___remote_drone_flask__6(won, world, &mut full_obs);
            }
        }
        full_obs
    }

    fn observe_visit(&mut self, loc_id: LocationId) {
        match loc_id {
            LocationId::Amagi_Breach__East_Entrance__Upper_Slope__Item => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_AMAGI_BREACH__EAST_ENTRANCE__UPPER_SLOPE__ITEM,
                );
                self.cbits8.insert(
                    flags::ContextBits8::SKIPPED_AMAGI_BREACH__EAST_ENTRANCE__UPPER_SLOPE__ITEM,
                );
            }
            LocationId::Amagi__Main_Area__Way_Off_To_The_Side__Item => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM,
                );
                self.cbits8.insert(
                    flags::ContextBits8::SKIPPED_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM,
                );
            }
            LocationId::Amagi__Liru_Room__Shrine__Item => {
                self.cbits4
                    .insert(flags::ContextBits4::VISITED_AMAGI__LIRU_ROOM__SHRINE__ITEM);
                self.cbits8
                    .insert(flags::ContextBits8::SKIPPED_AMAGI__LIRU_ROOM__SHRINE__ITEM);
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Break_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL);
                self.cbits8.insert(flags::ContextBits8::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL);
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Defeat_MUS_A_M20 => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20);
                self.cbits8.insert(flags::ContextBits8::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20);
            }
            LocationId::Amagi__West_Lake__Cavern_Tear_Duct__Remote_Flask => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK,
                );
                self.cbits8.insert(
                    flags::ContextBits8::SKIPPED_AMAGI__WEST_LAKE__CAVERN_TEAR_DUCT__REMOTE_FLASK,
                );
            }
            LocationId::Amagi__West_Lake__Cavern_Eye__Item => {
                self.cbits4
                    .insert(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM);
                self.cbits8
                    .insert(flags::ContextBits8::SKIPPED_AMAGI__WEST_LAKE__CAVERN_EYE__ITEM);
            }
            LocationId::Amagi__West_Lake__Cavern_Rear_Pillar__Boss_Reward => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD,
                );
                self.cbits8.insert(
                    flags::ContextBits8::SKIPPED_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD,
                );
            }
            LocationId::Amagi__West_Lake__Stronghold_Top__Remote_Urn => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN,
                );
                self.cbits8.insert(
                    flags::ContextBits8::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_TOP__REMOTE_URN,
                );
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Item => {
                self.cbits4
                    .insert(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM);
                self.cbits8
                    .insert(flags::ContextBits8::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__ITEM);
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Break_Wall => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL,
                );
                self.cbits8.insert(
                    flags::ContextBits8::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_ITEM__BREAK_WALL,
                );
            }
            LocationId::Amagi__West_Lake__Stronghold_Rear_Wall__Break_Left_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL);
                self.cbits8.insert(flags::ContextBits8::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_REAR_WALL__BREAK_LEFT_WALL);
            }
            LocationId::Amagi__West_Lake__Stronghold_Middle_Column__Break_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL);
                self.cbits8.insert(flags::ContextBits8::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_MIDDLE_COLUMN__BREAK_WALL);
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Left__Knock_Down_Left_Boulder => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER);
                self.cbits8.insert(flags::ContextBits8::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER);
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Right__Knock_Down_Right_Boulder => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER);
                self.cbits8.insert(flags::ContextBits8::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_RIGHT__KNOCK_DOWN_RIGHT_BOULDER);
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Room__Break_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL);
                self.cbits8.insert(flags::ContextBits8::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_ROOM__BREAK_WALL);
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Door__Break_Wall => {
                self.cbits4.insert(flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL);
                self.cbits8.insert(flags::ContextBits8::SKIPPED_AMAGI__WEST_LAKE__STRONGHOLD_FRONT_DOOR__BREAK_WALL);
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Right__Break_Wall => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL,
                );
                self.cbits8.insert(
                    flags::ContextBits8::SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_RIGHT__BREAK_WALL,
                );
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Left__Break_Wall => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL,
                );
                self.cbits8.insert(
                    flags::ContextBits8::SKIPPED_AMAGI__WEST_LAKE__SURFACE_WALL_LEFT__BREAK_WALL,
                );
            }
            LocationId::Annuna__Mirror_Match__Save_Point__Fight => {
                self.cbits4
                    .insert(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT);
            }
            LocationId::Annuna__Mirror_Match__Below_Switch__Hit_Switch => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH,
                );
            }
            LocationId::Annuna__Mirror_Match__Plinth__Item => {
                self.cbits4
                    .insert(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_ANNUNA__MIRROR_MATCH__PLINTH__ITEM);
            }
            LocationId::Annuna__Mirror_Match__Waving_Distance__Shockwave_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__MIRROR_MATCH__WAVING_DISTANCE__SHOCKWAVE_FLASK);
            }
            LocationId::Annuna__Mirror_Match__East_26_Lower__Remote_Flask => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_LOWER__REMOTE_FLASK,
                );
            }
            LocationId::Annuna__Mirror_Match__East_26_Upper__Remote_Flask => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_ANNUNA__MIRROR_MATCH__EAST_26_UPPER__REMOTE_FLASK,
                );
            }
            LocationId::Annuna__West_Bridge__Plinth__Item => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_ANNUNA__WEST_BRIDGE__PLINTH__ITEM);
            }
            LocationId::Annuna__East_Bridge__Gate_Button__Switch => {
                self.cbits4
                    .insert(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH);
                self.cbits8
                    .insert(flags::ContextBits8::SKIPPED_ANNUNA__EAST_BRIDGE__GATE_BUTTON__SWITCH);
            }
            LocationId::Annuna__East_Bridge__Below_Gate_Button__Switch_from_Below => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW);
                self.cbits8.insert(flags::ContextBits8::SKIPPED_ANNUNA__EAST_BRIDGE__BELOW_GATE_BUTTON__SWITCH_FROM_BELOW);
            }
            LocationId::Annuna__East_Bridge__Tower_Gate__Tablet => {
                self.cbits4
                    .insert(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET);
                self.cbits8
                    .insert(flags::ContextBits8::SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET);
            }
            LocationId::Annuna__East_Bridge__Tower_Secret__Item => {
                self.cbits4
                    .insert(flags::ContextBits4::VISITED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM);
                self.cbits8
                    .insert(flags::ContextBits8::SKIPPED_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM);
            }
            LocationId::Annuna__Sniper_Valley__Bridge_End__Health_Pickup => {
                self.cbits5.insert(
                    flags::ContextBits5::VISITED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP,
                );
            }
            LocationId::Annuna__Sniper_Valley__Table__Item => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_ANNUNA__SNIPER_VALLEY__TABLE__ITEM);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_West__Break_Outer_Wall => {
                self.cbits5.insert(flags::ContextBits5::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_WEST__BREAK_OUTER_WALL);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_East__Break_Outer_Wall => {
                self.cbits5.insert(flags::ContextBits5::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_OUTER_ROCK_EAST__BREAK_OUTER_WALL);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_West__Break_Inner_Wall => {
                self.cbits5.insert(flags::ContextBits5::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_WEST__BREAK_INNER_WALL);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_East__Break_Inner_Wall => {
                self.cbits5.insert(flags::ContextBits5::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_INNER_ROCK_EAST__BREAK_INNER_WALL);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Cache__Item => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_ANNUNA__SNIPER_VALLEY__CAVERN_CACHE__ITEM);
            }
            LocationId::Annuna__Vertical_Room__Plinth__Item => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_ANNUNA__VERTICAL_ROOM__PLINTH__ITEM);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_ANNUNA__VERTICAL_ROOM__PLINTH__ITEM);
            }
            LocationId::Annuna__Vertical_Room__Gate_Button__Hit_Button => {
                self.cbits5.insert(
                    flags::ContextBits5::VISITED_ANNUNA__VERTICAL_ROOM__GATE_BUTTON__HIT_BUTTON,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_ANNUNA__VERTICAL_ROOM__GATE_BUTTON__HIT_BUTTON,
                );
            }
            LocationId::Annuna__Vertical_Room__Upper_Cache__Tablet => {
                self.cbits5.insert(
                    flags::ContextBits5::VISITED_ANNUNA__VERTICAL_ROOM__UPPER_CACHE__TABLET,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_ANNUNA__VERTICAL_ROOM__UPPER_CACHE__TABLET,
                );
            }
            LocationId::Annuna__Upper_Hallway__Behind_Pedestal__Health_Pickup => {
                self.cbits5.insert(flags::ContextBits5::VISITED_ANNUNA__UPPER_HALLWAY__BEHIND_PEDESTAL__HEALTH_PICKUP);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__UPPER_HALLWAY__BEHIND_PEDESTAL__HEALTH_PICKUP);
            }
            LocationId::Annuna__Filter_Teleporter__Door_Ledge__Shockwave_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__FILTER_TELEPORTER__DOOR_LEDGE__SHOCKWAVE_FLASK);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__FILTER_TELEPORTER__DOOR_LEDGE__SHOCKWAVE_FLASK);
            }
            LocationId::Annuna__Filter_Teleporter__Shaft_Bottom__Flask => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_ANNUNA__FILTER_TELEPORTER__SHAFT_BOTTOM__FLASK,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_ANNUNA__FILTER_TELEPORTER__SHAFT_BOTTOM__FLASK,
                );
            }
            LocationId::Annuna__Filter_Teleporter__Northeast_Cubby__Tablet => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_ANNUNA__FILTER_TELEPORTER__NORTHEAST_CUBBY__TABLET,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_ANNUNA__FILTER_TELEPORTER__NORTHEAST_CUBBY__TABLET,
                );
            }
            LocationId::Annuna__Spider_Room__Healthy_Corner__Health_Refill => {
                self.cbits5.insert(
                    flags::ContextBits5::VISITED_ANNUNA__SPIDER_ROOM__HEALTHY_CORNER__HEALTH_REFILL,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_ANNUNA__SPIDER_ROOM__HEALTHY_CORNER__HEALTH_REFILL,
                );
            }
            LocationId::Annuna__Twisty_Passages__Top__Tablet => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_ANNUNA__TWISTY_PASSAGES__TOP__TABLET);
            }
            LocationId::Annuna__Twisty_Passages__Northwest_Alcove__Refill => {
                self.cbits5.insert(
                    flags::ContextBits5::VISITED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL,
                );
            }
            LocationId::Annuna__West_Climb__Cache__Item => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_ANNUNA__WEST_CLIMB__CACHE__ITEM);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_ANNUNA__WEST_CLIMB__CACHE__ITEM);
            }
            LocationId::Annuna__Egg_Room__Second_Egg__Remote_Boomerang_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__EGG_ROOM__SECOND_EGG__REMOTE_BOOMERANG_FLASK);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__EGG_ROOM__SECOND_EGG__REMOTE_BOOMERANG_FLASK);
            }
            LocationId::Annuna__Egg_Room__Cache__Flask => {
                self.cbits4
                    .insert(flags::ContextBits4::VISITED_ANNUNA__EGG_ROOM__CACHE__FLASK);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_ANNUNA__EGG_ROOM__CACHE__FLASK);
            }
            LocationId::Annuna__Egg_Room__Cache__Shockwave_Flask => {
                self.cbits4
                    .insert(flags::ContextBits4::VISITED_ANNUNA__EGG_ROOM__CACHE__SHOCKWAVE_FLASK);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_ANNUNA__EGG_ROOM__CACHE__SHOCKWAVE_FLASK);
            }
            LocationId::Annuna__Egg_Room__Corner_Platform__Shockwave_from_Outside => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__EGG_ROOM__CORNER_PLATFORM__SHOCKWAVE_FROM_OUTSIDE);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__EGG_ROOM__CORNER_PLATFORM__SHOCKWAVE_FROM_OUTSIDE);
            }
            LocationId::Annuna__Egg_Room__Corner_Platform__Remote_Boomerang_Flask => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__EGG_ROOM__CORNER_PLATFORM__REMOTE_BOOMERANG_FLASK);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__EGG_ROOM__CORNER_PLATFORM__REMOTE_BOOMERANG_FLASK);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Wall_as_Indra => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SIUNA_STORAGE__WALL_RIGHT__BREAK_WALL_AS_INDRA);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__SIUNA_STORAGE__WALL_RIGHT__BREAK_WALL_AS_INDRA);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Through_Wall_as_Drone => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SIUNA_STORAGE__WALL_RIGHT__BREAK_THROUGH_WALL_AS_DRONE);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__SIUNA_STORAGE__WALL_RIGHT__BREAK_THROUGH_WALL_AS_DRONE);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Through_Wall_with_Mist => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SIUNA_STORAGE__WALL_RIGHT__BREAK_THROUGH_WALL_WITH_MIST);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__SIUNA_STORAGE__WALL_RIGHT__BREAK_THROUGH_WALL_WITH_MIST);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Through_Wall_with_Mist_2 => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SIUNA_STORAGE__WALL_RIGHT__BREAK_THROUGH_WALL_WITH_MIST_2);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__SIUNA_STORAGE__WALL_RIGHT__BREAK_THROUGH_WALL_WITH_MIST_2);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Wall_as_Indra => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SIUNA_STORAGE__WALL_LEFT__BREAK_WALL_AS_INDRA);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__SIUNA_STORAGE__WALL_LEFT__BREAK_WALL_AS_INDRA);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Left__Distant_Urn => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_ANNUNA__SIUNA_STORAGE__WALL_LEFT__DISTANT_URN,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_ANNUNA__SIUNA_STORAGE__WALL_LEFT__DISTANT_URN,
                );
            }
            LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Through_Wall_as_Drone => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SIUNA_STORAGE__WALL_LEFT__BREAK_THROUGH_WALL_AS_DRONE);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__SIUNA_STORAGE__WALL_LEFT__BREAK_THROUGH_WALL_AS_DRONE);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Through_Wall_with_Mist => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SIUNA_STORAGE__WALL_LEFT__BREAK_THROUGH_WALL_WITH_MIST);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__SIUNA_STORAGE__WALL_LEFT__BREAK_THROUGH_WALL_WITH_MIST);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Through_Wall_with_Mist_2 => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SIUNA_STORAGE__WALL_LEFT__BREAK_THROUGH_WALL_WITH_MIST_2);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__SIUNA_STORAGE__WALL_LEFT__BREAK_THROUGH_WALL_WITH_MIST_2);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Left__Distant_Urn_Fast_Travel => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SIUNA_STORAGE__WALL_LEFT__DISTANT_URN_FAST_TRAVEL);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__SIUNA_STORAGE__WALL_LEFT__DISTANT_URN_FAST_TRAVEL);
            }
            LocationId::Annuna__Siuna_Storage__Within_Range__Remote_Urn => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_ANNUNA__SIUNA_STORAGE__WITHIN_RANGE__REMOTE_URN,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_ANNUNA__SIUNA_STORAGE__WITHIN_RANGE__REMOTE_URN,
                );
            }
            LocationId::Annuna__Siuna_Storage__Within_Range__Remote_Urn_Fast_Travel => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__SIUNA_STORAGE__WITHIN_RANGE__REMOTE_URN_FAST_TRAVEL);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_ANNUNA__SIUNA_STORAGE__WITHIN_RANGE__REMOTE_URN_FAST_TRAVEL);
            }
            LocationId::Annuna__Siuna_Storage__Cache__Urn => {
                self.cbits4
                    .insert(flags::ContextBits4::VISITED_ANNUNA__SIUNA_STORAGE__CACHE__URN);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_ANNUNA__SIUNA_STORAGE__CACHE__URN);
            }
            LocationId::Annuna__Siuna_Storage__Cache__Urn_Collection_Skip => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_ANNUNA__SIUNA_STORAGE__CACHE__URN_COLLECTION_SKIP,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_ANNUNA__SIUNA_STORAGE__CACHE__URN_COLLECTION_SKIP,
                );
            }
            LocationId::Annuna__Siuna_Storage__Cache__Urn_Fast_Travel => {
                self.cbits4.insert(
                    flags::ContextBits4::VISITED_ANNUNA__SIUNA_STORAGE__CACHE__URN_FAST_TRAVEL,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_ANNUNA__SIUNA_STORAGE__CACHE__URN_FAST_TRAVEL,
                );
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Boss_Fight => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT);
                self.cbits8.insert(flags::ContextBits8::SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__BOSS_FIGHT);
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Fill_It_Up => {
                self.cbits4.insert(flags::ContextBits4::VISITED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP);
                self.cbits8.insert(flags::ContextBits8::SKIPPED_ANNUNA__APOCALYPSE__CENTER_SCAFFOLD_WEST__FILL_IT_UP);
            }
            LocationId::Antarctica__Shed__Interior__Shelf => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_ANTARCTICA__SHED__INTERIOR__SHELF);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_ANTARCTICA__SHED__INTERIOR__SHELF);
            }
            LocationId::Antarctica__Building_2__Behind_Boxes__Note => {
                self.cbits5.insert(
                    flags::ContextBits5::VISITED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_ANTARCTICA__BUILDING_2__BEHIND_BOXES__NOTE,
                );
            }
            LocationId::Antarctica__Power_Room__Switch__Flip => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_ANTARCTICA__POWER_ROOM__SWITCH__FLIP);
            }
            LocationId::Ebih__Base_Camp__Left_Platform_Moved__Item_From_The_Side => {
                self.cbits5.insert(flags::ContextBits5::VISITED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE);
                self.cbits9.insert(flags::ContextBits9::SKIPPED_EBIH__BASE_CAMP__LEFT_PLATFORM_MOVED__ITEM_FROM_THE_SIDE);
            }
            LocationId::Ebih__Base_Camp__Top_Platform__Item => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_EBIH__BASE_CAMP__TOP_PLATFORM__ITEM);
            }
            LocationId::Ebih__By_Garage__Crawlspace__Fragment => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT);
            }
            LocationId::Ebih__Grid_25_10_12__East_10__Remote_Bush => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH);
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_EBIH__GRID_25_10_12__EAST_10__REMOTE_BUSH,
                );
            }
            LocationId::Ebih__Grid_25_10_12__Hidden_Bush__Behind_Bush => {
                self.cbits5.insert(
                    flags::ContextBits5::VISITED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_EBIH__GRID_25_10_12__HIDDEN_BUSH__BEHIND_BUSH,
                );
            }
            LocationId::Ebih__Waterfall__Alcove_Right__Block_Right => {
                self.cbits5.insert(
                    flags::ContextBits5::VISITED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_EBIH__WATERFALL__ALCOVE_RIGHT__BLOCK_RIGHT,
                );
            }
            LocationId::Ebih__Waterfall__Waterfall_Center_Center__Both_Blocks => {
                self.cbits5.insert(flags::ContextBits5::VISITED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS);
                self.cbits10.insert(flags::ContextBits10::SKIPPED_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS);
            }
            LocationId::Ebih__Waterfall__Alcove_Left__Block_Left => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_EBIH__WATERFALL__ALCOVE_LEFT__BLOCK_LEFT);
            }
            LocationId::Ebih__Waterfall__Alcove__Pedestal => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__WATERFALL__ALCOVE__PEDESTAL);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_EBIH__WATERFALL__ALCOVE__PEDESTAL);
            }
            LocationId::Ebih__Waterfall__Alcove__Block_Right => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_RIGHT);
            }
            LocationId::Ebih__Waterfall__Alcove__Block_Left => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_EBIH__WATERFALL__ALCOVE__BLOCK_LEFT);
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Wall => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_WALL);
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Through_Wall => {
                self.cbits5.insert(
                    flags::ContextBits5::VISITED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_EBIH__WATERFALL__WALL_RIGHT__BREAK_THROUGH_WALL,
                );
            }
            LocationId::Ebih__Waterfall__Wall_Left__Break_Wall => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_WALL);
            }
            LocationId::Ebih__Waterfall__Wall_Left__Break_Through_Wall => {
                self.cbits5.insert(
                    flags::ContextBits5::VISITED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_EBIH__WATERFALL__WALL_LEFT__BREAK_THROUGH_WALL,
                );
            }
            LocationId::Ebih__Ebih_West__Alcove__Tablet => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__EBIH_WEST__ALCOVE__TABLET);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_EBIH__EBIH_WEST__ALCOVE__TABLET);
            }
            LocationId::Ebih__Ebih_West__Block_Left__Break_Block => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_EBIH__EBIH_WEST__BLOCK_LEFT__BREAK_BLOCK);
            }
            LocationId::Ebih__Ebih_West__Block_Right__Break_Block => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK);
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_EBIH__EBIH_WEST__BLOCK_RIGHT__BREAK_BLOCK,
                );
            }
            LocationId::Ebih__Ebih_East__Lower_Moving_Platform__Remote_Urn => {
                self.cbits5.insert(
                    flags::ContextBits5::VISITED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_EBIH__EBIH_EAST__LOWER_MOVING_PLATFORM__REMOTE_URN,
                );
            }
            LocationId::Ebih__Ebih_East__Corner__Urn => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__EBIH_EAST__CORNER__URN);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_EBIH__EBIH_EAST__CORNER__URN);
            }
            LocationId::Ebih__Ebih_East__Dispenser__Vend => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__EBIH_EAST__DISPENSER__VEND);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_EBIH__EBIH_EAST__DISPENSER__VEND);
            }
            LocationId::Ebih__Ebih_East__East_Ledge__Note => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_EBIH__EBIH_EAST__EAST_LEDGE__NOTE);
            }
            LocationId::Ebih__Boss_Room__Boss__Hack_Alu => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__BOSS_ROOM__BOSS__HACK_ALU);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_EBIH__BOSS_ROOM__BOSS__HACK_ALU);
            }
            LocationId::Ebih__Boss_Room__Boss__Fight_Alu => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_EBIH__BOSS_ROOM__BOSS__FIGHT_ALU);
            }
            LocationId::Ebih__Boss_Room__Boss__Boss_Reward => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD);
            }
            LocationId::Ebih__Boss_Room__East_Ledge__Item => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM);
            }
            LocationId::Ebih__Drone_Room__Item__Urn => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__DRONE_ROOM__ITEM__URN);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN);
            }
            LocationId::Ebih__Drone_Room__Item__Urn_Collection_Skip => {
                self.cbits5.insert(
                    flags::ContextBits5::VISITED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_COLLECTION_SKIP,
                );
            }
            LocationId::Ebih__Drone_Room__Item__Urn_Fast_Travel => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL);
                self.cbits9
                    .insert(flags::ContextBits9::SKIPPED_EBIH__DRONE_ROOM__ITEM__URN_FAST_TRAVEL);
            }
            LocationId::Ebih__Drone_Room__Middle_Platform__Urn_Quick_Grab => {
                self.cbits5.insert(
                    flags::ContextBits5::VISITED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB,
                );
                self.cbits9.insert(
                    flags::ContextBits9::SKIPPED_EBIH__DRONE_ROOM__MIDDLE_PLATFORM__URN_QUICK_GRAB,
                );
            }
            LocationId::Ebih__Grid_25_2_6__Pit__Item => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__GRID_25_2_6__PIT__ITEM);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_EBIH__GRID_25_2_6__PIT__ITEM);
            }
            LocationId::Ebih__Grid_26_10_11__Ledge__Note => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_EBIH__GRID_26_10_11__LEDGE__NOTE);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_EBIH__GRID_26_10_11__LEDGE__NOTE);
            }
            LocationId::Ebih__Vertical_Interchange__Block_Cubby__Shockwave_Block => {
                self.cbits5.insert(flags::ContextBits5::VISITED_EBIH__VERTICAL_INTERCHANGE__BLOCK_CUBBY__SHOCKWAVE_BLOCK);
                self.cbits10.insert(flags::ContextBits10::SKIPPED_EBIH__VERTICAL_INTERCHANGE__BLOCK_CUBBY__SHOCKWAVE_BLOCK);
            }
            LocationId::Ebih__Vertical_Interchange__Switch__Activate_Switch => {
                self.cbits5.insert(flags::ContextBits5::VISITED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH);
                self.cbits10.insert(flags::ContextBits10::SKIPPED_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH);
            }
            LocationId::Filter__Core__Terminal_East__Authorize_Hammond => {
                self.cbits5.insert(
                    flags::ContextBits5::VISITED_FILTER__CORE__TERMINAL_EAST__AUTHORIZE_HAMMOND,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_FILTER__CORE__TERMINAL_EAST__AUTHORIZE_HAMMOND,
                );
            }
            LocationId::Giguna_Breach__Chimney__Cache__Flask => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK);
            }
            LocationId::Giguna_Breach__Cubby__Rocks__Health => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH);
            }
            LocationId::Giguna_Breach__Slingshot__Ravine__Urn => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN);
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Button__Open_Gate => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_BUTTON__OPEN_GATE,
                );
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Right__Remote_Button => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON);
                self.cbits10.insert(flags::ContextBits10::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__GATE_RIGHT__REMOTE_BUTTON);
            }
            LocationId::Giguna__Giguna_Northeast__Door__Remote_Flask => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__DOOR__REMOTE_FLASK,
                );
            }
            LocationId::Giguna__Giguna_Northeast__Vault__Item => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__GIGUNA_NORTHEAST__VAULT__ITEM);
            }
            LocationId::Giguna__Carnelian__Vault__Item => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_GIGUNA__CARNELIAN__VAULT__ITEM);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__CARNELIAN__VAULT__ITEM);
            }
            LocationId::Giguna__West_Caverns__Cache__Item => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__WEST_CAVERNS__CACHE__ITEM);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_GIGUNA__WEST_CAVERNS__CACHE__ITEM);
            }
            LocationId::Giguna__West_Caverns__Bush__Item => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__WEST_CAVERNS__BUSH__ITEM);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_GIGUNA__WEST_CAVERNS__BUSH__ITEM);
            }
            LocationId::Giguna__Wasteland__Door_Right__Health => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH);
            }
            LocationId::Giguna__Wasteland__Passage_East__Clear_Horizontal_Passage_Manually => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
                self.cbits10.insert(flags::ContextBits10::SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
            }
            LocationId::Giguna__Wasteland__Passage_East__Mist_through_Horizontal_Passage => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE);
                self.cbits10.insert(flags::ContextBits10::SKIPPED_GIGUNA__WASTELAND__PASSAGE_EAST__MIST_THROUGH_HORIZONTAL_PASSAGE);
            }
            LocationId::Giguna__Wasteland__Passage_Cache__Clear_Horizontal_Passage_Manually => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
                self.cbits10.insert(flags::ContextBits10::SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__CLEAR_HORIZONTAL_PASSAGE_MANUALLY);
            }
            LocationId::Giguna__Wasteland__Passage_Cache__Mist_through_Horizontal_Passage => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE);
                self.cbits10.insert(flags::ContextBits10::SKIPPED_GIGUNA__WASTELAND__PASSAGE_CACHE__MIST_THROUGH_HORIZONTAL_PASSAGE);
            }
            LocationId::Giguna__Giguna_Base__Ruin__Item => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__GIGUNA_BASE__RUIN__ITEM);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__GIGUNA_BASE__RUIN__ITEM);
            }
            LocationId::Giguna__Giguna_Base__Table__News => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__GIGUNA_BASE__TABLE__NEWS);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__GIGUNA_BASE__TABLE__NEWS);
            }
            LocationId::Giguna__Ruins_East__Way_Up_High__Item => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__RUINS_EAST__WAY_UP_HIGH__ITEM);
            }
            LocationId::Giguna__Ruins_Center__Tablet__Item => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__RUINS_CENTER__TABLET__ITEM);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__RUINS_CENTER__TABLET__ITEM);
            }
            LocationId::Giguna__Ruins_Top__Small_Ledge__Shockwave_Flask => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_GIGUNA__RUINS_TOP__SMALL_LEDGE__SHOCKWAVE_FLASK,
                );
            }
            LocationId::Giguna__Ruins_Top__Flask__Flask => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__RUINS_TOP__FLASK__FLASK);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__RUINS_TOP__FLASK__FLASK);
            }
            LocationId::Giguna__West_Tower__Top__Tablet => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__WEST_TOWER__TOP__TABLET);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_GIGUNA__WEST_TOWER__TOP__TABLET);
            }
            LocationId::Giguna__Far_Corner__Grass__Obscured_Item => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM);
            }
            LocationId::Giguna__Helipad__Tablet_Ledge__Tablet => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET);
            }
            LocationId::Giguna__Clouds__Cache__Item => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_GIGUNA__CLOUDS__CACHE__ITEM);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__CLOUDS__CACHE__ITEM);
            }
            LocationId::Giguna__Lamassu__Deposit__Flask => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__LAMASSU__DEPOSIT__FLASK);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__LAMASSU__DEPOSIT__FLASK);
            }
            LocationId::Giguna__Dual_Path__Below_Left_Switch__Remote_Switch => {
                self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH);
                self.cbits10.insert(flags::ContextBits10::SKIPPED_GIGUNA__DUAL_PATH__BELOW_LEFT_SWITCH__REMOTE_SWITCH);
            }
            LocationId::Giguna__Dual_Path__Left_Switch__Hit_Switch => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_GIGUNA__DUAL_PATH__LEFT_SWITCH__HIT_SWITCH,
                );
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Break_Wall => {
                self.cbits5.insert(
                    flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__BREAK_WALL,
                );
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Mist_into_Wall => {
                self.cbits5.insert(
                    flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_GIGUNA__DUAL_PATH__BASE_OF_WALL__MIST_INTO_WALL,
                );
            }
            LocationId::Giguna__Dual_Path__Wall_Secret__Health => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH);
            }
            LocationId::Giguna__Dual_Path__Right_Switch__Hit_Switch => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_GIGUNA__DUAL_PATH__RIGHT_SWITCH__HIT_SWITCH,
                );
            }
            LocationId::Giguna__Dual_Path__Below_Right_Switch__Remote_Switch => {
                self.cbits5.insert(flags::ContextBits5::VISITED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH);
                self.cbits10.insert(flags::ContextBits10::SKIPPED_GIGUNA__DUAL_PATH__BELOW_RIGHT_SWITCH__REMOTE_SWITCH);
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Shockwave_Boulder => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__SHOCKWAVE_BOULDER,
                );
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Enter_Rock_as_Mist => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_GIGUNA__HARD_ROCK__ROCK_RIGHT__ENTER_ROCK_AS_MIST,
                );
            }
            LocationId::Giguna__Hard_Rock__Rock_Center__Tablet => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET);
            }
            LocationId::Giguna__Hard_Rock__Rock_Left__Shockwave_Boulder => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__SHOCKWAVE_BOULDER,
                );
            }
            LocationId::Giguna__Hard_Rock__Rock_Left__Enter_Rock_as_Mist => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_GIGUNA__HARD_ROCK__ROCK_LEFT__ENTER_ROCK_AS_MIST,
                );
            }
            LocationId::Giguna__East_Caverns__Hidden_Passage_Center__Hidden_Flask => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK);
                self.cbits10.insert(flags::ContextBits10::SKIPPED_GIGUNA__EAST_CAVERNS__HIDDEN_PASSAGE_CENTER__HIDDEN_FLASK);
            }
            LocationId::Giguna__Gateway__Block_Left__Shockwave => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__GATEWAY__BLOCK_LEFT__SHOCKWAVE);
            }
            LocationId::Giguna__Gateway__Block_Right__Shockwave => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__GATEWAY__BLOCK_RIGHT__SHOCKWAVE);
            }
            LocationId::Giguna__Gateway__Flask_Ledge__Item => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__GATEWAY__FLASK_LEDGE__ITEM);
            }
            LocationId::Giguna__Gateway__Button__Hit_Switch => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH);
            }
            LocationId::Giguna__Antechamber__Statue_Head__Tablet => {
                self.cbits5
                    .insert(flags::ContextBits5::VISITED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET);
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Hack_Gubi => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__HACK_GUBI,
                );
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Fight_Gubi => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__FIGHT_GUBI,
                );
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Boss_Reward => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD,
                );
                self.cbits10.insert(
                    flags::ContextBits10::SKIPPED_GIGUNA__GUBI_LAIR__CENTER_PLATFORM__BOSS_REWARD,
                );
            }
            LocationId::Giguna__Gubi_Lair__Pedestal__Axe => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE);
                self.cbits10
                    .insert(flags::ContextBits10::SKIPPED_GIGUNA__GUBI_LAIR__PEDESTAL__AXE);
            }
            LocationId::Glacier_Breach__Grate_Work__Grate_Interior__Item => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GLACIER_BREACH__GRATE_WORK__GRATE_INTERIOR__ITEM,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_GLACIER_BREACH__GRATE_WORK__GRATE_INTERIOR__ITEM,
                );
            }
            LocationId::Glacier_Breach__Control__Upper_Corner__Control_Enemy => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GLACIER_BREACH__CONTROL__UPPER_CORNER__CONTROL_ENEMY);
                self.cbits11.insert(flags::ContextBits11::SKIPPED_GLACIER_BREACH__CONTROL__UPPER_CORNER__CONTROL_ENEMY);
            }
            LocationId::Glacier_Breach__Control__Upper_Corner__Control_Enemy_And_Jump => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GLACIER_BREACH__CONTROL__UPPER_CORNER__CONTROL_ENEMY_AND_JUMP);
                self.cbits11.insert(flags::ContextBits11::SKIPPED_GLACIER_BREACH__CONTROL__UPPER_CORNER__CONTROL_ENEMY_AND_JUMP);
            }
            LocationId::Glacier__Compass_Room__Center__Table => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GLACIER__COMPASS_ROOM__CENTER__TABLE);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_GLACIER__COMPASS_ROOM__CENTER__TABLE);
            }
            LocationId::Glacier__The_Big_Drop__West_14__Break_Rock => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_GLACIER__THE_BIG_DROP__WEST_14__BREAK_ROCK,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_GLACIER__THE_BIG_DROP__WEST_14__BREAK_ROCK,
                );
            }
            LocationId::Glacier__The_Big_Drop__West_14__Mist_Through => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_GLACIER__THE_BIG_DROP__WEST_14__MIST_THROUGH,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_GLACIER__THE_BIG_DROP__WEST_14__MIST_THROUGH,
                );
            }
            LocationId::Glacier__The_Big_Drop__West_14__Mist_Through_Faster => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GLACIER__THE_BIG_DROP__WEST_14__MIST_THROUGH_FASTER);
                self.cbits11.insert(flags::ContextBits11::SKIPPED_GLACIER__THE_BIG_DROP__WEST_14__MIST_THROUGH_FASTER);
            }
            LocationId::Glacier__The_Big_Drop__Breakable_Rock_Right__Break_Rock => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GLACIER__THE_BIG_DROP__BREAKABLE_ROCK_RIGHT__BREAK_ROCK);
                self.cbits11.insert(flags::ContextBits11::SKIPPED_GLACIER__THE_BIG_DROP__BREAKABLE_ROCK_RIGHT__BREAK_ROCK);
            }
            LocationId::Glacier__The_Big_Drop__Breakable_Rock_Right__Mist_Through => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GLACIER__THE_BIG_DROP__BREAKABLE_ROCK_RIGHT__MIST_THROUGH);
                self.cbits11.insert(flags::ContextBits11::SKIPPED_GLACIER__THE_BIG_DROP__BREAKABLE_ROCK_RIGHT__MIST_THROUGH);
            }
            LocationId::Glacier__The_Big_Drop__Breakable_Rock_Right__Mist_Through_Faster => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GLACIER__THE_BIG_DROP__BREAKABLE_ROCK_RIGHT__MIST_THROUGH_FASTER);
                self.cbits11.insert(flags::ContextBits11::SKIPPED_GLACIER__THE_BIG_DROP__BREAKABLE_ROCK_RIGHT__MIST_THROUGH_FASTER);
            }
            LocationId::Glacier__Sea_Burial__Collapsing_Ceiling__Drown => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GLACIER__SEA_BURIAL__COLLAPSING_CEILING__DROWN,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_GLACIER__SEA_BURIAL__COLLAPSING_CEILING__DROWN,
                );
            }
            LocationId::Glacier__Sea_Burial__Deep_Cache__Health => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GLACIER__SEA_BURIAL__DEEP_CACHE__HEALTH);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_GLACIER__SEA_BURIAL__DEEP_CACHE__HEALTH);
            }
            LocationId::Glacier__Sea_Burial__Breakable_Rock_Left__Break_Rock => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GLACIER__SEA_BURIAL__BREAKABLE_ROCK_LEFT__BREAK_ROCK);
                self.cbits11.insert(flags::ContextBits11::SKIPPED_GLACIER__SEA_BURIAL__BREAKABLE_ROCK_LEFT__BREAK_ROCK);
            }
            LocationId::Glacier__Sea_Burial__Breakable_Rock_Left__Mist_Through => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GLACIER__SEA_BURIAL__BREAKABLE_ROCK_LEFT__MIST_THROUGH);
                self.cbits11.insert(flags::ContextBits11::SKIPPED_GLACIER__SEA_BURIAL__BREAKABLE_ROCK_LEFT__MIST_THROUGH);
            }
            LocationId::Glacier__Sea_Burial__Breakable_Rock_Left__Mist_Through_Faster => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GLACIER__SEA_BURIAL__BREAKABLE_ROCK_LEFT__MIST_THROUGH_FASTER);
                self.cbits11.insert(flags::ContextBits11::SKIPPED_GLACIER__SEA_BURIAL__BREAKABLE_ROCK_LEFT__MIST_THROUGH_FASTER);
            }
            LocationId::Glacier__Sea_Burial__Breakable_Rock_Right__Break_Rock_while_Jumping => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GLACIER__SEA_BURIAL__BREAKABLE_ROCK_RIGHT__BREAK_ROCK_WHILE_JUMPING);
                self.cbits11.insert(flags::ContextBits11::SKIPPED_GLACIER__SEA_BURIAL__BREAKABLE_ROCK_RIGHT__BREAK_ROCK_WHILE_JUMPING);
            }
            LocationId::Glacier__Sea_Burial__Breakable_Rock_Right__Mist_Through => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GLACIER__SEA_BURIAL__BREAKABLE_ROCK_RIGHT__MIST_THROUGH);
                self.cbits11.insert(flags::ContextBits11::SKIPPED_GLACIER__SEA_BURIAL__BREAKABLE_ROCK_RIGHT__MIST_THROUGH);
            }
            LocationId::Glacier__Sea_Burial__Breakable_Rock_Right__Mist_Through_Faster => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GLACIER__SEA_BURIAL__BREAKABLE_ROCK_RIGHT__MIST_THROUGH_FASTER);
                self.cbits11.insert(flags::ContextBits11::SKIPPED_GLACIER__SEA_BURIAL__BREAKABLE_ROCK_RIGHT__MIST_THROUGH_FASTER);
            }
            LocationId::Glacier__Sea_Burial__Inside_the_Grate__Notes => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GLACIER__SEA_BURIAL__INSIDE_THE_GRATE__NOTES,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_GLACIER__SEA_BURIAL__INSIDE_THE_GRATE__NOTES,
                );
            }
            LocationId::Glacier__Vertical_Room__Under_Switch__Switch => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH,
                );
            }
            LocationId::Glacier__Vertical_Room__Peak__Flask => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_GLACIER__VERTICAL_ROOM__PEAK__FLASK);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_GLACIER__VERTICAL_ROOM__PEAK__FLASK);
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Item => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM);
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Switch => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH);
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH,
                );
            }
            LocationId::Glacier__Ledge_Grab_Room__Cliff_Bottom__Quick_Grab => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB,
                );
                self.cbits11.insert(flags::ContextBits11::SKIPPED_GLACIER__LEDGE_GRAB_ROOM__CLIFF_BOTTOM__QUICK_GRAB);
            }
            LocationId::Glacier__Ledge_Grab_Room__Pedestal__Item => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_GLACIER__LEDGE_GRAB_ROOM__PEDESTAL__ITEM);
            }
            LocationId::Glacier__Apocalypse_Entry__Grate_Ledge__Escape => {
                self.cbits6.insert(
                    flags::ContextBits6::VISITED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_GLACIER__APOCALYPSE_ENTRY__GRATE_LEDGE__ESCAPE,
                );
            }
            LocationId::Glacier__Crystals__Top_Corner__Tablet => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GLACIER__CRYSTALS__TOP_CORNER__TABLET);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_GLACIER__CRYSTALS__TOP_CORNER__TABLET);
            }
            LocationId::Glacier__Crystals__Lower_Corner__Item => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GLACIER__CRYSTALS__LOWER_CORNER__ITEM);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_GLACIER__CRYSTALS__LOWER_CORNER__ITEM);
            }
            LocationId::Glacier__Hammonds_End__Hammond__Note => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GLACIER__HAMMONDS_END__HAMMOND__NOTE);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_GLACIER__HAMMONDS_END__HAMMOND__NOTE);
            }
            LocationId::Glacier__Hammonds_End__Corner__Quick_Note => {
                self.cbits6
                    .insert(flags::ContextBits6::VISITED_GLACIER__HAMMONDS_END__CORNER__QUICK_NOTE);
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_GLACIER__HAMMONDS_END__CORNER__QUICK_NOTE,
                );
            }
            LocationId::Glacier__Hammonds_End__Between_Center_Doors__Health => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GLACIER__HAMMONDS_END__BETWEEN_CENTER_DOORS__HEALTH);
                self.cbits11.insert(flags::ContextBits11::SKIPPED_GLACIER__HAMMONDS_END__BETWEEN_CENTER_DOORS__HEALTH);
            }
            LocationId::Interior__Bunker_Interior__Desk__Note => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_INTERIOR__BUNKER_INTERIOR__DESK__NOTE);
            }
            LocationId::Interior__Building_Interior__Entry__Remote_Urn => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__REMOTE_URN,
                );
            }
            LocationId::Interior__Building_Interior__Entry__Urn_Collection_Skip => {
                self.cbits7.insert(flags::ContextBits7::VISITED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP);
                self.cbits11.insert(flags::ContextBits11::SKIPPED_INTERIOR__BUILDING_INTERIOR__ENTRY__URN_COLLECTION_SKIP);
            }
            LocationId::Interior__Building_Interior__Corner__Urn => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_INTERIOR__BUILDING_INTERIOR__CORNER__URN);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_INTERIOR__BUILDING_INTERIOR__CORNER__URN);
            }
            LocationId::Interior__Tent_Interior__Desk__Note => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_INTERIOR__TENT_INTERIOR__DESK__NOTE);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_INTERIOR__TENT_INTERIOR__DESK__NOTE);
            }
            LocationId::Interior__Garage__Boxes__Under_Boxes => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_INTERIOR__GARAGE__BOXES__UNDER_BOXES);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_INTERIOR__GARAGE__BOXES__UNDER_BOXES);
            }
            LocationId::Interior__Ebih_Cave__Entry__Health => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_INTERIOR__EBIH_CAVE__ENTRY__HEALTH);
            }
            LocationId::Interior__Outpost_Interior__Bookshelf__Note => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE,
                );
            }
            LocationId::Irikar_Breach__Gauntlet__Hidden_Path_Reward__Item => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_IRIKAR_BREACH__GAUNTLET__HIDDEN_PATH_REWARD__ITEM,
                );
            }
            LocationId::Irikar_Breach__Hover_Room__Bottom__Item => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM);
            }
            LocationId::Irikar_Breach__Worm_Rave__Corner__Item => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM);
            }
            LocationId::Irikar__Hub__Sat_Tower_Top_Ledge__Tablet => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET);
            }
            LocationId::Irikar__Hub__Dagger_Altar__Weapon => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_IRIKAR__HUB__DAGGER_ALTAR__WEAPON);
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Wall => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL,
                );
                self.cbits11.insert(flags::ContextBits11::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__SHOCKWAVE_WALL);
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Mist_into_Wall => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL,
                );
                self.cbits11.insert(flags::ContextBits11::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_BY_WALL__MIST_INTO_WALL);
            }
            LocationId::Irikar__Hub__Royal_Storage_in_Wall__Item => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_IRIKAR__HUB__ROYAL_STORAGE_IN_WALL__ITEM);
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN);
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Collection_Skip => {
                self.cbits7.insert(flags::ContextBits7::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP);
                self.cbits11.insert(flags::ContextBits11::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_COLLECTION_SKIP);
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Fast_Travel => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL,
                );
                self.cbits11.insert(flags::ContextBits11::SKIPPED_IRIKAR__SIGHT_ROOM__ITEM_PEDESTAL__URN_FAST_TRAVEL);
            }
            LocationId::Irikar__Abandoned_Room__Corner_Core__Core => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE);
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE,
                );
            }
            LocationId::Irikar__Basement_Pipes__Left_Vertical_Pipe__Health_Pickup => {
                self.cbits7.insert(flags::ContextBits7::VISITED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP);
                self.cbits11.insert(flags::ContextBits11::SKIPPED_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP);
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Defeat_Gudam => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__DEFEAT_GUDAM,
                );
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Shockwave_Gudam => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__SHOCKWAVE_GUDAM,
                );
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Boss_Reward => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_IRIKAR__BOSS_ROOM__BULLS_FEET__BOSS_REWARD,
                );
            }
            LocationId::Irikar__Boss_Room__Healthy_Rooftop__Health => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH,
                );
            }
            LocationId::Irikar__East_Rooftops__Top_Rooftop__Tablet => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET,
                );
            }
            LocationId::Irikar__Lamassu__Desk__Item => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_IRIKAR__LAMASSU__DESK__ITEM);
                self.cbits11
                    .insert(flags::ContextBits11::SKIPPED_IRIKAR__LAMASSU__DESK__ITEM);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_1 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1,
                );
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_2 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2,
                );
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_3 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3,
                );
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_4 => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4,
                );
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_5 => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5,
                );
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Mist_Upgrade => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE,
                );
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_1 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1,
                );
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_2 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2,
                );
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_3 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3,
                );
                self.cbits11.insert(
                    flags::ContextBits11::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3,
                );
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_1 => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1);
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1,
                );
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_2 => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2);
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2,
                );
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_3 => {
                self.cbits7
                    .insert(flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3);
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3,
                );
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_1 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1,
                );
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_2 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2,
                );
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_3 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3,
                );
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_1 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1,
                );
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_2 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2,
                );
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_3 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3,
                );
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_1 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1,
                );
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_2 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2,
                );
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_3 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3,
                );
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_1 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1,
                );
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_2 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2,
                );
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_3 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3,
                );
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_1 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1,
                );
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_2 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2,
                );
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_1 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1,
                );
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_2 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2,
                );
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_3 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3,
                );
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_1 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1,
                );
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_2 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2,
                );
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_3 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3,
                );
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_1 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1,
                );
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_2 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2,
                );
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_3 => {
                self.cbits7.insert(
                    flags::ContextBits7::VISITED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3,
                );
            }
            LocationId::Uhrum__West_Entrance__Inner_Dais__Item => {
                self.cbits8
                    .insert(flags::ContextBits8::VISITED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM);
                self.cbits12
                    .insert(flags::ContextBits12::SKIPPED_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM);
            }
            LocationId::Uhrum__West_Entrance__Gate_Switch__Open_Gate => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE,
                );
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_West__Mist_through_Wall => {
                self.cbits8.insert(flags::ContextBits8::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL);
                self.cbits13.insert(flags::ContextBits13::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_WEST__MIST_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Charge_through_Wall => {
                self.cbits8.insert(flags::ContextBits8::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL);
                self.cbits13.insert(flags::ContextBits13::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__CHARGE_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Spin_through_Wall => {
                self.cbits8.insert(flags::ContextBits8::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL);
                self.cbits13.insert(flags::ContextBits13::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__SPIN_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_East__Mist_through_Wall => {
                self.cbits8.insert(flags::ContextBits8::VISITED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL);
                self.cbits13.insert(flags::ContextBits13::SKIPPED_UHRUM__WEST_ENTRANCE__UPPER_WALL_EAST__MIST_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Charge_through_Wall => {
                self.cbits8.insert(flags::ContextBits8::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL);
                self.cbits12.insert(flags::ContextBits12::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__CHARGE_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Spin_through_Wall => {
                self.cbits8.insert(flags::ContextBits8::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL);
                self.cbits12.insert(flags::ContextBits12::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__SPIN_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Mist_through_Wall => {
                self.cbits8.insert(flags::ContextBits8::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL);
                self.cbits12.insert(flags::ContextBits12::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_WEST__MIST_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Charge_through_Wall => {
                self.cbits8.insert(flags::ContextBits8::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL);
                self.cbits12.insert(flags::ContextBits12::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__CHARGE_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Spin_through_Wall => {
                self.cbits8.insert(flags::ContextBits8::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL);
                self.cbits12.insert(flags::ContextBits12::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__SPIN_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_East__Mist_through_Wall => {
                self.cbits8.insert(flags::ContextBits8::VISITED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL);
                self.cbits12.insert(flags::ContextBits12::SKIPPED_UHRUM__WEST_ENTRANCE__LOWER_WALL_EAST__MIST_THROUGH_WALL);
            }
            LocationId::Uhrum__West_Entrance__Sand__Refill => {
                self.cbits8
                    .insert(flags::ContextBits8::VISITED_UHRUM__WEST_ENTRANCE__SAND__REFILL);
                self.cbits12
                    .insert(flags::ContextBits12::SKIPPED_UHRUM__WEST_ENTRANCE__SAND__REFILL);
            }
            LocationId::Uhrum__Siege_Corridor__Western_Cache__Core => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE,
                );
            }
            LocationId::Uhrum__Siege_Corridor__Center_Box__Box => {
                self.cbits8
                    .insert(flags::ContextBits8::VISITED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX);
                self.cbits12
                    .insert(flags::ContextBits12::SKIPPED_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX);
            }
            LocationId::Uhrum__Siege_Corridor__Upper_Rock_Item__Urn => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_UHRUM__SIEGE_CORRIDOR__UPPER_ROCK_ITEM__URN,
                );
            }
            LocationId::Uhrum__Siege_Corridor__Pond__Item => {
                self.cbits8
                    .insert(flags::ContextBits8::VISITED_UHRUM__SIEGE_CORRIDOR__POND__ITEM);
                self.cbits12
                    .insert(flags::ContextBits12::SKIPPED_UHRUM__SIEGE_CORRIDOR__POND__ITEM);
            }
            LocationId::Uhrum__Waterfalls__Ceiling_Cache__Flask => {
                self.cbits8
                    .insert(flags::ContextBits8::VISITED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK);
                self.cbits12
                    .insert(flags::ContextBits12::SKIPPED_UHRUM__WATERFALLS__CEILING_CACHE__FLASK);
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Charge_through_Wall => {
                self.cbits8.insert(flags::ContextBits8::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL);
                self.cbits12.insert(flags::ContextBits12::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__CHARGE_THROUGH_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Spin_through_Wall => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL,
                );
                self.cbits12.insert(flags::ContextBits12::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__SPIN_THROUGH_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Mist_through_Wall => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL,
                );
                self.cbits12.insert(flags::ContextBits12::SKIPPED_UHRUM__WATERFALLS__BARRIER_WEST__MIST_THROUGH_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Charge_through_Wall => {
                self.cbits8.insert(flags::ContextBits8::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL);
                self.cbits12.insert(flags::ContextBits12::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__CHARGE_THROUGH_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Spin_through_Wall => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL,
                );
                self.cbits12.insert(flags::ContextBits12::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__SPIN_THROUGH_WALL);
            }
            LocationId::Uhrum__Waterfalls__Barrier_East__Mist_through_Wall => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL,
                );
                self.cbits12.insert(flags::ContextBits12::SKIPPED_UHRUM__WATERFALLS__BARRIER_EAST__MIST_THROUGH_WALL);
            }
            LocationId::Uhrum__Waterfalls__Below_Block__Shockwave_Block => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_UHRUM__WATERFALLS__BELOW_BLOCK__SHOCKWAVE_BLOCK,
                );
            }
            LocationId::Uhrum__Waterfalls__Above_Block__Block => {
                self.cbits8
                    .insert(flags::ContextBits8::VISITED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK);
                self.cbits12
                    .insert(flags::ContextBits12::SKIPPED_UHRUM__WATERFALLS__ABOVE_BLOCK__BLOCK);
            }
            LocationId::Uhrum__Waterfalls__East_26__Block => {
                self.cbits8
                    .insert(flags::ContextBits8::VISITED_UHRUM__WATERFALLS__EAST_26__BLOCK);
                self.cbits12
                    .insert(flags::ContextBits12::SKIPPED_UHRUM__WATERFALLS__EAST_26__BLOCK);
            }
            LocationId::Uhrum__Waterfalls__West_Water_Nook__Tablet => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET,
                );
            }
            LocationId::Uhrum__Annuna_Corridor__Upper_Trees__Remote_Urn => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_UHRUM__ANNUNA_CORRIDOR__UPPER_TREES__REMOTE_URN,
                );
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn => {
                self.cbits8
                    .insert(flags::ContextBits8::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN);
                self.cbits12
                    .insert(flags::ContextBits12::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN);
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Collection_Skip => {
                self.cbits8.insert(flags::ContextBits8::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP);
                self.cbits12.insert(flags::ContextBits12::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_COLLECTION_SKIP);
            }
            LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Fast_Travel => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_UHRUM__ANNUNA_CORRIDOR__PEDESTAL__URN_FAST_TRAVEL,
                );
            }
            LocationId::Uhrum__Annuna_Corridor__Block_West__Dislodge_Block => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK,
                );
                self.cbits12.insert(flags::ContextBits12::SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_WEST__DISLODGE_BLOCK);
            }
            LocationId::Uhrum__Annuna_Corridor__Block_East__Dislodge_Block => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK,
                );
                self.cbits12.insert(flags::ContextBits12::SKIPPED_UHRUM__ANNUNA_CORRIDOR__BLOCK_EAST__DISLODGE_BLOCK);
            }
            LocationId::Uhrum__Annuna_Corridor__East_Cubby__Tablet => {
                self.cbits8.insert(
                    flags::ContextBits8::VISITED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET,
                );
                self.cbits12.insert(
                    flags::ContextBits12::SKIPPED_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET,
                );
            }
            LocationId::Uhrum__Annuna_Corridor__Statue__Item => {
                self.cbits8
                    .insert(flags::ContextBits8::VISITED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM);
                self.cbits12
                    .insert(flags::ContextBits12::SKIPPED_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM);
            }
        }
    }

    fn observe_collect(&mut self, ctx: &Context, item: Item, world: &World) {
        match item {
            Item::Amashilama => rules::observe_action_save_set_glacier_gt_revival_gt_save_point(ctx, world, self),
            Item::Anuman => rules::observe_action_indra_set_invoke_default(ctx, world, self),
            Item::Flask => rules::observe_action_flasks_incr_1(ctx, world, self),
            Item::Big_Flask => rules::observe_action_flasks_incr_2(ctx, world, self),
            Item::Infect => rules::observe_action_invoke_refill_energy(ctx, world, self),
            Item::Health_Fragment => rules::observe_action_invoke_refill_energy(ctx, world, self),
            Item::Health_Node => rules::observe_action_invoke_refill_energy(ctx, world, self),
            Item::Power_Core => rules::observe_action_refills_incr_1(ctx, world, self),
            Item::Amagi_Stronghold_Wall_And_Boulder_1 => rules::observe_action_invoke_skip__amagi_gt_west_lake_gt_stronghold_ceiling_left_gt_knock_down_left_boulder_invoke_add_item__amagi_stronghold_wall_1_invoke_add_item__amagi_stronghold_boulder_1(ctx, world, self),
            Item::Amagi_Stronghold_Boulder_And_Wall_2 => rules::observe_action_invoke_skip__amagi_gt_west_lake_gt_stronghold_ceiling_right_gt_knock_down_right_boulder_invoke_add_item__amagi_stronghold_wall_2_invoke_add_item__amagi_stronghold_boulder_2(ctx, world, self),
            Item::Ebih_Waterfall_Both_Blocks => rules::observe_action_invoke_skip__ebih_gt_waterfall_gt_alcove_gt_block_left_invoke_skip__ebih_gt_waterfall_gt_alcove_gt_block_right_invoke_skip__ebih_gt_waterfall_gt_alcove_left_gt_block_left_invoke_skip__ebih_gt_waterfall_gt_alcove_right_gt_block_right_invoke_add_item__ebih_waterfall_block_right_invoke_add_item__ebih_waterfall_block_left(ctx, world, self),
            Item::Defeat_MUS_A_M20 => rules::observe_action_invoke_skip__amagi_gt_west_lake_gt_cavern_refill_station_gt_break_wall_invoke_add_item__amagi_dragon_eye_passage(ctx, world, self),
            _ => (),
        }
    }

    fn observe_on_entry(&mut self, cur: &Context, dest: SpotId, world: &World) {
        let area = get_area(dest);
        match area {
            AreaId::Amagi__East_Lake => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi__Grid_31_19 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi__Liru_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi__Main_Area => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi__West_Lake => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__East_Connector => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__East_Entrance => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Apocalypse => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Apocalypse_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Center_Climb => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Center_Save => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__East_Bridge => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__East_Climb => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__East_Hideout => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Egg_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Factory_Access => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Factory_Entrance => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Filter_Teleporter => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Final_Save => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Hidden_Portal => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Lamassu => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Lower_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Middle_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Mirror_Match => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Seals => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Siuna_Storage => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Sniper_Valley => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Spider_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Twisty_Passages => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Udug_Gate => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Upper_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Upper_Save => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Vertical_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__West_Bridge => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__West_Climb => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Base_Camp => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Boss_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__By_Garage => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Drone_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Ebih_East => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Ebih_West => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Gem_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Grid_21_2_6 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Grid_25_10_12 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Grid_25_2_6 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Grid_26_10_11 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Observation_Tower_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Vertical_Interchange => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Waterfall => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Filter__Core => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Filter__Entrance => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Filter__Exit => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Filter__Lower_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Filter__Scaffolding => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Filter__Upper_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Antechamber => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Breachable_Wall => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Carnelian => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Clouds => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Dual_Path => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__East_Caverns => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Far_Corner => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Gateway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Giguna_Base => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Giguna_Northeast => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Gubi_Lair => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Hard_Rock => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Helipad => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Labyrinth => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Labyrinth_East => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Lamassu => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Mural => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Ruins_Center => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Ruins_East => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Ruins_Top => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Ruins_West => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Separator => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Vertical_Interchange => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Wasteland => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__West_Caverns => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__West_Tower => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Antechamber => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Ascent => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Below_Chimney => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Central => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Chimney => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Cubby => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Fire_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Grid_14_10_11 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Peak => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Pink_Clouds => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Robopede => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Slingshot => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__SW_Save => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Apocalypse_Entry => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Boomerang_Antechamber => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Boomerang_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Compass_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Crystals => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Dock_Outside => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Grid_31_9_12 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Grid_32_7_10 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Grid_37_38_9 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Grid_39_40_7_9 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Grid_42_10 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Grid_43_10_11 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Hammonds_End => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Lake_Main_Entrance => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Ledge_Grab_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Peak => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Revival => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Sea_Burial => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Secret_Chamber => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__The_Big_Drop => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Vertical_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Angry_Lions => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Control => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Crystals => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Electric_Arena => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Empty_Space => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Floaters => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Grate_Work => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Guarded_Corridor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Hammonds_Breach => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Piano_Roll => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Save_and_Exit => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__South_Save => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Spidery_Connector => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Stable_Floor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Stacked_Enemies => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__West_Save => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Zappers => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Building_Interior => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Bunker_Interior => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Cave_Behind_Waterfall => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Ebih_Cave => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Garage => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Outpost_Interior => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Tent_Interior => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Abandoned_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Airy => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Basement_Pipes => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Basement_Portal => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Boss_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__East_Rooftops => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Empty_Foyer => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Hub => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Lamassu => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Midwest => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Sight_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Basement_Save => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Exit_Corridor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Flappy_Drone => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Four_way => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Gauntlet => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Hover_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Neon_Corridor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Sandy_Lair => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Save_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Uhrum_Connector => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Worm_Rave => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Menu__Breach_Map => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_save_last(cur, world, dest, self);
                }
            }
            AreaId::Menu__Kiengir_Map => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_save_last(cur, world, dest, self);
                }
            }
            AreaId::Menu__Warp_Only => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_save_last(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Annuna_Corridor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Artillery_Practice => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__East_Lake => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Glitchy_Corridor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Save_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Siege_Corridor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Tulip_Tower => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Waterfalls => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__West_Entrance => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            _ => (),
        }
        if cur.position != dest {
            match dest {
                _ => (),
            }
        }
    }

    fn update(&mut self, from: &Context, to: &Context) {
        if from.energy != to.energy {
            self.energy = self.energy.shift(to.energy - from.energy);
        }
        if from.flasks != to.flasks {
            self.flasks = self.flasks.shift(to.flasks - from.flasks);
        }
        if from.refills != to.refills {
            self.refills = self.refills.shift(to.refills - from.refills);
        }
        if from.big_flask != to.big_flask {
            self.big_flask = self.big_flask.shift(to.big_flask - from.big_flask);
        }
        if from.flask != to.flask {
            self.flask = self.flask.shift(to.flask - from.flask);
        }
        if from.health_fragment != to.health_fragment {
            self.health_fragment = self
                .health_fragment
                .shift(to.health_fragment - from.health_fragment);
        }
    }

    fn to_vec(&self, ctx: &Context) -> Vec<OneObservation> {
        let mut vec = Vec::with_capacity(self.fields_observed());
        if self.position {
            vec.push(OneObservation::Position(ctx.position));
        }
        match self.energy {
            IntegerObservation::Unknown => (),
            IntegerObservation::Exact => vec.push(OneObservation::EnergyExact(ctx.energy)),
            IntegerObservation::Eq(i) => vec.push(OneObservation::EnergyEq(i, ctx.energy == i)),
            IntegerObservation::Ge(i) => vec.push(OneObservation::EnergyGe(i, ctx.energy >= i)),
            IntegerObservation::Le(i) => vec.push(OneObservation::EnergyLe(i, ctx.energy <= i)),
            IntegerObservation::Range(lo, hi) => vec.push(OneObservation::EnergyRange(
                lo,
                hi,
                ctx.energy >= lo && ctx.energy <= hi,
            )),
        }
        match self.flasks {
            IntegerObservation::Unknown => (),
            IntegerObservation::Exact => vec.push(OneObservation::FlasksExact(ctx.flasks)),
            IntegerObservation::Eq(i) => vec.push(OneObservation::FlasksEq(i, ctx.flasks == i)),
            IntegerObservation::Ge(i) => vec.push(OneObservation::FlasksGe(i, ctx.flasks >= i)),
            IntegerObservation::Le(i) => vec.push(OneObservation::FlasksLe(i, ctx.flasks <= i)),
            IntegerObservation::Range(lo, hi) => vec.push(OneObservation::FlasksRange(
                lo,
                hi,
                ctx.flasks >= lo && ctx.flasks <= hi,
            )),
        }
        match self.refills {
            IntegerObservation::Unknown => (),
            IntegerObservation::Exact => vec.push(OneObservation::RefillsExact(ctx.refills)),
            IntegerObservation::Eq(i) => vec.push(OneObservation::RefillsEq(i, ctx.refills == i)),
            IntegerObservation::Ge(i) => vec.push(OneObservation::RefillsGe(i, ctx.refills >= i)),
            IntegerObservation::Le(i) => vec.push(OneObservation::RefillsLe(i, ctx.refills <= i)),
            IntegerObservation::Range(lo, hi) => vec.push(OneObservation::RefillsRange(
                lo,
                hi,
                ctx.refills >= lo && ctx.refills <= hi,
            )),
        }
        if self.mode {
            vec.push(OneObservation::Mode(ctx.mode));
        }
        if self.save {
            vec.push(OneObservation::Save(ctx.save));
        }
        if self.breach_save {
            vec.push(OneObservation::BreachSave(ctx.breach_save));
        }
        if self.indra {
            vec.push(OneObservation::Indra(ctx.indra));
        }
        if self.last {
            vec.push(OneObservation::Last(ctx.last));
        }
        if self.portal {
            vec.push(OneObservation::Portal(ctx.portal));
        }
        if self.prev_portal {
            vec.push(OneObservation::PrevPortal(ctx.prev_portal));
        }
        if self.prev_area {
            vec.push(OneObservation::PrevArea(ctx.prev_area));
        }
        match self.big_flask {
            IntegerObservation::Unknown => (),
            IntegerObservation::Exact => vec.push(OneObservation::BigFlaskExact(ctx.big_flask)),
            IntegerObservation::Eq(i) => {
                vec.push(OneObservation::BigFlaskEq(i, ctx.big_flask == i))
            }
            IntegerObservation::Ge(i) => {
                vec.push(OneObservation::BigFlaskGe(i, ctx.big_flask >= i))
            }
            IntegerObservation::Le(i) => {
                vec.push(OneObservation::BigFlaskLe(i, ctx.big_flask <= i))
            }
            IntegerObservation::Range(lo, hi) => vec.push(OneObservation::BigFlaskRange(
                lo,
                hi,
                ctx.big_flask >= lo && ctx.big_flask <= hi,
            )),
        }
        match self.flask {
            IntegerObservation::Unknown => (),
            IntegerObservation::Exact => vec.push(OneObservation::FlaskExact(ctx.flask)),
            IntegerObservation::Eq(i) => vec.push(OneObservation::FlaskEq(i, ctx.flask == i)),
            IntegerObservation::Ge(i) => vec.push(OneObservation::FlaskGe(i, ctx.flask >= i)),
            IntegerObservation::Le(i) => vec.push(OneObservation::FlaskLe(i, ctx.flask <= i)),
            IntegerObservation::Range(lo, hi) => vec.push(OneObservation::FlaskRange(
                lo,
                hi,
                ctx.flask >= lo && ctx.flask <= hi,
            )),
        }
        match self.health_fragment {
            IntegerObservation::Unknown => (),
            IntegerObservation::Exact => {
                vec.push(OneObservation::HealthFragmentExact(ctx.health_fragment))
            }
            IntegerObservation::Eq(i) => vec.push(OneObservation::HealthFragmentEq(
                i,
                ctx.health_fragment == i,
            )),
            IntegerObservation::Ge(i) => vec.push(OneObservation::HealthFragmentGe(
                i,
                ctx.health_fragment >= i,
            )),
            IntegerObservation::Le(i) => vec.push(OneObservation::HealthFragmentLe(
                i,
                ctx.health_fragment <= i,
            )),
            IntegerObservation::Range(lo, hi) => vec.push(OneObservation::HealthFragmentRange(
                lo,
                hi,
                ctx.health_fragment >= lo && ctx.health_fragment <= hi,
            )),
        }
        if let Some(mask) = self.cbits1 {
            vec.push(OneObservation::CBits1 {
                mask,
                result: mask & ctx.cbits1,
            });
        }
        if let Some(mask) = self.cbits2 {
            vec.push(OneObservation::CBits2 {
                mask,
                result: mask & ctx.cbits2,
            });
        }
        if let Some(mask) = self.cbits3 {
            vec.push(OneObservation::CBits3 {
                mask,
                result: mask & ctx.cbits3,
            });
        }
        if let Some(mask) = self.cbits4 {
            vec.push(OneObservation::CBits4 {
                mask,
                result: mask & ctx.cbits4,
            });
        }
        if let Some(mask) = self.cbits5 {
            vec.push(OneObservation::CBits5 {
                mask,
                result: mask & ctx.cbits5,
            });
        }
        if let Some(mask) = self.cbits6 {
            vec.push(OneObservation::CBits6 {
                mask,
                result: mask & ctx.cbits6,
            });
        }
        if let Some(mask) = self.cbits7 {
            vec.push(OneObservation::CBits7 {
                mask,
                result: mask & ctx.cbits7,
            });
        }
        if let Some(mask) = self.cbits8 {
            vec.push(OneObservation::CBits8 {
                mask,
                result: mask & ctx.cbits8,
            });
        }
        if let Some(mask) = self.cbits9 {
            vec.push(OneObservation::CBits9 {
                mask,
                result: mask & ctx.cbits9,
            });
        }
        if let Some(mask) = self.cbits10 {
            vec.push(OneObservation::CBits10 {
                mask,
                result: mask & ctx.cbits10,
            });
        }
        if let Some(mask) = self.cbits11 {
            vec.push(OneObservation::CBits11 {
                mask,
                result: mask & ctx.cbits11,
            });
        }
        if let Some(mask) = self.cbits12 {
            vec.push(OneObservation::CBits12 {
                mask,
                result: mask & ctx.cbits12,
            });
        }
        if let Some(mask) = self.cbits13 {
            vec.push(OneObservation::CBits13 {
                mask,
                result: mask & ctx.cbits13,
            });
        }
        vec
    }
}

impl FullObservation {
    fn fields_observed(&self) -> usize {
        let mut fields = 0;
        if self.position {
            fields += 1;
        }
        if self.energy != IntegerObservation::Unknown {
            fields += 1;
        }
        if self.flasks != IntegerObservation::Unknown {
            fields += 1;
        }
        if self.refills != IntegerObservation::Unknown {
            fields += 1;
        }
        if self.mode {
            fields += 1;
        }
        if self.save {
            fields += 1;
        }
        if self.breach_save {
            fields += 1;
        }
        if self.indra {
            fields += 1;
        }
        if self.last {
            fields += 1;
        }
        if self.portal {
            fields += 1;
        }
        if self.prev_portal {
            fields += 1;
        }
        if self.prev_area {
            fields += 1;
        }
        if self.big_flask != IntegerObservation::Unknown {
            fields += 1;
        }
        if self.flask != IntegerObservation::Unknown {
            fields += 1;
        }
        if self.health_fragment != IntegerObservation::Unknown {
            fields += 1;
        }
        if self.cbits1.is_some() {
            fields += 1;
        }
        if self.cbits2.is_some() {
            fields += 1;
        }
        if self.cbits3.is_some() {
            fields += 1;
        }
        if self.cbits4.is_some() {
            fields += 1;
        }
        if self.cbits5.is_some() {
            fields += 1;
        }
        if self.cbits6.is_some() {
            fields += 1;
        }
        if self.cbits7.is_some() {
            fields += 1;
        }
        if self.cbits8.is_some() {
            fields += 1;
        }
        if self.cbits9.is_some() {
            fields += 1;
        }
        if self.cbits10.is_some() {
            fields += 1;
        }
        if self.cbits11.is_some() {
            fields += 1;
        }
        if self.cbits12.is_some() {
            fields += 1;
        }
        if self.cbits13.is_some() {
            fields += 1;
        }
        fields
    }

    pub fn observe_position(&mut self) {
        self.position = true;
    }
    pub fn observe_energy(&mut self, obs: IntegerObservation<i16>) {
        if self.strict {
            self.energy = IntegerObservation::Exact;
        } else {
            self.energy = self.energy.combine(obs);
        }
    }
    pub fn observe_flasks(&mut self, obs: IntegerObservation<i8>) {
        if self.strict {
            self.flasks = IntegerObservation::Exact;
        } else {
            self.flasks = self.flasks.combine(obs);
        }
    }
    pub fn observe_refills(&mut self, obs: IntegerObservation<i8>) {
        if self.strict {
            self.refills = IntegerObservation::Exact;
        } else {
            self.refills = self.refills.combine(obs);
        }
    }
    pub fn observe_mode(&mut self) {
        self.mode = true;
    }
    pub fn observe_save(&mut self) {
        self.save = true;
    }
    pub fn observe_breach_save(&mut self) {
        self.breach_save = true;
    }
    pub fn observe_indra(&mut self) {
        self.indra = true;
    }
    pub fn observe_last(&mut self) {
        self.last = true;
    }
    pub fn observe_portal(&mut self) {
        self.portal = true;
    }
    pub fn observe_prev_portal(&mut self) {
        self.prev_portal = true;
    }
    pub fn observe_prev_area(&mut self) {
        self.prev_area = true;
    }
    pub fn observe_map__amagi_breach__east_entrance__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__AMAGI_BREACH__EAST_ENTRANCE__SAVE);
    }
    pub fn observe_map__amagi__main_area__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__AMAGI__MAIN_AREA__SAVE);
    }
    pub fn observe_map__amagi__west_lake__urn(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__AMAGI__WEST_LAKE__URN);
    }
    pub fn observe_map__amagi__east_lake__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__AMAGI__EAST_LAKE__SAVE);
    }
    pub fn observe_map__annuna__mirror_match__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE);
    }
    pub fn observe_map__annuna__west_bridge__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__ANNUNA__WEST_BRIDGE__SAVE);
    }
    pub fn observe_map__annuna__vertical_room__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE);
    }
    pub fn observe_map__annuna__factory_entrance__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__ANNUNA__FACTORY_ENTRANCE__SAVE);
    }
    pub fn observe_map__annuna__filter_teleporter__flask(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__ANNUNA__FILTER_TELEPORTER__FLASK);
    }
    pub fn observe_map__annuna__filter_teleporter__tablet(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__ANNUNA__FILTER_TELEPORTER__TABLET);
    }
    pub fn observe_map__annuna__filter_teleporter__spiders(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__ANNUNA__FILTER_TELEPORTER__SPIDERS);
    }
    pub fn observe_map__annuna__upper_save__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__ANNUNA__UPPER_SAVE__SAVE);
    }
    pub fn observe_map__annuna__center_save__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__ANNUNA__CENTER_SAVE__SAVE);
    }
    pub fn observe_map__annuna__siuna_storage__urn(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__ANNUNA__SIUNA_STORAGE__URN);
    }
    pub fn observe_map__annuna__final_save__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__ANNUNA__FINAL_SAVE__SAVE);
    }
    pub fn observe_map__ebih__base_camp__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__EBIH__BASE_CAMP__SAVE);
    }
    pub fn observe_map__ebih__waterfall__axe(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__EBIH__WATERFALL__AXE);
    }
    pub fn observe_map__ebih__ebih_west__mid_save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__MID_SAVE);
    }
    pub fn observe_map__ebih__ebih_west__upper_save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE);
    }
    pub fn observe_map__ebih__ebih_west__lower_save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE);
    }
    pub fn observe_map__ebih__drone_room__urn(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__EBIH__DRONE_ROOM__URN);
    }
    pub fn observe_map__giguna_breach__peak__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__GIGUNA_BREACH__PEAK__SAVE);
    }
    pub fn observe_map__giguna_breach__sw_save__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE);
    }
    pub fn observe_map__giguna__giguna_northeast__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);
    }
    pub fn observe_map__giguna__giguna_base__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE);
    }
    pub fn observe_map__giguna__ruins_west__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE);
    }
    pub fn observe_map__giguna__ruins_top__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);
    }
    pub fn observe_map__glacier_breach__south_save__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__GLACIER_BREACH__SOUTH_SAVE__SAVE);
    }
    pub fn observe_map__glacier_breach__west_save__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__GLACIER_BREACH__WEST_SAVE__SAVE);
    }
    pub fn observe_map__glacier_breach__guarded_corridor__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__GLACIER_BREACH__GUARDED_CORRIDOR__SAVE);
    }
    pub fn observe_map__glacier_breach__save_and_exit__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__GLACIER_BREACH__SAVE_AND_EXIT__SAVE);
    }
    pub fn observe_map__glacier_breach__hammonds_breach__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__GLACIER_BREACH__HAMMONDS_BREACH__SAVE);
    }
    pub fn observe_map__glacier__revival__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE);
    }
    pub fn observe_map__glacier__the_big_drop__bottom(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__GLACIER__THE_BIG_DROP__BOTTOM);
    }
    pub fn observe_map__glacier__crystals__lower(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__GLACIER__CRYSTALS__LOWER);
    }
    pub fn observe_map__glacier__hammonds_end__hammond(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__GLACIER__HAMMONDS_END__HAMMOND);
    }
    pub fn observe_map__irikar_breach__save_room__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE);
    }
    pub fn observe_map__irikar_breach__gauntlet__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE);
    }
    pub fn observe_map__irikar_breach__basement_save__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__IRIKAR_BREACH__BASEMENT_SAVE__SAVE);
    }
    pub fn observe_map__irikar__hub__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);
    }
    pub fn observe_map__irikar__sight_room__urn(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__IRIKAR__SIGHT_ROOM__URN);
    }
    pub fn observe_map__uhrum__west_entrance__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE);
    }
    pub fn observe_map__uhrum__save_room__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__UHRUM__SAVE_ROOM__SAVE);
    }
    pub fn observe_map__uhrum__annuna_corridor__save(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE);
    }
    pub fn observe_map__uhrum__annuna_corridor__urn(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__URN);
    }
    pub fn observe_glacier__ctx__hammonds_doors(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::GLACIER__CTX__HAMMONDS_DOORS);
    }
    pub fn observe_amagi__main_area__ctx__combo(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::AMAGI__MAIN_AREA__CTX__COMBO);
    }
    pub fn observe_annuna__west_bridge__ctx__doors_opened(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::ANNUNA__WEST_BRIDGE__CTX__DOORS_OPENED);
    }
    pub fn observe_annuna__east_bridge__ctx__combo(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::ANNUNA__EAST_BRIDGE__CTX__COMBO);
    }
    pub fn observe_annuna__vertical_room__ctx__door_opened(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::ANNUNA__VERTICAL_ROOM__CTX__DOOR_OPENED);
    }
    pub fn observe_annuna__west_climb__ctx__door_opened(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::ANNUNA__WEST_CLIMB__CTX__DOOR_OPENED);
    }
    pub fn observe_ebih__base_camp__ctx__left_platform_moved(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED);
    }
    pub fn observe_ebih__grid_25_10_12__ctx__door_open(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::EBIH__GRID_25_10_12__CTX__DOOR_OPEN);
    }
    pub fn observe_ebih__waterfall__ctx__west_door_open(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::EBIH__WATERFALL__CTX__WEST_DOOR_OPEN);
    }
    pub fn observe_ebih__ebih_west__ctx__door_open(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::EBIH__EBIH_WEST__CTX__DOOR_OPEN);
    }
    pub fn observe_ebih__ebih_east__ctx__platform1_moved(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED);
    }
    pub fn observe_ebih__ebih_east__ctx__platform2_moved(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED);
    }
    pub fn observe_ebih__drone_room__ctx__platform_moved(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED);
    }
    pub fn observe_ebih__vertical_interchange__ctx__door_open(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::EBIH__VERTICAL_INTERCHANGE__CTX__DOOR_OPEN);
    }
    pub fn observe_giguna_breach__sw_save__ctx__door_opened(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::GIGUNA_BREACH__SW_SAVE__CTX__DOOR_OPENED);
    }
    pub fn observe_giguna__giguna_northeast__ctx__door_opened(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::GIGUNA__GIGUNA_NORTHEAST__CTX__DOOR_OPENED);
    }
    pub fn observe_giguna__carnelian__ctx__door_opened(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__DOOR_OPENED);
    }
    pub fn observe_giguna__carnelian__ctx__upper_susar(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__UPPER_SUSAR);
    }
    pub fn observe_giguna__carnelian__ctx__lower_susar(&mut self) {
        self.cbits1
            .insert(flags::ContextBits1::GIGUNA__CARNELIAN__CTX__LOWER_SUSAR);
    }
    pub fn observe_giguna__west_caverns__ctx__east_susar(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR);
    }
    pub fn observe_giguna__giguna_base__ctx__door_open(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::GIGUNA__GIGUNA_BASE__CTX__DOOR_OPEN);
    }
    pub fn observe_giguna__ruins_west__ctx__kishib_handled(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED);
    }
    pub fn observe_giguna__ruins_top__ctx__doors_open(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::GIGUNA__RUINS_TOP__CTX__DOORS_OPEN);
    }
    pub fn observe_giguna__clouds__ctx__platform(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::GIGUNA__CLOUDS__CTX__PLATFORM);
    }
    pub fn observe_giguna__east_caverns__ctx__door_opened(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::GIGUNA__EAST_CAVERNS__CTX__DOOR_OPENED);
    }
    pub fn observe_giguna__east_caverns__ctx__combo_entered(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED);
    }
    pub fn observe_giguna__east_caverns__ctx__upper_susar(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR);
    }
    pub fn observe_giguna__east_caverns__ctx__mid_susar(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR);
    }
    pub fn observe_giguna__east_caverns__ctx__lower_susar(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR);
    }
    pub fn observe_giguna__gateway__ctx__door_opened(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::GIGUNA__GATEWAY__CTX__DOOR_OPENED);
    }
    pub fn observe_glacier__the_big_drop__ctx__bridge_open(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::GLACIER__THE_BIG_DROP__CTX__BRIDGE_OPEN);
    }
    pub fn observe_glacier__vertical_room__ctx__upper_gatestone(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::GLACIER__VERTICAL_ROOM__CTX__UPPER_GATESTONE);
    }
    pub fn observe_glacier__vertical_room__ctx__lower_gatestones(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::GLACIER__VERTICAL_ROOM__CTX__LOWER_GATESTONES);
    }
    pub fn observe_irikar__basement_portal__ctx__platform_moved(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED);
    }
    pub fn observe_amagi_dragon_eye_passage(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::AMAGI_DRAGON_EYE_PASSAGE);
    }
    pub fn observe_amagi_stronghold_boulder_1(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_1);
    }
    pub fn observe_amagi_stronghold_boulder_2(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_2);
    }
    pub fn observe_amagi_stronghold_wall_1(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_1);
    }
    pub fn observe_amagi_stronghold_wall_2(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_2);
    }
    pub fn observe_amagi_west_lake_surface_wall(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::AMAGI_WEST_LAKE_SURFACE_WALL);
    }
    pub fn observe_amashilama(&mut self) {
        self.cbits2.insert(flags::ContextBits2::AMASHILAMA);
    }
    pub fn observe_annuna_east_bridge_gate(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::ANNUNA_EAST_BRIDGE_GATE);
    }
    pub fn observe_annuna_mirror_match_switch(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::ANNUNA_MIRROR_MATCH_SWITCH);
    }
    pub fn observe_annuna_vertical_room_gate(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::ANNUNA_VERTICAL_ROOM_GATE);
    }
    pub fn observe_anuman(&mut self) {
        self.cbits2.insert(flags::ContextBits2::ANUMAN);
    }
    pub fn observe_apocalypse_bomb(&mut self) {
        self.cbits2.insert(flags::ContextBits2::APOCALYPSE_BOMB);
    }
    pub fn observe_beware_the_patternmind(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::BEWARE_THE_PATTERNMIND);
    }
    pub fn observe_big_flask(&mut self, obs: IntegerObservation<i8>) {
        if self.strict {
            self.big_flask = IntegerObservation::Exact;
        } else {
            self.big_flask = self.big_flask.combine(obs);
        }
    }
    pub fn observe_boomerang(&mut self) {
        self.cbits2.insert(flags::ContextBits2::BOOMERANG);
    }
    pub fn observe_boomerang_upgrade(&mut self) {
        self.cbits2.insert(flags::ContextBits2::BOOMERANG_UPGRADE);
    }
    pub fn observe_breach_attractor(&mut self) {
        self.cbits2.insert(flags::ContextBits2::BREACH_ATTRACTOR);
    }
    pub fn observe_breach_sight(&mut self) {
        self.cbits2.insert(flags::ContextBits2::BREACH_SIGHT);
    }
    pub fn observe_bronze_axe(&mut self) {
        self.cbits2.insert(flags::ContextBits2::BRONZE_AXE);
    }
    pub fn observe_building_of_the_school(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::BUILDING_OF_THE_SCHOOL);
    }
    pub fn observe_commemorative_speech(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::COMMEMORATIVE_SPEECH);
    }
    pub fn observe_companies_layoff(&mut self) {
        self.cbits2.insert(flags::ContextBits2::COMPANIES_LAYOFF);
    }
    pub fn observe_compass(&mut self) {
        self.cbits2.insert(flags::ContextBits2::COMPASS);
    }
    pub fn observe_dangerous_ideas(&mut self) {
        self.cbits2.insert(flags::ContextBits2::DANGEROUS_IDEAS);
    }
    pub fn observe_dear_ernest(&mut self) {
        self.cbits2.insert(flags::ContextBits2::DEAR_ERNEST);
    }
    pub fn observe_defeat_indra(&mut self) {
        self.cbits2.insert(flags::ContextBits2::DEFEAT_INDRA);
    }
    pub fn observe_defeat_mus_a_m20(&mut self) {
        self.cbits2.insert(flags::ContextBits2::DEFEAT_MUS_A_M20);
    }
    pub fn observe_destruction_pogrom(&mut self) {
        self.cbits2.insert(flags::ContextBits2::DESTRUCTION_POGROM);
    }
    pub fn observe_dr_gloria(&mut self) {
        self.cbits2.insert(flags::ContextBits2::DR_GLORIA);
    }
    pub fn observe_drone_hover(&mut self) {
        self.cbits2.insert(flags::ContextBits2::DRONE_HOVER);
    }
    pub fn observe_drone_melee_damage(&mut self) {
        self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_DAMAGE);
    }
    pub fn observe_drone_melee_damage_2(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::DRONE_MELEE_DAMAGE_2);
    }
    pub fn observe_drone_melee_speed(&mut self) {
        self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_SPEED);
    }
    pub fn observe_drone_melee_speed_2(&mut self) {
        self.cbits2.insert(flags::ContextBits2::DRONE_MELEE_SPEED_2);
    }
    pub fn observe_ebih_alu(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EBIH_ALU);
    }
    pub fn observe_ebih_interchange_block(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::EBIH_INTERCHANGE_BLOCK);
    }
    pub fn observe_ebih_interchange_gate(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::EBIH_INTERCHANGE_GATE);
    }
    pub fn observe_ebih_wasteland_door(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EBIH_WASTELAND_DOOR);
    }
    pub fn observe_ebih_wasteland_passage_h(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::EBIH_WASTELAND_PASSAGE_H);
    }
    pub fn observe_ebih_waterfall_block_left(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::EBIH_WATERFALL_BLOCK_LEFT);
    }
    pub fn observe_ebih_waterfall_block_right(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::EBIH_WATERFALL_BLOCK_RIGHT);
    }
    pub fn observe_ebih_waterfall_wall(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EBIH_WATERFALL_WALL);
    }
    pub fn observe_ebih_west_block(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EBIH_WEST_BLOCK);
    }
    pub fn observe_escape(&mut self) {
        self.cbits2.insert(flags::ContextBits2::ESCAPE);
    }
    pub fn observe_exit_breach(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EXIT_BREACH);
    }
    pub fn observe_eye_ring(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EYE_RING);
    }
    pub fn observe_family_tragedy(&mut self) {
        self.cbits2.insert(flags::ContextBits2::FAMILY_TRAGEDY);
    }
    pub fn observe_fast_travel(&mut self) {
        self.cbits2.insert(flags::ContextBits2::FAST_TRAVEL);
    }
    pub fn observe_flask(&mut self, obs: IntegerObservation<i8>) {
        if self.strict {
            self.flask = IntegerObservation::Exact;
        } else {
            self.flask = self.flask.combine(obs);
        }
    }
    pub fn observe_giguna_boulder(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA_BOULDER);
    }
    pub fn observe_giguna_dual_path_switch(&mut self) {
        self.cbits2
            .insert(flags::ContextBits2::GIGUNA_DUAL_PATH_SWITCH);
    }
    pub fn observe_giguna_dual_path_wall(&mut self) {
        self.cbits3
            .insert(flags::ContextBits3::GIGUNA_DUAL_PATH_WALL);
    }
    pub fn observe_giguna_gateway_block(&mut self) {
        self.cbits3
            .insert(flags::ContextBits3::GIGUNA_GATEWAY_BLOCK);
    }
    pub fn observe_giguna_gateway_gate(&mut self) {
        self.cbits3.insert(flags::ContextBits3::GIGUNA_GATEWAY_GATE);
    }
    pub fn observe_giguna_gubi(&mut self) {
        self.cbits3.insert(flags::ContextBits3::GIGUNA_GUBI);
    }
    pub fn observe_giguna_northeast_gate(&mut self) {
        self.cbits3
            .insert(flags::ContextBits3::GIGUNA_NORTHEAST_GATE);
    }
    pub fn observe_glacier_big_drop_rock(&mut self) {
        self.cbits3
            .insert(flags::ContextBits3::GLACIER_BIG_DROP_ROCK);
    }
    pub fn observe_glacier_sea_burial_rock(&mut self) {
        self.cbits3
            .insert(flags::ContextBits3::GLACIER_SEA_BURIAL_ROCK);
    }
    pub fn observe_goodbye(&mut self) {
        self.cbits3.insert(flags::ContextBits3::GOODBYE);
    }
    pub fn observe_hammond_auth(&mut self) {
        self.cbits3.insert(flags::ContextBits3::HAMMOND_AUTH);
    }
    pub fn observe_health_fragment(&mut self, obs: IntegerObservation<i8>) {
        if self.strict {
            self.health_fragment = IntegerObservation::Exact;
        } else {
            self.health_fragment = self.health_fragment.combine(obs);
        }
    }
    pub fn observe_health_node(&mut self) {
        self.cbits3.insert(flags::ContextBits3::HEALTH_NODE);
    }
    pub fn observe_health_upgrade(&mut self) {
        self.cbits3.insert(flags::ContextBits3::HEALTH_UPGRADE);
    }
    pub fn observe_health_upgrade_2(&mut self) {
        self.cbits3.insert(flags::ContextBits3::HEALTH_UPGRADE_2);
    }
    pub fn observe_health_upgrade_3(&mut self) {
        self.cbits3.insert(flags::ContextBits3::HEALTH_UPGRADE_3);
    }
    pub fn observe_health_upgrade_4(&mut self) {
        self.cbits3.insert(flags::ContextBits3::HEALTH_UPGRADE_4);
    }
    pub fn observe_heretics_tablet(&mut self) {
        self.cbits3.insert(flags::ContextBits3::HERETICS_TABLET);
    }
    pub fn observe_ice_axe(&mut self) {
        self.cbits3.insert(flags::ContextBits3::ICE_AXE);
    }
    pub fn observe_infect(&mut self) {
        self.cbits3.insert(flags::ContextBits3::INFECT);
    }
    pub fn observe_infect_l1(&mut self) {
        self.cbits3.insert(flags::ContextBits3::INFECT_L1);
    }
    pub fn observe_infect_l2(&mut self) {
        self.cbits3.insert(flags::ContextBits3::INFECT_L2);
    }
    pub fn observe_infect_l3(&mut self) {
        self.cbits3.insert(flags::ContextBits3::INFECT_L3);
    }
    pub fn observe_infection_range(&mut self) {
        self.cbits3.insert(flags::ContextBits3::INFECTION_RANGE);
    }
    pub fn observe_infection_range_2(&mut self) {
        self.cbits3.insert(flags::ContextBits3::INFECTION_RANGE_2);
    }
    pub fn observe_infection_range_3(&mut self) {
        self.cbits3.insert(flags::ContextBits3::INFECTION_RANGE_3);
    }
    pub fn observe_infection_speed(&mut self) {
        self.cbits3.insert(flags::ContextBits3::INFECTION_SPEED);
    }
    pub fn observe_irikar_gudam(&mut self) {
        self.cbits3.insert(flags::ContextBits3::IRIKAR_GUDAM);
    }
    pub fn observe_irikar_royal_storage_wall(&mut self) {
        self.cbits3
            .insert(flags::ContextBits3::IRIKAR_ROYAL_STORAGE_WALL);
    }
    pub fn observe_lament_for_fools(&mut self) {
        self.cbits3.insert(flags::ContextBits3::LAMENT_FOR_FOOLS);
    }
    pub fn observe_ledge_grab(&mut self) {
        self.cbits3.insert(flags::ContextBits3::LEDGE_GRAB);
    }
    pub fn observe_letter_from_trace(&mut self) {
        self.cbits3.insert(flags::ContextBits3::LETTER_FROM_TRACE);
    }
    pub fn observe_melee_damage(&mut self) {
        self.cbits3.insert(flags::ContextBits3::MELEE_DAMAGE);
    }
    pub fn observe_melee_damage_2(&mut self) {
        self.cbits3.insert(flags::ContextBits3::MELEE_DAMAGE_2);
    }
    pub fn observe_melee_speed(&mut self) {
        self.cbits3.insert(flags::ContextBits3::MELEE_SPEED);
    }
    pub fn observe_melee_speed_2(&mut self) {
        self.cbits3.insert(flags::ContextBits3::MELEE_SPEED_2);
    }
    pub fn observe_mist_upgrade(&mut self) {
        self.cbits3.insert(flags::ContextBits3::MIST_UPGRADE);
    }
    pub fn observe_nanite_mist(&mut self) {
        self.cbits3.insert(flags::ContextBits3::NANITE_MIST);
    }
    pub fn observe_nano_lattice_2(&mut self) {
        self.cbits3.insert(flags::ContextBits3::NANO_LATTICE_2);
    }
    pub fn observe_nano_points(&mut self) {
        self.cbits3.insert(flags::ContextBits3::NANO_POINTS);
    }
    pub fn observe_nano_points_2(&mut self) {
        self.cbits3.insert(flags::ContextBits3::NANO_POINTS_2);
    }
    pub fn observe_plague_of_thoughts(&mut self) {
        self.cbits3.insert(flags::ContextBits3::PLAGUE_OF_THOUGHTS);
    }
    pub fn observe_power_matrix(&mut self) {
        self.cbits3.insert(flags::ContextBits3::POWER_MATRIX);
    }
    pub fn observe_ranged_damage(&mut self) {
        self.cbits3.insert(flags::ContextBits3::RANGED_DAMAGE);
    }
    pub fn observe_ranged_damage_2(&mut self) {
        self.cbits3.insert(flags::ContextBits3::RANGED_DAMAGE_2);
    }
    pub fn observe_ranged_speed(&mut self) {
        self.cbits3.insert(flags::ContextBits3::RANGED_SPEED);
    }
    pub fn observe_ranged_speed_2(&mut self) {
        self.cbits3.insert(flags::ContextBits3::RANGED_SPEED_2);
    }
    pub fn observe_record_losses(&mut self) {
        self.cbits3.insert(flags::ContextBits3::RECORD_LOSSES);
    }
    pub fn observe_remote_boomerang(&mut self) {
        self.cbits3.insert(flags::ContextBits3::REMOTE_BOOMERANG);
    }
    pub fn observe_remote_drone(&mut self) {
        self.cbits3.insert(flags::ContextBits3::REMOTE_DRONE);
    }
    pub fn observe_researchers_missing(&mut self) {
        self.cbits3.insert(flags::ContextBits3::RESEARCHERS_MISSING);
    }
    pub fn observe_separation(&mut self) {
        self.cbits3.insert(flags::ContextBits3::SEPARATION);
    }
    pub fn observe_shockwave(&mut self) {
        self.cbits3.insert(flags::ContextBits3::SHOCKWAVE);
    }
    pub fn observe_siuna_storage_wall(&mut self) {
        self.cbits3.insert(flags::ContextBits3::SIUNA_STORAGE_WALL);
    }
    pub fn observe_slingshot_charge(&mut self) {
        self.cbits3.insert(flags::ContextBits3::SLINGSHOT_CHARGE);
    }
    pub fn observe_slingshot_hook(&mut self) {
        self.cbits3.insert(flags::ContextBits3::SLINGSHOT_HOOK);
    }
    pub fn observe_slingshot_weapon(&mut self) {
        self.cbits3.insert(flags::ContextBits3::SLINGSHOT_WEAPON);
    }
    pub fn observe_sniper_valley_rock_1(&mut self) {
        self.cbits3
            .insert(flags::ContextBits3::SNIPER_VALLEY_ROCK_1);
    }
    pub fn observe_sniper_valley_rock_2(&mut self) {
        self.cbits3
            .insert(flags::ContextBits3::SNIPER_VALLEY_ROCK_2);
    }
    pub fn observe_station_power(&mut self) {
        self.cbits3.insert(flags::ContextBits3::STATION_POWER);
    }
    pub fn observe_storm_bomb(&mut self) {
        self.cbits3.insert(flags::ContextBits3::STORM_BOMB);
    }
    pub fn observe_suspension_bridge(&mut self) {
        self.cbits3.insert(flags::ContextBits3::SUSPENSION_BRIDGE);
    }
    pub fn observe_switch_36_11(&mut self) {
        self.cbits3.insert(flags::ContextBits3::SWITCH_36_11);
    }
    pub fn observe_switch_40_12(&mut self) {
        self.cbits3.insert(flags::ContextBits3::SWITCH_40_12);
    }
    pub fn observe_terminal_breakthrough_1(&mut self) {
        self.cbits3
            .insert(flags::ContextBits3::TERMINAL_BREAKTHROUGH_1);
    }
    pub fn observe_terminal_breakthrough_2(&mut self) {
        self.cbits3
            .insert(flags::ContextBits3::TERMINAL_BREAKTHROUGH_2);
    }
    pub fn observe_the_eternal_arm(&mut self) {
        self.cbits3.insert(flags::ContextBits3::THE_ETERNAL_ARM);
    }
    pub fn observe_the_ideal_kiengir(&mut self) {
        self.cbits4.insert(flags::ContextBits4::THE_IDEAL_KIENGIR);
    }
    pub fn observe_uhrum_annuna_corridor_block(&mut self) {
        self.cbits4
            .insert(flags::ContextBits4::UHRUM_ANNUNA_CORRIDOR_BLOCK);
    }
    pub fn observe_uhrum_waterfall_wall(&mut self) {
        self.cbits4
            .insert(flags::ContextBits4::UHRUM_WATERFALL_WALL);
    }
    pub fn observe_uhrum_waterfalls_block(&mut self) {
        self.cbits4
            .insert(flags::ContextBits4::UHRUM_WATERFALLS_BLOCK);
    }
    pub fn observe_uhrum_west_entrance_gate(&mut self) {
        self.cbits4
            .insert(flags::ContextBits4::UHRUM_WEST_ENTRANCE_GATE);
    }
    pub fn observe_uhrum_west_entrance_lower_wall(&mut self) {
        self.cbits4
            .insert(flags::ContextBits4::UHRUM_WEST_ENTRANCE_LOWER_WALL);
    }
    pub fn observe_uhrum_west_entrance_upper_wall(&mut self) {
        self.cbits4
            .insert(flags::ContextBits4::UHRUM_WEST_ENTRANCE_UPPER_WALL);
    }
    pub fn observe_under_siege(&mut self) {
        self.cbits4.insert(flags::ContextBits4::UNDER_SIEGE);
    }
    pub fn observe_underwater_movement(&mut self) {
        self.cbits4.insert(flags::ContextBits4::UNDERWATER_MOVEMENT);
    }
    pub fn observe_wall_climb(&mut self) {
        self.cbits4.insert(flags::ContextBits4::WALL_CLIMB);
    }
    pub fn swap_portal__prev_portal(&mut self) {
        std::mem::swap(&mut self.portal, &mut self.prev_portal);
    }
}

#[derive(Debug)]
pub enum ObservationMatcher {
    PositionLookup(LookupMatcher<Node<Self>, SpotId, SolutionSuffix<Context>>),
    EnergyLookup(LookupMatcher<Node<Self>, i16, SolutionSuffix<Context>>),
    EnergyEq {
        eq: i16,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    EnergyGe {
        lo: i16,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    EnergyLe {
        hi: i16,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    EnergyRange {
        lo: i16,
        hi: i16,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    FlasksLookup(LookupMatcher<Node<Self>, i8, SolutionSuffix<Context>>),
    FlasksEq {
        eq: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    FlasksGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    FlasksLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    FlasksRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    RefillsLookup(LookupMatcher<Node<Self>, i8, SolutionSuffix<Context>>),
    RefillsEq {
        eq: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    RefillsGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    RefillsLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    RefillsRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    ModeLookup(LookupMatcher<Node<Self>, enums::Mode, SolutionSuffix<Context>>),
    SaveLookup(LookupMatcher<Node<Self>, SpotId, SolutionSuffix<Context>>),
    BreachSaveLookup(LookupMatcher<Node<Self>, SpotId, SolutionSuffix<Context>>),
    IndraLookup(LookupMatcher<Node<Self>, SpotId, SolutionSuffix<Context>>),
    LastLookup(LookupMatcher<Node<Self>, SpotId, SolutionSuffix<Context>>),
    PortalLookup(LookupMatcher<Node<Self>, SpotId, SolutionSuffix<Context>>),
    PrevPortalLookup(LookupMatcher<Node<Self>, SpotId, SolutionSuffix<Context>>),
    PrevAreaLookup(LookupMatcher<Node<Self>, AreaId, SolutionSuffix<Context>>),
    // items
    BigFlaskLookup(LookupMatcher<Node<Self>, i8, SolutionSuffix<Context>>),
    BigFlaskEq {
        eq: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    BigFlaskGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    BigFlaskLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    BigFlaskRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    FlaskLookup(LookupMatcher<Node<Self>, i8, SolutionSuffix<Context>>),
    FlaskEq {
        eq: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    FlaskGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    FlaskLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    FlaskRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    HealthFragmentLookup(LookupMatcher<Node<Self>, i8, SolutionSuffix<Context>>),
    HealthFragmentEq {
        eq: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    HealthFragmentGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    HealthFragmentLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    HealthFragmentRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    // bitflags
    LookupCBits1 {
        mask: flags::ContextBits1,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits1, SolutionSuffix<Context>>,
    },
    LookupCBits2 {
        mask: flags::ContextBits2,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits2, SolutionSuffix<Context>>,
    },
    LookupCBits3 {
        mask: flags::ContextBits3,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits3, SolutionSuffix<Context>>,
    },
    LookupCBits4 {
        mask: flags::ContextBits4,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits4, SolutionSuffix<Context>>,
    },
    LookupCBits5 {
        mask: flags::ContextBits5,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits5, SolutionSuffix<Context>>,
    },
    LookupCBits6 {
        mask: flags::ContextBits6,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits6, SolutionSuffix<Context>>,
    },
    LookupCBits7 {
        mask: flags::ContextBits7,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits7, SolutionSuffix<Context>>,
    },
    LookupCBits8 {
        mask: flags::ContextBits8,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits8, SolutionSuffix<Context>>,
    },
    LookupCBits9 {
        mask: flags::ContextBits9,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits9, SolutionSuffix<Context>>,
    },
    LookupCBits10 {
        mask: flags::ContextBits10,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits10, SolutionSuffix<Context>>,
    },
    LookupCBits11 {
        mask: flags::ContextBits11,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits11, SolutionSuffix<Context>>,
    },
    LookupCBits12 {
        mask: flags::ContextBits12,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits12, SolutionSuffix<Context>>,
    },
    LookupCBits13 {
        mask: flags::ContextBits13,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits13, SolutionSuffix<Context>>,
    },
}

impl Default for ObservationMatcher {
    fn default() -> Self {
        Self::PositionLookup(LookupMatcher::new())
    }
}

impl MatcherDispatch for ObservationMatcher {
    type Node = Node<Self>;
    type Struct = Context;
    type Value = SolutionSuffix<Context>;
    fn new(obs: &OneObservation) -> (Arc<Mutex<Node<Self>>>, Self) {
        match obs {
            &OneObservation::Position(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::PositionLookup(m))
            }
            &OneObservation::EnergyExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::EnergyLookup(m))
            }
            &OneObservation::EnergyEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::EnergyEq { eq, matcher })
            }
            &OneObservation::EnergyGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::EnergyGe { lo, matcher })
            }
            &OneObservation::EnergyLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::EnergyLe { hi, matcher })
            }
            &OneObservation::EnergyRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::EnergyRange { lo, hi, matcher })
            }
            &OneObservation::FlasksExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::FlasksLookup(m))
            }
            &OneObservation::FlasksEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlasksEq { eq, matcher })
            }
            &OneObservation::FlasksGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlasksGe { lo, matcher })
            }
            &OneObservation::FlasksLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlasksLe { hi, matcher })
            }
            &OneObservation::FlasksRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlasksRange { lo, hi, matcher })
            }
            &OneObservation::RefillsExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::RefillsLookup(m))
            }
            &OneObservation::RefillsEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::RefillsEq { eq, matcher })
            }
            &OneObservation::RefillsGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::RefillsGe { lo, matcher })
            }
            &OneObservation::RefillsLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::RefillsLe { hi, matcher })
            }
            &OneObservation::RefillsRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::RefillsRange { lo, hi, matcher })
            }
            &OneObservation::Mode(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::ModeLookup(m))
            }
            &OneObservation::Save(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::SaveLookup(m))
            }
            &OneObservation::BreachSave(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::BreachSaveLookup(m))
            }
            &OneObservation::Indra(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::IndraLookup(m))
            }
            &OneObservation::Last(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::LastLookup(m))
            }
            &OneObservation::Portal(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::PortalLookup(m))
            }
            &OneObservation::PrevPortal(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::PrevPortalLookup(m))
            }
            &OneObservation::PrevArea(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::PrevAreaLookup(m))
            }
            &OneObservation::BigFlaskExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::BigFlaskLookup(m))
            }
            &OneObservation::BigFlaskEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::BigFlaskEq { eq, matcher })
            }
            &OneObservation::BigFlaskGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::BigFlaskGe { lo, matcher })
            }
            &OneObservation::BigFlaskLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::BigFlaskLe { hi, matcher })
            }
            &OneObservation::BigFlaskRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::BigFlaskRange { lo, hi, matcher })
            }
            &OneObservation::FlaskExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::FlaskLookup(m))
            }
            &OneObservation::FlaskEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlaskEq { eq, matcher })
            }
            &OneObservation::FlaskGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlaskGe { lo, matcher })
            }
            &OneObservation::FlaskLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlaskLe { hi, matcher })
            }
            &OneObservation::FlaskRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlaskRange { lo, hi, matcher })
            }
            &OneObservation::HealthFragmentExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::HealthFragmentLookup(m))
            }
            &OneObservation::HealthFragmentEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::HealthFragmentEq { eq, matcher })
            }
            &OneObservation::HealthFragmentGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::HealthFragmentGe { lo, matcher })
            }
            &OneObservation::HealthFragmentLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::HealthFragmentLe { hi, matcher })
            }
            &OneObservation::HealthFragmentRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (
                    node,
                    ObservationMatcher::HealthFragmentRange { lo, hi, matcher },
                )
            }
            &OneObservation::CBits1 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits1 { mask, matcher })
            }
            &OneObservation::CBits2 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits2 { mask, matcher })
            }
            &OneObservation::CBits3 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits3 { mask, matcher })
            }
            &OneObservation::CBits4 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits4 { mask, matcher })
            }
            &OneObservation::CBits5 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits5 { mask, matcher })
            }
            &OneObservation::CBits6 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits6 { mask, matcher })
            }
            &OneObservation::CBits7 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits7 { mask, matcher })
            }
            &OneObservation::CBits8 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits8 { mask, matcher })
            }
            &OneObservation::CBits9 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits9 { mask, matcher })
            }
            &OneObservation::CBits10 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits10 { mask, matcher })
            }
            &OneObservation::CBits11 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits11 { mask, matcher })
            }
            &OneObservation::CBits12 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits12 { mask, matcher })
            }
            &OneObservation::CBits13 { mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits13 { mask, matcher })
            }
        }
    }

    fn clear(&mut self) {
        match self {
            Self::PositionLookup(m) => m.clear(),
            Self::EnergyLookup(m) => m.clear(),
            Self::EnergyEq { matcher, .. } => matcher.clear(),
            Self::EnergyGe { matcher, .. } => matcher.clear(),
            Self::EnergyLe { matcher, .. } => matcher.clear(),
            Self::EnergyRange { matcher, .. } => matcher.clear(),
            Self::FlasksLookup(m) => m.clear(),
            Self::FlasksEq { matcher, .. } => matcher.clear(),
            Self::FlasksGe { matcher, .. } => matcher.clear(),
            Self::FlasksLe { matcher, .. } => matcher.clear(),
            Self::FlasksRange { matcher, .. } => matcher.clear(),
            Self::RefillsLookup(m) => m.clear(),
            Self::RefillsEq { matcher, .. } => matcher.clear(),
            Self::RefillsGe { matcher, .. } => matcher.clear(),
            Self::RefillsLe { matcher, .. } => matcher.clear(),
            Self::RefillsRange { matcher, .. } => matcher.clear(),
            Self::ModeLookup(m) => m.clear(),
            Self::SaveLookup(m) => m.clear(),
            Self::BreachSaveLookup(m) => m.clear(),
            Self::IndraLookup(m) => m.clear(),
            Self::LastLookup(m) => m.clear(),
            Self::PortalLookup(m) => m.clear(),
            Self::PrevPortalLookup(m) => m.clear(),
            Self::PrevAreaLookup(m) => m.clear(),
            Self::BigFlaskLookup(m) => m.clear(),
            Self::BigFlaskEq { matcher, .. } => matcher.clear(),
            Self::BigFlaskGe { matcher, .. } => matcher.clear(),
            Self::BigFlaskLe { matcher, .. } => matcher.clear(),
            Self::BigFlaskRange { matcher, .. } => matcher.clear(),
            Self::FlaskLookup(m) => m.clear(),
            Self::FlaskEq { matcher, .. } => matcher.clear(),
            Self::FlaskGe { matcher, .. } => matcher.clear(),
            Self::FlaskLe { matcher, .. } => matcher.clear(),
            Self::FlaskRange { matcher, .. } => matcher.clear(),
            Self::HealthFragmentLookup(m) => m.clear(),
            Self::HealthFragmentEq { matcher, .. } => matcher.clear(),
            Self::HealthFragmentGe { matcher, .. } => matcher.clear(),
            Self::HealthFragmentLe { matcher, .. } => matcher.clear(),
            Self::HealthFragmentRange { matcher, .. } => matcher.clear(),
            Self::LookupCBits1 { matcher, .. } => matcher.clear(),
            Self::LookupCBits2 { matcher, .. } => matcher.clear(),
            Self::LookupCBits3 { matcher, .. } => matcher.clear(),
            Self::LookupCBits4 { matcher, .. } => matcher.clear(),
            Self::LookupCBits5 { matcher, .. } => matcher.clear(),
            Self::LookupCBits6 { matcher, .. } => matcher.clear(),
            Self::LookupCBits7 { matcher, .. } => matcher.clear(),
            Self::LookupCBits8 { matcher, .. } => matcher.clear(),
            Self::LookupCBits9 { matcher, .. } => matcher.clear(),
            Self::LookupCBits10 { matcher, .. } => matcher.clear(),
            Self::LookupCBits11 { matcher, .. } => matcher.clear(),
            Self::LookupCBits12 { matcher, .. } => matcher.clear(),
            Self::LookupCBits13 { matcher, .. } => matcher.clear(),
        }
    }

    fn lookup(&self, val: &Context) -> (Option<Arc<Mutex<Node<Self>>>>, Vec<Self::Value>) {
        match self {
            Self::PositionLookup(m) => m.lookup(val.position),
            Self::EnergyLookup(m) => m.lookup(val.energy),
            Self::EnergyEq { eq, matcher } => matcher.lookup(val.energy == *eq),
            Self::EnergyGe { lo, matcher } => matcher.lookup(val.energy >= *lo),
            Self::EnergyLe { hi, matcher } => matcher.lookup(val.energy <= *hi),
            Self::EnergyRange { lo, hi, matcher } => {
                matcher.lookup(val.energy >= *lo && val.energy <= *hi)
            }
            Self::FlasksLookup(m) => m.lookup(val.flasks),
            Self::FlasksEq { eq, matcher } => matcher.lookup(val.flasks == *eq),
            Self::FlasksGe { lo, matcher } => matcher.lookup(val.flasks >= *lo),
            Self::FlasksLe { hi, matcher } => matcher.lookup(val.flasks <= *hi),
            Self::FlasksRange { lo, hi, matcher } => {
                matcher.lookup(val.flasks >= *lo && val.flasks <= *hi)
            }
            Self::RefillsLookup(m) => m.lookup(val.refills),
            Self::RefillsEq { eq, matcher } => matcher.lookup(val.refills == *eq),
            Self::RefillsGe { lo, matcher } => matcher.lookup(val.refills >= *lo),
            Self::RefillsLe { hi, matcher } => matcher.lookup(val.refills <= *hi),
            Self::RefillsRange { lo, hi, matcher } => {
                matcher.lookup(val.refills >= *lo && val.refills <= *hi)
            }
            Self::ModeLookup(m) => m.lookup(val.mode),
            Self::SaveLookup(m) => m.lookup(val.save),
            Self::BreachSaveLookup(m) => m.lookup(val.breach_save),
            Self::IndraLookup(m) => m.lookup(val.indra),
            Self::LastLookup(m) => m.lookup(val.last),
            Self::PortalLookup(m) => m.lookup(val.portal),
            Self::PrevPortalLookup(m) => m.lookup(val.prev_portal),
            Self::PrevAreaLookup(m) => m.lookup(val.prev_area),
            Self::BigFlaskLookup(m) => m.lookup(val.big_flask),
            Self::BigFlaskEq { eq, matcher } => matcher.lookup(val.big_flask == *eq),
            Self::BigFlaskGe { lo, matcher } => matcher.lookup(val.big_flask >= *lo),
            Self::BigFlaskLe { hi, matcher } => matcher.lookup(val.big_flask <= *hi),
            Self::BigFlaskRange { lo, hi, matcher } => {
                matcher.lookup(val.big_flask >= *lo && val.big_flask <= *hi)
            }
            Self::FlaskLookup(m) => m.lookup(val.flask),
            Self::FlaskEq { eq, matcher } => matcher.lookup(val.flask == *eq),
            Self::FlaskGe { lo, matcher } => matcher.lookup(val.flask >= *lo),
            Self::FlaskLe { hi, matcher } => matcher.lookup(val.flask <= *hi),
            Self::FlaskRange { lo, hi, matcher } => {
                matcher.lookup(val.flask >= *lo && val.flask <= *hi)
            }
            Self::HealthFragmentLookup(m) => m.lookup(val.health_fragment),
            Self::HealthFragmentEq { eq, matcher } => matcher.lookup(val.health_fragment == *eq),
            Self::HealthFragmentGe { lo, matcher } => matcher.lookup(val.health_fragment >= *lo),
            Self::HealthFragmentLe { hi, matcher } => matcher.lookup(val.health_fragment <= *hi),
            Self::HealthFragmentRange { lo, hi, matcher } => {
                matcher.lookup(val.health_fragment >= *lo && val.health_fragment <= *hi)
            }
            Self::LookupCBits1 { mask, matcher } => matcher.lookup(val.cbits1 & *mask),
            Self::LookupCBits2 { mask, matcher } => matcher.lookup(val.cbits2 & *mask),
            Self::LookupCBits3 { mask, matcher } => matcher.lookup(val.cbits3 & *mask),
            Self::LookupCBits4 { mask, matcher } => matcher.lookup(val.cbits4 & *mask),
            Self::LookupCBits5 { mask, matcher } => matcher.lookup(val.cbits5 & *mask),
            Self::LookupCBits6 { mask, matcher } => matcher.lookup(val.cbits6 & *mask),
            Self::LookupCBits7 { mask, matcher } => matcher.lookup(val.cbits7 & *mask),
            Self::LookupCBits8 { mask, matcher } => matcher.lookup(val.cbits8 & *mask),
            Self::LookupCBits9 { mask, matcher } => matcher.lookup(val.cbits9 & *mask),
            Self::LookupCBits10 { mask, matcher } => matcher.lookup(val.cbits10 & *mask),
            Self::LookupCBits11 { mask, matcher } => matcher.lookup(val.cbits11 & *mask),
            Self::LookupCBits12 { mask, matcher } => matcher.lookup(val.cbits12 & *mask),
            Self::LookupCBits13 { mask, matcher } => matcher.lookup(val.cbits13 & *mask),
        }
    }

    fn insert(&mut self, obs: &OneObservation) -> Option<Arc<Mutex<Node<Self>>>> {
        match (self, obs) {
            (Self::PositionLookup(m), OneObservation::Position(v)) => Some(m.insert(*v)),
            (Self::EnergyLookup(m), OneObservation::EnergyExact(v)) => Some(m.insert(*v)),
            (Self::EnergyEq { eq, matcher }, OneObservation::EnergyEq(eq2, v)) if eq2 == eq => {
                Some(matcher.insert(*v))
            }
            (Self::EnergyGe { lo, matcher }, OneObservation::EnergyGe(lo2, v)) if lo2 == lo => {
                Some(matcher.insert(*v))
            }
            (Self::EnergyLe { hi, matcher }, OneObservation::EnergyLe(hi2, v)) if hi2 == hi => {
                Some(matcher.insert(*v))
            }
            (Self::EnergyRange { lo, hi, matcher }, OneObservation::EnergyRange(lo2, hi2, v))
                if lo2 == lo && hi2 == hi =>
            {
                Some(matcher.insert(*v))
            }
            (Self::FlasksLookup(m), OneObservation::FlasksExact(v)) => Some(m.insert(*v)),
            (Self::FlasksEq { eq, matcher }, OneObservation::FlasksEq(eq2, v)) if eq2 == eq => {
                Some(matcher.insert(*v))
            }
            (Self::FlasksGe { lo, matcher }, OneObservation::FlasksGe(lo2, v)) if lo2 == lo => {
                Some(matcher.insert(*v))
            }
            (Self::FlasksLe { hi, matcher }, OneObservation::FlasksLe(hi2, v)) if hi2 == hi => {
                Some(matcher.insert(*v))
            }
            (Self::FlasksRange { lo, hi, matcher }, OneObservation::FlasksRange(lo2, hi2, v))
                if lo2 == lo && hi2 == hi =>
            {
                Some(matcher.insert(*v))
            }
            (Self::RefillsLookup(m), OneObservation::RefillsExact(v)) => Some(m.insert(*v)),
            (Self::RefillsEq { eq, matcher }, OneObservation::RefillsEq(eq2, v)) if eq2 == eq => {
                Some(matcher.insert(*v))
            }
            (Self::RefillsGe { lo, matcher }, OneObservation::RefillsGe(lo2, v)) if lo2 == lo => {
                Some(matcher.insert(*v))
            }
            (Self::RefillsLe { hi, matcher }, OneObservation::RefillsLe(hi2, v)) if hi2 == hi => {
                Some(matcher.insert(*v))
            }
            (Self::RefillsRange { lo, hi, matcher }, OneObservation::RefillsRange(lo2, hi2, v))
                if lo2 == lo && hi2 == hi =>
            {
                Some(matcher.insert(*v))
            }
            (Self::ModeLookup(m), OneObservation::Mode(v)) => Some(m.insert(*v)),
            (Self::SaveLookup(m), OneObservation::Save(v)) => Some(m.insert(*v)),
            (Self::BreachSaveLookup(m), OneObservation::BreachSave(v)) => Some(m.insert(*v)),
            (Self::IndraLookup(m), OneObservation::Indra(v)) => Some(m.insert(*v)),
            (Self::LastLookup(m), OneObservation::Last(v)) => Some(m.insert(*v)),
            (Self::PortalLookup(m), OneObservation::Portal(v)) => Some(m.insert(*v)),
            (Self::PrevPortalLookup(m), OneObservation::PrevPortal(v)) => Some(m.insert(*v)),
            (Self::PrevAreaLookup(m), OneObservation::PrevArea(v)) => Some(m.insert(*v)),
            (Self::BigFlaskLookup(m), OneObservation::BigFlaskExact(v)) => Some(m.insert(*v)),
            (Self::BigFlaskEq { eq, matcher }, OneObservation::BigFlaskEq(eq2, v)) if eq2 == eq => {
                Some(matcher.insert(*v))
            }
            (Self::BigFlaskGe { lo, matcher }, OneObservation::BigFlaskGe(lo2, v)) if lo2 == lo => {
                Some(matcher.insert(*v))
            }
            (Self::BigFlaskLe { hi, matcher }, OneObservation::BigFlaskLe(hi2, v)) if hi2 == hi => {
                Some(matcher.insert(*v))
            }
            (
                Self::BigFlaskRange { lo, hi, matcher },
                OneObservation::BigFlaskRange(lo2, hi2, v),
            ) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
            (Self::FlaskLookup(m), OneObservation::FlaskExact(v)) => Some(m.insert(*v)),
            (Self::FlaskEq { eq, matcher }, OneObservation::FlaskEq(eq2, v)) if eq2 == eq => {
                Some(matcher.insert(*v))
            }
            (Self::FlaskGe { lo, matcher }, OneObservation::FlaskGe(lo2, v)) if lo2 == lo => {
                Some(matcher.insert(*v))
            }
            (Self::FlaskLe { hi, matcher }, OneObservation::FlaskLe(hi2, v)) if hi2 == hi => {
                Some(matcher.insert(*v))
            }
            (Self::FlaskRange { lo, hi, matcher }, OneObservation::FlaskRange(lo2, hi2, v))
                if lo2 == lo && hi2 == hi =>
            {
                Some(matcher.insert(*v))
            }
            (Self::HealthFragmentLookup(m), OneObservation::HealthFragmentExact(v)) => {
                Some(m.insert(*v))
            }
            (Self::HealthFragmentEq { eq, matcher }, OneObservation::HealthFragmentEq(eq2, v))
                if eq2 == eq =>
            {
                Some(matcher.insert(*v))
            }
            (Self::HealthFragmentGe { lo, matcher }, OneObservation::HealthFragmentGe(lo2, v))
                if lo2 == lo =>
            {
                Some(matcher.insert(*v))
            }
            (Self::HealthFragmentLe { hi, matcher }, OneObservation::HealthFragmentLe(hi2, v))
                if hi2 == hi =>
            {
                Some(matcher.insert(*v))
            }
            (
                Self::HealthFragmentRange { lo, hi, matcher },
                OneObservation::HealthFragmentRange(lo2, hi2, v),
            ) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
            (
                Self::LookupCBits1 { mask, matcher },
                OneObservation::CBits1 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits2 { mask, matcher },
                OneObservation::CBits2 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits3 { mask, matcher },
                OneObservation::CBits3 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits4 { mask, matcher },
                OneObservation::CBits4 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits5 { mask, matcher },
                OneObservation::CBits5 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits6 { mask, matcher },
                OneObservation::CBits6 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits7 { mask, matcher },
                OneObservation::CBits7 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits8 { mask, matcher },
                OneObservation::CBits8 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits9 { mask, matcher },
                OneObservation::CBits9 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits10 { mask, matcher },
                OneObservation::CBits10 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits11 { mask, matcher },
                OneObservation::CBits11 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits12 { mask, matcher },
                OneObservation::CBits12 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            (
                Self::LookupCBits13 { mask, matcher },
                OneObservation::CBits13 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => Some(matcher.insert(*result)),
            _ => None,
        }
    }

    fn add_value(&mut self, obs: &OneObservation, value: Self::Value) {
        match (self, obs) {
            (Self::PositionLookup(m), OneObservation::Position(v)) => m.add_value(*v, value),
            (Self::EnergyLookup(m), OneObservation::EnergyExact(v)) => m.add_value(*v, value),
            (Self::EnergyEq { eq, matcher }, OneObservation::EnergyEq(eq2, v)) if eq2 == eq => {
                matcher.add_value(*v, value)
            }
            (Self::EnergyGe { lo, matcher }, OneObservation::EnergyGe(lo2, v)) if lo2 == lo => {
                matcher.add_value(*v, value)
            }
            (Self::EnergyLe { hi, matcher }, OneObservation::EnergyLe(hi2, v)) if hi2 == hi => {
                matcher.add_value(*v, value)
            }
            (Self::EnergyRange { lo, hi, matcher }, OneObservation::EnergyRange(lo2, hi2, v))
                if lo2 == lo && hi2 == hi =>
            {
                matcher.add_value(*v, value)
            }
            (Self::FlasksLookup(m), OneObservation::FlasksExact(v)) => m.add_value(*v, value),
            (Self::FlasksEq { eq, matcher }, OneObservation::FlasksEq(eq2, v)) if eq2 == eq => {
                matcher.add_value(*v, value)
            }
            (Self::FlasksGe { lo, matcher }, OneObservation::FlasksGe(lo2, v)) if lo2 == lo => {
                matcher.add_value(*v, value)
            }
            (Self::FlasksLe { hi, matcher }, OneObservation::FlasksLe(hi2, v)) if hi2 == hi => {
                matcher.add_value(*v, value)
            }
            (Self::FlasksRange { lo, hi, matcher }, OneObservation::FlasksRange(lo2, hi2, v))
                if lo2 == lo && hi2 == hi =>
            {
                matcher.add_value(*v, value)
            }
            (Self::RefillsLookup(m), OneObservation::RefillsExact(v)) => m.add_value(*v, value),
            (Self::RefillsEq { eq, matcher }, OneObservation::RefillsEq(eq2, v)) if eq2 == eq => {
                matcher.add_value(*v, value)
            }
            (Self::RefillsGe { lo, matcher }, OneObservation::RefillsGe(lo2, v)) if lo2 == lo => {
                matcher.add_value(*v, value)
            }
            (Self::RefillsLe { hi, matcher }, OneObservation::RefillsLe(hi2, v)) if hi2 == hi => {
                matcher.add_value(*v, value)
            }
            (Self::RefillsRange { lo, hi, matcher }, OneObservation::RefillsRange(lo2, hi2, v))
                if lo2 == lo && hi2 == hi =>
            {
                matcher.add_value(*v, value)
            }
            (Self::ModeLookup(m), OneObservation::Mode(v)) => m.add_value(*v, value),
            (Self::SaveLookup(m), OneObservation::Save(v)) => m.add_value(*v, value),
            (Self::BreachSaveLookup(m), OneObservation::BreachSave(v)) => m.add_value(*v, value),
            (Self::IndraLookup(m), OneObservation::Indra(v)) => m.add_value(*v, value),
            (Self::LastLookup(m), OneObservation::Last(v)) => m.add_value(*v, value),
            (Self::PortalLookup(m), OneObservation::Portal(v)) => m.add_value(*v, value),
            (Self::PrevPortalLookup(m), OneObservation::PrevPortal(v)) => m.add_value(*v, value),
            (Self::PrevAreaLookup(m), OneObservation::PrevArea(v)) => m.add_value(*v, value),
            (Self::BigFlaskLookup(m), OneObservation::BigFlaskExact(v)) => m.add_value(*v, value),
            (Self::BigFlaskEq { eq, matcher }, OneObservation::BigFlaskEq(eq2, v)) if eq2 == eq => {
                matcher.add_value(*v, value)
            }
            (Self::BigFlaskGe { lo, matcher }, OneObservation::BigFlaskGe(lo2, v)) if lo2 == lo => {
                matcher.add_value(*v, value)
            }
            (Self::BigFlaskLe { hi, matcher }, OneObservation::BigFlaskLe(hi2, v)) if hi2 == hi => {
                matcher.add_value(*v, value)
            }
            (
                Self::BigFlaskRange { lo, hi, matcher },
                OneObservation::BigFlaskRange(lo2, hi2, v),
            ) if lo2 == lo && hi2 == hi => matcher.add_value(*v, value),
            (Self::FlaskLookup(m), OneObservation::FlaskExact(v)) => m.add_value(*v, value),
            (Self::FlaskEq { eq, matcher }, OneObservation::FlaskEq(eq2, v)) if eq2 == eq => {
                matcher.add_value(*v, value)
            }
            (Self::FlaskGe { lo, matcher }, OneObservation::FlaskGe(lo2, v)) if lo2 == lo => {
                matcher.add_value(*v, value)
            }
            (Self::FlaskLe { hi, matcher }, OneObservation::FlaskLe(hi2, v)) if hi2 == hi => {
                matcher.add_value(*v, value)
            }
            (Self::FlaskRange { lo, hi, matcher }, OneObservation::FlaskRange(lo2, hi2, v))
                if lo2 == lo && hi2 == hi =>
            {
                matcher.add_value(*v, value)
            }
            (Self::HealthFragmentLookup(m), OneObservation::HealthFragmentExact(v)) => {
                m.add_value(*v, value)
            }
            (Self::HealthFragmentEq { eq, matcher }, OneObservation::HealthFragmentEq(eq2, v))
                if eq2 == eq =>
            {
                matcher.add_value(*v, value)
            }
            (Self::HealthFragmentGe { lo, matcher }, OneObservation::HealthFragmentGe(lo2, v))
                if lo2 == lo =>
            {
                matcher.add_value(*v, value)
            }
            (Self::HealthFragmentLe { hi, matcher }, OneObservation::HealthFragmentLe(hi2, v))
                if hi2 == hi =>
            {
                matcher.add_value(*v, value)
            }
            (
                Self::HealthFragmentRange { lo, hi, matcher },
                OneObservation::HealthFragmentRange(lo2, hi2, v),
            ) if lo2 == lo && hi2 == hi => matcher.add_value(*v, value),
            (
                Self::LookupCBits1 { mask, matcher },
                OneObservation::CBits1 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.add_value(*result, value),
            (
                Self::LookupCBits2 { mask, matcher },
                OneObservation::CBits2 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.add_value(*result, value),
            (
                Self::LookupCBits3 { mask, matcher },
                OneObservation::CBits3 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.add_value(*result, value),
            (
                Self::LookupCBits4 { mask, matcher },
                OneObservation::CBits4 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.add_value(*result, value),
            (
                Self::LookupCBits5 { mask, matcher },
                OneObservation::CBits5 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.add_value(*result, value),
            (
                Self::LookupCBits6 { mask, matcher },
                OneObservation::CBits6 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.add_value(*result, value),
            (
                Self::LookupCBits7 { mask, matcher },
                OneObservation::CBits7 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.add_value(*result, value),
            (
                Self::LookupCBits8 { mask, matcher },
                OneObservation::CBits8 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.add_value(*result, value),
            (
                Self::LookupCBits9 { mask, matcher },
                OneObservation::CBits9 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.add_value(*result, value),
            (
                Self::LookupCBits10 { mask, matcher },
                OneObservation::CBits10 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.add_value(*result, value),
            (
                Self::LookupCBits11 { mask, matcher },
                OneObservation::CBits11 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.add_value(*result, value),
            (
                Self::LookupCBits12 { mask, matcher },
                OneObservation::CBits12 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.add_value(*result, value),
            (
                Self::LookupCBits13 { mask, matcher },
                OneObservation::CBits13 {
                    mask: mask2,
                    result,
                },
            ) if mask == mask2 => matcher.add_value(*result, value),
            _ => (),
        }
    }

    fn nodes(&self) -> Vec<Arc<Mutex<Node<Self>>>> {
        match self {
            Self::PositionLookup(m) => m.nodes(),
            Self::EnergyLookup(m) => m.nodes(),
            Self::EnergyEq { matcher, .. } => matcher.nodes(),
            Self::EnergyGe { matcher, .. } => matcher.nodes(),
            Self::EnergyLe { matcher, .. } => matcher.nodes(),
            Self::EnergyRange { matcher, .. } => matcher.nodes(),
            Self::FlasksLookup(m) => m.nodes(),
            Self::FlasksEq { matcher, .. } => matcher.nodes(),
            Self::FlasksGe { matcher, .. } => matcher.nodes(),
            Self::FlasksLe { matcher, .. } => matcher.nodes(),
            Self::FlasksRange { matcher, .. } => matcher.nodes(),
            Self::RefillsLookup(m) => m.nodes(),
            Self::RefillsEq { matcher, .. } => matcher.nodes(),
            Self::RefillsGe { matcher, .. } => matcher.nodes(),
            Self::RefillsLe { matcher, .. } => matcher.nodes(),
            Self::RefillsRange { matcher, .. } => matcher.nodes(),
            Self::ModeLookup(m) => m.nodes(),
            Self::SaveLookup(m) => m.nodes(),
            Self::BreachSaveLookup(m) => m.nodes(),
            Self::IndraLookup(m) => m.nodes(),
            Self::LastLookup(m) => m.nodes(),
            Self::PortalLookup(m) => m.nodes(),
            Self::PrevPortalLookup(m) => m.nodes(),
            Self::PrevAreaLookup(m) => m.nodes(),
            Self::BigFlaskLookup(m) => m.nodes(),
            Self::BigFlaskEq { matcher, .. } => matcher.nodes(),
            Self::BigFlaskGe { matcher, .. } => matcher.nodes(),
            Self::BigFlaskLe { matcher, .. } => matcher.nodes(),
            Self::BigFlaskRange { matcher, .. } => matcher.nodes(),
            Self::FlaskLookup(m) => m.nodes(),
            Self::FlaskEq { matcher, .. } => matcher.nodes(),
            Self::FlaskGe { matcher, .. } => matcher.nodes(),
            Self::FlaskLe { matcher, .. } => matcher.nodes(),
            Self::FlaskRange { matcher, .. } => matcher.nodes(),
            Self::HealthFragmentLookup(m) => m.nodes(),
            Self::HealthFragmentEq { matcher, .. } => matcher.nodes(),
            Self::HealthFragmentGe { matcher, .. } => matcher.nodes(),
            Self::HealthFragmentLe { matcher, .. } => matcher.nodes(),
            Self::HealthFragmentRange { matcher, .. } => matcher.nodes(),
            Self::LookupCBits1 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits2 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits3 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits4 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits5 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits6 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits7 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits8 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits9 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits10 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits11 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits12 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits13 { matcher, .. } => matcher.nodes(),
        }
    }

    fn num_values(&self) -> usize {
        match self {
            Self::PositionLookup(m) => m.num_values(),
            Self::EnergyLookup(m) => m.num_values(),
            Self::EnergyEq { matcher, .. } => matcher.num_values(),
            Self::EnergyGe { matcher, .. } => matcher.num_values(),
            Self::EnergyLe { matcher, .. } => matcher.num_values(),
            Self::EnergyRange { matcher, .. } => matcher.num_values(),
            Self::FlasksLookup(m) => m.num_values(),
            Self::FlasksEq { matcher, .. } => matcher.num_values(),
            Self::FlasksGe { matcher, .. } => matcher.num_values(),
            Self::FlasksLe { matcher, .. } => matcher.num_values(),
            Self::FlasksRange { matcher, .. } => matcher.num_values(),
            Self::RefillsLookup(m) => m.num_values(),
            Self::RefillsEq { matcher, .. } => matcher.num_values(),
            Self::RefillsGe { matcher, .. } => matcher.num_values(),
            Self::RefillsLe { matcher, .. } => matcher.num_values(),
            Self::RefillsRange { matcher, .. } => matcher.num_values(),
            Self::ModeLookup(m) => m.num_values(),
            Self::SaveLookup(m) => m.num_values(),
            Self::BreachSaveLookup(m) => m.num_values(),
            Self::IndraLookup(m) => m.num_values(),
            Self::LastLookup(m) => m.num_values(),
            Self::PortalLookup(m) => m.num_values(),
            Self::PrevPortalLookup(m) => m.num_values(),
            Self::PrevAreaLookup(m) => m.num_values(),
            Self::BigFlaskLookup(m) => m.num_values(),
            Self::BigFlaskEq { matcher, .. } => matcher.num_values(),
            Self::BigFlaskGe { matcher, .. } => matcher.num_values(),
            Self::BigFlaskLe { matcher, .. } => matcher.num_values(),
            Self::BigFlaskRange { matcher, .. } => matcher.num_values(),
            Self::FlaskLookup(m) => m.num_values(),
            Self::FlaskEq { matcher, .. } => matcher.num_values(),
            Self::FlaskGe { matcher, .. } => matcher.num_values(),
            Self::FlaskLe { matcher, .. } => matcher.num_values(),
            Self::FlaskRange { matcher, .. } => matcher.num_values(),
            Self::HealthFragmentLookup(m) => m.num_values(),
            Self::HealthFragmentEq { matcher, .. } => matcher.num_values(),
            Self::HealthFragmentGe { matcher, .. } => matcher.num_values(),
            Self::HealthFragmentLe { matcher, .. } => matcher.num_values(),
            Self::HealthFragmentRange { matcher, .. } => matcher.num_values(),
            Self::LookupCBits1 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits2 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits3 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits4 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits5 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits6 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits7 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits8 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits9 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits10 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits11 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits12 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits13 { matcher, .. } => matcher.num_values(),
        }
    }
}

//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::{Context, data, enums, flags};
use crate::graph::{self, *};
use crate::items::Item;
use crate::movements;
use crate::prices::Currency;
use crate::rules;
use analyzer::matchertrie::*;
use analyzer::observer::*;
use analyzer::solutions::{Solution, SolutionSuffix};
use std::sync::{Arc, Mutex};

#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub enum OneObservation {
    Position(SpotId),
    EnergyExact(i16),
    EnergyEq(i16, bool),
    EnergyGe(i16, bool),
    EnergyLe(i16, bool),
    EnergyRange(i16, i16, bool),
    FlasksExact(i8),
    FlasksEq(i8, bool),
    FlasksGe(i8, bool),
    FlasksLe(i8, bool),
    FlasksRange(i8, i8, bool),
    RefillsExact(i8),
    RefillsEq(i8, bool),
    RefillsGe(i8, bool),
    RefillsLe(i8, bool),
    RefillsRange(i8, i8, bool),
    Mode(enums::Mode),
    Save(SpotId),
    BreachSave(SpotId),
    Indra(SpotId),
    Last(SpotId),
    Portal(SpotId),
    PrevPortal(SpotId),
    PrevArea(AreaId),
    // items
    BigFlaskExact(i8),
    BigFlaskEq(i8, bool),
    BigFlaskGe(i8, bool),
    BigFlaskLe(i8, bool),
    BigFlaskRange(i8, i8, bool),
    FlaskExact(i8),
    FlaskEq(i8, bool),
    FlaskGe(i8, bool),
    FlaskLe(i8, bool),
    FlaskRange(i8, i8, bool),
    HealthFragmentExact(i8),
    HealthFragmentEq(i8, bool),
    HealthFragmentGe(i8, bool),
    HealthFragmentLe(i8, bool),
    HealthFragmentRange(i8, i8, bool),
    HealthNodeExact(i8),
    HealthNodeEq(i8, bool),
    HealthNodeGe(i8, bool),
    HealthNodeLe(i8, bool),
    HealthNodeRange(i8, i8, bool),
    PowerMatrixExact(i8),
    PowerMatrixEq(i8, bool),
    PowerMatrixGe(i8, bool),
    PowerMatrixLe(i8, bool),
    PowerMatrixRange(i8, i8, bool),
    // bitflags
    CBits1{ mask: flags::ContextBits1, result: flags::ContextBits1 },
    CBits2{ mask: flags::ContextBits2, result: flags::ContextBits2 },
    CBits3{ mask: flags::ContextBits3, result: flags::ContextBits3 },
    CBits4{ mask: flags::ContextBits4, result: flags::ContextBits4 },
    CBits5{ mask: flags::ContextBits5, result: flags::ContextBits5 },
    CBits6{ mask: flags::ContextBits6, result: flags::ContextBits6 },
    CBits7{ mask: flags::ContextBits7, result: flags::ContextBits7 },
    CBits8{ mask: flags::ContextBits8, result: flags::ContextBits8 },
    CBits9{ mask: flags::ContextBits9, result: flags::ContextBits9 },
    CBits10{ mask: flags::ContextBits10, result: flags::ContextBits10 },
    CBits11{ mask: flags::ContextBits11, result: flags::ContextBits11 },
}

impl OneObservation {
    pub fn matches(&self, ctx: &Context) -> bool {
        match *self {
            OneObservation::Position(v) => ctx.position == v,
            OneObservation::EnergyExact(v) => ctx.energy == v,
            OneObservation::EnergyEq(v, res) => (ctx.energy == v) == res,
            OneObservation::EnergyGe(v, res) => (ctx.energy >= v) == res,
            OneObservation::EnergyLe(v, res) => (ctx.energy <= v) == res,
            OneObservation::EnergyRange(lo, hi, res) => (ctx.energy >= lo && ctx.energy <= hi) == res,
            OneObservation::FlasksExact(v) => ctx.flasks == v,
            OneObservation::FlasksEq(v, res) => (ctx.flasks == v) == res,
            OneObservation::FlasksGe(v, res) => (ctx.flasks >= v) == res,
            OneObservation::FlasksLe(v, res) => (ctx.flasks <= v) == res,
            OneObservation::FlasksRange(lo, hi, res) => (ctx.flasks >= lo && ctx.flasks <= hi) == res,
            OneObservation::RefillsExact(v) => ctx.refills == v,
            OneObservation::RefillsEq(v, res) => (ctx.refills == v) == res,
            OneObservation::RefillsGe(v, res) => (ctx.refills >= v) == res,
            OneObservation::RefillsLe(v, res) => (ctx.refills <= v) == res,
            OneObservation::RefillsRange(lo, hi, res) => (ctx.refills >= lo && ctx.refills <= hi) == res,
            OneObservation::Mode(v) => ctx.mode == v,
            OneObservation::Save(v) => ctx.save == v,
            OneObservation::BreachSave(v) => ctx.breach_save == v,
            OneObservation::Indra(v) => ctx.indra == v,
            OneObservation::Last(v) => ctx.last == v,
            OneObservation::Portal(v) => ctx.portal == v,
            OneObservation::PrevPortal(v) => ctx.prev_portal == v,
            OneObservation::PrevArea(v) => ctx.prev_area == v,
            OneObservation::BigFlaskExact(v) => ctx.big_flask == v,
            OneObservation::BigFlaskEq(v, res) => (ctx.big_flask == v) == res,
            OneObservation::BigFlaskGe(v, res) => (ctx.big_flask >= v) == res,
            OneObservation::BigFlaskLe(v, res) => (ctx.big_flask <= v) == res,
            OneObservation::BigFlaskRange(lo, hi, res) => (ctx.big_flask >= lo && ctx.big_flask <= hi) == res,
            OneObservation::FlaskExact(v) => ctx.flask == v,
            OneObservation::FlaskEq(v, res) => (ctx.flask == v) == res,
            OneObservation::FlaskGe(v, res) => (ctx.flask >= v) == res,
            OneObservation::FlaskLe(v, res) => (ctx.flask <= v) == res,
            OneObservation::FlaskRange(lo, hi, res) => (ctx.flask >= lo && ctx.flask <= hi) == res,
            OneObservation::HealthFragmentExact(v) => ctx.health_fragment == v,
            OneObservation::HealthFragmentEq(v, res) => (ctx.health_fragment == v) == res,
            OneObservation::HealthFragmentGe(v, res) => (ctx.health_fragment >= v) == res,
            OneObservation::HealthFragmentLe(v, res) => (ctx.health_fragment <= v) == res,
            OneObservation::HealthFragmentRange(lo, hi, res) => (ctx.health_fragment >= lo && ctx.health_fragment <= hi) == res,
            OneObservation::HealthNodeExact(v) => ctx.health_node == v,
            OneObservation::HealthNodeEq(v, res) => (ctx.health_node == v) == res,
            OneObservation::HealthNodeGe(v, res) => (ctx.health_node >= v) == res,
            OneObservation::HealthNodeLe(v, res) => (ctx.health_node <= v) == res,
            OneObservation::HealthNodeRange(lo, hi, res) => (ctx.health_node >= lo && ctx.health_node <= hi) == res,
            OneObservation::PowerMatrixExact(v) => ctx.power_matrix == v,
            OneObservation::PowerMatrixEq(v, res) => (ctx.power_matrix == v) == res,
            OneObservation::PowerMatrixGe(v, res) => (ctx.power_matrix >= v) == res,
            OneObservation::PowerMatrixLe(v, res) => (ctx.power_matrix <= v) == res,
            OneObservation::PowerMatrixRange(lo, hi, res) => (ctx.power_matrix >= lo && ctx.power_matrix <= hi) == res,
            OneObservation::CBits1{ mask, result } => (ctx.cbits1 & mask) == result,
            OneObservation::CBits2{ mask, result } => (ctx.cbits2 & mask) == result,
            OneObservation::CBits3{ mask, result } => (ctx.cbits3 & mask) == result,
            OneObservation::CBits4{ mask, result } => (ctx.cbits4 & mask) == result,
            OneObservation::CBits5{ mask, result } => (ctx.cbits5 & mask) == result,
            OneObservation::CBits6{ mask, result } => (ctx.cbits6 & mask) == result,
            OneObservation::CBits7{ mask, result } => (ctx.cbits7 & mask) == result,
            OneObservation::CBits8{ mask, result } => (ctx.cbits8 & mask) == result,
            OneObservation::CBits9{ mask, result } => (ctx.cbits9 & mask) == result,
            OneObservation::CBits10{ mask, result } => (ctx.cbits10 & mask) == result,
            OneObservation::CBits11{ mask, result } => (ctx.cbits11 & mask) == result,
        }
    }
}


#[derive(Debug, Default)]
pub struct FullObservation {
    // context vars: observed or not. Ints get comparisons as well but they are observed-as-true comparisons,
    // or otherwise partitioned as exact

    position: bool,
    energy: IntegerObservation<i16>,
    flasks: IntegerObservation<i8>,
    refills: IntegerObservation<i8>,
    mode: bool,
    save: bool,
    breach_save: bool,
    indra: bool,
    last: bool,
    portal: bool,
    prev_portal: bool,
    prev_area: bool,
    // items
    big_flask: IntegerObservation<i8>,
    flask: IntegerObservation<i8>,
    health_fragment: IntegerObservation<i8>,
    health_node: IntegerObservation<i8>,
    power_matrix: IntegerObservation<i8>,
    // bitflags: optionally a mask
    cbits1: flags::ContextBits1,
    cbits2: flags::ContextBits2,
    cbits3: flags::ContextBits3,
    cbits4: flags::ContextBits4,
    cbits5: flags::ContextBits5,
    cbits6: flags::ContextBits6,
    cbits7: flags::ContextBits7,
    cbits8: flags::ContextBits8,
    cbits9: flags::ContextBits9,
    cbits10: flags::ContextBits10,
    cbits11: flags::ContextBits11,
    pub strict: bool,
}

impl Observer for FullObservation {
    type Ctx = Context;
    type Matcher = ObservationMatcher;

    fn from_victory_state(won: &Context, world: &World) -> Self {
        let mut full_obs = Self::default();
        full_obs.position = true;
        match world.rule_victory {
            RuleVictory::Default => {
                rules::observe_access___escape_apocalypse_bomb_invoke_objective(won, world, &mut full_obs);
            }
            RuleVictory::JustObjective => {
                rules::observe_access___invoke_objective(won, world, &mut full_obs);
            }
            RuleVictory::Bench => {
                rules::observe_access___remote_drone_flask__6(won, world, &mut full_obs);
            }
        }
        full_obs
    }

    fn observe_visit(&mut self, loc_id: LocationId) {
        match loc_id {
            LocationId::Amagi_Breach__East_Ruins__Northeast_Bubbles_Corner_Access__Item | LocationId::Amagi_Breach__East_Ruins__Northeast_Corner__Flask_Collection_Skip | LocationId::Amagi_Breach__East_Ruins__Northeast_Corner__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LAB_EAST_RUINS_FLASK);
            }
            LocationId::Amagi_Breach__East_Ruins__Plinth__Urn | LocationId::Amagi_Breach__East_Ruins__Plinth__Urn_Collection_Skip | LocationId::Amagi_Breach__East_Ruins__Plinth__Urn_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EXIT_BREACH);
            }
            LocationId::Amagi_Breach__West_Ruins__Center_Platform__Flask | LocationId::Amagi_Breach__West_Ruins__Center_Platform__Flask_Collection_Skip | LocationId::Amagi_Breach__West_Ruins__Center_Platform__Flask_Fast_Travel => {
                self.cbits5.insert(flags::ContextBits5::VISITED_AMAGI_BREACH_WEST_RUINS_FLASK);
            }
            LocationId::Amagi_Breach__Twisty_Passages__Closed_Chamber__Flask | LocationId::Amagi_Breach__Twisty_Passages__Closed_Chamber__Flask_Collection_Skip | LocationId::Amagi_Breach__Twisty_Passages__Closed_Chamber__Flask_Fast_Travel => {
                self.cbits5.insert(flags::ContextBits5::VISITED_AMAGI_BREACH_TWISTY_PASSAGES_FLASK);
            }
            LocationId::Amagi__Main_Area__Cache_Jump__Nearby_Flask | LocationId::Amagi__Main_Area__Cache_Jump__Shockwave_Flask | LocationId::Amagi__Main_Area__Cache__Item | LocationId::Amagi__Main_Area__Cache__Item_Collection_Skip | LocationId::Amagi__Main_Area__Cache__Item_Fast_Travel => {
                self.cbits5.insert(flags::ContextBits5::VISITED_AMAGI_MAIN_AREA_WATER_FLASK);
            }
            LocationId::Amagi__West_Lake__Cavern_Tear_Duct__Remote_Flask | LocationId::Amagi__West_Lake__Cavern_Eye__Item => {
                self.cbits5.insert(flags::ContextBits5::VISITED_AMAGI_DRAGON_EYE_FLASK);
            }
            LocationId::Amagi__West_Lake__Stronghold_Top__Remote_Urn | LocationId::Amagi__West_Lake__Stronghold_Item__Item => {
                self.cbits10.insert(flags::ContextBits10::VISITED_SHOCKWAVE);
            }
            LocationId::Amagi__West_Lake__Stronghold_Item__Break_Wall | LocationId::Amagi__West_Lake__Stronghold_Middle_Column__Break_Wall => {
                self.cbits5.insert(flags::ContextBits5::VISITED_AMAGI_STRONGHOLD_WALL_1);
            }
            LocationId::Amagi__West_Lake__Stronghold_Rear_Wall__Break_Left_Wall | LocationId::Amagi__West_Lake__Stronghold_Rear_Wall__Mist_Through_Wall | LocationId::Amagi__West_Lake__Stronghold_Rear_Wall__Upgraded_Mist_Through_Wall | LocationId::Amagi__West_Lake__West_Stronghold_Wall__Break_Wall | LocationId::Amagi__West_Lake__West_Stronghold_Wall__Mist_Through_Wall | LocationId::Amagi__West_Lake__West_Stronghold_Wall__Upgraded_Mist_Through_Wall => {
                self.cbits5.insert(flags::ContextBits5::VISITED_AMAGI_STRONGHOLD_LEFT_WALL);
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Right__Knock_Down_Right_Boulder => {
                self.cbits5.insert(flags::ContextBits5::VISITED_AMAGI_STRONGHOLD_BOULDER_2);
            }
            LocationId::Amagi__West_Lake__Stronghold_Front_Room__Break_Wall | LocationId::Amagi__West_Lake__Stronghold_Front_Door__Break_Wall => {
                self.cbits5.insert(flags::ContextBits5::VISITED_AMAGI_STRONGHOLD_WALL_2);
            }
            LocationId::Amagi__West_Lake__Surface_Wall_Right__Break_Wall | LocationId::Amagi__West_Lake__Surface_Wall_Left__Break_Wall => {
                self.cbits5.insert(flags::ContextBits5::VISITED_AMAGI_WEST_LAKE_SURFACE_WALL);
            }
            LocationId::Amagi__West_Lake__West_20__Remote_Button | LocationId::Amagi__West_Lake__West_Stronghold_Button__Button => {
                self.cbits5.insert(flags::ContextBits5::VISITED_AMAGI_WEST_LAKE_GATE);
            }
            LocationId::Amagi__Gated_Community__Upper_East_Ledge__Flask | LocationId::Amagi__Gated_Community__Upper_East_Ledge__Shockwave_Flask | LocationId::Amagi__Gated_Community__Upper_East_Ledge__Flask_Collection_Skip | LocationId::Amagi__Gated_Community__Upper_East_Ledge__Flask_Fast_Travel | LocationId::Amagi__Gated_Community__Upper_Gate_East_Mid_air__Boomerang_Flask_and_Fall_Left | LocationId::Amagi__Gated_Community__Upper_Gate_East_Mid_air__Boomerang_Flask_and_Fall_Right | LocationId::Amagi__Gated_Community__Upper_Gate_East_Mid_air__Boomerang_Flask_and_Hover | LocationId::Amagi__Gated_Community__Upper_Gate_East_Mid_air__Boomerang_Flask_Fast_Travel => {
                self.cbits5.insert(flags::ContextBits5::VISITED_AMAGI_GATED_COMMUNITY_FLASK);
            }
            LocationId::Annuna_Breach__Lower_Gate__Flower_Cache__Flask | LocationId::Annuna_Breach__Lower_Gate__Flower_Cache__Flask_Collection_Skip | LocationId::Annuna_Breach__Lower_Gate__Flower_Cache__Flask_Fast_Travel => {
                self.cbits5.insert(flags::ContextBits5::VISITED_ANNUNA_BREACH_LOWER_GATE_FLASK);
            }
            LocationId::Annuna_Breach__Factory_Foyer__West_Flower__Flask | LocationId::Annuna_Breach__Factory_Foyer__West_Flower__Flask_Collection_Skip | LocationId::Annuna_Breach__Factory_Foyer__West_Flower__Flask_Fast_Travel => {
                self.cbits5.insert(flags::ContextBits5::VISITED_ANNUNA_BREACH_FACTORY_FOYER_FLASK);
            }
            LocationId::Annuna__Mirror_Match__Plinth__Item | LocationId::Annuna__Mirror_Match__Plinth__Flask_Collection_Skip | LocationId::Annuna__Mirror_Match__Plinth__Flask_Fast_Travel | LocationId::Annuna__Mirror_Match__Plinth_Adjacent__Shockwave_Flask | LocationId::Annuna__Mirror_Match__Plinth_Adjacent__Spin_into_Flask | LocationId::Annuna__Mirror_Match__Waving_Distance__Shockwave_Flask | LocationId::Annuna__Mirror_Match__East_26_Lower__Remote_Flask | LocationId::Annuna__Mirror_Match__East_26_Upper__Remote_Flask | LocationId::Annuna__Mirror_Match__East_26_Upper__Remote_Flask_Fast_Travel => {
                self.cbits5.insert(flags::ContextBits5::VISITED_ANNUNA_MIRROR_MATCH_FLASK);
            }
            LocationId::Annuna__Invisible_Enemies__Shock_Distance__Shockwave_Flask | LocationId::Annuna__Invisible_Enemies__West_Corner__Spin_from_Underneath | LocationId::Annuna__Invisible_Enemies__Corner_Cache__Flask | LocationId::Annuna__Invisible_Enemies__Corner_Cache__Flask_Collection_Skip | LocationId::Annuna__Invisible_Enemies__Corner_Cache__Flask_Fast_Travel | LocationId::Annuna__Invisible_Enemies__Corner_Cache__Shockwave_Flask => {
                self.cbits5.insert(flags::ContextBits5::VISITED_ANNUNA_INVISIBLE_ENEMIES_FLASK);
            }
            LocationId::Annuna__Secret_Passage__Wall_West__Shockwave_Flask | LocationId::Annuna__Secret_Passage__Wall_East__Flask | LocationId::Annuna__Secret_Passage__Wall_East__Flask_Collection_Skip | LocationId::Annuna__Secret_Passage__Wall_East__Flask_Fast_Travel | LocationId::Annuna__Secret_Passage__In_Shock_Range__Shockwave_Flask | LocationId::Annuna__Secret_Passage__In_Boome_Range__Remote_Flask | LocationId::Annuna__Secret_Passage__In_Boome_Range__Boomerang_Flask_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_ANNUNA_SECRET_PASSAGE_FLASK);
            }
            LocationId::Annuna__East_Bridge__Gate_Button__Switch | LocationId::Annuna__East_Bridge__Below_Gate_Button__Switch_from_Below => {
                self.cbits5.insert(flags::ContextBits5::VISITED_ANNUNA_EAST_BRIDGE_GATE);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_West__Break_Outer_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_West__Upgraded_Mist_Through_Outer_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_East__Break_Outer_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Outer_Rock_East__Upgraded_Mist_Through_Outer_Wall => {
                self.cbits10.insert(flags::ContextBits10::VISITED_SNIPER_VALLEY_ROCK_1);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_West__Break_Inner_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_West__Upgraded_Mist_Through_Inner_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_East__Break_Inner_Wall | LocationId::Annuna__Sniper_Valley__Cavern_Inner_Rock_East__Upgraded_Mist_Through_Inner_Wall => {
                self.cbits10.insert(flags::ContextBits10::VISITED_SNIPER_VALLEY_ROCK_2);
            }
            LocationId::Annuna__Sniper_Valley__Cavern_Cache__Item | LocationId::Annuna__Sniper_Valley__Cavern_Cache__Flask_Collection_Skip | LocationId::Annuna__Sniper_Valley__Cavern_Cache__Flask_Fast_Travel | LocationId::Annuna__Sniper_Valley__Cavern_Cache__Shockwave_Flask => {
                self.cbits6.insert(flags::ContextBits6::VISITED_ANNUNA_SNIPER_VALLEY_FLASK);
            }
            LocationId::Annuna__Filter_Teleporter__Door_Ledge__Shockwave_Flask | LocationId::Annuna__Filter_Teleporter__Shaft_Bottom__Flask => {
                self.cbits6.insert(flags::ContextBits6::VISITED_FILTER_TELEPORTER_FLASK);
            }
            LocationId::Annuna__East_Hideout__Ladder_Middle__Throw_Down | LocationId::Annuna__East_Hideout__Bottom__Flask | LocationId::Annuna__East_Hideout__Bottom__Flask_Collection_Skip | LocationId::Annuna__East_Hideout__Bottom__Flask_Fast_Travel | LocationId::Annuna__East_Hideout__Left_Mid_air__Shockwave_Flask => {
                self.cbits5.insert(flags::ContextBits5::VISITED_ANNUNA_EAST_HIDEOUT_FLASK);
            }
            LocationId::Annuna__Egg_Room__Second_Egg__Remote_Boomerang_Flask | LocationId::Annuna__Egg_Room__Cache__Flask | LocationId::Annuna__Egg_Room__Cache__Shockwave_Flask | LocationId::Annuna__Egg_Room__Corner_Platform__Shockwave_from_Outside | LocationId::Annuna__Egg_Room__Corner_Platform__Remote_Boomerang_Flask => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EGG_ROOM_FLASK);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Wall_as_Indra | LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Through_Wall_as_Drone | LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Through_Wall_with_Mist | LocationId::Annuna__Siuna_Storage__Wall_Right__Break_Through_Wall_with_Mist_2 | LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Wall_as_Indra | LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Through_Wall_as_Drone | LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Through_Wall_with_Mist | LocationId::Annuna__Siuna_Storage__Wall_Left__Break_Through_Wall_with_Mist_2 => {
                self.cbits10.insert(flags::ContextBits10::VISITED_SIUNA_STORAGE_WALL);
            }
            LocationId::Annuna__Siuna_Storage__Wall_Left__Distant_Urn | LocationId::Annuna__Siuna_Storage__Wall_Left__Distant_Urn_Fast_Travel | LocationId::Annuna__Siuna_Storage__Within_Range__Remote_Urn | LocationId::Annuna__Siuna_Storage__Within_Range__Remote_Urn_Fast_Travel | LocationId::Annuna__Siuna_Storage__Cache__Urn | LocationId::Annuna__Siuna_Storage__Cache__Urn_Collection_Skip | LocationId::Annuna__Siuna_Storage__Cache__Urn_Fast_Travel => {
                self.cbits10.insert(flags::ContextBits10::VISITED_NANITE_MIST);
            }
            LocationId::Annuna__Remote_Training__Plinth__Hit_Button_from_Afar | LocationId::Annuna__Remote_Training__Upper_Climb__Remote_Button | LocationId::Annuna__Remote_Training__Button__Hit_Button | LocationId::Annuna__Remote_Training__Upper_Gate_East__Remote_Button => {
                self.cbits6.insert(flags::ContextBits6::VISITED_ANNUNA_REMOTE_TRAINING_GATE);
            }
            LocationId::Annuna__Seals__Breakable_Rock__Break_Through_Wall | LocationId::Annuna__Seals__Breakable_Rock__Mist_Through_Wall | LocationId::Annuna__Seals__Breakable_Rock__Faster_Mist_Through_Wall => {
                self.cbits6.insert(flags::ContextBits6::VISITED_APOCALYPSE_SEALS_WALL);
            }
            LocationId::Annuna__Apocalypse__Center_Scaffold_West__Boss_Fight | LocationId::Annuna__Apocalypse__Center_Scaffold_West__Fill_It_Up => {
                self.cbits6.insert(flags::ContextBits6::VISITED_APOCALYPSE_BOMB);
            }
            LocationId::Antarctica__Building_2__Behind_Boxes__Note | LocationId::Glacier__Dock_Outside__Ruins_Stairs__Note => {
                self.cbits10.insert(flags::ContextBits10::VISITED_NOTES_2053_02_27);
            }
            LocationId::Ebih_Breach__Snowy_Rocks__Cache__Flask | LocationId::Ebih_Breach__Snowy_Rocks__Cache__Flask_Collection_Skip | LocationId::Ebih_Breach__Snowy_Rocks__Cache__Flask_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_BREACH_SNOWY_ROCKS_FLASK);
            }
            LocationId::Ebih_Breach__Lake_Gate__Button__Hit_Button | LocationId::Ebih_Breach__Lake_Gate__Interior__Hit_Button_From_Afar => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_BREACH_LAKE_GATE);
            }
            LocationId::Ebih_Breach__Spider_Guards__East_Sand_Pit__Flask | LocationId::Ebih_Breach__Spider_Guards__East_Sand_Pit__Flask_Collection_Skip | LocationId::Ebih_Breach__Spider_Guards__East_Sand_Pit__Flask_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_BREACH_SPIDER_GUARDS_FLASK);
            }
            LocationId::Ebih_Breach__Double_Gate__Button_Left__Open_Gate | LocationId::Ebih_Breach__Double_Gate__Button_Right__Open_Gate => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_BREACH_DOUBLE_GATE_GATE);
            }
            LocationId::Ebih_Breach__The_Vault__Dais_Center__Urn | LocationId::Ebih_Breach__The_Vault__Dais_Center__Urn_Collection_Skip | LocationId::Ebih_Breach__The_Vault__Dais_Center__Urn_Fast_Travel => {
                self.cbits10.insert(flags::ContextBits10::VISITED_SLINGSHOT_WEAPON);
            }
            LocationId::Ebih_Breach__Rocky_Cages__Cage_Bottom__Flask | LocationId::Ebih_Breach__Rocky_Cages__Cage_Bottom__Flask_Collection_Skip | LocationId::Ebih_Breach__Rocky_Cages__Cage_Bottom__Flask_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_BREACH_ROCKY_CAGES_FLASK);
            }
            LocationId::Ebih_Breach__Rock_Block__Rock_Top__Mist_Down | LocationId::Ebih_Breach__Rock_Block__Rock_Top__Upgraded_Mist_Down | LocationId::Ebih_Breach__Rock_Block__Rock_Top__Charge_and_Down | LocationId::Ebih_Breach__Rock_Block__Rock_Top__Spin_and_Down | LocationId::Ebih_Breach__Rock_Block__Rock_Southwest__Mist_Up | LocationId::Ebih_Breach__Rock_Block__Rock_Southwest__Upgraded_Mist_Up | LocationId::Ebih_Breach__Rock_Block__Rock_East__Mist_Up | LocationId::Ebih_Breach__Rock_Block__Rock_East__Upgraded_Mist_Up | LocationId::Ebih_Breach__Rock_Block__Rock_East__Charge_and_Break_All | LocationId::Ebih_Breach__Rock_Block__Rock_East__Spin_and_Break_All => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_BREACH_ROCK_BLOCK_ROCK);
            }
            LocationId::Ebih_Breach__Rock_Block__East_Tunnel__Flask | LocationId::Ebih_Breach__Rock_Block__East_Tunnel__Flask_Collection_Skip | LocationId::Ebih_Breach__Rock_Block__East_Tunnel__Flask_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_BREACH_ROCK_BLOCK_FLASK);
            }
            LocationId::Ebih_Breach__Vertical_Room__Cache__Flask | LocationId::Ebih_Breach__Vertical_Room__Cache__Flask_Collection_Skip | LocationId::Ebih_Breach__Vertical_Room__Cache__Flask_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_BREACH_VERTICAL_ROOM_FLASK);
            }
            LocationId::Ebih__Base_Camp__Left_Platform_Moved__Item_From_The_Side | LocationId::Ebih__Base_Camp__Top_Platform__Item => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_BASE_CAMP_FRAGMENT);
            }
            LocationId::Ebih__Grid_25_10_12__East_10__Remote_Bush | LocationId::Ebih__Grid_25_10_12__Hidden_Bush__Behind_Bush => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_BUSH_FLASK);
            }
            LocationId::Ebih__Waterfall__Alcove_Right__Block_Right | LocationId::Ebih__Waterfall__Alcove__Block_Right => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_WATERFALL_BLOCK_RIGHT);
            }
            LocationId::Ebih__Waterfall__Alcove_Left__Block_Left | LocationId::Ebih__Waterfall__Alcove__Block_Left => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_WATERFALL_BLOCK_LEFT);
            }
            LocationId::Ebih__Waterfall__Wall_Right__Break_Wall | LocationId::Ebih__Waterfall__Wall_Right__Break_Through_Wall | LocationId::Ebih__Waterfall__Wall_Right__Upgraded_Mist_Through_Wall | LocationId::Ebih__Waterfall__Wall_Left__Break_Wall | LocationId::Ebih__Waterfall__Wall_Left__Break_Through_Wall | LocationId::Ebih__Waterfall__Wall_Left__Upgraded_Mist_Through_Wall => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_WATERFALL_WALL);
            }
            LocationId::Ebih__Ebih_West__Block_Left__Break_Block | LocationId::Ebih__Ebih_West__Block_Right__Break_Block => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_WEST_BLOCK);
            }
            LocationId::Ebih__Ebih_West__Highest_Platform__Flask | LocationId::Ebih__Ebih_West__Highest_Platform__Shockwave_Flask | LocationId::Ebih__Ebih_West__Highest_Platform__Flask_Collection_Skip | LocationId::Ebih__Ebih_West__Highest_Platform__Flask_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_WEST_FLASK);
            }
            LocationId::Ebih__Ebih_East__Lower_Moving_Platform__Remote_Urn | LocationId::Ebih__Ebih_East__Corner__Urn => {
                self.cbits7.insert(flags::ContextBits7::VISITED_INFECT);
            }
            LocationId::Ebih__Ebih_East__Wall_East__Break_Wall | LocationId::Ebih__Ebih_East__Wall_East__Break_Through_Wall | LocationId::Ebih__Ebih_East__Wall_East__Break_Through_Wall_Faster | LocationId::Ebih__Ebih_East__Wall_West__Break_Wall | LocationId::Ebih__Ebih_East__Wall_West__Break_Through_Wall | LocationId::Ebih__Ebih_East__Wall_West__Break_Through_Wall_Faster => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_EAST_WALL);
            }
            LocationId::Ebih__Hidden_Portal__East_5__Boomerang_Button | LocationId::Ebih__Hidden_Portal__Button__Hit_Button | LocationId::Ebih__Hidden_Portal__Gate_Ledge_East__Remote_Button => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_HIDDEN_PORTAL_GATE);
            }
            LocationId::Ebih__West_Face__Lower_Ledge__Flask | LocationId::Ebih__West_Face__Lower_Ledge__Shockwave_Flask | LocationId::Ebih__West_Face__Lower_Ledge__Flask_Collection_Skip | LocationId::Ebih__West_Face__Lower_Ledge__Flask_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_WEST_FACE_FLASK);
            }
            LocationId::Ebih__Boss_Room__Boss__Hack_Alu | LocationId::Ebih__Boss_Room__Boss__Fight_Alu => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_ALU);
            }
            LocationId::Ebih__Drone_Room__Item__Urn | LocationId::Ebih__Drone_Room__Item__Urn_Collection_Skip | LocationId::Ebih__Drone_Room__Item__Urn_Fast_Travel | LocationId::Ebih__Drone_Room__Middle_Platform__Urn_Quick_Grab => {
                self.cbits10.insert(flags::ContextBits10::VISITED_REMOTE_DRONE);
            }
            LocationId::Ebih__Drone_Pit__Pit__Item | LocationId::Ebih__Drone_Pit__Pit__Shockwave_Flask | LocationId::Ebih__Drone_Pit__Pit__Flask_Collection_Skip | LocationId::Ebih__Drone_Pit__Pit__Flask_Fast_Travel | LocationId::Ebih__Drone_Pit__Bush_Left__Item | LocationId::Ebih__Drone_Pit__Bush_Left__Shockwave_Flask => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_DRONE_PIT_FLASK);
            }
            LocationId::Ebih__Drone_Pit__Highest_Point__Flask | LocationId::Ebih__Drone_Pit__Highest_Point__Shockwave_Flask | LocationId::Ebih__Drone_Pit__Highest_Point__Flask_Collection_Skip | LocationId::Ebih__Drone_Pit__Highest_Point__Flask_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_HIGH_FLASK);
            }
            LocationId::Ebih__Walled_Off__Wall_Right__Break_Wall | LocationId::Ebih__Walled_Off__Wall_Right__Break_Through_Wall | LocationId::Ebih__Walled_Off__Wall_Right__Break_Through_Wall_Faster | LocationId::Ebih__Walled_Off__Wall_Left__Break_Wall | LocationId::Ebih__Walled_Off__Wall_Left__Break_Through_Wall | LocationId::Ebih__Walled_Off__Wall_Left__Break_Through_Wall_Faster => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_WALLED_OFF_WALL);
            }
            LocationId::Ebih__Gem_Room__Button_Corner__Remote_Button | LocationId::Ebih__Gem_Room__Button_Nearby__Hit_Button => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_GEM_ROOM_GATE);
            }
            LocationId::Ebih__Gem_Room__Button_Corner__Shockwave_Secret_Flask | LocationId::Ebih__Gem_Room__Hidden_Tunnel_Corner__Shockwave_Flask | LocationId::Ebih__Gem_Room__Hidden_Tunnel_Corner__Boomerang_Flask | LocationId::Ebih__Gem_Room__Hidden_Cache__Flask | LocationId::Ebih__Gem_Room__Hidden_Cache__Flask_Collection_Skip | LocationId::Ebih__Gem_Room__Hidden_Cache__Flask_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_GEM_ROOM_FLASK);
            }
            LocationId::Ebih__Party_Central__Bottom_East__Shockwave_Flask | LocationId::Ebih__Party_Central__East_Trough__Flask | LocationId::Ebih__Party_Central__East_Trough__Flask_Collection_Skip | LocationId::Ebih__Party_Central__East_Trough__Flask_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_PARTY_CENTRAL_FLASK);
            }
            LocationId::Emergence__Drop_off__Wall_Left__Charge_Through_Wall | LocationId::Emergence__Drop_off__Wall_Left__Spin_Through_Wall | LocationId::Emergence__Drop_off__Wall_Left__Mist_Through_Wall | LocationId::Emergence__Drop_off__Wall_Left__Upgraded_Mist_Through_Wall | LocationId::Emergence__Drop_off__Wall_Left__Mist_Upwards_Through_Wall | LocationId::Emergence__Drop_off__Wall_Left__Upgraded_Mist_Upwards_Through_Wall | LocationId::Emergence__Drop_off__Wall_Left__Mist_On_Through | LocationId::Emergence__Drop_off__Wall_Left__Upgraded_Mist_On_Through | LocationId::Emergence__Drop_off__Wall_Right__Charge_Through_Wall | LocationId::Emergence__Drop_off__Wall_Right__Spin_Through_Wall | LocationId::Emergence__Drop_off__Wall_Right__Mist_Through_Wall | LocationId::Emergence__Drop_off__Wall_Right__Upgraded_Mist_Through_Wall => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EMERGENCE_DROPOFF_WALL);
            }
            LocationId::Emergence__Drop_off__Wall_Right__Shockwave_Flask | LocationId::Emergence__Drop_off__Wall_Right__Remote_Flask | LocationId::Emergence__Drop_off__Basin__Flask | LocationId::Emergence__Drop_off__Basin__Flask_Collection_Skip | LocationId::Emergence__Drop_off__Basin__Flask_Fast_Travel | LocationId::Emergence__Drop_off__Upper_Ledge__Nearby_Flask | LocationId::Emergence__Drop_off__Upper_Right__Nearby_Flask => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EMERGENCE_DROPOFF_FLASK);
            }
            LocationId::Emergence__Audience_Chamber__East_10__Shockwave_Flask | LocationId::Emergence__Audience_Chamber__East_10__Boomerang_Flask | LocationId::Emergence__Audience_Chamber__Cache__Flask | LocationId::Emergence__Audience_Chamber__Cache__Flask_Collection_Skip | LocationId::Emergence__Audience_Chamber__Cache__Flask_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EMERGENCE_AUDIENCE_CHAMBER_FLASK);
            }
            LocationId::Emergence__Storage__Dais_Right__Shockwave_Urn | LocationId::Emergence__Storage__Dais_Right__Remote_Urn | LocationId::Emergence__Storage__Dais_Right__Remote_Urn_Fast_Travel | LocationId::Emergence__Storage__Dais_Middle__Urn | LocationId::Emergence__Storage__Dais_Middle__Urn_Collection_Skip | LocationId::Emergence__Storage__Dais_Middle__Urn_Fast_Travel | LocationId::Emergence__Storage__Dais_Left__Shockwave_Urn => {
                self.cbits10.insert(flags::ContextBits10::VISITED_SLINGSHOT_CHARGE);
            }
            LocationId::Emergence__Storage__Wall_Right_Ledge__Spin_Through_Wall | LocationId::Emergence__Storage__Wall_Right_Ledge__Charge_Through_Wall | LocationId::Emergence__Storage__Wall_Right__Mist_Through_Wall | LocationId::Emergence__Storage__Wall_Right__Upgraded_Mist_Through_Wall | LocationId::Emergence__Storage__Wall_Left__Mist_Through_Wall | LocationId::Emergence__Storage__Wall_Left__Upgraded_Mist_Through_Wall | LocationId::Emergence__Storage__Wall_Left_Ledge__Spin_Through_Wall | LocationId::Emergence__Storage__Wall_Left_Ledge__Charge_Through_Wall => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EMERGENCE_STORAGE_ROCK);
            }
            LocationId::Emergence__Storage__Tunnel_Ledge__Spin_Into_Tunnel | LocationId::Emergence__Storage__Tunnel_Ledge__Charge_Into_Tunnel | LocationId::Emergence__Storage__Tunnel_Entrance__Mist_Through_Rock | LocationId::Emergence__Storage__Tunnel_Entrance__Upgraded_Mist_Through_Rock | LocationId::Emergence__Storage__Behind_Facade__Mist_Through_Rock | LocationId::Emergence__Storage__Behind_Facade__Upgraded_Mist_Through_Rock => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EMERGENCE_STORAGE_TUNNEL);
            }
            LocationId::Emergence__Rocks_Fall__Wall_1_Northeast__Mist_Through_Rock | LocationId::Emergence__Rocks_Fall__Wall_1_Northeast__Upgraded_Mist_Through_Rock | LocationId::Emergence__Rocks_Fall__Wall_1_East__Mist_Through_Rock | LocationId::Emergence__Rocks_Fall__Wall_1_East__Upgraded_Mist_Through_Rock | LocationId::Emergence__Rocks_Fall__Wall_1_West__Mist_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_1_West__Upgraded_Mist_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_1_West__Mist_Upward_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_1_West__Upgraded_Mist_Upward_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_1_West__Charge_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_2_Northwest__Spin_Through_Wall_1 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EMERGENCE_ROCKS_FALL_ROCK_1);
            }
            LocationId::Emergence__Rocks_Fall__Wall_2_Northwest__Mist_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_2_Northwest__Upgraded_Mist_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_2_Northwest__Spin_Through_Wall_2 | LocationId::Emergence__Rocks_Fall__Wall_2_West__Spin_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_2_West__Charge_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_2_East__Mist_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_2_East__Upgraded_Mist_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_2_East__Mist_Upward_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_2_East__Upgraded_Mist_Upward_Through_Wall | LocationId::Emergence__Rocks_Fall__Middle_Ledge__Spin_Through_Wall_2 | LocationId::Emergence__Rocks_Fall__Middle_Ledge__Charge_Through_Wall_2 => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EMERGENCE_ROCKS_FALL_ROCK_2);
            }
            LocationId::Emergence__Rocks_Fall__Wall_3_Northeast__Mist_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_3_Northeast__Upgraded_Mist_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_3_West__Mist_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_3_West__Upgraded_Mist_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_3_West__Mist_Upwards_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_3_West__Upgraded_Mist_Upwards_Through_Wall | LocationId::Emergence__Rocks_Fall__Lower_Ledge__Spin_Through_Wall | LocationId::Emergence__Rocks_Fall__Lower_Ledge__Charge_Through_Wall => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EMERGENCE_ROCKS_FALL_ROCK_3);
            }
            LocationId::Emergence__Rocks_Fall__Wall_4_West_Ledge__Spin_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_4_West_Ledge__Spin_Through_Wall_and_Hover | LocationId::Emergence__Rocks_Fall__Wall_4_West_Ledge__Charge_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_4_West__Mist_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_4_West__Upgraded_Mist_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_4_East__Mist_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_4_East__Upgraded_Mist_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_4_East_Ledge__Spin_Through_Wall | LocationId::Emergence__Rocks_Fall__Wall_4_East_Ledge__Charge_Through_Wall => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EMERGENCE_ROCKS_FALL_ROCK_4);
            }
            LocationId::Giguna_Breach__Robopede__West__Strong_Attacks | LocationId::Giguna_Breach__Robopede__West__Medium | LocationId::Giguna_Breach__Robopede__West__Bad | LocationId::Giguna_Breach__Robopede__Center__Strong_Attacks | LocationId::Giguna_Breach__Robopede__Center__Medium | LocationId::Giguna_Breach__Robopede__Center__Bad => {
                self.cbits10.insert(flags::ContextBits10::VISITED_ROBOPEDE);
            }
            LocationId::Giguna_Breach__Labyrinth__Pipe_Cache__Flask | LocationId::Giguna_Breach__Labyrinth__Pipe_Cache__Flask_Collection_Skip | LocationId::Giguna_Breach__Labyrinth__Pipe_Cache__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GIGUNA_LABYRINTH_FLASK);
            }
            LocationId::Giguna_Breach__Labyrinth__Plinth_Approach__Mid_air_Urn | LocationId::Giguna_Breach__Labyrinth__Plinth__Urn | LocationId::Giguna_Breach__Labyrinth__Plinth__Urn_Collection_Skip | LocationId::Giguna_Breach__Labyrinth__Plinth__Urn_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_DRONE_MELEE_CHARGE);
            }
            LocationId::Giguna_Breach__Lower_Machinery__Bottom__Flask | LocationId::Giguna_Breach__Lower_Machinery__Bottom__Flask_Collection_Skip | LocationId::Giguna_Breach__Lower_Machinery__Bottom__Flask_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA_BREACH_LOWER_MACHINERY_FLASK);
            }
            LocationId::Giguna_Breach__Gate_and_Wall__Button_Right__Hit_Button | LocationId::Giguna_Breach__Gate_and_Wall__Button_Left__Hit_Button => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA_BREACH_GATE_AND_WALL_GATE);
            }
            LocationId::Giguna_Breach__Crab_Rave__A_Crabs_Treasure__Flask | LocationId::Giguna_Breach__Crab_Rave__A_Crabs_Treasure__Flask_Collection_Skip | LocationId::Giguna_Breach__Crab_Rave__A_Crabs_Treasure__Flask_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA_BREACH_CRAB_RAVE_FLASK);
            }
            LocationId::Giguna_Breach__Emergence__Corner__Flask | LocationId::Giguna_Breach__Emergence__Corner__Flask_Collection_Skip | LocationId::Giguna_Breach__Emergence__Corner__Flask_Fast_Travel | LocationId::Giguna_Breach__Emergence__Left_Side__Flask_from_Below => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EMERGENCE_BREACH_FLASK);
            }
            LocationId::Giguna_Breach__Pinkness__Rock_Top__Mist_Down | LocationId::Giguna_Breach__Pinkness__Rock_Top__Upgraded_Mist_Down | LocationId::Giguna_Breach__Pinkness__Rock_Top__Charge_Down | LocationId::Giguna_Breach__Pinkness__Rock_Top__Spin_Down | LocationId::Giguna_Breach__Pinkness__Rock_Bottom__Mist_Up | LocationId::Giguna_Breach__Pinkness__Rock_Bottom__Upgraded_Mist_Up | LocationId::Giguna_Breach__Pinkness__Rock_Bottom__Charge_Up | LocationId::Giguna_Breach__Pinkness__Rock_Bottom__Spin_Up => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA_BREACH_PINKNESS_ROCK);
            }
            LocationId::Giguna__Giguna_Northeast__Gate_Button__Open_Gate | LocationId::Giguna__Giguna_Northeast__Gate_Right__Remote_Button => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GIGUNA_NORTHEAST_GATE);
            }
            LocationId::Giguna__Giguna_Northeast__Door__Remote_Flask | LocationId::Giguna__Giguna_Northeast__Vault__Item | LocationId::Giguna__Giguna_Northeast__Vault__Flask_Collection_Skip | LocationId::Giguna__Giguna_Northeast__Vault__Flask_Fast_Travel | LocationId::Giguna__Giguna_Northeast__Vault_East__Shockwave_Flask => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GIGUNA_NORTHEAST_FLASK);
            }
            LocationId::Giguna__Wasteland__Passage_East__Clear_Horizontal_Passage_Manually | LocationId::Giguna__Wasteland__Passage_East__Mist_through_Horizontal_Passage | LocationId::Giguna__Wasteland__Passage_East__Upgraded_Mist_through_Horizontal_Passage | LocationId::Giguna__Wasteland__Passage_Cache__Clear_Horizontal_Passage_Manually | LocationId::Giguna__Wasteland__Passage_Cache__Mist_through_Horizontal_Passage | LocationId::Giguna__Wasteland__Passage_Cache__Upgraded_Mist_through_Horizontal_Passage => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GIGUNA_WASTELAND_PASSAGE_H);
            }
            LocationId::Giguna__Wasteland__Upper_Cache__Flask | LocationId::Giguna__Wasteland__Upper_Cache__Shockwave_Flask | LocationId::Giguna__Wasteland__Upper_Cache__Flask_Collection_Skip | LocationId::Giguna__Wasteland__Upper_Cache__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GIGUNA_WASTELAND_FLASK);
            }
            LocationId::Giguna__Wasteland__Switch_Approach__Boomerang_Switch | LocationId::Giguna__Wasteland__Switch__Switch => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GIGUNA_WASTELAND_SWITCH);
            }
            LocationId::Giguna__Ruins_East__Way_Up_High__Item | LocationId::Giguna__Ruins_East__Way_Up_High__Flask_Collection_Skip | LocationId::Giguna__Ruins_East__Way_Up_High__Flask_Fast_Travel | LocationId::Giguna__Ruins_East__Way_Up_High__Shockwave_Flask => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA_HIGHEST_FLASK);
            }
            LocationId::Giguna__Ruins_Top__Small_Ledge__Shockwave_Flask | LocationId::Giguna__Ruins_Top__Flask__Flask => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GIGUNA_TOP_FLASK);
            }
            LocationId::Giguna__Clouds__Cache__Item | LocationId::Giguna__Clouds__Cache__Flask_Collection_Skip | LocationId::Giguna__Clouds__Cache__Flask_Fast_Travel | LocationId::Giguna__Clouds__Cache__Shockwave_Flask => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA_CLOUDS_FLASK);
            }
            LocationId::Giguna__Lamassu__Deposit_Ledge__Shockwave_Flask | LocationId::Giguna__Lamassu__Deposit__Flask | LocationId::Giguna__Lamassu__Deposit__Flask_Collection_Skip | LocationId::Giguna__Lamassu__Deposit__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GIGUNA_LAMASSU_FLASK);
            }
            LocationId::Giguna__Dual_Path__Below_Left_Switch__Remote_Switch | LocationId::Giguna__Dual_Path__Left_Switch__Hit_Switch | LocationId::Giguna__Dual_Path__Right_Switch__Hit_Switch | LocationId::Giguna__Dual_Path__Below_Right_Switch__Remote_Switch => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA_DUAL_PATH_SWITCH);
            }
            LocationId::Giguna__Dual_Path__Base_of_Wall__Break_Wall | LocationId::Giguna__Dual_Path__Base_of_Wall__Mist_into_Wall | LocationId::Giguna__Dual_Path__Base_of_Wall__Upgraded_Mist_into_Wall => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA_DUAL_PATH_WALL);
            }
            LocationId::Giguna__Hard_Rock__Rock_Right__Shockwave_Boulder | LocationId::Giguna__Hard_Rock__Rock_Right__Enter_Rock_as_Mist | LocationId::Giguna__Hard_Rock__Rock_Right__Enter_Rock_as_Upgraded_Mist | LocationId::Giguna__Hard_Rock__Rock_Left__Shockwave_Boulder | LocationId::Giguna__Hard_Rock__Rock_Left__Enter_Rock_as_Mist | LocationId::Giguna__Hard_Rock__Rock_Left__Enter_Rock_as_Upgraded_Mist => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA_BOULDER);
            }
            LocationId::Giguna__East_Caverns__Hidden_Passage_Center__Hidden_Flask | LocationId::Giguna__East_Caverns__Hidden_Passage_Center__Flask_Collection_Skip | LocationId::Giguna__East_Caverns__Hidden_Passage_Center__Flask_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA_EAST_RUINS_FLASK);
            }
            LocationId::Giguna__Gateway__Block_Left__Shockwave | LocationId::Giguna__Gateway__Block_Right__Shockwave => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA_GATEWAY_BLOCK);
            }
            LocationId::Giguna__Gateway__One_Jump__Shockwave_Flask | LocationId::Giguna__Gateway__Flask_Ledge__Item | LocationId::Giguna__Gateway__Flask_Ledge__Flask_Collection_Skip | LocationId::Giguna__Gateway__Flask_Ledge__Flask_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA_GATEWAY_FLASK);
            }
            LocationId::Giguna__Vertical_Interchange__Gate__Jump_Boomerang_Flask | LocationId::Giguna__Vertical_Interchange__Dead_end_Ledge__Shockwave_Flask | LocationId::Giguna__Vertical_Interchange__Dead_end__Flask | LocationId::Giguna__Vertical_Interchange__Dead_end__Flask_Collection_Skip | LocationId::Giguna__Vertical_Interchange__Dead_end__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GIGUNA_VERTICAL_INTERCHANGE_FLASK);
            }
            LocationId::Giguna__Vertical_Interchange__Middle_Hill_By_Switch__Remote_Button | LocationId::Giguna__Vertical_Interchange__Switch__Button => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GIGUNA_VERTICAL_INTERCHANGE_GATE);
            }
            LocationId::Giguna__Vertical_Interchange__Above_Rock__Charge_Downwards | LocationId::Giguna__Vertical_Interchange__Above_Rock__Spin_Downwards | LocationId::Giguna__Vertical_Interchange__Above_Rock__Mist_Downwards | LocationId::Giguna__Vertical_Interchange__Above_Rock__Upgraded_Mist_Downwards | LocationId::Giguna__Vertical_Interchange__Rock_East__Charge_Through_Rock | LocationId::Giguna__Vertical_Interchange__Rock_East__Spin_Through_Rock | LocationId::Giguna__Vertical_Interchange__Rock_East__Mist_Into_Rock | LocationId::Giguna__Vertical_Interchange__Rock_East__Upgraded_Mist_Into_Rock | LocationId::Giguna__Vertical_Interchange__Rock_East__Charge_Upward_Through_Rock | LocationId::Giguna__Vertical_Interchange__Rock_East__Spin_Upward_Through_Rock | LocationId::Giguna__Vertical_Interchange__Rock_East__Mist_Upwards_Through_Rock | LocationId::Giguna__Vertical_Interchange__Rock_East__Upgraded_Mist_Upwards_Through_Rock | LocationId::Giguna__Vertical_Interchange__Rock_West__Charge_Through_Rock | LocationId::Giguna__Vertical_Interchange__Rock_West__Charge_All_The_Way_Through_Rock | LocationId::Giguna__Vertical_Interchange__Rock_West__Spin_Through_Rock | LocationId::Giguna__Vertical_Interchange__Rock_West__Spin_Through_Rock_and_Hover | LocationId::Giguna__Vertical_Interchange__Rock_West__Mist_Into_Rock | LocationId::Giguna__Vertical_Interchange__Rock_West__Upgraded_Mist_Into_Rock | LocationId::Giguna__Vertical_Interchange__Rock_West__Mist_Upwards_Through_Rock | LocationId::Giguna__Vertical_Interchange__Rock_West__Upgraded_Mist_Upwards_Through_Rock => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GIGUNA_VERTICAL_INTERCHANGE_ROCK);
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Hack_Gubi | LocationId::Giguna__Gubi_Lair__Center_Platform__Fight_Gubi => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA_GUBI);
            }
            LocationId::Giguna__Gubi_Lair__Center_Platform__Boss_Reward | LocationId::Giguna__Gubi_Lair__Center_Platform__Fetch_Boss_Reward => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA_GUBI_FLASK);
            }
            LocationId::Giguna__Mural__Shocking_Distance__Shockwave_Flask | LocationId::Giguna__Mural__Enclosed_Cache__Flask | LocationId::Giguna__Mural__Enclosed_Cache__Flask_Collection_Skip | LocationId::Giguna__Mural__Enclosed_Cache__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GIGUNA_MURAL_FLASK);
            }
            LocationId::Giguna__Breachable_Wall__Above_the_Hole__Shockwave_Flask | LocationId::Giguna__Breachable_Wall__Wall_Interior__Flask | LocationId::Giguna__Breachable_Wall__Wall_Interior__Shockwave_Flask => {
                self.cbits6.insert(flags::ContextBits6::VISITED_GIGUNA_BREACHABLE_WALL_FLASK);
            }
            LocationId::Giguna__Separator__Upper_Brick__Break_Bricks | LocationId::Giguna__Separator__Upper_Brick__Break_Bricks_Faster | LocationId::Giguna__Separator__Lower_Brick__Break_Bricks | LocationId::Giguna__Separator__Lower_Brick__Break_Bricks_Faster => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GIGUNA_SEPARATOR_BRICKS);
            }
            LocationId::Giguna__Secrecy__West_Column_East__Boomerang_Flask | LocationId::Giguna__Secrecy__West_Column_East__Boomerang_Flask_Fast_Travel | LocationId::Giguna__Secrecy__Near_East_Column__Shockwave_Flask | LocationId::Giguna__Secrecy__East_Column__Flask | LocationId::Giguna__Secrecy__East_Column__Flask_Collection_Skip | LocationId::Giguna__Secrecy__East_Column__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GIGUNA_SECRECY_FLASK);
            }
            LocationId::Glacier_Breach__Grate_Work__Grate_Interior__Item | LocationId::Glacier_Breach__Grate_Work__Grate_Interior__Flask_Collection_Skip | LocationId::Glacier_Breach__Grate_Work__Grate_Interior__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GLACIER_BREACH_GRATE_WORK_FLASK);
            }
            LocationId::Glacier_Breach__Control__Upper_Corner__Control_Enemy | LocationId::Glacier_Breach__Control__Upper_Corner__Control_Enemy_And_Jump => {
                self.cbits10.insert(flags::ContextBits10::VISITED_SYNC_FLASK);
            }
            LocationId::Glacier_Breach__Floaters__Hidden__Flask | LocationId::Glacier_Breach__Floaters__Hidden__Flask_Collection_Skip | LocationId::Glacier_Breach__Floaters__Hidden__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GLACIER_BREACH_FLOATERS_FLASK);
            }
            LocationId::Glacier_Breach__Spidery_Connector__Midway__Flask | LocationId::Glacier_Breach__Spidery_Connector__Midway__Flask_Collection_Skip | LocationId::Glacier_Breach__Spidery_Connector__Midway__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GLACIER_BREACH_SPIDERY_CONNECTOR_FLASK);
            }
            LocationId::Glacier__Dock_Outside__Cave_Treasure__Item | LocationId::Glacier__Dock_Outside__Cave_Treasure__Flask_Collection_Skip | LocationId::Glacier__Dock_Outside__Cave_Treasure__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GLACIER_DOCK_FLASK);
            }
            LocationId::Glacier__Revival__Pillar__Health | LocationId::Glacier__Revival__Mid_air__Fly_to_the_Platform_and_Grab | LocationId::Glacier__Revival__Mid_air__Fly_to_the_Stairs_and_Grab => {
                self.cbits10.insert(flags::ContextBits10::VISITED_REVIVAL_HEALTH_NODE);
            }
            LocationId::Glacier__The_Big_Drop__West_14__Break_Rock | LocationId::Glacier__The_Big_Drop__West_14__Mist_Through | LocationId::Glacier__The_Big_Drop__West_14__Mist_Through_Faster | LocationId::Glacier__The_Big_Drop__Breakable_Rock_Right__Break_Rock | LocationId::Glacier__The_Big_Drop__Breakable_Rock_Right__Mist_Through | LocationId::Glacier__The_Big_Drop__Breakable_Rock_Right__Mist_Through_Faster => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GLACIER_BIG_DROP_ROCK);
            }
            LocationId::Glacier__Sea_Burial__Breakable_Rock_Left__Break_Rock | LocationId::Glacier__Sea_Burial__Breakable_Rock_Left__Mist_Through | LocationId::Glacier__Sea_Burial__Breakable_Rock_Left__Mist_Through_Faster | LocationId::Glacier__Sea_Burial__Breakable_Rock_Right__Break_Rock_while_Jumping | LocationId::Glacier__Sea_Burial__Breakable_Rock_Right__Mist_Through | LocationId::Glacier__Sea_Burial__Breakable_Rock_Right__Mist_Through_Faster => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GLACIER_SEA_BURIAL_ROCK);
            }
            LocationId::Glacier__Grid_39_40_7_9__Third_Upper_Platform__Fly_by_Flask_Toward_Fortress | LocationId::Glacier__Grid_39_40_7_9__Third_Upper_Platform__Charged_Fly_by_Flask_Toward_Fortress | LocationId::Glacier__Grid_39_40_7_9__Floating_Rock__Item | LocationId::Glacier__Grid_39_40_7_9__Floating_Rock__Flask_Collection_Skip | LocationId::Glacier__Grid_39_40_7_9__Floating_Rock__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GLACIER_40_8_FLASK);
            }
            LocationId::Glacier__Vertical_Room__Peak__Flask | LocationId::Glacier__Vertical_Room__Peak__Flask_Collection_Skip | LocationId::Glacier__Vertical_Room__Peak__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GLACIER_VERTICAL_ROOM_FLASK);
            }
            LocationId::Glacier__Ledge_Grab_Room__Cliff_Bottom__Quick_Grab | LocationId::Glacier__Ledge_Grab_Room__Pedestal__Item => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LEDGE_GRAB);
            }
            LocationId::Glacier__Lake_Main_Entrance__Close_Enough__Shockwave_Flask | LocationId::Glacier__Lake_Main_Entrance__Close_Enough__Boomerang_Flask | LocationId::Glacier__Lake_Main_Entrance__Close_Enough__Boomerang_Fast_Travel | LocationId::Glacier__Lake_Main_Entrance__Cache__Flask | LocationId::Glacier__Lake_Main_Entrance__Cache__Flask_Collection_Skip | LocationId::Glacier__Lake_Main_Entrance__Cache__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GLACIER_LAKE_MAIN_ENTRANCE_FLASK);
            }
            LocationId::Glacier__Apocalypse_Entry__Grate_Ledge__Escape | LocationId::Glacier__Apocalypse_Entry__Grate_Ledge__Hook_Escape => {
                self.cbits6.insert(flags::ContextBits6::VISITED_ESCAPE);
            }
            LocationId::Glacier__Hammonds_End__Hammond__Note | LocationId::Glacier__Hammonds_End__Corner__Quick_Note => {
                self.cbits7.insert(flags::ContextBits7::VISITED_HAMMONDS_NOTE);
            }
            LocationId::Glacier__Fortress__Inner_Center__Shockwave_Block | LocationId::Glacier__Fortress__Inner_Center__Shockwave_Fast_Travel | LocationId::Glacier__Fortress__Parapet_Crenelle_2__Shockwave_Block | LocationId::Glacier__Fortress__Parapet_Crenelle_2__Shockwave_Fast_Travel | LocationId::Glacier__Fortress__Parapet_Center_East__Shockwave_Block | LocationId::Glacier__Fortress__Parapet_Center_East__Shockwave_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_GLACIER_FORTRESS_FLASK);
            }
            LocationId::Interior__Building_Interior__Entry__Remote_Urn | LocationId::Interior__Building_Interior__Entry__Urn_Collection_Skip | LocationId::Interior__Building_Interior__Corner__Urn => {
                self.cbits10.insert(flags::ContextBits10::VISITED_MELEE_CHARGE);
            }
            LocationId::Interior__Observatory__Atop_Structure_Center__Remote_Flask | LocationId::Interior__Observatory__Atop_Structure_East__Nearby_Flask | LocationId::Interior__Observatory__Atop_Structure_East__Shockwave_Flask | LocationId::Interior__Observatory__Catwalk__Flask | LocationId::Interior__Observatory__Catwalk__Shockwave_Flask | LocationId::Interior__Observatory__Catwalk__Flask_Collection_Skip | LocationId::Interior__Observatory__Below_Catwalk__Shockwave_Flask_from_Below | LocationId::Interior__Observatory__Below_Catwalk__Boomerang_Steer_into_Flask => {
                self.cbits6.insert(flags::ContextBits6::VISITED_EBIH_OBSERVATORY_FLASK);
            }
            LocationId::Interior__Uhrum_Waterfall_Cave__Slope__Shockwave_Flask | LocationId::Interior__Uhrum_Waterfall_Cave__Slope__Remote_Flask | LocationId::Interior__Uhrum_Waterfall_Cave__Cache__Flask | LocationId::Interior__Uhrum_Waterfall_Cave__Cache__Flask_Collection_Skip => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_WATERFALL_CAVE_FLASK);
            }
            LocationId::Irikar_Breach__Gauntlet__Hidden_Path_Reward__Item | LocationId::Irikar_Breach__Gauntlet__Hidden_Path_Reward__Flask_Collection_Skip | LocationId::Irikar_Breach__Gauntlet__Hidden_Path_Reward__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_IB_GAUNTLET_FLASK);
            }
            LocationId::Irikar_Breach__Buried_Treasure__Pillar_Right__Break_Pillar | LocationId::Irikar_Breach__Buried_Treasure__Pillar_Right__Mist_Into_Pillar | LocationId::Irikar_Breach__Buried_Treasure__Pillar_Right__Upgraded_Mist_Into_Pillar | LocationId::Irikar_Breach__Buried_Treasure__Pillar_Left__Break_Pillar | LocationId::Irikar_Breach__Buried_Treasure__Pillar_Left__Mist_Into_Pillar | LocationId::Irikar_Breach__Buried_Treasure__Pillar_Left__Upgraded_Mist_Into_Pillar => {
                self.cbits7.insert(flags::ContextBits7::VISITED_IRIKAR_BREACH_BURIED_TREASURE_PILLAR);
            }
            LocationId::Irikar_Breach__Beach__Cache__Flask | LocationId::Irikar_Breach__Beach__Cache__Flask_Collection_Skip | LocationId::Irikar_Breach__Beach__Cache__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_IRIKAR_BREACH_BEACH_FLASK);
            }
            LocationId::Irikar_Breach__Uhrum_Connector__Rock_West_Ledge__Charge_Through_Wall | LocationId::Irikar_Breach__Uhrum_Connector__Rock_West_Ledge__Spin_Through_Wall | LocationId::Irikar_Breach__Uhrum_Connector__Rock_West_Ledge__Spin_Through_Wall_and_Hover | LocationId::Irikar_Breach__Uhrum_Connector__Rock_West_Ledge__Charge_Through_Wall_and_Hover | LocationId::Irikar_Breach__Uhrum_Connector__Rock_West__Mist_Through_Rock | LocationId::Irikar_Breach__Uhrum_Connector__Rock_West__Upgraded_Mist_Through_Rock | LocationId::Irikar_Breach__Uhrum_Connector__Rock_East__Mist_Through_Rock | LocationId::Irikar_Breach__Uhrum_Connector__Rock_East__Upgraded_Mist_Through_Rock | LocationId::Irikar_Breach__Uhrum_Connector__Rock_East_Ledge__Charge_Through_Wall | LocationId::Irikar_Breach__Uhrum_Connector__Rock_East_Ledge__Spin_Through_Wall | LocationId::Irikar_Breach__Uhrum_Connector__Rock_East_Ledge__Spin_Through_Wall_and_Hover | LocationId::Irikar_Breach__Uhrum_Connector__Rock_East_Ledge__Charge_Through_Wall_and_Hover => {
                self.cbits7.insert(flags::ContextBits7::VISITED_IRIKAR_BREACH_UHRUM_CONNECTOR_WALL);
            }
            LocationId::Irikar_Breach__Uhrum_Connector__Sand_Swarm__Flask | LocationId::Irikar_Breach__Uhrum_Connector__Sand_Swarm__Flask_Collection_Skip | LocationId::Irikar_Breach__Uhrum_Connector__Sand_Swarm__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_IRIKAR_BREACH_UHRUM_CONNECTOR_FLASK);
            }
            LocationId::Irikar__Hub__Royal_Storage_By_Wall__Shockwave_Just_The_Wall | LocationId::Irikar__Hub__Royal_Storage_By_Wall__Mist_into_Wall | LocationId::Irikar__Hub__Royal_Storage_By_Wall__Upgraded_Mist_into_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_IRIKAR_ROYAL_STORAGE_WALL);
            }
            LocationId::Irikar__Hub__Royal_Storage_in_Wall__Item | LocationId::Irikar__Hub__Royal_Storage_in_Wall__Flask_Collection_Skip | LocationId::Irikar__Hub__Royal_Storage_in_Wall__Flask_Fast_Travel | LocationId::Irikar__Hub__Collapsed_Column__Shockwave_to_Get_Item => {
                self.cbits7.insert(flags::ContextBits7::VISITED_IRIKAR_ROYAL_STORAGE_FLASK);
            }
            LocationId::Irikar__Hub__Ruined_Hallway_By_Well__Shockwave_Well | LocationId::Irikar__Hub__Ruined_Hallway_Atop_Well__Well_Item => {
                self.cbits7.insert(flags::ContextBits7::VISITED_IRIKAR_WELL_FLASK);
            }
            LocationId::Irikar__Airy__Cavern_Side__Remote_Flask | LocationId::Irikar__Airy__Cavern_Cache__Flask | LocationId::Irikar__Airy__Cavern_Cache__Shockwave_Flask | LocationId::Irikar__Airy__Cavern_Cache__Flask_Collection_Skip | LocationId::Irikar__Airy__Cavern_Cache__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_IRIKAR_AIRY_FLASK);
            }
            LocationId::Irikar__Sight_Room__Item_Pedestal__Urn | LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Collection_Skip | LocationId::Irikar__Sight_Room__Item_Pedestal__Urn_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_BREACH_SIGHT);
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Defeat_Gudam | LocationId::Irikar__Boss_Room__Bulls_Feet__Defeat_Gudam_With_Strong_Drone | LocationId::Irikar__Boss_Room__Bulls_Feet__Shockwave_Gudam => {
                self.cbits7.insert(flags::ContextBits7::VISITED_IRIKAR_GUDAM);
            }
            LocationId::Irikar__Boss_Room__Bulls_Feet__Boss_Reward | LocationId::Irikar__Boss_Room__Bulls_Feet__Shockwave_Boss_Reward => {
                self.cbits7.insert(flags::ContextBits7::VISITED_IRIKAR_GUDAM_FLASK);
            }
            LocationId::Irikar__Midwest__Left_Platform_Dest__Shockwave_Flask | LocationId::Irikar__Midwest__Right_Platform_Start__Flask | LocationId::Irikar__Midwest__Right_Platform_Start__Flask_Collection_Skip | LocationId::Irikar__Midwest__Right_Platform_Start__Flask_Fast_Travel => {
                self.cbits7.insert(flags::ContextBits7::VISITED_IRIKAR_MIDWEST_FLASK);
            }
            LocationId::Irikar__Beach_Save__Top_Platform__Urn | LocationId::Uhrum__Siege_Corridor__Upper_Rock_Item__Urn => {
                self.cbits6.insert(flags::ContextBits6::VISITED_FAST_TRAVEL);
            }
            LocationId::Uhrum_Breach__Rock_and_Gate__Button__Hit_Button | LocationId::Uhrum_Breach__Rock_and_Gate__Gate_West__Hit_Button => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_BREACH_ROCK_AND_GATE_GATE);
            }
            LocationId::Uhrum_Breach__Rock_and_Gate__Center_Area_West__Charge_Through_Rock | LocationId::Uhrum_Breach__Rock_and_Gate__South__Charge_Through_Rock | LocationId::Uhrum_Breach__Rock_and_Gate__South__Spin_Through_Rock | LocationId::Uhrum_Breach__Rock_and_Gate__South__Spin_Through_Rock_and_Hover | LocationId::Uhrum_Breach__Rock_and_Gate__Rock_West__Mist_Through_Rock | LocationId::Uhrum_Breach__Rock_and_Gate__Rock_West__Upgraded_Mist_Through_Rock | LocationId::Uhrum_Breach__Rock_and_Gate__Rock_East__Mist_Through_Rock | LocationId::Uhrum_Breach__Rock_and_Gate__Rock_East__Upgraded_Mist_Through_Rock | LocationId::Uhrum_Breach__Rock_and_Gate__Rock_East_Ledge__Charge_Through_Rock | LocationId::Uhrum_Breach__Rock_and_Gate__Rock_East_Ledge__Spin_Through_Rock => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_BREACH_ROCK_AND_GATE_ROCK);
            }
            LocationId::Uhrum_Breach__West_Glitch__Narrow_Glitch__Break_Through_Glitch | LocationId::Uhrum_Breach__West_Glitch__Past_Glitch__Break_Through_Glitch => {
                self.cbits11.insert(flags::ContextBits11::VISITED_UHRUM_WEST_GLITCH);
            }
            LocationId::Uhrum_Breach__East_Glitch__Glitch_West__Break_Through_Glitch | LocationId::Uhrum_Breach__East_Glitch__Glitch_East__Break_Through_Glitch => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_EAST_GLITCH);
            }
            LocationId::Uhrum_Breach__East_Copse__Hidden_Cache__Flask | LocationId::Uhrum_Breach__East_Copse__Hidden_Cache__Flask_Collection_Skip | LocationId::Uhrum_Breach__East_Copse__Hidden_Cache__Flask_Fast_Travel => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_BREACH_EAST_COPSE_FLASK);
            }
            LocationId::Uhrum_Breach__Locked_Down__Item_Behind_Gate__Flask | LocationId::Uhrum_Breach__Locked_Down__Item_Behind_Gate__Flask_Collection_Skip | LocationId::Uhrum_Breach__Locked_Down__Item_Behind_Gate__Flask_Fast_Travel => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_BREACH_LOCKED_DOWN_FLASK);
            }
            LocationId::Uhrum_Breach__Overgrown_Ruins__Wall_East__Break_Through_Wall | LocationId::Uhrum_Breach__Overgrown_Ruins__Wall_East__Smash_Through_Wall | LocationId::Uhrum_Breach__Overgrown_Ruins__Wall_East__Mist_Through_Wall | LocationId::Uhrum_Breach__Overgrown_Ruins__Wall_East__Upgraded_Mist_Through_Wall | LocationId::Uhrum_Breach__Overgrown_Ruins__Wall_West__Smash_Through_Wall | LocationId::Uhrum_Breach__Overgrown_Ruins__Wall_West__Mist_Through_Wall | LocationId::Uhrum_Breach__Overgrown_Ruins__Wall_West__Upgraded_Mist_Through_Wall => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_BREACH_OVERGROWN_RUINS_WALL);
            }
            LocationId::Uhrum_Breach__Overgrown_Ruins__Cache__Flask | LocationId::Uhrum_Breach__Overgrown_Ruins__Cache__Flask_Collection_Skip | LocationId::Uhrum_Breach__Overgrown_Ruins__Cache__Flask_Fast_Travel => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_BREACH_OVERGROWN_RUINS_FLASK);
            }
            LocationId::Uhrum__West_Entrance__Upper_Wall_West__Mist_through_Wall | LocationId::Uhrum__West_Entrance__Upper_Wall_West__Upgraded_Mist_through_Wall | LocationId::Uhrum__West_Entrance__Upper_Wall_East__Charge_through_Wall | LocationId::Uhrum__West_Entrance__Upper_Wall_East__Spin_through_Wall | LocationId::Uhrum__West_Entrance__Upper_Wall_East__Mist_through_Wall | LocationId::Uhrum__West_Entrance__Upper_Wall_East__Upgraded_Mist_through_Wall => {
                self.cbits11.insert(flags::ContextBits11::VISITED_UHRUM_WEST_ENTRANCE_UPPER_WALL);
            }
            LocationId::Uhrum__West_Entrance__Lower_Wall_West__Charge_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_West__Spin_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_West__Mist_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_West__Upgraded_Mist_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_East__Charge_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_East__Spin_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_East__Mist_through_Wall | LocationId::Uhrum__West_Entrance__Lower_Wall_East__Upgraded_Mist_through_Wall => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_WEST_ENTRANCE_LOWER_WALL);
            }
            LocationId::Uhrum__Glitchy_Corridor__Behind_West_Glitch__Flask | LocationId::Uhrum__Glitchy_Corridor__Behind_West_Glitch__Shockwave_Flask | LocationId::Uhrum__Glitchy_Corridor__Behind_West_Glitch__Flask_Collection_Skip | LocationId::Uhrum__Glitchy_Corridor__Behind_West_Glitch__Flask_Fast_Travel => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_GLITCHY_CORRIDOR_FLASK);
            }
            LocationId::Uhrum__Glitchy_Corridor__East_Platform__Charge_Through_Wall | LocationId::Uhrum__Glitchy_Corridor__East_Platform__Charge_Through_Wall_and_Hover | LocationId::Uhrum__Glitchy_Corridor__Wall_West__Mist_Through_Wall | LocationId::Uhrum__Glitchy_Corridor__Wall_West__Upgraded_Mist_Through_Wall | LocationId::Uhrum__Glitchy_Corridor__Wall_East__Mist_Through_Wall | LocationId::Uhrum__Glitchy_Corridor__Wall_East__Upgraded_Mist_Through_Wall | LocationId::Uhrum__Glitchy_Corridor__East_27__Charge_Through_Wall | LocationId::Uhrum__Glitchy_Corridor__East_27__Charge_Through_Wall_and_Hover => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_GLITCHY_CORRIDOR_ROCK);
            }
            LocationId::Uhrum__Waterfalls__Ceiling_Cache__Flask | LocationId::Uhrum__Waterfalls__Ceiling_Cache__Flask_Collection_Skip | LocationId::Uhrum__Waterfalls__Ceiling_Cache__Flask_Fast_Travel => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_WATERFALLS_FLASK);
            }
            LocationId::Uhrum__Waterfalls__Barrier_West__Charge_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_West__Spin_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_West__Mist_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_West__Upgraded_Mist_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_East__Charge_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_East__Spin_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_East__Mist_through_Wall | LocationId::Uhrum__Waterfalls__Barrier_East__Upgraded_Mist_through_Wall => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_WATERFALL_WALL);
            }
            LocationId::Uhrum__Waterfalls__Below_Block__Shockwave_Block | LocationId::Uhrum__Waterfalls__Above_Block__Block | LocationId::Uhrum__Waterfalls__East_26__Block => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_WATERFALLS_BLOCK);
            }
            LocationId::Uhrum__East_Lake__West_Block__Dislodge_Block | LocationId::Uhrum__East_Lake__East_Block__Dislodge_Block => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_EAST_LAKE_BLOCK);
            }
            LocationId::Uhrum__Cavern__Wall_Left__Mist_Through_Wall | LocationId::Uhrum__Cavern__Wall_Left__Upgraded_Mist_Through_Wall | LocationId::Uhrum__Cavern__Wall_Left__Charge_Through_Wall | LocationId::Uhrum__Cavern__Wall_Left__Spin_Through_Wall | LocationId::Uhrum__Cavern__Wall_Left__Spin_Through_Wall_and_Hover | LocationId::Uhrum__Cavern__Wall_Right__Mist_Through_Wall | LocationId::Uhrum__Cavern__Wall_Right__Upgraded_Mist_Through_Wall | LocationId::Uhrum__Cavern__Wall_Right__Charge_Through_Wall | LocationId::Uhrum__Cavern__Wall_Right__Charge_Through_Wall_and_Hover | LocationId::Uhrum__Cavern__Wall_Right__Spin_Through_Wall | LocationId::Uhrum__Cavern__Wall_Right__Spin_Through_Wall_and_Hover => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_CAVERN_WALL);
            }
            LocationId::Uhrum__Annuna_Corridor__Upper_Trees__Remote_Urn | LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn | LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Collection_Skip | LocationId::Uhrum__Annuna_Corridor__Pedestal__Urn_Fast_Travel => {
                self.cbits6.insert(flags::ContextBits6::VISITED_ANUMAN);
            }
            LocationId::Uhrum__Annuna_Corridor__Block_West__Dislodge_Block | LocationId::Uhrum__Annuna_Corridor__Block_East__Dislodge_Block => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_ANNUNA_CORRIDOR_BLOCK);
            }
            LocationId::Uhrum__Rocky_Gate__Wall_West__Mist_Through_Wall | LocationId::Uhrum__Rocky_Gate__Wall_West__Upgraded_Mist_Through_Wall | LocationId::Uhrum__Rocky_Gate__Wall_East__Mist_Through_Wall | LocationId::Uhrum__Rocky_Gate__Wall_East__Upgraded_Mist_Through_Wall => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_ROCKY_GATE_ROCK);
            }
            LocationId::Uhrum__Rocky_Gate__Wall_West_Ledge__Charge_Through_Wall | LocationId::Uhrum__Rocky_Gate__Wall_West_Ledge__Spin_Through_Wall | LocationId::Uhrum__Rocky_Gate__Wall_East_Ledge__Charge_Through_Wall | LocationId::Uhrum__Rocky_Gate__Wall_East_Ledge__Spin_Through_Wall | LocationId::Uhrum__Emergence_Facility__Wall_West_Ledge__Charge_Through_Wall | LocationId::Uhrum__Emergence_Facility__Wall_West_Ledge__Spin_Through_Wall | LocationId::Uhrum__Emergence_Facility__Wall_West_Mid_air__Break_Wall_With_Mist | LocationId::Uhrum__Emergence_Facility__Wall_West_Mid_air__Break_Wall_With_Mist_Upgrade | LocationId::Uhrum__Emergence_Facility__Wall_East_Mid_air__Break_Wall_With_Mist | LocationId::Uhrum__Emergence_Facility__Wall_East_Mid_air__Break_Wall_With_Mist_Upgrade | LocationId::Uhrum__Emergence_Facility__Wall_East_Mid_air__Break_Wall_Upward_With_Mist | LocationId::Uhrum__Emergence_Facility__Wall_East_Mid_air__Break_Wall_Upward_With_Mist_Upgrade | LocationId::Uhrum__Emergence_Facility__Wall_East_Ledge__Charge_Through_Wall | LocationId::Uhrum__Emergence_Facility__Wall_East_Ledge__Spin_Through_Wall => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_EMERGENCE_WALL);
            }
            LocationId::Uhrum__Emergence_Facility__Middle_Level_Mid_air__Remote_Flask | LocationId::Uhrum__Emergence_Facility__Middle_Level_Mid_air__Throw_Up_and_Go_Left | LocationId::Uhrum__Emergence_Facility__Middle_Level_Mid_air__Throw_Up_and_Go_Right | LocationId::Uhrum__Emergence_Facility__Middle_Level_Mid_air__Throw_Up_and_Fast_Travel | LocationId::Uhrum__Emergence_Facility__Balcony__Flask | LocationId::Uhrum__Emergence_Facility__Balcony__Flask_Collection_Skip | LocationId::Uhrum__Emergence_Facility__Balcony__Flask_Fast_Travel | LocationId::Uhrum__Emergence_Facility__Roof_Middle__Flask_from_Below => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_EMERGENCE_FLASK);
            }
            LocationId::Uhrum__Rocky_Guardpost__Under_The_Ledge__Shockwave_Block | LocationId::Uhrum__Rocky_Guardpost__Lower_Step__Shockwave_Block | LocationId::Uhrum__Rocky_Guardpost__Middle_Step__Shockwave_Block | LocationId::Uhrum__Rocky_Guardpost__Upper_Step__Shockwave_Block => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_ROCKY_GUARDPOST_FLASK);
            }
            LocationId::Uhrum__Seclusion__Boome_Range__Remote_Flask | LocationId::Uhrum__Seclusion__Boome_Range__Remote_Flask_Fast_Travel | LocationId::Uhrum__Seclusion__Shock_Range__Shockwave_Flask | LocationId::Uhrum__Seclusion__Close_Range__Flask | LocationId::Uhrum__Seclusion__Close_Range__Flask_Collection_Skip | LocationId::Uhrum__Seclusion__Close_Range__Flask_Fast_Travel => {
                self.cbits10.insert(flags::ContextBits10::VISITED_UHRUM_SECLUSION_FLASK);
            }
            LocationId::Amagi_Breach__East_Entrance__Upper_Slope__Item => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_AMAGI_BREACH__EAST_ENTRANCE__UPPER_SLOPE__ITEM);
            }
            LocationId::Amagi_Breach__Upper_Lake__Column__Health => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_AMAGI_BREACH__UPPER_LAKE__COLUMN__HEALTH);
            }
            LocationId::Amagi_Breach__West_Ruins__Button__Hit_Button => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_AMAGI_BREACH__WEST_RUINS__BUTTON__HIT_BUTTON);
            }
            LocationId::Amagi_Breach__West_Ruins__East_Platform__Health => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_AMAGI_BREACH__WEST_RUINS__EAST_PLATFORM__HEALTH);
            }
            LocationId::Amagi_Breach__Lower_Hallway__Cache__Item => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_AMAGI_BREACH__LOWER_HALLWAY__CACHE__ITEM);
            }
            LocationId::Amagi_Breach__Lower_Hallway__Cache__Hit_Button => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_AMAGI_BREACH__LOWER_HALLWAY__CACHE__HIT_BUTTON);
            }
            LocationId::Amagi__Main_Area__Way_Off_To_The_Side__Item => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_AMAGI__MAIN_AREA__WAY_OFF_TO_THE_SIDE__ITEM);
            }
            LocationId::Amagi__Liru_Room__Shrine__Item => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_AMAGI__LIRU_ROOM__SHRINE__ITEM);
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Break_Wall => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__BREAK_WALL);
            }
            LocationId::Amagi__West_Lake__Cavern_Refill_Station__Defeat_MUS_A_M20 => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REFILL_STATION__DEFEAT_MUS_A_M20);
            }
            LocationId::Amagi__West_Lake__Cavern_Rear_Pillar__Boss_Reward => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_AMAGI__WEST_LAKE__CAVERN_REAR_PILLAR__BOSS_REWARD);
            }
            LocationId::Amagi__West_Lake__Stronghold_Ceiling_Left__Knock_Down_Left_Boulder => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_AMAGI__WEST_LAKE__STRONGHOLD_CEILING_LEFT__KNOCK_DOWN_LEFT_BOULDER);
            }
            LocationId::Amagi__East_Lake__Foot__Tablet => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_AMAGI__EAST_LAKE__FOOT__TABLET);
            }
            LocationId::Amagi__Gated_Community__Button__Hit_Button => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_AMAGI__GATED_COMMUNITY__BUTTON__HIT_BUTTON);
            }
            LocationId::Amagi__Wiggly_Room__Cache__Tablet => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_AMAGI__WIGGLY_ROOM__CACHE__TABLET);
            }
            LocationId::Amagi__Wiggly_Room__Button__Hit_Button => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_AMAGI__WIGGLY_ROOM__BUTTON__HIT_BUTTON);
            }
            LocationId::Annuna_Breach__Smiley__Drool__Health => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_ANNUNA_BREACH__SMILEY__DROOL__HEALTH);
            }
            LocationId::Annuna_Breach__Gate_and_Floor__Middle_Floor__Item => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_ANNUNA_BREACH__GATE_AND_FLOOR__MIDDLE_FLOOR__ITEM);
            }
            LocationId::Annuna_Breach__Gate_and_Floor__Button__Hit_Button => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_ANNUNA_BREACH__GATE_AND_FLOOR__BUTTON__HIT_BUTTON);
            }
            LocationId::Annuna_Breach__Lower_Gate__Button__Hit_Button => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_ANNUNA_BREACH__LOWER_GATE__BUTTON__HIT_BUTTON);
            }
            LocationId::Annuna__Mirror_Match__Save_Point__Fight => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANNUNA__MIRROR_MATCH__SAVE_POINT__FIGHT);
            }
            LocationId::Annuna__Mirror_Match__Below_Switch__Hit_Switch => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANNUNA__MIRROR_MATCH__BELOW_SWITCH__HIT_SWITCH);
            }
            LocationId::Annuna__Secret_Passage__Wall_West__Refill => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANNUNA__SECRET_PASSAGE__WALL_WEST__REFILL);
            }
            LocationId::Annuna__West_Bridge__Plinth__Item => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANNUNA__WEST_BRIDGE__PLINTH__ITEM);
            }
            LocationId::Annuna__East_Bridge__Tower_Gate__Tablet => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_ANNUNA__EAST_BRIDGE__TOWER_GATE__TABLET);
            }
            LocationId::Annuna__East_Bridge__Tower_Secret__Item => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_ANNUNA__EAST_BRIDGE__TOWER_SECRET__ITEM);
            }
            LocationId::Annuna__East_Bridge__Lower_Gate_East__Refill => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_ANNUNA__EAST_BRIDGE__LOWER_GATE_EAST__REFILL);
            }
            LocationId::Annuna__Sniper_Valley__Bridge_End__Health_Pickup => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANNUNA__SNIPER_VALLEY__BRIDGE_END__HEALTH_PICKUP);
            }
            LocationId::Annuna__Sniper_Valley__Table__Item => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANNUNA__SNIPER_VALLEY__TABLE__ITEM);
            }
            LocationId::Annuna__Vertical_Room__Plinth__Item => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANNUNA__VERTICAL_ROOM__PLINTH__ITEM);
            }
            LocationId::Annuna__Vertical_Room__Gate_Button__Hit_Button => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANNUNA__VERTICAL_ROOM__GATE_BUTTON__HIT_BUTTON);
            }
            LocationId::Annuna__Vertical_Room__Upper_Cache__Tablet => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANNUNA__VERTICAL_ROOM__UPPER_CACHE__TABLET);
            }
            LocationId::Annuna__Upper_Hallway__Behind_Pedestal__Health_Pickup => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANNUNA__UPPER_HALLWAY__BEHIND_PEDESTAL__HEALTH_PICKUP);
            }
            LocationId::Annuna__Filter_Teleporter__Northeast_Cubby__Tablet => {
                self.cbits7.insert(flags::ContextBits7::VISITED_LOC_ANNUNA__FILTER_TELEPORTER__NORTHEAST_CUBBY__TABLET);
            }
            LocationId::Annuna__Spider_Room__Healthy_Corner__Health_Refill => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANNUNA__SPIDER_ROOM__HEALTHY_CORNER__HEALTH_REFILL);
            }
            LocationId::Annuna__Twisty_Passages__Top__Tablet => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANNUNA__TWISTY_PASSAGES__TOP__TABLET);
            }
            LocationId::Annuna__Twisty_Passages__Northwest_Alcove__Refill => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANNUNA__TWISTY_PASSAGES__NORTHWEST_ALCOVE__REFILL);
            }
            LocationId::Annuna__West_Climb__Cache__Item => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANNUNA__WEST_CLIMB__CACHE__ITEM);
            }
            LocationId::Annuna__Remote_Training__Plinth__Item => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANNUNA__REMOTE_TRAINING__PLINTH__ITEM);
            }
            LocationId::Antarctica__Shed__Interior__Shelf => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANTARCTICA__SHED__INTERIOR__SHELF);
            }
            LocationId::Antarctica__Power_Room__Switch__Flip => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_ANTARCTICA__POWER_ROOM__SWITCH__FLIP);
            }
            LocationId::Ebih_Breach__In_n_Out__Gate_East__Item => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH_BREACH__IN_N_OUT__GATE_EAST__ITEM);
            }
            LocationId::Ebih_Breach__In_n_Out__Button__Hit_Button => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH_BREACH__IN_N_OUT__BUTTON__HIT_BUTTON);
            }
            LocationId::Ebih_Breach__Spider_Guards__Button__Open_Gate => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH_BREACH__SPIDER_GUARDS__BUTTON__OPEN_GATE);
            }
            LocationId::Ebih__By_Garage__Crawlspace__Fragment => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH__BY_GARAGE__CRAWLSPACE__FRAGMENT);
            }
            LocationId::Ebih__Waterfall__Waterfall_Center_Center__Both_Blocks => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH__WATERFALL__WATERFALL_CENTER_CENTER__BOTH_BLOCKS);
            }
            LocationId::Ebih__Waterfall__Alcove__Pedestal => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH__WATERFALL__ALCOVE__PEDESTAL);
            }
            LocationId::Ebih__Ebih_West__Alcove__Tablet => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH__EBIH_WEST__ALCOVE__TABLET);
            }
            LocationId::Ebih__Ebih_East__Dispenser__Vend => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH__EBIH_EAST__DISPENSER__VEND);
            }
            LocationId::Ebih__Ebih_East__East_Ledge__Note => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH__EBIH_EAST__EAST_LEDGE__NOTE);
            }
            LocationId::Ebih__Boss_Room__Boss__Boss_Reward => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH__BOSS_ROOM__BOSS__BOSS_REWARD);
            }
            LocationId::Ebih__Boss_Room__East_Ledge__Item => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH__BOSS_ROOM__EAST_LEDGE__ITEM);
            }
            LocationId::Ebih__Grid_26_10_11__Ledge__Note => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH__GRID_26_10_11__LEDGE__NOTE);
            }
            LocationId::Ebih__Vertical_Interchange__Block_Cubby__Shockwave_Block => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH__VERTICAL_INTERCHANGE__BLOCK_CUBBY__SHOCKWAVE_BLOCK);
            }
            LocationId::Ebih__Vertical_Interchange__Switch__Activate_Switch => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH__VERTICAL_INTERCHANGE__SWITCH__ACTIVATE_SWITCH);
            }
            LocationId::Ebih__Guarded_Health__West_Basin__Health => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH__GUARDED_HEALTH__WEST_BASIN__HEALTH);
            }
            LocationId::Ebih__Guarded_Health__Far_West__Refill => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH__GUARDED_HEALTH__FAR_WEST__REFILL);
            }
            LocationId::Ebih__Gem_Room__Between_Gates__Gem => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_EBIH__GEM_ROOM__BETWEEN_GATES__GEM);
            }
            LocationId::Filter__Core__Terminal_East__Authorize_Hammond => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_FILTER__CORE__TERMINAL_EAST__AUTHORIZE_HAMMOND);
            }
            LocationId::Giguna_Breach__Chimney__Cache__Flask => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA_BREACH__CHIMNEY__CACHE__FLASK);
            }
            LocationId::Giguna_Breach__Cubby__Rocks__Health => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA_BREACH__CUBBY__ROCKS__HEALTH);
            }
            LocationId::Giguna_Breach__Robopede__Center__Boss_Reward => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA_BREACH__ROBOPEDE__CENTER__BOSS_REWARD);
            }
            LocationId::Giguna_Breach__Slingshot__Ravine__Urn => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA_BREACH__SLINGSHOT__RAVINE__URN);
            }
            LocationId::Giguna_Breach__Labyrinth__Button__Open_Gate => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA_BREACH__LABYRINTH__BUTTON__OPEN_GATE);
            }
            LocationId::Giguna_Breach__Lower_Machinery__Button__Hit_Button => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA_BREACH__LOWER_MACHINERY__BUTTON__HIT_BUTTON);
            }
            LocationId::Giguna_Breach__Gate_and_Wall__Walled_Off__Health => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA_BREACH__GATE_AND_WALL__WALLED_OFF__HEALTH);
            }
            LocationId::Giguna_Breach__Crab_Rave__Button__Hit_Button => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA_BREACH__CRAB_RAVE__BUTTON__HIT_BUTTON);
            }
            LocationId::Giguna__Carnelian__Vault__Item => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__CARNELIAN__VAULT__ITEM);
            }
            LocationId::Giguna__West_Caverns__Cache__Item => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__WEST_CAVERNS__CACHE__ITEM);
            }
            LocationId::Giguna__West_Caverns__Bush__Item => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__WEST_CAVERNS__BUSH__ITEM);
            }
            LocationId::Giguna__Wasteland__Door_Right__Health => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__WASTELAND__DOOR_RIGHT__HEALTH);
            }
            LocationId::Giguna__Giguna_Base__Ruin__Item => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__GIGUNA_BASE__RUIN__ITEM);
            }
            LocationId::Giguna__Giguna_Base__Table__News => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__GIGUNA_BASE__TABLE__NEWS);
            }
            LocationId::Giguna__Ruins_Center__Tablet__Item => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__RUINS_CENTER__TABLET__ITEM);
            }
            LocationId::Giguna__West_Tower__Top__Tablet => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__WEST_TOWER__TOP__TABLET);
            }
            LocationId::Giguna__Far_Corner__Grass__Obscured_Item => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__FAR_CORNER__GRASS__OBSCURED_ITEM);
            }
            LocationId::Giguna__Helipad__Tablet_Ledge__Tablet => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__HELIPAD__TABLET_LEDGE__TABLET);
            }
            LocationId::Giguna__Dual_Path__Wall_Secret__Health => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__DUAL_PATH__WALL_SECRET__HEALTH);
            }
            LocationId::Giguna__Hard_Rock__Rock_Center__Tablet => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__HARD_ROCK__ROCK_CENTER__TABLET);
            }
            LocationId::Giguna__Gateway__Button__Hit_Switch => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__GATEWAY__BUTTON__HIT_SWITCH);
            }
            LocationId::Giguna__Labyrinth__Door_Ledge__Item => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__LABYRINTH__DOOR_LEDGE__ITEM);
            }
            LocationId::Giguna__Cache__Pit__Item => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__CACHE__PIT__ITEM);
            }
            LocationId::Giguna__Antechamber__Statue_Head__Tablet => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__ANTECHAMBER__STATUE_HEAD__TABLET);
            }
            LocationId::Giguna__Gubi_Lair__Pedestal__Axe => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__GUBI_LAIR__PEDESTAL__AXE);
            }
            LocationId::Giguna__Mural__NW_Cache__Note => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__MURAL__NW_CACHE__NOTE);
            }
            LocationId::Giguna__Mural__Pedestal__Item => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__MURAL__PEDESTAL__ITEM);
            }
            LocationId::Giguna__Separator__Switch__Separation => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GIGUNA__SEPARATOR__SWITCH__SEPARATION);
            }
            LocationId::Glacier_Breach__Electric_Arena__Lower_East_Platform__Reward => {
                self.cbits8.insert(flags::ContextBits8::VISITED_LOC_GLACIER_BREACH__ELECTRIC_ARENA__LOWER_EAST_PLATFORM__REWARD);
            }
            LocationId::Glacier_Breach__Electric_Arena__Lower_West_Platform__Defeat_Ellag => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER_BREACH__ELECTRIC_ARENA__LOWER_WEST_PLATFORM__DEFEAT_ELLAG);
            }
            LocationId::Glacier_Breach__Spidery_Connector__Button__Hit_Button => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER_BREACH__SPIDERY_CONNECTOR__BUTTON__HIT_BUTTON);
            }
            LocationId::Glacier__Compass_Room__Center__Table => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__COMPASS_ROOM__CENTER__TABLE);
            }
            LocationId::Glacier__Sea_Burial__Collapsing_Ceiling__Drown => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__SEA_BURIAL__COLLAPSING_CEILING__DROWN);
            }
            LocationId::Glacier__Sea_Burial__Deep_Cache__Health => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__SEA_BURIAL__DEEP_CACHE__HEALTH);
            }
            LocationId::Glacier__Sea_Burial__Inside_the_Grate__Notes => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__SEA_BURIAL__INSIDE_THE_GRATE__NOTES);
            }
            LocationId::Glacier__Vertical_Room__Under_Switch__Switch => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__VERTICAL_ROOM__UNDER_SWITCH__SWITCH);
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Item => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__BOOMERANG_ROOM__PEDESTAL__ITEM);
            }
            LocationId::Glacier__Boomerang_Room__Pedestal__Switch => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__BOOMERANG_ROOM__PEDESTAL__SWITCH);
            }
            LocationId::Glacier__Peak__Birds_Eye__Item => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__PEAK__BIRDS_EYE__ITEM);
            }
            LocationId::Glacier__Crystals__Top_Corner__Tablet => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__CRYSTALS__TOP_CORNER__TABLET);
            }
            LocationId::Glacier__Crystals__Lower_Corner__Item => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__CRYSTALS__LOWER_CORNER__ITEM);
            }
            LocationId::Glacier__Hammonds_End__Between_Center_Doors__Health => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__HAMMONDS_END__BETWEEN_CENTER_DOORS__HEALTH);
            }
            LocationId::Glacier__Sliced_Cavern__Upper_Middle__Health => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__SLICED_CAVERN__UPPER_MIDDLE__HEALTH);
            }
            LocationId::Glacier__Sliced_Cavern__Cache__Note => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__SLICED_CAVERN__CACHE__NOTE);
            }
            LocationId::Glacier__Inner_Caverns__Northwest_Drone__Item => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__INNER_CAVERNS__NORTHWEST_DRONE__ITEM);
            }
            LocationId::Glacier__Fortress__Button__Hit_Button => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__FORTRESS__BUTTON__HIT_BUTTON);
            }
            LocationId::Glacier__Fortress__Inner_Center__Health => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__FORTRESS__INNER_CENTER__HEALTH);
            }
            LocationId::Glacier__Fortress__Parapet_Center_East__Bomberang => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_GLACIER__FORTRESS__PARAPET_CENTER_EAST__BOMBERANG);
            }
            LocationId::Interior__Bunker_Interior__Desk__Note => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_INTERIOR__BUNKER_INTERIOR__DESK__NOTE);
            }
            LocationId::Interior__Tent_Interior__Desk__Note => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_INTERIOR__TENT_INTERIOR__DESK__NOTE);
            }
            LocationId::Interior__Garage__Boxes__Under_Boxes => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_INTERIOR__GARAGE__BOXES__UNDER_BOXES);
            }
            LocationId::Interior__Ebih_Cave__Entry__Health => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_INTERIOR__EBIH_CAVE__ENTRY__HEALTH);
            }
            LocationId::Interior__Observatory__East_Desk__Notes => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_INTERIOR__OBSERVATORY__EAST_DESK__NOTES);
            }
            LocationId::Interior__Outpost_Interior__Bookshelf__Note => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_INTERIOR__OUTPOST_INTERIOR__BOOKSHELF__NOTE);
            }
            LocationId::Irikar_Breach__Hover_Room__Bottom__Item => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_IRIKAR_BREACH__HOVER_ROOM__BOTTOM__ITEM);
            }
            LocationId::Irikar_Breach__Worm_Rave__Corner__Item => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_IRIKAR_BREACH__WORM_RAVE__CORNER__ITEM);
            }
            LocationId::Irikar_Breach__Buried_Treasure__Pillar_Bottom__Health => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_IRIKAR_BREACH__BURIED_TREASURE__PILLAR_BOTTOM__HEALTH);
            }
            LocationId::Irikar_Breach__Rocky_Dunes__Ditch__Health => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_IRIKAR_BREACH__ROCKY_DUNES__DITCH__HEALTH);
            }
            LocationId::Irikar__Hub__Sat_Tower_Top_Ledge__Tablet => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_IRIKAR__HUB__SAT_TOWER_TOP_LEDGE__TABLET);
            }
            LocationId::Irikar__Hub__Dagger_Altar__Weapon => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_IRIKAR__HUB__DAGGER_ALTAR__WEAPON);
            }
            LocationId::Irikar__Hub__SW_Building_Top_Platform__Power_Core => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_IRIKAR__HUB__SW_BUILDING_TOP_PLATFORM__POWER_CORE);
            }
            LocationId::Irikar__Abandoned_Room__Corner_Core__Core => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_IRIKAR__ABANDONED_ROOM__CORNER_CORE__CORE);
            }
            LocationId::Irikar__Basement_Pipes__Left_Vertical_Pipe__Health_Pickup => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_IRIKAR__BASEMENT_PIPES__LEFT_VERTICAL_PIPE__HEALTH_PICKUP);
            }
            LocationId::Irikar__Basement_Pipes__High_Pipe__Tablet => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_IRIKAR__BASEMENT_PIPES__HIGH_PIPE__TABLET);
            }
            LocationId::Irikar__Boss_Room__Healthy_Rooftop__Health => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_IRIKAR__BOSS_ROOM__HEALTHY_ROOFTOP__HEALTH);
            }
            LocationId::Irikar__East_Rooftops__Top_Rooftop__Tablet => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_IRIKAR__EAST_ROOFTOPS__TOP_ROOFTOP__TABLET);
            }
            LocationId::Irikar__Midwest__Tablet_Platform__Tablet => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_IRIKAR__MIDWEST__TABLET_PLATFORM__TABLET);
            }
            LocationId::Irikar__Lamassu__Desk__Item => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_IRIKAR__LAMASSU__DESK__ITEM);
            }
            LocationId::Irikar__Beach__Cache__Item => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_IRIKAR__BEACH__CACHE__ITEM);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_1 => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_1);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_2 => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_2);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_3 => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_3);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_4 => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_4);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_5 => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__HEALTH_UPGRADE_5);
            }
            LocationId::Menu__Upgrade_Menu__Physiology__Mist_Upgrade => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_MENU__UPGRADE_MENU__PHYSIOLOGY__MIST_UPGRADE);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_1 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_1);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_2 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_2);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Damage_3 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_DAMAGE_3);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_1 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_1);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_2 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_2);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Melee_Speed_3 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__MELEE_SPEED_3);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_1 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_1);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_2 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_2);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Damage_3 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_DAMAGE_3);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_1 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_1);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_2 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_2);
            }
            LocationId::Menu__Upgrade_Menu__Combat__Ranged_Speed_3 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__COMBAT__RANGED_SPEED_3);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_1 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_1);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_2 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_2);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Level_3 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_LEVEL_3);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_1 => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_1);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_2 => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_2);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Nano_Points_3 => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__NANO_POINTS_3);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_1 => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_1);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Speed_2 => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_SPEED_2);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_1 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_1);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_2 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_2);
            }
            LocationId::Menu__Upgrade_Menu__Infection__Infection_Range_3 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__INFECTION__INFECTION_RANGE_3);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_1 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_1);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_2 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_2);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Damage_3 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_DAMAGE_3);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_1 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_1);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_2 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_2);
            }
            LocationId::Menu__Upgrade_Menu__Drone__Drone_Melee_Speed_3 => {
                self.cbits9.insert(flags::ContextBits9::VISITED_LOC_MENU__UPGRADE_MENU__DRONE__DRONE_MELEE_SPEED_3);
            }
            LocationId::Uhrum_Breach__East_Glitch__Northeast_Flower__Health => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM_BREACH__EAST_GLITCH__NORTHEAST_FLOWER__HEALTH);
            }
            LocationId::Uhrum_Breach__Annuna_Gate__Button__Hit_Button => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM_BREACH__ANNUNA_GATE__BUTTON__HIT_BUTTON);
            }
            LocationId::Uhrum_Breach__Locked_Down__Button__Hit_Button => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM_BREACH__LOCKED_DOWN__BUTTON__HIT_BUTTON);
            }
            LocationId::Uhrum__West_Entrance__Inner_Dais__Item => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM__WEST_ENTRANCE__INNER_DAIS__ITEM);
            }
            LocationId::Uhrum__West_Entrance__Gate_Switch__Open_Gate => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM__WEST_ENTRANCE__GATE_SWITCH__OPEN_GATE);
            }
            LocationId::Uhrum__West_Entrance__Sand__Refill => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM__WEST_ENTRANCE__SAND__REFILL);
            }
            LocationId::Uhrum__Siege_Corridor__Western_Cache__Core => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__WESTERN_CACHE__CORE);
            }
            LocationId::Uhrum__Siege_Corridor__Center_Box__Box => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__CENTER_BOX__BOX);
            }
            LocationId::Uhrum__Siege_Corridor__Pond__Item => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM__SIEGE_CORRIDOR__POND__ITEM);
            }
            LocationId::Uhrum__Spring__Center__Health => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM__SPRING__CENTER__HEALTH);
            }
            LocationId::Uhrum__Waterfalls__West_Water_Nook__Tablet => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM__WATERFALLS__WEST_WATER_NOOK__TABLET);
            }
            LocationId::Uhrum__Cavern__Pedestal__Item => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM__CAVERN__PEDESTAL__ITEM);
            }
            LocationId::Uhrum__Tulip_Tower__Middle_Plateau__Refill => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM__TULIP_TOWER__MIDDLE_PLATEAU__REFILL);
            }
            LocationId::Uhrum__Annuna_Corridor__East_Cubby__Tablet => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM__ANNUNA_CORRIDOR__EAST_CUBBY__TABLET);
            }
            LocationId::Uhrum__Annuna_Corridor__Statue__Item => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM__ANNUNA_CORRIDOR__STATUE__ITEM);
            }
            LocationId::Uhrum__Artillery_Practice__Tunnel_Entrance__Tablet => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM__ARTILLERY_PRACTICE__TUNNEL_ENTRANCE__TABLET);
            }
            LocationId::Uhrum__Rocky_Gate__East_Ledge__Note => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM__ROCKY_GATE__EAST_LEDGE__NOTE);
            }
            LocationId::Uhrum__Glen__Center__Item => {
                self.cbits10.insert(flags::ContextBits10::VISITED_LOC_UHRUM__GLEN__CENTER__ITEM);
            }
        }
    }

    fn observe_collect(&mut self, ctx: &Context, item: Item, world: &World) {
        match item {
            Item::Amashilama => rules::observe_action_save_set_glacier_gt_revival_gt_save_point(ctx, world, self),
            Item::Anuman => rules::observe_action_indra_set_invoke_default(ctx, world, self),
            Item::Flask => rules::observe_action_flasks_incr_1(ctx, world, self),
            Item::Big_Flask => rules::observe_action_flasks_incr_2(ctx, world, self),
            Item::Infect => rules::observe_action_invoke_refill_energy(ctx, world, self),
            Item::Health_Fragment => rules::observe_action_invoke_refill_energy(ctx, world, self),
            Item::Health_Node => rules::observe_action_invoke_refill_energy(ctx, world, self),
            Item::Power_Core => rules::observe_action_refills_incr_1(ctx, world, self),
            Item::Defeat_MUS_A_M20 => rules::observe_action_invoke_visit__amagi_gt_west_lake_gt_cavern_refill_station_gt_break_wall_invoke_add_item__amagi_dragon_eye_passage(ctx, world, self),
            Item::Separation => rules::observe_action_invoke_visit__giguna_gt_separator_gt_upper_brick_gt_break_bricks_invoke_add_item__giguna_separator_bricks_indra_set_invoke_default(ctx, world, self),
            Item::Amagi_Stronghold_Wall_And_Boulder_1 => rules::observe_action_invoke_visit__amagi_gt_west_lake_gt_stronghold_ceiling_left_gt_knock_down_left_boulder_invoke_add_item__amagi_stronghold_wall_1_invoke_add_item__amagi_stronghold_boulder_1(ctx, world, self),
            Item::Amagi_Stronghold_Boulder_And_Wall_2 => rules::observe_action_invoke_visit__amagi_gt_west_lake_gt_stronghold_ceiling_right_gt_knock_down_right_boulder_invoke_add_item__amagi_stronghold_wall_2_invoke_add_item__amagi_stronghold_boulder_2(ctx, world, self),
            Item::Ebih_Waterfall_Both_Blocks => rules::observe_action_invoke_visit__ebih_gt_waterfall_gt_alcove_gt_block_left_invoke_visit__ebih_gt_waterfall_gt_alcove_gt_block_right_invoke_add_item__ebih_waterfall_block_right_invoke_add_item__ebih_waterfall_block_left(ctx, world, self),
            Item::Glacier_Fortress_Bomberang => rules::observe_action_invoke_visit__glacier_gt_fortress_gt_inner_center_gt_shockwave_block_invoke_visit__glacier_gt_fortress_gt_button_gt_hit_button_invoke_collect__big_flask_invoke_add_item__glacier_fortress_gate(ctx, world, self),
            _ => (),
        }
    }

    fn observe_on_entry(&mut self, cur: &Context, dest: SpotId, world: &World) {
        let area = get_area(dest);
        match area {
            AreaId::Amagi__Divided_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi__East_Lake => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi__Gated_Community => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi__Grid_31_19 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi__Liru_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi__Main_Area => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi__Secret_Chamber => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi__West_Lake => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi__Wiggly_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__Center_Ruins => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__Corner => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__East_Column => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__East_Connector => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__East_Entrance => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__East_Ruins => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__Fishy_Secrets => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__Lakebed => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__Lower_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__Split_One_Way => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__Twisty_Passages => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__Upper_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__Upper_Lake => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__West_Entrance => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Amagi_Breach__West_Ruins => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Apocalypse => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Apocalypse_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Center_Climb => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Center_Save => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__East_Bridge => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__East_Climb => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__East_Hideout => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Egg_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Factory_Access => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Factory_Entrance => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Filter_Teleporter => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Final_Cache => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Final_Save => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Hidden_Portal => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Invisible_Enemies => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Lamassu => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Lower_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Middle_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Mirror_Match => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Remote_Training => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Seals => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Secret_Passage => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Siuna_Storage => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Smiley_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Sniper_Valley => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Spider_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Twisty_Passages => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Udug_Gate => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Upper_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Upper_Save => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__Vertical_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__West_Bridge => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna__West_Climb => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna_Breach__Ambushes => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna_Breach__Bottom => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna_Breach__Center_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna_Breach__Corner => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna_Breach__Depths => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna_Breach__Double_Corridor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna_Breach__Enclosed => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna_Breach__Factory_Foyer => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna_Breach__Factory_Gate => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna_Breach__Gate_and_Floor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna_Breach__Lower_Gate => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna_Breach__North_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna_Breach__Rear_Entrance => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna_Breach__Smiley => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna_Breach__South_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Annuna_Breach__Underbelly => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Base_Camp => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Boss_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__By_Garage => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Drone_Pit => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Drone_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Ebih_East => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Ebih_West => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Gem_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Grid_25_10_12 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Grid_26_10_11 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Guarded_Health => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Hidden_Portal => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Observation_Tower_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Open_Air => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Party_Central => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Peak => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Truck_Gate => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Vertical_Interchange => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Walled_Off => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__Waterfall => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih__West_Face => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__Bubble_Bobble => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__Connector => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__Corner => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__Corridor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__Double_Gate => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__Drone_Tutorial => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__Giguna_Corner => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__In_n_Out => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__Lake_Gate => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__Peak => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__Portals_101 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__Rock_Block => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__Rocky_Cages => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__Snowy_Rocks => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__Spider_Guards => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__Switchback => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__The_Vault => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Ebih_Breach__Vertical_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Emergence__Aquarium => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Emergence__Audience_Chamber => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Emergence__Camp_Exterior => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Emergence__Drop_off => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Emergence__Rocks_Fall => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Emergence__Storage => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Filter__Core => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Filter__Entrance => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Filter__Exit => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Filter__Lower_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Filter__Scaffolding => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Filter__Upper_Hallway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Antechamber => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Breachable_Wall => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Cache => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Carnelian => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Clouds => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Dual_Path => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__East_Caverns => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Far_Corner => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Gateway => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Giguna_Base => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Giguna_Northeast => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Gubi_Lair => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Hard_Rock => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Helipad => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Labyrinth => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Labyrinth_East => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Lamassu => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Mural => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Ruins_Center => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Ruins_East => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Ruins_Top => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Ruins_West => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Secrecy => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Separator => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Vertical_Interchange => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__Wasteland => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__West_Caverns => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna__West_Tower => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Antechamber => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Ascent => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Below_Chimney => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Central => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Chimney => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Crab_Rave => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Cubby => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Deadly_Flora => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__East => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Emergence => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Fire_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Fork => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Gate_and_Wall => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Grid_14_10_11 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Labyrinth => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Lower_Machinery => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Lower_Portal => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Peak => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Pink_Clouds => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Pinkness => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Portal_Exchange => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Robopede => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Secret_Tunnel => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Slingshot => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__South => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__SW_Save => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__Upper_Machinery => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Giguna_Breach__White_Clouds => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Angry_Guards => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Apocalypse_Entry => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Boomerang_Antechamber => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Boomerang_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Compass_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Crystals => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Dock_Outside => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Fortress => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Grid_31_9_12 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Grid_32_7_10 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Grid_37_38_9 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Grid_39_40_7_9 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Grid_42_10 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Grid_43_10_11 => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Hammonds_End => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Inner_Caverns => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Lake_Main_Entrance => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Ledge_Grab_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Peak => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Revival => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Sea_Burial => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Secret_Chamber => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Sliced_Cavern => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__The_Big_Drop => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier__Vertical_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Angry_Lions => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Control => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Crystals => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Electric_Arena => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Empty_Space => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Floaters => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Fortress => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Grate_Work => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Guarded_Corridor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Hammonds_Breach => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Piano_Roll => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Save_and_Exit => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__South_Save => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Spidery_Connector => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Stable_Floor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Stacked_Enemies => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__West_Save => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Glacier_Breach__Zappers => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Building_Interior => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Bunker_Interior => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Cave_Behind_Waterfall => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Ebih_Cave => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Emergence_Hangar => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Facility_Interior => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Garage => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Observatory => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Outpost_Interior => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Tent_Interior => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Interior__Uhrum_Waterfall_Cave => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Abandoned_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Airy => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Basement_Pipes => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Basement_Portal => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Beach => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Beach_Save => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Boss_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__East_Rooftops => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Empty_Foyer => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Hub => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Lamassu => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Midwest => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar__Sight_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Basement_Save => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Beach => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Buried_Treasure => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Corridor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Exit_Corridor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Flappy_Drone => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Four_way => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Gauntlet => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Hover_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Neon_Corridor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Rocky_Dunes => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Save_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Uhrum_Connector => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Irikar_Breach__Worm_Rave => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Menu__Breach_Map => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_save_last_invoke_refill_energy(cur, world, dest, self);
                }
            }
            AreaId::Menu__Emergence_Map => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_save_last_invoke_refill_energy(cur, world, dest, self);
                }
            }
            AreaId::Menu__Kiengir_Map => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_save_last_invoke_refill_energy(cur, world, dest, self);
                }
            }
            AreaId::Menu__Warp_Only => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_save_last(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Annuna_Corridor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Artillery_Practice => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Cavern => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__East_Lake => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Emergence_Facility => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Emergence_Save => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Glen => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Glitchy_Corridor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Grassy_Guardpost => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Rocky_Gate => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Rocky_Guardpost => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Save_Room => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Seclusion => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Siege_Corridor => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Spring => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Tulip_Tower => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__Waterfalls => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum__West_Entrance => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum_Breach__Annuna_Gate => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum_Breach__Blob => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum_Breach__East_Copse => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum_Breach__East_Glitch => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum_Breach__Locked_Down => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum_Breach__North_Slime => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum_Breach__Overgrown_Ruins => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum_Breach__Rock_and_Gate => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum_Breach__Save_and_Go => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum_Breach__South_Slime => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum_Breach__West_Copse => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            AreaId::Uhrum_Breach__West_Glitch => {
                if get_area(cur.position) != area {
                    rules::observe_action_invoke_reset_old_area__newpos(cur, world, dest, self);
                }
            }
            _ => (),
        }
        if cur.position != dest {
            match dest {
                _ => (),
            }
        }
    }



    fn update(&mut self, from: &Context, to: &Context) {
        if from.energy != to.energy {
            self.energy = self.energy.shift(to.energy - from.energy);
        }
        if from.flasks != to.flasks {
            self.flasks = self.flasks.shift(to.flasks - from.flasks);
        }
        if from.refills != to.refills {
            self.refills = self.refills.shift(to.refills - from.refills);
        }
        if from.big_flask != to.big_flask {
            self.big_flask = self.big_flask.shift(to.big_flask - from.big_flask);
        }
        if from.flask != to.flask {
            self.flask = self.flask.shift(to.flask - from.flask);
        }
        if from.health_fragment != to.health_fragment {
            self.health_fragment = self.health_fragment.shift(to.health_fragment - from.health_fragment);
        }
        if from.health_node != to.health_node {
            self.health_node = self.health_node.shift(to.health_node - from.health_node);
        }
        if from.power_matrix != to.power_matrix {
            self.power_matrix = self.power_matrix.shift(to.power_matrix - from.power_matrix);
        }
    }

    fn to_vec(&self, ctx: &Context) -> Vec<OneObservation> {
        let mut vec = Vec::with_capacity(self.fields_observed());
            if self.position {
                vec.push(OneObservation::Position(ctx.position));
            }
            match self.energy {
                IntegerObservation::Unknown => (),
                IntegerObservation::Exact => vec.push(OneObservation::EnergyExact(ctx.energy)),
                IntegerObservation::Eq(i) => vec.push(OneObservation::EnergyEq(i, ctx.energy == i)),
                IntegerObservation::Ge(i) => vec.push(OneObservation::EnergyGe(i, ctx.energy >= i)),
                IntegerObservation::Le(i) => vec.push(OneObservation::EnergyLe(i, ctx.energy <= i)),
                IntegerObservation::Range(lo, hi) => vec.push(OneObservation::EnergyRange(lo, hi, ctx.energy >= lo && ctx.energy <= hi)),
            }
            match self.flasks {
                IntegerObservation::Unknown => (),
                IntegerObservation::Exact => vec.push(OneObservation::FlasksExact(ctx.flasks)),
                IntegerObservation::Eq(i) => vec.push(OneObservation::FlasksEq(i, ctx.flasks == i)),
                IntegerObservation::Ge(i) => vec.push(OneObservation::FlasksGe(i, ctx.flasks >= i)),
                IntegerObservation::Le(i) => vec.push(OneObservation::FlasksLe(i, ctx.flasks <= i)),
                IntegerObservation::Range(lo, hi) => vec.push(OneObservation::FlasksRange(lo, hi, ctx.flasks >= lo && ctx.flasks <= hi)),
            }
            match self.refills {
                IntegerObservation::Unknown => (),
                IntegerObservation::Exact => vec.push(OneObservation::RefillsExact(ctx.refills)),
                IntegerObservation::Eq(i) => vec.push(OneObservation::RefillsEq(i, ctx.refills == i)),
                IntegerObservation::Ge(i) => vec.push(OneObservation::RefillsGe(i, ctx.refills >= i)),
                IntegerObservation::Le(i) => vec.push(OneObservation::RefillsLe(i, ctx.refills <= i)),
                IntegerObservation::Range(lo, hi) => vec.push(OneObservation::RefillsRange(lo, hi, ctx.refills >= lo && ctx.refills <= hi)),
            }
            if self.mode {
                vec.push(OneObservation::Mode(ctx.mode));
            }
            if self.save {
                vec.push(OneObservation::Save(ctx.save));
            }
            if self.breach_save {
                vec.push(OneObservation::BreachSave(ctx.breach_save));
            }
            if self.indra {
                vec.push(OneObservation::Indra(ctx.indra));
            }
            if self.last {
                vec.push(OneObservation::Last(ctx.last));
            }
            if self.portal {
                vec.push(OneObservation::Portal(ctx.portal));
            }
            if self.prev_portal {
                vec.push(OneObservation::PrevPortal(ctx.prev_portal));
            }
            if self.prev_area {
                vec.push(OneObservation::PrevArea(ctx.prev_area));
            }
            match self.big_flask {
                IntegerObservation::Unknown => (),
                IntegerObservation::Exact => vec.push(OneObservation::BigFlaskExact(ctx.big_flask)),
                IntegerObservation::Eq(i) => vec.push(OneObservation::BigFlaskEq(i, ctx.big_flask == i)),
                IntegerObservation::Ge(i) => vec.push(OneObservation::BigFlaskGe(i, ctx.big_flask >= i)),
                IntegerObservation::Le(i) => vec.push(OneObservation::BigFlaskLe(i, ctx.big_flask <= i)),
                IntegerObservation::Range(lo, hi) => vec.push(OneObservation::BigFlaskRange(lo, hi, ctx.big_flask >= lo && ctx.big_flask <= hi)),
            }
            match self.flask {
                IntegerObservation::Unknown => (),
                IntegerObservation::Exact => vec.push(OneObservation::FlaskExact(ctx.flask)),
                IntegerObservation::Eq(i) => vec.push(OneObservation::FlaskEq(i, ctx.flask == i)),
                IntegerObservation::Ge(i) => vec.push(OneObservation::FlaskGe(i, ctx.flask >= i)),
                IntegerObservation::Le(i) => vec.push(OneObservation::FlaskLe(i, ctx.flask <= i)),
                IntegerObservation::Range(lo, hi) => vec.push(OneObservation::FlaskRange(lo, hi, ctx.flask >= lo && ctx.flask <= hi)),
            }
            match self.health_fragment {
                IntegerObservation::Unknown => (),
                IntegerObservation::Exact => vec.push(OneObservation::HealthFragmentExact(ctx.health_fragment)),
                IntegerObservation::Eq(i) => vec.push(OneObservation::HealthFragmentEq(i, ctx.health_fragment == i)),
                IntegerObservation::Ge(i) => vec.push(OneObservation::HealthFragmentGe(i, ctx.health_fragment >= i)),
                IntegerObservation::Le(i) => vec.push(OneObservation::HealthFragmentLe(i, ctx.health_fragment <= i)),
                IntegerObservation::Range(lo, hi) => vec.push(OneObservation::HealthFragmentRange(lo, hi, ctx.health_fragment >= lo && ctx.health_fragment <= hi)),
            }
            match self.health_node {
                IntegerObservation::Unknown => (),
                IntegerObservation::Exact => vec.push(OneObservation::HealthNodeExact(ctx.health_node)),
                IntegerObservation::Eq(i) => vec.push(OneObservation::HealthNodeEq(i, ctx.health_node == i)),
                IntegerObservation::Ge(i) => vec.push(OneObservation::HealthNodeGe(i, ctx.health_node >= i)),
                IntegerObservation::Le(i) => vec.push(OneObservation::HealthNodeLe(i, ctx.health_node <= i)),
                IntegerObservation::Range(lo, hi) => vec.push(OneObservation::HealthNodeRange(lo, hi, ctx.health_node >= lo && ctx.health_node <= hi)),
            }
            match self.power_matrix {
                IntegerObservation::Unknown => (),
                IntegerObservation::Exact => vec.push(OneObservation::PowerMatrixExact(ctx.power_matrix)),
                IntegerObservation::Eq(i) => vec.push(OneObservation::PowerMatrixEq(i, ctx.power_matrix == i)),
                IntegerObservation::Ge(i) => vec.push(OneObservation::PowerMatrixGe(i, ctx.power_matrix >= i)),
                IntegerObservation::Le(i) => vec.push(OneObservation::PowerMatrixLe(i, ctx.power_matrix <= i)),
                IntegerObservation::Range(lo, hi) => vec.push(OneObservation::PowerMatrixRange(lo, hi, ctx.power_matrix >= lo && ctx.power_matrix <= hi)),
            }
            if !self.cbits1.is_empty() {
                vec.push(OneObservation::CBits1{ mask: self.cbits1, result: self.cbits1 & ctx.cbits1 });
            }
            if !self.cbits2.is_empty() {
                vec.push(OneObservation::CBits2{ mask: self.cbits2, result: self.cbits2 & ctx.cbits2 });
            }
            if !self.cbits3.is_empty() {
                vec.push(OneObservation::CBits3{ mask: self.cbits3, result: self.cbits3 & ctx.cbits3 });
            }
            if !self.cbits4.is_empty() {
                vec.push(OneObservation::CBits4{ mask: self.cbits4, result: self.cbits4 & ctx.cbits4 });
            }
            if !self.cbits5.is_empty() {
                vec.push(OneObservation::CBits5{ mask: self.cbits5, result: self.cbits5 & ctx.cbits5 });
            }
            if !self.cbits6.is_empty() {
                vec.push(OneObservation::CBits6{ mask: self.cbits6, result: self.cbits6 & ctx.cbits6 });
            }
            if !self.cbits7.is_empty() {
                vec.push(OneObservation::CBits7{ mask: self.cbits7, result: self.cbits7 & ctx.cbits7 });
            }
            if !self.cbits8.is_empty() {
                vec.push(OneObservation::CBits8{ mask: self.cbits8, result: self.cbits8 & ctx.cbits8 });
            }
            if !self.cbits9.is_empty() {
                vec.push(OneObservation::CBits9{ mask: self.cbits9, result: self.cbits9 & ctx.cbits9 });
            }
            if !self.cbits10.is_empty() {
                vec.push(OneObservation::CBits10{ mask: self.cbits10, result: self.cbits10 & ctx.cbits10 });
            }
            if !self.cbits11.is_empty() {
                vec.push(OneObservation::CBits11{ mask: self.cbits11, result: self.cbits11 & ctx.cbits11 });
            }
        vec
    }
}

impl FullObservation {
    fn fields_observed(&self) -> usize {
        let mut fields = 0;
        if self.position { fields += 1; }
        if self.energy != IntegerObservation::Unknown { fields += 1; }
        if self.flasks != IntegerObservation::Unknown { fields += 1; }
        if self.refills != IntegerObservation::Unknown { fields += 1; }
        if self.mode { fields += 1; }
        if self.save { fields += 1; }
        if self.breach_save { fields += 1; }
        if self.indra { fields += 1; }
        if self.last { fields += 1; }
        if self.portal { fields += 1; }
        if self.prev_portal { fields += 1; }
        if self.prev_area { fields += 1; }
        if self.big_flask != IntegerObservation::Unknown { fields += 1; }
        if self.flask != IntegerObservation::Unknown { fields += 1; }
        if self.health_fragment != IntegerObservation::Unknown { fields += 1; }
        if self.health_node != IntegerObservation::Unknown { fields += 1; }
        if self.power_matrix != IntegerObservation::Unknown { fields += 1; }
        if !self.cbits1.is_empty() { fields += 1; }
        if !self.cbits2.is_empty() { fields += 1; }
        if !self.cbits3.is_empty() { fields += 1; }
        if !self.cbits4.is_empty() { fields += 1; }
        if !self.cbits5.is_empty() { fields += 1; }
        if !self.cbits6.is_empty() { fields += 1; }
        if !self.cbits7.is_empty() { fields += 1; }
        if !self.cbits8.is_empty() { fields += 1; }
        if !self.cbits9.is_empty() { fields += 1; }
        if !self.cbits10.is_empty() { fields += 1; }
        if !self.cbits11.is_empty() { fields += 1; }
        fields
    }

    pub fn observe_position(&mut self) {
        self.position = true;
    }
    pub fn clear_position(&mut self) {
        self.position = false;
    }
    pub fn observe_energy(&mut self, obs: IntegerObservation<i16>) {
        if self.strict {
            self.energy = IntegerObservation::Exact;
        } else {
            self.energy = self.energy.combine(obs);
        }
    }
    pub fn clear_energy(&mut self) {
        self.energy = IntegerObservation::Unknown;
    }
    pub fn observe_flasks(&mut self, obs: IntegerObservation<i8>) {
        if self.strict {
            self.flasks = IntegerObservation::Exact;
        } else {
            self.flasks = self.flasks.combine(obs);
        }
    }
    pub fn clear_flasks(&mut self) {
        self.flasks = IntegerObservation::Unknown;
    }
    pub fn observe_refills(&mut self, obs: IntegerObservation<i8>) {
        if self.strict {
            self.refills = IntegerObservation::Exact;
        } else {
            self.refills = self.refills.combine(obs);
        }
    }
    pub fn clear_refills(&mut self) {
        self.refills = IntegerObservation::Unknown;
    }
    pub fn observe_mode(&mut self) {
        self.mode = true;
    }
    pub fn clear_mode(&mut self) {
        self.mode = false;
    }
    pub fn observe_save(&mut self) {
        self.save = true;
    }
    pub fn clear_save(&mut self) {
        self.save = false;
    }
    pub fn observe_breach_save(&mut self) {
        self.breach_save = true;
    }
    pub fn clear_breach_save(&mut self) {
        self.breach_save = false;
    }
    pub fn observe_indra(&mut self) {
        self.indra = true;
    }
    pub fn clear_indra(&mut self) {
        self.indra = false;
    }
    pub fn observe_last(&mut self) {
        self.last = true;
    }
    pub fn clear_last(&mut self) {
        self.last = false;
    }
    pub fn observe_portal(&mut self) {
        self.portal = true;
    }
    pub fn clear_portal(&mut self) {
        self.portal = false;
    }
    pub fn observe_prev_portal(&mut self) {
        self.prev_portal = true;
    }
    pub fn clear_prev_portal(&mut self) {
        self.prev_portal = false;
    }
    pub fn observe_prev_area(&self) {}
    pub fn clear_prev_area(&self) {}
    pub fn observe_map__amagi_breach__east_entrance__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__AMAGI_BREACH__EAST_ENTRANCE__SAVE);
    }
    pub fn clear_map__amagi_breach__east_entrance__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__AMAGI_BREACH__EAST_ENTRANCE__SAVE);
    }
    pub fn observe_map__amagi_breach__east_ruins__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__AMAGI_BREACH__EAST_RUINS__SAVE);
    }
    pub fn clear_map__amagi_breach__east_ruins__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__AMAGI_BREACH__EAST_RUINS__SAVE);
    }
    pub fn observe_map__amagi_breach__upper_lake__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__AMAGI_BREACH__UPPER_LAKE__SAVE);
    }
    pub fn clear_map__amagi_breach__upper_lake__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__AMAGI_BREACH__UPPER_LAKE__SAVE);
    }
    pub fn observe_map__amagi__main_area__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__AMAGI__MAIN_AREA__SAVE);
    }
    pub fn clear_map__amagi__main_area__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__AMAGI__MAIN_AREA__SAVE);
    }
    pub fn observe_map__amagi__east_lake__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__AMAGI__EAST_LAKE__SAVE);
    }
    pub fn clear_map__amagi__east_lake__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__AMAGI__EAST_LAKE__SAVE);
    }
    pub fn observe_map__annuna_breach__double_corridor__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__ANNUNA_BREACH__DOUBLE_CORRIDOR__SAVE);
    }
    pub fn clear_map__annuna_breach__double_corridor__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__ANNUNA_BREACH__DOUBLE_CORRIDOR__SAVE);
    }
    pub fn observe_map__annuna_breach__rear_entrance__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__ANNUNA_BREACH__REAR_ENTRANCE__SAVE);
    }
    pub fn clear_map__annuna_breach__rear_entrance__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__ANNUNA_BREACH__REAR_ENTRANCE__SAVE);
    }
    pub fn observe_map__annuna_breach__north_hallway__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__ANNUNA_BREACH__NORTH_HALLWAY__SAVE);
    }
    pub fn clear_map__annuna_breach__north_hallway__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__ANNUNA_BREACH__NORTH_HALLWAY__SAVE);
    }
    pub fn observe_map__annuna_breach__bottom__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__ANNUNA_BREACH__BOTTOM__SAVE);
    }
    pub fn clear_map__annuna_breach__bottom__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__ANNUNA_BREACH__BOTTOM__SAVE);
    }
    pub fn observe_map__annuna_breach__enclosed__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__ANNUNA_BREACH__ENCLOSED__SAVE);
    }
    pub fn clear_map__annuna_breach__enclosed__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__ANNUNA_BREACH__ENCLOSED__SAVE);
    }
    pub fn observe_map__annuna__mirror_match__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE);
    }
    pub fn clear_map__annuna__mirror_match__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__ANNUNA__MIRROR_MATCH__SAVE);
    }
    pub fn observe_map__annuna__vertical_room__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE);
    }
    pub fn clear_map__annuna__vertical_room__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__ANNUNA__VERTICAL_ROOM__SAVE);
    }
    pub fn observe_map__annuna__factory_entrance__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__ANNUNA__FACTORY_ENTRANCE__SAVE);
    }
    pub fn clear_map__annuna__factory_entrance__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__ANNUNA__FACTORY_ENTRANCE__SAVE);
    }
    pub fn observe_map__annuna__upper_save__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__ANNUNA__UPPER_SAVE__SAVE);
    }
    pub fn clear_map__annuna__upper_save__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__ANNUNA__UPPER_SAVE__SAVE);
    }
    pub fn observe_map__annuna__center_save__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__ANNUNA__CENTER_SAVE__SAVE);
    }
    pub fn clear_map__annuna__center_save__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__ANNUNA__CENTER_SAVE__SAVE);
    }
    pub fn observe_map__ebih_breach__portals_101__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__EBIH_BREACH__PORTALS_101__SAVE);
    }
    pub fn clear_map__ebih_breach__portals_101__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__EBIH_BREACH__PORTALS_101__SAVE);
    }
    pub fn observe_map__ebih_breach__in_n_out__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__EBIH_BREACH__IN_N_OUT__SAVE);
    }
    pub fn clear_map__ebih_breach__in_n_out__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__EBIH_BREACH__IN_N_OUT__SAVE);
    }
    pub fn observe_map__ebih_breach__rock_block__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__EBIH_BREACH__ROCK_BLOCK__SAVE);
    }
    pub fn clear_map__ebih_breach__rock_block__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__EBIH_BREACH__ROCK_BLOCK__SAVE);
    }
    pub fn observe_map__ebih_breach__peak__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__EBIH_BREACH__PEAK__SAVE);
    }
    pub fn clear_map__ebih_breach__peak__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__EBIH_BREACH__PEAK__SAVE);
    }
    pub fn observe_map__ebih__base_camp__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__EBIH__BASE_CAMP__SAVE);
    }
    pub fn clear_map__ebih__base_camp__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__EBIH__BASE_CAMP__SAVE);
    }
    pub fn observe_map__ebih__ebih_west__mid_save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__MID_SAVE);
    }
    pub fn clear_map__ebih__ebih_west__mid_save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__EBIH__EBIH_WEST__MID_SAVE);
    }
    pub fn observe_map__ebih__ebih_west__upper_save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE);
    }
    pub fn clear_map__ebih__ebih_west__upper_save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__EBIH__EBIH_WEST__UPPER_SAVE);
    }
    pub fn observe_map__ebih__ebih_west__lower_save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE);
    }
    pub fn clear_map__ebih__ebih_west__lower_save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__EBIH__EBIH_WEST__LOWER_SAVE);
    }
    pub fn observe_map__ebih__hidden_portal__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__EBIH__HIDDEN_PORTAL__SAVE);
    }
    pub fn clear_map__ebih__hidden_portal__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__EBIH__HIDDEN_PORTAL__SAVE);
    }
    pub fn observe_map__emergence__camp_exterior__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__EMERGENCE__CAMP_EXTERIOR__SAVE);
    }
    pub fn clear_map__emergence__camp_exterior__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__EMERGENCE__CAMP_EXTERIOR__SAVE);
    }
    pub fn observe_map__giguna_breach__peak__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA_BREACH__PEAK__SAVE);
    }
    pub fn clear_map__giguna_breach__peak__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GIGUNA_BREACH__PEAK__SAVE);
    }
    pub fn observe_map__giguna_breach__sw_save__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE);
    }
    pub fn clear_map__giguna_breach__sw_save__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GIGUNA_BREACH__SW_SAVE__SAVE);
    }
    pub fn observe_map__giguna_breach__labyrinth__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA_BREACH__LABYRINTH__SAVE);
    }
    pub fn clear_map__giguna_breach__labyrinth__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GIGUNA_BREACH__LABYRINTH__SAVE);
    }
    pub fn observe_map__giguna_breach__east__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA_BREACH__EAST__SAVE);
    }
    pub fn clear_map__giguna_breach__east__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GIGUNA_BREACH__EAST__SAVE);
    }
    pub fn observe_map__giguna_breach__south__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA_BREACH__SOUTH__SAVE);
    }
    pub fn clear_map__giguna_breach__south__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GIGUNA_BREACH__SOUTH__SAVE);
    }
    pub fn observe_map__giguna__giguna_northeast__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);
    }
    pub fn clear_map__giguna__giguna_northeast__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GIGUNA__GIGUNA_NORTHEAST__SAVE);
    }
    pub fn observe_map__giguna__giguna_base__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE);
    }
    pub fn clear_map__giguna__giguna_base__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GIGUNA__GIGUNA_BASE__SAVE);
    }
    pub fn observe_map__giguna__ruins_west__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE);
    }
    pub fn clear_map__giguna__ruins_west__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GIGUNA__RUINS_WEST__SAVE);
    }
    pub fn observe_map__giguna__ruins_top__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);
    }
    pub fn clear_map__giguna__ruins_top__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GIGUNA__RUINS_TOP__SAVE);
    }
    pub fn observe_map__giguna__labyrinth__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__LABYRINTH__SAVE);
    }
    pub fn clear_map__giguna__labyrinth__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GIGUNA__LABYRINTH__SAVE);
    }
    pub fn observe_map__giguna__separator__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GIGUNA__SEPARATOR__SAVE);
    }
    pub fn clear_map__giguna__separator__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GIGUNA__SEPARATOR__SAVE);
    }
    pub fn observe_map__glacier_breach__south_save__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GLACIER_BREACH__SOUTH_SAVE__SAVE);
    }
    pub fn clear_map__glacier_breach__south_save__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GLACIER_BREACH__SOUTH_SAVE__SAVE);
    }
    pub fn observe_map__glacier_breach__west_save__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GLACIER_BREACH__WEST_SAVE__SAVE);
    }
    pub fn clear_map__glacier_breach__west_save__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GLACIER_BREACH__WEST_SAVE__SAVE);
    }
    pub fn observe_map__glacier_breach__guarded_corridor__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GLACIER_BREACH__GUARDED_CORRIDOR__SAVE);
    }
    pub fn clear_map__glacier_breach__guarded_corridor__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GLACIER_BREACH__GUARDED_CORRIDOR__SAVE);
    }
    pub fn observe_map__glacier_breach__save_and_exit__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GLACIER_BREACH__SAVE_AND_EXIT__SAVE);
    }
    pub fn clear_map__glacier_breach__save_and_exit__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GLACIER_BREACH__SAVE_AND_EXIT__SAVE);
    }
    pub fn observe_map__glacier_breach__hammonds_breach__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GLACIER_BREACH__HAMMONDS_BREACH__SAVE);
    }
    pub fn clear_map__glacier_breach__hammonds_breach__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GLACIER_BREACH__HAMMONDS_BREACH__SAVE);
    }
    pub fn observe_map__glacier__revival__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE);
    }
    pub fn clear_map__glacier__revival__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__GLACIER__REVIVAL__SAVE);
    }
    pub fn observe_map__irikar_breach__save_room__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE);
    }
    pub fn clear_map__irikar_breach__save_room__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__IRIKAR_BREACH__SAVE_ROOM__SAVE);
    }
    pub fn observe_map__irikar_breach__gauntlet__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE);
    }
    pub fn clear_map__irikar_breach__gauntlet__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__IRIKAR_BREACH__GAUNTLET__SAVE);
    }
    pub fn observe_map__irikar_breach__basement_save__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR_BREACH__BASEMENT_SAVE__SAVE);
    }
    pub fn clear_map__irikar_breach__basement_save__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__IRIKAR_BREACH__BASEMENT_SAVE__SAVE);
    }
    pub fn observe_map__irikar_breach__corridor__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR_BREACH__CORRIDOR__SAVE);
    }
    pub fn clear_map__irikar_breach__corridor__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__IRIKAR_BREACH__CORRIDOR__SAVE);
    }
    pub fn observe_map__irikar__hub__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);
    }
    pub fn clear_map__irikar__hub__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__IRIKAR__HUB__SAVE);
    }
    pub fn observe_map__irikar__midwest__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR__MIDWEST__SAVE);
    }
    pub fn clear_map__irikar__midwest__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__IRIKAR__MIDWEST__SAVE);
    }
    pub fn observe_map__irikar__beach_save__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__IRIKAR__BEACH_SAVE__SAVE);
    }
    pub fn clear_map__irikar__beach_save__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__IRIKAR__BEACH_SAVE__SAVE);
    }
    pub fn observe_map__uhrum_breach__save_and_go__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__UHRUM_BREACH__SAVE_AND_GO__SAVE);
    }
    pub fn clear_map__uhrum_breach__save_and_go__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__UHRUM_BREACH__SAVE_AND_GO__SAVE);
    }
    pub fn observe_map__uhrum_breach__east_glitch__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__UHRUM_BREACH__EAST_GLITCH__SAVE);
    }
    pub fn clear_map__uhrum_breach__east_glitch__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__UHRUM_BREACH__EAST_GLITCH__SAVE);
    }
    pub fn observe_map__uhrum_breach__annuna_gate__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__UHRUM_BREACH__ANNUNA_GATE__SAVE);
    }
    pub fn clear_map__uhrum_breach__annuna_gate__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__UHRUM_BREACH__ANNUNA_GATE__SAVE);
    }
    pub fn observe_map__uhrum_breach__locked_down__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__UHRUM_BREACH__LOCKED_DOWN__SAVE);
    }
    pub fn clear_map__uhrum_breach__locked_down__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__UHRUM_BREACH__LOCKED_DOWN__SAVE);
    }
    pub fn observe_map__uhrum__west_entrance__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE);
    }
    pub fn clear_map__uhrum__west_entrance__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__UHRUM__WEST_ENTRANCE__SAVE);
    }
    pub fn observe_map__uhrum__save_room__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__UHRUM__SAVE_ROOM__SAVE);
    }
    pub fn clear_map__uhrum__save_room__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__UHRUM__SAVE_ROOM__SAVE);
    }
    pub fn observe_map__uhrum__annuna_corridor__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE);
    }
    pub fn clear_map__uhrum__annuna_corridor__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__UHRUM__ANNUNA_CORRIDOR__SAVE);
    }
    pub fn observe_map__uhrum__emergence_save__save(&mut self) {
        self.cbits1.insert(flags::ContextBits1::MAP__UHRUM__EMERGENCE_SAVE__SAVE);
    }
    pub fn clear_map__uhrum__emergence_save__save(&mut self) {
        self.cbits1.remove(flags::ContextBits1::MAP__UHRUM__EMERGENCE_SAVE__SAVE);
    }
    pub fn observe_glacier__ctx__hammonds_doors(&mut self) {
        self.cbits1.insert(flags::ContextBits1::GLACIER__CTX__HAMMONDS_DOORS);
    }
    pub fn clear_glacier__ctx__hammonds_doors(&mut self) {
        self.cbits1.remove(flags::ContextBits1::GLACIER__CTX__HAMMONDS_DOORS);
    }
    pub fn observe_amagi__main_area__ctx__combo(&mut self) {
        self.cbits1.insert(flags::ContextBits1::AMAGI__MAIN_AREA__CTX__COMBO);
    }
    pub fn clear_amagi__main_area__ctx__combo(&mut self) {
        self.cbits1.remove(flags::ContextBits1::AMAGI__MAIN_AREA__CTX__COMBO);
    }
    pub fn observe_amagi__gated_community__ctx__dur_esla(&mut self) {
        self.cbits1.insert(flags::ContextBits1::AMAGI__GATED_COMMUNITY__CTX__DUR_ESLA);
    }
    pub fn clear_amagi__gated_community__ctx__dur_esla(&mut self) {
        self.cbits1.remove(flags::ContextBits1::AMAGI__GATED_COMMUNITY__CTX__DUR_ESLA);
    }
    pub fn observe_annuna__invisible_enemies__ctx__door_opened(&mut self) {
        self.cbits1.insert(flags::ContextBits1::ANNUNA__INVISIBLE_ENEMIES__CTX__DOOR_OPENED);
    }
    pub fn clear_annuna__invisible_enemies__ctx__door_opened(&mut self) {
        self.cbits1.remove(flags::ContextBits1::ANNUNA__INVISIBLE_ENEMIES__CTX__DOOR_OPENED);
    }
    pub fn observe_annuna__invisible_enemies__ctx__nw_utu(&mut self) {
        self.cbits1.insert(flags::ContextBits1::ANNUNA__INVISIBLE_ENEMIES__CTX__NW_UTU);
    }
    pub fn clear_annuna__invisible_enemies__ctx__nw_utu(&mut self) {
        self.cbits1.remove(flags::ContextBits1::ANNUNA__INVISIBLE_ENEMIES__CTX__NW_UTU);
    }
    pub fn observe_annuna__west_bridge__ctx__doors_opened(&mut self) {
        self.cbits1.insert(flags::ContextBits1::ANNUNA__WEST_BRIDGE__CTX__DOORS_OPENED);
    }
    pub fn clear_annuna__west_bridge__ctx__doors_opened(&mut self) {
        self.cbits1.remove(flags::ContextBits1::ANNUNA__WEST_BRIDGE__CTX__DOORS_OPENED);
    }
    pub fn observe_annuna__east_bridge__ctx__combo(&mut self) {
        self.cbits1.insert(flags::ContextBits1::ANNUNA__EAST_BRIDGE__CTX__COMBO);
    }
    pub fn clear_annuna__east_bridge__ctx__combo(&mut self) {
        self.cbits1.remove(flags::ContextBits1::ANNUNA__EAST_BRIDGE__CTX__COMBO);
    }
    pub fn observe_annuna__vertical_room__ctx__door_opened(&mut self) {
        self.cbits2.insert(flags::ContextBits2::ANNUNA__VERTICAL_ROOM__CTX__DOOR_OPENED);
    }
    pub fn clear_annuna__vertical_room__ctx__door_opened(&mut self) {
        self.cbits2.remove(flags::ContextBits2::ANNUNA__VERTICAL_ROOM__CTX__DOOR_OPENED);
    }
    pub fn observe_annuna__west_climb__ctx__door_opened(&mut self) {
        self.cbits2.insert(flags::ContextBits2::ANNUNA__WEST_CLIMB__CTX__DOOR_OPENED);
    }
    pub fn clear_annuna__west_climb__ctx__door_opened(&mut self) {
        self.cbits2.remove(flags::ContextBits2::ANNUNA__WEST_CLIMB__CTX__DOOR_OPENED);
    }
    pub fn observe_ebih__base_camp__ctx__left_platform_moved(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED);
    }
    pub fn clear_ebih__base_camp__ctx__left_platform_moved(&mut self) {
        self.cbits2.remove(flags::ContextBits2::EBIH__BASE_CAMP__CTX__LEFT_PLATFORM_MOVED);
    }
    pub fn observe_ebih__truck_gate__ctx__door_open(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EBIH__TRUCK_GATE__CTX__DOOR_OPEN);
    }
    pub fn clear_ebih__truck_gate__ctx__door_open(&mut self) {
        self.cbits2.remove(flags::ContextBits2::EBIH__TRUCK_GATE__CTX__DOOR_OPEN);
    }
    pub fn observe_ebih__grid_25_10_12__ctx__door_open(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EBIH__GRID_25_10_12__CTX__DOOR_OPEN);
    }
    pub fn clear_ebih__grid_25_10_12__ctx__door_open(&mut self) {
        self.cbits2.remove(flags::ContextBits2::EBIH__GRID_25_10_12__CTX__DOOR_OPEN);
    }
    pub fn observe_ebih__waterfall__ctx__west_door_open(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EBIH__WATERFALL__CTX__WEST_DOOR_OPEN);
    }
    pub fn clear_ebih__waterfall__ctx__west_door_open(&mut self) {
        self.cbits2.remove(flags::ContextBits2::EBIH__WATERFALL__CTX__WEST_DOOR_OPEN);
    }
    pub fn observe_ebih__waterfall__ctx__east_door_open(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EBIH__WATERFALL__CTX__EAST_DOOR_OPEN);
    }
    pub fn clear_ebih__waterfall__ctx__east_door_open(&mut self) {
        self.cbits2.remove(flags::ContextBits2::EBIH__WATERFALL__CTX__EAST_DOOR_OPEN);
    }
    pub fn observe_ebih__ebih_west__ctx__door_open(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EBIH__EBIH_WEST__CTX__DOOR_OPEN);
    }
    pub fn clear_ebih__ebih_west__ctx__door_open(&mut self) {
        self.cbits2.remove(flags::ContextBits2::EBIH__EBIH_WEST__CTX__DOOR_OPEN);
    }
    pub fn observe_ebih__ebih_east__ctx__platform1_moved(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED);
    }
    pub fn clear_ebih__ebih_east__ctx__platform1_moved(&mut self) {
        self.cbits2.remove(flags::ContextBits2::EBIH__EBIH_EAST__CTX__PLATFORM1_MOVED);
    }
    pub fn observe_ebih__ebih_east__ctx__platform2_moved(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED);
    }
    pub fn clear_ebih__ebih_east__ctx__platform2_moved(&mut self) {
        self.cbits2.remove(flags::ContextBits2::EBIH__EBIH_EAST__CTX__PLATFORM2_MOVED);
    }
    pub fn observe_ebih__drone_room__ctx__platform_moved(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED);
    }
    pub fn clear_ebih__drone_room__ctx__platform_moved(&mut self) {
        self.cbits2.remove(flags::ContextBits2::EBIH__DRONE_ROOM__CTX__PLATFORM_MOVED);
    }
    pub fn observe_ebih__vertical_interchange__ctx__door_open(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EBIH__VERTICAL_INTERCHANGE__CTX__DOOR_OPEN);
    }
    pub fn clear_ebih__vertical_interchange__ctx__door_open(&mut self) {
        self.cbits2.remove(flags::ContextBits2::EBIH__VERTICAL_INTERCHANGE__CTX__DOOR_OPEN);
    }
    pub fn observe_emergence__storage__ctx__door_open(&mut self) {
        self.cbits2.insert(flags::ContextBits2::EMERGENCE__STORAGE__CTX__DOOR_OPEN);
    }
    pub fn clear_emergence__storage__ctx__door_open(&mut self) {
        self.cbits2.remove(flags::ContextBits2::EMERGENCE__STORAGE__CTX__DOOR_OPEN);
    }
    pub fn observe_giguna_breach__sw_save__ctx__door_opened(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA_BREACH__SW_SAVE__CTX__DOOR_OPENED);
    }
    pub fn clear_giguna_breach__sw_save__ctx__door_opened(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA_BREACH__SW_SAVE__CTX__DOOR_OPENED);
    }
    pub fn observe_giguna__giguna_northeast__ctx__door_opened(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA__GIGUNA_NORTHEAST__CTX__DOOR_OPENED);
    }
    pub fn clear_giguna__giguna_northeast__ctx__door_opened(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA__GIGUNA_NORTHEAST__CTX__DOOR_OPENED);
    }
    pub fn observe_giguna__carnelian__ctx__door_opened(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA__CARNELIAN__CTX__DOOR_OPENED);
    }
    pub fn clear_giguna__carnelian__ctx__door_opened(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA__CARNELIAN__CTX__DOOR_OPENED);
    }
    pub fn observe_giguna__carnelian__ctx__upper_susar(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA__CARNELIAN__CTX__UPPER_SUSAR);
    }
    pub fn clear_giguna__carnelian__ctx__upper_susar(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA__CARNELIAN__CTX__UPPER_SUSAR);
    }
    pub fn observe_giguna__carnelian__ctx__lower_susar(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA__CARNELIAN__CTX__LOWER_SUSAR);
    }
    pub fn clear_giguna__carnelian__ctx__lower_susar(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA__CARNELIAN__CTX__LOWER_SUSAR);
    }
    pub fn observe_giguna__west_caverns__ctx__east_susar(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR);
    }
    pub fn clear_giguna__west_caverns__ctx__east_susar(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA__WEST_CAVERNS__CTX__EAST_SUSAR);
    }
    pub fn observe_giguna__giguna_base__ctx__door_open(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA__GIGUNA_BASE__CTX__DOOR_OPEN);
    }
    pub fn clear_giguna__giguna_base__ctx__door_open(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA__GIGUNA_BASE__CTX__DOOR_OPEN);
    }
    pub fn observe_giguna__ruins_west__ctx__kishib_handled(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED);
    }
    pub fn clear_giguna__ruins_west__ctx__kishib_handled(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA__RUINS_WEST__CTX__KISHIB_HANDLED);
    }
    pub fn observe_giguna__ruins_top__ctx__doors_open(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA__RUINS_TOP__CTX__DOORS_OPEN);
    }
    pub fn clear_giguna__ruins_top__ctx__doors_open(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA__RUINS_TOP__CTX__DOORS_OPEN);
    }
    pub fn observe_giguna__clouds__ctx__platform(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA__CLOUDS__CTX__PLATFORM);
    }
    pub fn clear_giguna__clouds__ctx__platform(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA__CLOUDS__CTX__PLATFORM);
    }
    pub fn observe_giguna__east_caverns__ctx__door_opened(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA__EAST_CAVERNS__CTX__DOOR_OPENED);
    }
    pub fn clear_giguna__east_caverns__ctx__door_opened(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA__EAST_CAVERNS__CTX__DOOR_OPENED);
    }
    pub fn observe_giguna__east_caverns__ctx__combo_entered(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED);
    }
    pub fn clear_giguna__east_caverns__ctx__combo_entered(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA__EAST_CAVERNS__CTX__COMBO_ENTERED);
    }
    pub fn observe_giguna__east_caverns__ctx__upper_susar(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR);
    }
    pub fn clear_giguna__east_caverns__ctx__upper_susar(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA__EAST_CAVERNS__CTX__UPPER_SUSAR);
    }
    pub fn observe_giguna__east_caverns__ctx__mid_susar(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR);
    }
    pub fn clear_giguna__east_caverns__ctx__mid_susar(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA__EAST_CAVERNS__CTX__MID_SUSAR);
    }
    pub fn observe_giguna__east_caverns__ctx__lower_susar(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR);
    }
    pub fn clear_giguna__east_caverns__ctx__lower_susar(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA__EAST_CAVERNS__CTX__LOWER_SUSAR);
    }
    pub fn observe_giguna__gateway__ctx__door_opened(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA__GATEWAY__CTX__DOOR_OPENED);
    }
    pub fn clear_giguna__gateway__ctx__door_opened(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA__GATEWAY__CTX__DOOR_OPENED);
    }
    pub fn observe_giguna__labyrinth__ctx__door(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GIGUNA__LABYRINTH__CTX__DOOR);
    }
    pub fn clear_giguna__labyrinth__ctx__door(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GIGUNA__LABYRINTH__CTX__DOOR);
    }
    pub fn observe_glacier__the_big_drop__ctx__bridge_open(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GLACIER__THE_BIG_DROP__CTX__BRIDGE_OPEN);
    }
    pub fn clear_glacier__the_big_drop__ctx__bridge_open(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GLACIER__THE_BIG_DROP__CTX__BRIDGE_OPEN);
    }
    pub fn observe_glacier__vertical_room__ctx__upper_gatestone(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GLACIER__VERTICAL_ROOM__CTX__UPPER_GATESTONE);
    }
    pub fn clear_glacier__vertical_room__ctx__upper_gatestone(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GLACIER__VERTICAL_ROOM__CTX__UPPER_GATESTONE);
    }
    pub fn observe_glacier__vertical_room__ctx__lower_gatestones(&mut self) {
        self.cbits2.insert(flags::ContextBits2::GLACIER__VERTICAL_ROOM__CTX__LOWER_GATESTONES);
    }
    pub fn clear_glacier__vertical_room__ctx__lower_gatestones(&mut self) {
        self.cbits2.remove(flags::ContextBits2::GLACIER__VERTICAL_ROOM__CTX__LOWER_GATESTONES);
    }
    pub fn observe_irikar__basement_portal__ctx__platform_moved(&mut self) {
        self.cbits2.insert(flags::ContextBits2::IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED);
    }
    pub fn clear_irikar__basement_portal__ctx__platform_moved(&mut self) {
        self.cbits2.remove(flags::ContextBits2::IRIKAR__BASEMENT_PORTAL__CTX__PLATFORM_MOVED);
    }
    pub fn observe_irikar__midwest__ctx__left_platform(&mut self) {
        self.cbits2.insert(flags::ContextBits2::IRIKAR__MIDWEST__CTX__LEFT_PLATFORM);
    }
    pub fn clear_irikar__midwest__ctx__left_platform(&mut self) {
        self.cbits2.remove(flags::ContextBits2::IRIKAR__MIDWEST__CTX__LEFT_PLATFORM);
    }
    pub fn observe_irikar__midwest__ctx__right_platform(&mut self) {
        self.cbits2.insert(flags::ContextBits2::IRIKAR__MIDWEST__CTX__RIGHT_PLATFORM);
    }
    pub fn clear_irikar__midwest__ctx__right_platform(&mut self) {
        self.cbits2.remove(flags::ContextBits2::IRIKAR__MIDWEST__CTX__RIGHT_PLATFORM);
    }
    pub fn observe_aansur(&mut self) {
        self.cbits2.insert(flags::ContextBits2::AANSUR);
    }
    pub fn clear_aansur(&mut self) {
        self.cbits2.remove(flags::ContextBits2::AANSUR);
    }
    pub fn observe_amagi_breach_lower_hallway_gate(&mut self) {
        self.cbits2.insert(flags::ContextBits2::AMAGI_BREACH_LOWER_HALLWAY_GATE);
    }
    pub fn clear_amagi_breach_lower_hallway_gate(&mut self) {
        self.cbits2.remove(flags::ContextBits2::AMAGI_BREACH_LOWER_HALLWAY_GATE);
    }
    pub fn observe_amagi_breach_west_ruins_gate(&mut self) {
        self.cbits2.insert(flags::ContextBits2::AMAGI_BREACH_WEST_RUINS_GATE);
    }
    pub fn clear_amagi_breach_west_ruins_gate(&mut self) {
        self.cbits2.remove(flags::ContextBits2::AMAGI_BREACH_WEST_RUINS_GATE);
    }
    pub fn observe_amagi_dragon_eye_passage(&mut self) {
        self.cbits2.insert(flags::ContextBits2::AMAGI_DRAGON_EYE_PASSAGE);
    }
    pub fn clear_amagi_dragon_eye_passage(&mut self) {
        self.cbits2.remove(flags::ContextBits2::AMAGI_DRAGON_EYE_PASSAGE);
    }
    pub fn observe_amagi_gated_community_gate(&mut self) {
        self.cbits2.insert(flags::ContextBits2::AMAGI_GATED_COMMUNITY_GATE);
    }
    pub fn clear_amagi_gated_community_gate(&mut self) {
        self.cbits2.remove(flags::ContextBits2::AMAGI_GATED_COMMUNITY_GATE);
    }
    pub fn observe_amagi_stronghold_boulder_1(&mut self) {
        self.cbits2.insert(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_1);
    }
    pub fn clear_amagi_stronghold_boulder_1(&mut self) {
        self.cbits2.remove(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_1);
    }
    pub fn observe_amagi_stronghold_boulder_2(&mut self) {
        self.cbits2.insert(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_2);
    }
    pub fn clear_amagi_stronghold_boulder_2(&mut self) {
        self.cbits2.remove(flags::ContextBits2::AMAGI_STRONGHOLD_BOULDER_2);
    }
    pub fn observe_amagi_stronghold_left_wall(&mut self) {
        self.cbits2.insert(flags::ContextBits2::AMAGI_STRONGHOLD_LEFT_WALL);
    }
    pub fn clear_amagi_stronghold_left_wall(&mut self) {
        self.cbits2.remove(flags::ContextBits2::AMAGI_STRONGHOLD_LEFT_WALL);
    }
    pub fn observe_amagi_stronghold_wall_1(&mut self) {
        self.cbits2.insert(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_1);
    }
    pub fn clear_amagi_stronghold_wall_1(&mut self) {
        self.cbits2.remove(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_1);
    }
    pub fn observe_amagi_stronghold_wall_2(&mut self) {
        self.cbits2.insert(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_2);
    }
    pub fn clear_amagi_stronghold_wall_2(&mut self) {
        self.cbits2.remove(flags::ContextBits2::AMAGI_STRONGHOLD_WALL_2);
    }
    pub fn observe_amagi_west_lake_gate(&mut self) {
        self.cbits2.insert(flags::ContextBits2::AMAGI_WEST_LAKE_GATE);
    }
    pub fn clear_amagi_west_lake_gate(&mut self) {
        self.cbits2.remove(flags::ContextBits2::AMAGI_WEST_LAKE_GATE);
    }
    pub fn observe_amagi_west_lake_surface_wall(&mut self) {
        self.cbits2.insert(flags::ContextBits2::AMAGI_WEST_LAKE_SURFACE_WALL);
    }
    pub fn clear_amagi_west_lake_surface_wall(&mut self) {
        self.cbits2.remove(flags::ContextBits2::AMAGI_WEST_LAKE_SURFACE_WALL);
    }
    pub fn observe_amagi_wiggly_room_gate(&mut self) {
        self.cbits2.insert(flags::ContextBits2::AMAGI_WIGGLY_ROOM_GATE);
    }
    pub fn clear_amagi_wiggly_room_gate(&mut self) {
        self.cbits2.remove(flags::ContextBits2::AMAGI_WIGGLY_ROOM_GATE);
    }
    pub fn observe_amashilama(&mut self) {
        self.cbits2.insert(flags::ContextBits2::AMASHILAMA);
    }
    pub fn clear_amashilama(&mut self) {
        self.cbits2.remove(flags::ContextBits2::AMASHILAMA);
    }
    pub fn observe_annuna_breach_upper_gate(&mut self) {
        self.cbits2.insert(flags::ContextBits2::ANNUNA_BREACH_UPPER_GATE);
    }
    pub fn clear_annuna_breach_upper_gate(&mut self) {
        self.cbits2.remove(flags::ContextBits2::ANNUNA_BREACH_UPPER_GATE);
    }
    pub fn observe_annuna_east_bridge_gate(&mut self) {
        self.cbits2.insert(flags::ContextBits2::ANNUNA_EAST_BRIDGE_GATE);
    }
    pub fn clear_annuna_east_bridge_gate(&mut self) {
        self.cbits2.remove(flags::ContextBits2::ANNUNA_EAST_BRIDGE_GATE);
    }
    pub fn observe_annuna_lower_gate(&mut self) {
        self.cbits2.insert(flags::ContextBits2::ANNUNA_LOWER_GATE);
    }
    pub fn clear_annuna_lower_gate(&mut self) {
        self.cbits2.remove(flags::ContextBits2::ANNUNA_LOWER_GATE);
    }
    pub fn observe_annuna_mirror_match_switch(&mut self) {
        self.cbits2.insert(flags::ContextBits2::ANNUNA_MIRROR_MATCH_SWITCH);
    }
    pub fn clear_annuna_mirror_match_switch(&mut self) {
        self.cbits2.remove(flags::ContextBits2::ANNUNA_MIRROR_MATCH_SWITCH);
    }
    pub fn observe_annuna_remote_training_gate(&mut self) {
        self.cbits2.insert(flags::ContextBits2::ANNUNA_REMOTE_TRAINING_GATE);
    }
    pub fn clear_annuna_remote_training_gate(&mut self) {
        self.cbits2.remove(flags::ContextBits2::ANNUNA_REMOTE_TRAINING_GATE);
    }
    pub fn observe_annuna_vertical_room_gate(&mut self) {
        self.cbits2.insert(flags::ContextBits2::ANNUNA_VERTICAL_ROOM_GATE);
    }
    pub fn clear_annuna_vertical_room_gate(&mut self) {
        self.cbits2.remove(flags::ContextBits2::ANNUNA_VERTICAL_ROOM_GATE);
    }
    pub fn observe_anuman(&mut self) {
        self.cbits2.insert(flags::ContextBits2::ANUMAN);
    }
    pub fn clear_anuman(&mut self) {
        self.cbits2.remove(flags::ContextBits2::ANUMAN);
    }
    pub fn observe_apocalypse_bomb(&mut self) {
        self.cbits2.insert(flags::ContextBits2::APOCALYPSE_BOMB);
    }
    pub fn clear_apocalypse_bomb(&mut self) {
        self.cbits2.remove(flags::ContextBits2::APOCALYPSE_BOMB);
    }
    pub fn observe_apocalypse_seals_wall(&mut self) {
        self.cbits2.insert(flags::ContextBits2::APOCALYPSE_SEALS_WALL);
    }
    pub fn clear_apocalypse_seals_wall(&mut self) {
        self.cbits2.remove(flags::ContextBits2::APOCALYPSE_SEALS_WALL);
    }
    pub fn observe_becoming_an_arm(&mut self) {
        self.cbits2.insert(flags::ContextBits2::BECOMING_AN_ARM);
    }
    pub fn clear_becoming_an_arm(&mut self) {
        self.cbits2.remove(flags::ContextBits2::BECOMING_AN_ARM);
    }
    pub fn observe_beware_the_patternmind(&mut self) {
        self.cbits2.insert(flags::ContextBits2::BEWARE_THE_PATTERNMIND);
    }
    pub fn clear_beware_the_patternmind(&mut self) {
        self.cbits2.remove(flags::ContextBits2::BEWARE_THE_PATTERNMIND);
    }
    pub fn observe_big_flask(&mut self, obs: IntegerObservation<i8>) {
        if self.strict {
            self.big_flask = IntegerObservation::Exact;
        } else {
            self.big_flask = self.big_flask.combine(obs);
        }
    }
    pub fn clear_big_flask(&mut self, obs: IntegerObservation<i8>) {
        self.big_flask = IntegerObservation::Unknown;
    }
    pub fn observe_boomerang(&mut self) {
        self.cbits2.insert(flags::ContextBits2::BOOMERANG);
    }
    pub fn clear_boomerang(&mut self) {
        self.cbits2.remove(flags::ContextBits2::BOOMERANG);
    }
    pub fn observe_boomerang_upgrade(&mut self) {
        self.cbits2.insert(flags::ContextBits2::BOOMERANG_UPGRADE);
    }
    pub fn clear_boomerang_upgrade(&mut self) {
        self.cbits2.remove(flags::ContextBits2::BOOMERANG_UPGRADE);
    }
    pub fn observe_bounty_list(&mut self) {
        self.cbits2.insert(flags::ContextBits2::BOUNTY_LIST);
    }
    pub fn clear_bounty_list(&mut self) {
        self.cbits2.remove(flags::ContextBits2::BOUNTY_LIST);
    }
    pub fn observe_breach_attractor(&mut self) {
        self.cbits3.insert(flags::ContextBits3::BREACH_ATTRACTOR);
    }
    pub fn clear_breach_attractor(&mut self) {
        self.cbits3.remove(flags::ContextBits3::BREACH_ATTRACTOR);
    }
    pub fn observe_breach_sight(&mut self) {
        self.cbits3.insert(flags::ContextBits3::BREACH_SIGHT);
    }
    pub fn clear_breach_sight(&mut self) {
        self.cbits3.remove(flags::ContextBits3::BREACH_SIGHT);
    }
    pub fn observe_bronze_axe(&mut self) {
        self.cbits3.insert(flags::ContextBits3::BRONZE_AXE);
    }
    pub fn clear_bronze_axe(&mut self) {
        self.cbits3.remove(flags::ContextBits3::BRONZE_AXE);
    }
    pub fn observe_building_of_the_school(&mut self) {
        self.cbits3.insert(flags::ContextBits3::BUILDING_OF_THE_SCHOOL);
    }
    pub fn clear_building_of_the_school(&mut self) {
        self.cbits3.remove(flags::ContextBits3::BUILDING_OF_THE_SCHOOL);
    }
    pub fn observe_carnelian_ring(&mut self) {
        self.cbits3.insert(flags::ContextBits3::CARNELIAN_RING);
    }
    pub fn clear_carnelian_ring(&mut self) {
        self.cbits3.remove(flags::ContextBits3::CARNELIAN_RING);
    }
    pub fn observe_commemorative_speech(&mut self) {
        self.cbits3.insert(flags::ContextBits3::COMMEMORATIVE_SPEECH);
    }
    pub fn clear_commemorative_speech(&mut self) {
        self.cbits3.remove(flags::ContextBits3::COMMEMORATIVE_SPEECH);
    }
    pub fn observe_companies_layoff(&mut self) {
        self.cbits3.insert(flags::ContextBits3::COMPANIES_LAYOFF);
    }
    pub fn clear_companies_layoff(&mut self) {
        self.cbits3.remove(flags::ContextBits3::COMPANIES_LAYOFF);
    }
    pub fn observe_compass(&mut self) {
        self.cbits3.insert(flags::ContextBits3::COMPASS);
    }
    pub fn clear_compass(&mut self) {
        self.cbits3.remove(flags::ContextBits3::COMPASS);
    }
    pub fn observe_dangerous_ideas(&mut self) {
        self.cbits3.insert(flags::ContextBits3::DANGEROUS_IDEAS);
    }
    pub fn clear_dangerous_ideas(&mut self) {
        self.cbits3.remove(flags::ContextBits3::DANGEROUS_IDEAS);
    }
    pub fn observe_dear_ernest(&mut self) {
        self.cbits3.insert(flags::ContextBits3::DEAR_ERNEST);
    }
    pub fn clear_dear_ernest(&mut self) {
        self.cbits3.remove(flags::ContextBits3::DEAR_ERNEST);
    }
    pub fn observe_defeat_indra(&mut self) {
        self.cbits3.insert(flags::ContextBits3::DEFEAT_INDRA);
    }
    pub fn clear_defeat_indra(&mut self) {
        self.cbits3.remove(flags::ContextBits3::DEFEAT_INDRA);
    }
    pub fn observe_defeat_mus_a_m20(&mut self) {
        self.cbits3.insert(flags::ContextBits3::DEFEAT_MUS_A_M20);
    }
    pub fn clear_defeat_mus_a_m20(&mut self) {
        self.cbits3.remove(flags::ContextBits3::DEFEAT_MUS_A_M20);
    }
    pub fn observe_destruction_pogrom(&mut self) {
        self.cbits3.insert(flags::ContextBits3::DESTRUCTION_POGROM);
    }
    pub fn clear_destruction_pogrom(&mut self) {
        self.cbits3.remove(flags::ContextBits3::DESTRUCTION_POGROM);
    }
    pub fn observe_diviners_gem(&mut self) {
        self.cbits3.insert(flags::ContextBits3::DIVINERS_GEM);
    }
    pub fn clear_diviners_gem(&mut self) {
        self.cbits3.remove(flags::ContextBits3::DIVINERS_GEM);
    }
    pub fn observe_double_axe(&mut self) {
        self.cbits3.insert(flags::ContextBits3::DOUBLE_AXE);
    }
    pub fn clear_double_axe(&mut self) {
        self.cbits3.remove(flags::ContextBits3::DOUBLE_AXE);
    }
    pub fn observe_dr_gloria(&mut self) {
        self.cbits3.insert(flags::ContextBits3::DR_GLORIA);
    }
    pub fn clear_dr_gloria(&mut self) {
        self.cbits3.remove(flags::ContextBits3::DR_GLORIA);
    }
    pub fn observe_drone_hover(&mut self) {
        self.cbits3.insert(flags::ContextBits3::DRONE_HOVER);
    }
    pub fn clear_drone_hover(&mut self) {
        self.cbits3.remove(flags::ContextBits3::DRONE_HOVER);
    }
    pub fn observe_drone_melee_charge(&mut self) {
        self.cbits3.insert(flags::ContextBits3::DRONE_MELEE_CHARGE);
    }
    pub fn clear_drone_melee_charge(&mut self) {
        self.cbits3.remove(flags::ContextBits3::DRONE_MELEE_CHARGE);
    }
    pub fn observe_drone_melee_damage(&mut self) {
        self.cbits3.insert(flags::ContextBits3::DRONE_MELEE_DAMAGE);
    }
    pub fn clear_drone_melee_damage(&mut self) {
        self.cbits3.remove(flags::ContextBits3::DRONE_MELEE_DAMAGE);
    }
    pub fn observe_drone_melee_damage_2(&mut self) {
        self.cbits3.insert(flags::ContextBits3::DRONE_MELEE_DAMAGE_2);
    }
    pub fn clear_drone_melee_damage_2(&mut self) {
        self.cbits3.remove(flags::ContextBits3::DRONE_MELEE_DAMAGE_2);
    }
    pub fn observe_drone_melee_damage_3(&mut self) {
        self.cbits3.insert(flags::ContextBits3::DRONE_MELEE_DAMAGE_3);
    }
    pub fn clear_drone_melee_damage_3(&mut self) {
        self.cbits3.remove(flags::ContextBits3::DRONE_MELEE_DAMAGE_3);
    }
    pub fn observe_drone_melee_speed(&mut self) {
        self.cbits3.insert(flags::ContextBits3::DRONE_MELEE_SPEED);
    }
    pub fn clear_drone_melee_speed(&mut self) {
        self.cbits3.remove(flags::ContextBits3::DRONE_MELEE_SPEED);
    }
    pub fn observe_drone_melee_speed_2(&mut self) {
        self.cbits3.insert(flags::ContextBits3::DRONE_MELEE_SPEED_2);
    }
    pub fn clear_drone_melee_speed_2(&mut self) {
        self.cbits3.remove(flags::ContextBits3::DRONE_MELEE_SPEED_2);
    }
    pub fn observe_drone_melee_speed_3(&mut self) {
        self.cbits3.insert(flags::ContextBits3::DRONE_MELEE_SPEED_3);
    }
    pub fn clear_drone_melee_speed_3(&mut self) {
        self.cbits3.remove(flags::ContextBits3::DRONE_MELEE_SPEED_3);
    }
    pub fn observe_ebih_alu(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EBIH_ALU);
    }
    pub fn clear_ebih_alu(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EBIH_ALU);
    }
    pub fn observe_ebih_breach_double_gate_gate(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EBIH_BREACH_DOUBLE_GATE_GATE);
    }
    pub fn clear_ebih_breach_double_gate_gate(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EBIH_BREACH_DOUBLE_GATE_GATE);
    }
    pub fn observe_ebih_breach_in_n_out_gate(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EBIH_BREACH_IN_N_OUT_GATE);
    }
    pub fn clear_ebih_breach_in_n_out_gate(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EBIH_BREACH_IN_N_OUT_GATE);
    }
    pub fn observe_ebih_breach_lake_gate(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EBIH_BREACH_LAKE_GATE);
    }
    pub fn clear_ebih_breach_lake_gate(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EBIH_BREACH_LAKE_GATE);
    }
    pub fn observe_ebih_breach_rock_block_rock(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EBIH_BREACH_ROCK_BLOCK_ROCK);
    }
    pub fn clear_ebih_breach_rock_block_rock(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EBIH_BREACH_ROCK_BLOCK_ROCK);
    }
    pub fn observe_ebih_breach_spider_guards_gate(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EBIH_BREACH_SPIDER_GUARDS_GATE);
    }
    pub fn clear_ebih_breach_spider_guards_gate(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EBIH_BREACH_SPIDER_GUARDS_GATE);
    }
    pub fn observe_ebih_east_wall(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EBIH_EAST_WALL);
    }
    pub fn clear_ebih_east_wall(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EBIH_EAST_WALL);
    }
    pub fn observe_ebih_gem_room_gate(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EBIH_GEM_ROOM_GATE);
    }
    pub fn clear_ebih_gem_room_gate(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EBIH_GEM_ROOM_GATE);
    }
    pub fn observe_ebih_hidden_portal_gate(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EBIH_HIDDEN_PORTAL_GATE);
    }
    pub fn clear_ebih_hidden_portal_gate(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EBIH_HIDDEN_PORTAL_GATE);
    }
    pub fn observe_ebih_interchange_block(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EBIH_INTERCHANGE_BLOCK);
    }
    pub fn clear_ebih_interchange_block(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EBIH_INTERCHANGE_BLOCK);
    }
    pub fn observe_ebih_interchange_gate(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EBIH_INTERCHANGE_GATE);
    }
    pub fn clear_ebih_interchange_gate(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EBIH_INTERCHANGE_GATE);
    }
    pub fn observe_ebih_walled_off_wall(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EBIH_WALLED_OFF_WALL);
    }
    pub fn clear_ebih_walled_off_wall(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EBIH_WALLED_OFF_WALL);
    }
    pub fn observe_ebih_waterfall_block_left(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EBIH_WATERFALL_BLOCK_LEFT);
    }
    pub fn clear_ebih_waterfall_block_left(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EBIH_WATERFALL_BLOCK_LEFT);
    }
    pub fn observe_ebih_waterfall_block_right(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EBIH_WATERFALL_BLOCK_RIGHT);
    }
    pub fn clear_ebih_waterfall_block_right(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EBIH_WATERFALL_BLOCK_RIGHT);
    }
    pub fn observe_ebih_waterfall_wall(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EBIH_WATERFALL_WALL);
    }
    pub fn clear_ebih_waterfall_wall(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EBIH_WATERFALL_WALL);
    }
    pub fn observe_ebih_west_block(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EBIH_WEST_BLOCK);
    }
    pub fn clear_ebih_west_block(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EBIH_WEST_BLOCK);
    }
    pub fn observe_ellag(&mut self) {
        self.cbits3.insert(flags::ContextBits3::ELLAG);
    }
    pub fn clear_ellag(&mut self) {
        self.cbits3.remove(flags::ContextBits3::ELLAG);
    }
    pub fn observe_emergence_dropoff_wall(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EMERGENCE_DROPOFF_WALL);
    }
    pub fn clear_emergence_dropoff_wall(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EMERGENCE_DROPOFF_WALL);
    }
    pub fn observe_emergence_rocks_fall_rock_1(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EMERGENCE_ROCKS_FALL_ROCK_1);
    }
    pub fn clear_emergence_rocks_fall_rock_1(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EMERGENCE_ROCKS_FALL_ROCK_1);
    }
    pub fn observe_emergence_rocks_fall_rock_2(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EMERGENCE_ROCKS_FALL_ROCK_2);
    }
    pub fn clear_emergence_rocks_fall_rock_2(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EMERGENCE_ROCKS_FALL_ROCK_2);
    }
    pub fn observe_emergence_rocks_fall_rock_3(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EMERGENCE_ROCKS_FALL_ROCK_3);
    }
    pub fn clear_emergence_rocks_fall_rock_3(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EMERGENCE_ROCKS_FALL_ROCK_3);
    }
    pub fn observe_emergence_rocks_fall_rock_4(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EMERGENCE_ROCKS_FALL_ROCK_4);
    }
    pub fn clear_emergence_rocks_fall_rock_4(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EMERGENCE_ROCKS_FALL_ROCK_4);
    }
    pub fn observe_emergence_storage_rock(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EMERGENCE_STORAGE_ROCK);
    }
    pub fn clear_emergence_storage_rock(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EMERGENCE_STORAGE_ROCK);
    }
    pub fn observe_emergence_storage_tunnel(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EMERGENCE_STORAGE_TUNNEL);
    }
    pub fn clear_emergence_storage_tunnel(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EMERGENCE_STORAGE_TUNNEL);
    }
    pub fn observe_ensis_bracelet(&mut self) {
        self.cbits3.insert(flags::ContextBits3::ENSIS_BRACELET);
    }
    pub fn clear_ensis_bracelet(&mut self) {
        self.cbits3.remove(flags::ContextBits3::ENSIS_BRACELET);
    }
    pub fn observe_escape(&mut self) {
        self.cbits3.insert(flags::ContextBits3::ESCAPE);
    }
    pub fn clear_escape(&mut self) {
        self.cbits3.remove(flags::ContextBits3::ESCAPE);
    }
    pub fn observe_exit_breach(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EXIT_BREACH);
    }
    pub fn clear_exit_breach(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EXIT_BREACH);
    }
    pub fn observe_eye_ring(&mut self) {
        self.cbits3.insert(flags::ContextBits3::EYE_RING);
    }
    pub fn clear_eye_ring(&mut self) {
        self.cbits3.remove(flags::ContextBits3::EYE_RING);
    }
    pub fn observe_family_tragedy(&mut self) {
        self.cbits3.insert(flags::ContextBits3::FAMILY_TRAGEDY);
    }
    pub fn clear_family_tragedy(&mut self) {
        self.cbits3.remove(flags::ContextBits3::FAMILY_TRAGEDY);
    }
    pub fn observe_fast_travel(&mut self) {
        self.cbits3.insert(flags::ContextBits3::FAST_TRAVEL);
    }
    pub fn clear_fast_travel(&mut self) {
        self.cbits3.remove(flags::ContextBits3::FAST_TRAVEL);
    }
    pub fn observe_flask(&mut self, obs: IntegerObservation<i8>) {
        if self.strict {
            self.flask = IntegerObservation::Exact;
        } else {
            self.flask = self.flask.combine(obs);
        }
    }
    pub fn clear_flask(&mut self, obs: IntegerObservation<i8>) {
        self.flask = IntegerObservation::Unknown;
    }
    pub fn observe_forbidden_knowledge(&mut self) {
        self.cbits3.insert(flags::ContextBits3::FORBIDDEN_KNOWLEDGE);
    }
    pub fn clear_forbidden_knowledge(&mut self) {
        self.cbits3.remove(flags::ContextBits3::FORBIDDEN_KNOWLEDGE);
    }
    pub fn observe_freedom_from_aansur(&mut self) {
        self.cbits3.insert(flags::ContextBits3::FREEDOM_FROM_AANSUR);
    }
    pub fn clear_freedom_from_aansur(&mut self) {
        self.cbits3.remove(flags::ContextBits3::FREEDOM_FROM_AANSUR);
    }
    pub fn observe_giguna_boulder(&mut self) {
        self.cbits3.insert(flags::ContextBits3::GIGUNA_BOULDER);
    }
    pub fn clear_giguna_boulder(&mut self) {
        self.cbits3.remove(flags::ContextBits3::GIGUNA_BOULDER);
    }
    pub fn observe_giguna_breach_crab_rave_gate(&mut self) {
        self.cbits3.insert(flags::ContextBits3::GIGUNA_BREACH_CRAB_RAVE_GATE);
    }
    pub fn clear_giguna_breach_crab_rave_gate(&mut self) {
        self.cbits3.remove(flags::ContextBits3::GIGUNA_BREACH_CRAB_RAVE_GATE);
    }
    pub fn observe_giguna_breach_gate_and_wall_gate(&mut self) {
        self.cbits3.insert(flags::ContextBits3::GIGUNA_BREACH_GATE_AND_WALL_GATE);
    }
    pub fn clear_giguna_breach_gate_and_wall_gate(&mut self) {
        self.cbits3.remove(flags::ContextBits3::GIGUNA_BREACH_GATE_AND_WALL_GATE);
    }
    pub fn observe_giguna_breach_lower_machinery_gate(&mut self) {
        self.cbits3.insert(flags::ContextBits3::GIGUNA_BREACH_LOWER_MACHINERY_GATE);
    }
    pub fn clear_giguna_breach_lower_machinery_gate(&mut self) {
        self.cbits3.remove(flags::ContextBits3::GIGUNA_BREACH_LOWER_MACHINERY_GATE);
    }
    pub fn observe_giguna_breach_pinkness_rock(&mut self) {
        self.cbits3.insert(flags::ContextBits3::GIGUNA_BREACH_PINKNESS_ROCK);
    }
    pub fn clear_giguna_breach_pinkness_rock(&mut self) {
        self.cbits3.remove(flags::ContextBits3::GIGUNA_BREACH_PINKNESS_ROCK);
    }
    pub fn observe_giguna_dual_path_switch(&mut self) {
        self.cbits3.insert(flags::ContextBits3::GIGUNA_DUAL_PATH_SWITCH);
    }
    pub fn clear_giguna_dual_path_switch(&mut self) {
        self.cbits3.remove(flags::ContextBits3::GIGUNA_DUAL_PATH_SWITCH);
    }
    pub fn observe_giguna_dual_path_wall(&mut self) {
        self.cbits3.insert(flags::ContextBits3::GIGUNA_DUAL_PATH_WALL);
    }
    pub fn clear_giguna_dual_path_wall(&mut self) {
        self.cbits3.remove(flags::ContextBits3::GIGUNA_DUAL_PATH_WALL);
    }
    pub fn observe_giguna_gateway_block(&mut self) {
        self.cbits3.insert(flags::ContextBits3::GIGUNA_GATEWAY_BLOCK);
    }
    pub fn clear_giguna_gateway_block(&mut self) {
        self.cbits3.remove(flags::ContextBits3::GIGUNA_GATEWAY_BLOCK);
    }
    pub fn observe_giguna_gateway_gate(&mut self) {
        self.cbits4.insert(flags::ContextBits4::GIGUNA_GATEWAY_GATE);
    }
    pub fn clear_giguna_gateway_gate(&mut self) {
        self.cbits4.remove(flags::ContextBits4::GIGUNA_GATEWAY_GATE);
    }
    pub fn observe_giguna_gubi(&mut self) {
        self.cbits4.insert(flags::ContextBits4::GIGUNA_GUBI);
    }
    pub fn clear_giguna_gubi(&mut self) {
        self.cbits4.remove(flags::ContextBits4::GIGUNA_GUBI);
    }
    pub fn observe_giguna_labyrinth_gate(&mut self) {
        self.cbits4.insert(flags::ContextBits4::GIGUNA_LABYRINTH_GATE);
    }
    pub fn clear_giguna_labyrinth_gate(&mut self) {
        self.cbits4.remove(flags::ContextBits4::GIGUNA_LABYRINTH_GATE);
    }
    pub fn observe_giguna_northeast_gate(&mut self) {
        self.cbits4.insert(flags::ContextBits4::GIGUNA_NORTHEAST_GATE);
    }
    pub fn clear_giguna_northeast_gate(&mut self) {
        self.cbits4.remove(flags::ContextBits4::GIGUNA_NORTHEAST_GATE);
    }
    pub fn observe_giguna_separator_bricks(&mut self) {
        self.cbits4.insert(flags::ContextBits4::GIGUNA_SEPARATOR_BRICKS);
    }
    pub fn clear_giguna_separator_bricks(&mut self) {
        self.cbits4.remove(flags::ContextBits4::GIGUNA_SEPARATOR_BRICKS);
    }
    pub fn observe_giguna_vertical_interchange_gate(&mut self) {
        self.cbits4.insert(flags::ContextBits4::GIGUNA_VERTICAL_INTERCHANGE_GATE);
    }
    pub fn clear_giguna_vertical_interchange_gate(&mut self) {
        self.cbits4.remove(flags::ContextBits4::GIGUNA_VERTICAL_INTERCHANGE_GATE);
    }
    pub fn observe_giguna_vertical_interchange_rock(&mut self) {
        self.cbits4.insert(flags::ContextBits4::GIGUNA_VERTICAL_INTERCHANGE_ROCK);
    }
    pub fn clear_giguna_vertical_interchange_rock(&mut self) {
        self.cbits4.remove(flags::ContextBits4::GIGUNA_VERTICAL_INTERCHANGE_ROCK);
    }
    pub fn observe_giguna_wasteland_door(&mut self) {
        self.cbits4.insert(flags::ContextBits4::GIGUNA_WASTELAND_DOOR);
    }
    pub fn clear_giguna_wasteland_door(&mut self) {
        self.cbits4.remove(flags::ContextBits4::GIGUNA_WASTELAND_DOOR);
    }
    pub fn observe_giguna_wasteland_passage_h(&mut self) {
        self.cbits4.insert(flags::ContextBits4::GIGUNA_WASTELAND_PASSAGE_H);
    }
    pub fn clear_giguna_wasteland_passage_h(&mut self) {
        self.cbits4.remove(flags::ContextBits4::GIGUNA_WASTELAND_PASSAGE_H);
    }
    pub fn observe_glacier_big_drop_rock(&mut self) {
        self.cbits4.insert(flags::ContextBits4::GLACIER_BIG_DROP_ROCK);
    }
    pub fn clear_glacier_big_drop_rock(&mut self) {
        self.cbits4.remove(flags::ContextBits4::GLACIER_BIG_DROP_ROCK);
    }
    pub fn observe_glacier_breach_spidery_connector_gate(&mut self) {
        self.cbits4.insert(flags::ContextBits4::GLACIER_BREACH_SPIDERY_CONNECTOR_GATE);
    }
    pub fn clear_glacier_breach_spidery_connector_gate(&mut self) {
        self.cbits4.remove(flags::ContextBits4::GLACIER_BREACH_SPIDERY_CONNECTOR_GATE);
    }
    pub fn observe_glacier_fortress_gate(&mut self) {
        self.cbits4.insert(flags::ContextBits4::GLACIER_FORTRESS_GATE);
    }
    pub fn clear_glacier_fortress_gate(&mut self) {
        self.cbits4.remove(flags::ContextBits4::GLACIER_FORTRESS_GATE);
    }
    pub fn observe_glacier_sea_burial_rock(&mut self) {
        self.cbits4.insert(flags::ContextBits4::GLACIER_SEA_BURIAL_ROCK);
    }
    pub fn clear_glacier_sea_burial_rock(&mut self) {
        self.cbits4.remove(flags::ContextBits4::GLACIER_SEA_BURIAL_ROCK);
    }
    pub fn observe_goodbye(&mut self) {
        self.cbits4.insert(flags::ContextBits4::GOODBYE);
    }
    pub fn clear_goodbye(&mut self) {
        self.cbits4.remove(flags::ContextBits4::GOODBYE);
    }
    pub fn observe_halusan(&mut self) {
        self.cbits4.insert(flags::ContextBits4::HALUSAN);
    }
    pub fn clear_halusan(&mut self) {
        self.cbits4.remove(flags::ContextBits4::HALUSAN);
    }
    pub fn observe_hammond_auth(&mut self) {
        self.cbits4.insert(flags::ContextBits4::HAMMOND_AUTH);
    }
    pub fn clear_hammond_auth(&mut self) {
        self.cbits4.remove(flags::ContextBits4::HAMMOND_AUTH);
    }
    pub fn observe_health_fragment(&mut self, obs: IntegerObservation<i8>) {
        if self.strict {
            self.health_fragment = IntegerObservation::Exact;
        } else {
            self.health_fragment = self.health_fragment.combine(obs);
        }
    }
    pub fn clear_health_fragment(&mut self, obs: IntegerObservation<i8>) {
        self.health_fragment = IntegerObservation::Unknown;
    }
    pub fn observe_health_node(&mut self, obs: IntegerObservation<i8>) {
        if self.strict {
            self.health_node = IntegerObservation::Exact;
        } else {
            self.health_node = self.health_node.combine(obs);
        }
    }
    pub fn clear_health_node(&mut self, obs: IntegerObservation<i8>) {
        self.health_node = IntegerObservation::Unknown;
    }
    pub fn observe_health_upgrade(&mut self) {
        self.cbits4.insert(flags::ContextBits4::HEALTH_UPGRADE);
    }
    pub fn clear_health_upgrade(&mut self) {
        self.cbits4.remove(flags::ContextBits4::HEALTH_UPGRADE);
    }
    pub fn observe_health_upgrade_2(&mut self) {
        self.cbits4.insert(flags::ContextBits4::HEALTH_UPGRADE_2);
    }
    pub fn clear_health_upgrade_2(&mut self) {
        self.cbits4.remove(flags::ContextBits4::HEALTH_UPGRADE_2);
    }
    pub fn observe_health_upgrade_3(&mut self) {
        self.cbits4.insert(flags::ContextBits4::HEALTH_UPGRADE_3);
    }
    pub fn clear_health_upgrade_3(&mut self) {
        self.cbits4.remove(flags::ContextBits4::HEALTH_UPGRADE_3);
    }
    pub fn observe_health_upgrade_4(&mut self) {
        self.cbits4.insert(flags::ContextBits4::HEALTH_UPGRADE_4);
    }
    pub fn clear_health_upgrade_4(&mut self) {
        self.cbits4.remove(flags::ContextBits4::HEALTH_UPGRADE_4);
    }
    pub fn observe_heretics_granddaughter(&mut self) {
        self.cbits4.insert(flags::ContextBits4::HERETICS_GRANDDAUGHTER);
    }
    pub fn clear_heretics_granddaughter(&mut self) {
        self.cbits4.remove(flags::ContextBits4::HERETICS_GRANDDAUGHTER);
    }
    pub fn observe_heretics_tablet(&mut self) {
        self.cbits4.insert(flags::ContextBits4::HERETICS_TABLET);
    }
    pub fn clear_heretics_tablet(&mut self) {
        self.cbits4.remove(flags::ContextBits4::HERETICS_TABLET);
    }
    pub fn observe_ice_axe(&mut self) {
        self.cbits4.insert(flags::ContextBits4::ICE_AXE);
    }
    pub fn clear_ice_axe(&mut self) {
        self.cbits4.remove(flags::ContextBits4::ICE_AXE);
    }
    pub fn observe_infect(&mut self) {
        self.cbits4.insert(flags::ContextBits4::INFECT);
    }
    pub fn clear_infect(&mut self) {
        self.cbits4.remove(flags::ContextBits4::INFECT);
    }
    pub fn observe_infect_l1(&mut self) {
        self.cbits4.insert(flags::ContextBits4::INFECT_L1);
    }
    pub fn clear_infect_l1(&mut self) {
        self.cbits4.remove(flags::ContextBits4::INFECT_L1);
    }
    pub fn observe_infect_l2(&mut self) {
        self.cbits4.insert(flags::ContextBits4::INFECT_L2);
    }
    pub fn clear_infect_l2(&mut self) {
        self.cbits4.remove(flags::ContextBits4::INFECT_L2);
    }
    pub fn observe_infect_l3(&mut self) {
        self.cbits4.insert(flags::ContextBits4::INFECT_L3);
    }
    pub fn clear_infect_l3(&mut self) {
        self.cbits4.remove(flags::ContextBits4::INFECT_L3);
    }
    pub fn observe_infection_range(&mut self) {
        self.cbits4.insert(flags::ContextBits4::INFECTION_RANGE);
    }
    pub fn clear_infection_range(&mut self) {
        self.cbits4.remove(flags::ContextBits4::INFECTION_RANGE);
    }
    pub fn observe_infection_range_2(&mut self) {
        self.cbits4.insert(flags::ContextBits4::INFECTION_RANGE_2);
    }
    pub fn clear_infection_range_2(&mut self) {
        self.cbits4.remove(flags::ContextBits4::INFECTION_RANGE_2);
    }
    pub fn observe_infection_range_3(&mut self) {
        self.cbits4.insert(flags::ContextBits4::INFECTION_RANGE_3);
    }
    pub fn clear_infection_range_3(&mut self) {
        self.cbits4.remove(flags::ContextBits4::INFECTION_RANGE_3);
    }
    pub fn observe_infection_speed(&mut self) {
        self.cbits4.insert(flags::ContextBits4::INFECTION_SPEED);
    }
    pub fn clear_infection_speed(&mut self) {
        self.cbits4.remove(flags::ContextBits4::INFECTION_SPEED);
    }
    pub fn observe_irikar_breach_buried_treasure_pillar(&mut self) {
        self.cbits4.insert(flags::ContextBits4::IRIKAR_BREACH_BURIED_TREASURE_PILLAR);
    }
    pub fn clear_irikar_breach_buried_treasure_pillar(&mut self) {
        self.cbits4.remove(flags::ContextBits4::IRIKAR_BREACH_BURIED_TREASURE_PILLAR);
    }
    pub fn observe_irikar_breach_uhrum_connector_wall(&mut self) {
        self.cbits4.insert(flags::ContextBits4::IRIKAR_BREACH_UHRUM_CONNECTOR_WALL);
    }
    pub fn clear_irikar_breach_uhrum_connector_wall(&mut self) {
        self.cbits4.remove(flags::ContextBits4::IRIKAR_BREACH_UHRUM_CONNECTOR_WALL);
    }
    pub fn observe_irikar_gudam(&mut self) {
        self.cbits4.insert(flags::ContextBits4::IRIKAR_GUDAM);
    }
    pub fn clear_irikar_gudam(&mut self) {
        self.cbits4.remove(flags::ContextBits4::IRIKAR_GUDAM);
    }
    pub fn observe_irikar_royal_storage_wall(&mut self) {
        self.cbits4.insert(flags::ContextBits4::IRIKAR_ROYAL_STORAGE_WALL);
    }
    pub fn clear_irikar_royal_storage_wall(&mut self) {
        self.cbits4.remove(flags::ContextBits4::IRIKAR_ROYAL_STORAGE_WALL);
    }
    pub fn observe_journal_2049_10_29(&mut self) {
        self.cbits4.insert(flags::ContextBits4::JOURNAL_2049_10_29);
    }
    pub fn clear_journal_2049_10_29(&mut self) {
        self.cbits4.remove(flags::ContextBits4::JOURNAL_2049_10_29);
    }
    pub fn observe_kazakh_assault(&mut self) {
        self.cbits4.insert(flags::ContextBits4::KAZAKH_ASSAULT);
    }
    pub fn clear_kazakh_assault(&mut self) {
        self.cbits4.remove(flags::ContextBits4::KAZAKH_ASSAULT);
    }
    pub fn observe_lament_for_fools(&mut self) {
        self.cbits4.insert(flags::ContextBits4::LAMENT_FOR_FOOLS);
    }
    pub fn clear_lament_for_fools(&mut self) {
        self.cbits4.remove(flags::ContextBits4::LAMENT_FOR_FOOLS);
    }
    pub fn observe_ledge_grab(&mut self) {
        self.cbits4.insert(flags::ContextBits4::LEDGE_GRAB);
    }
    pub fn clear_ledge_grab(&mut self) {
        self.cbits4.remove(flags::ContextBits4::LEDGE_GRAB);
    }
    pub fn observe_letter_from_trace(&mut self) {
        self.cbits4.insert(flags::ContextBits4::LETTER_FROM_TRACE);
    }
    pub fn clear_letter_from_trace(&mut self) {
        self.cbits4.remove(flags::ContextBits4::LETTER_FROM_TRACE);
    }
    pub fn observe_melee_charge(&mut self) {
        self.cbits4.insert(flags::ContextBits4::MELEE_CHARGE);
    }
    pub fn clear_melee_charge(&mut self) {
        self.cbits4.remove(flags::ContextBits4::MELEE_CHARGE);
    }
    pub fn observe_melee_damage(&mut self) {
        self.cbits4.insert(flags::ContextBits4::MELEE_DAMAGE);
    }
    pub fn clear_melee_damage(&mut self) {
        self.cbits4.remove(flags::ContextBits4::MELEE_DAMAGE);
    }
    pub fn observe_melee_damage_2(&mut self) {
        self.cbits4.insert(flags::ContextBits4::MELEE_DAMAGE_2);
    }
    pub fn clear_melee_damage_2(&mut self) {
        self.cbits4.remove(flags::ContextBits4::MELEE_DAMAGE_2);
    }
    pub fn observe_melee_speed(&mut self) {
        self.cbits4.insert(flags::ContextBits4::MELEE_SPEED);
    }
    pub fn clear_melee_speed(&mut self) {
        self.cbits4.remove(flags::ContextBits4::MELEE_SPEED);
    }
    pub fn observe_melee_speed_2(&mut self) {
        self.cbits4.insert(flags::ContextBits4::MELEE_SPEED_2);
    }
    pub fn clear_melee_speed_2(&mut self) {
        self.cbits4.remove(flags::ContextBits4::MELEE_SPEED_2);
    }
    pub fn observe_mist_upgrade(&mut self) {
        self.cbits4.insert(flags::ContextBits4::MIST_UPGRADE);
    }
    pub fn clear_mist_upgrade(&mut self) {
        self.cbits4.remove(flags::ContextBits4::MIST_UPGRADE);
    }
    pub fn observe_nanite_mist(&mut self) {
        self.cbits4.insert(flags::ContextBits4::NANITE_MIST);
    }
    pub fn clear_nanite_mist(&mut self) {
        self.cbits4.remove(flags::ContextBits4::NANITE_MIST);
    }
    pub fn observe_nano_lattice_1(&mut self) {
        self.cbits4.insert(flags::ContextBits4::NANO_LATTICE_1);
    }
    pub fn clear_nano_lattice_1(&mut self) {
        self.cbits4.remove(flags::ContextBits4::NANO_LATTICE_1);
    }
    pub fn observe_nano_lattice_2(&mut self) {
        self.cbits4.insert(flags::ContextBits4::NANO_LATTICE_2);
    }
    pub fn clear_nano_lattice_2(&mut self) {
        self.cbits4.remove(flags::ContextBits4::NANO_LATTICE_2);
    }
    pub fn observe_nano_lattice_3(&mut self) {
        self.cbits4.insert(flags::ContextBits4::NANO_LATTICE_3);
    }
    pub fn clear_nano_lattice_3(&mut self) {
        self.cbits4.remove(flags::ContextBits4::NANO_LATTICE_3);
    }
    pub fn observe_nano_points(&mut self) {
        self.cbits4.insert(flags::ContextBits4::NANO_POINTS);
    }
    pub fn clear_nano_points(&mut self) {
        self.cbits4.remove(flags::ContextBits4::NANO_POINTS);
    }
    pub fn observe_nano_points_2(&mut self) {
        self.cbits4.insert(flags::ContextBits4::NANO_POINTS_2);
    }
    pub fn clear_nano_points_2(&mut self) {
        self.cbits4.remove(flags::ContextBits4::NANO_POINTS_2);
    }
    pub fn observe_nano_points_3(&mut self) {
        self.cbits4.insert(flags::ContextBits4::NANO_POINTS_3);
    }
    pub fn clear_nano_points_3(&mut self) {
        self.cbits4.remove(flags::ContextBits4::NANO_POINTS_3);
    }
    pub fn observe_notes_2053_02_27(&mut self) {
        self.cbits4.insert(flags::ContextBits4::NOTES_2053_02_27);
    }
    pub fn clear_notes_2053_02_27(&mut self) {
        self.cbits4.remove(flags::ContextBits4::NOTES_2053_02_27);
    }
    pub fn observe_plague_of_thoughts(&mut self) {
        self.cbits4.insert(flags::ContextBits4::PLAGUE_OF_THOUGHTS);
    }
    pub fn clear_plague_of_thoughts(&mut self) {
        self.cbits4.remove(flags::ContextBits4::PLAGUE_OF_THOUGHTS);
    }
    pub fn observe_power_matrix(&mut self, obs: IntegerObservation<i8>) {
        if self.strict {
            self.power_matrix = IntegerObservation::Exact;
        } else {
            self.power_matrix = self.power_matrix.combine(obs);
        }
    }
    pub fn clear_power_matrix(&mut self, obs: IntegerObservation<i8>) {
        self.power_matrix = IntegerObservation::Unknown;
    }
    pub fn observe_ranged_damage(&mut self) {
        self.cbits4.insert(flags::ContextBits4::RANGED_DAMAGE);
    }
    pub fn clear_ranged_damage(&mut self) {
        self.cbits4.remove(flags::ContextBits4::RANGED_DAMAGE);
    }
    pub fn observe_ranged_damage_2(&mut self) {
        self.cbits4.insert(flags::ContextBits4::RANGED_DAMAGE_2);
    }
    pub fn clear_ranged_damage_2(&mut self) {
        self.cbits4.remove(flags::ContextBits4::RANGED_DAMAGE_2);
    }
    pub fn observe_ranged_speed(&mut self) {
        self.cbits4.insert(flags::ContextBits4::RANGED_SPEED);
    }
    pub fn clear_ranged_speed(&mut self) {
        self.cbits4.remove(flags::ContextBits4::RANGED_SPEED);
    }
    pub fn observe_ranged_speed_2(&mut self) {
        self.cbits4.insert(flags::ContextBits4::RANGED_SPEED_2);
    }
    pub fn clear_ranged_speed_2(&mut self) {
        self.cbits4.remove(flags::ContextBits4::RANGED_SPEED_2);
    }
    pub fn observe_re_does_technology(&mut self) {
        self.cbits4.insert(flags::ContextBits4::RE_DOES_TECHNOLOGY);
    }
    pub fn clear_re_does_technology(&mut self) {
        self.cbits4.remove(flags::ContextBits4::RE_DOES_TECHNOLOGY);
    }
    pub fn observe_record_losses(&mut self) {
        self.cbits4.insert(flags::ContextBits4::RECORD_LOSSES);
    }
    pub fn clear_record_losses(&mut self) {
        self.cbits4.remove(flags::ContextBits4::RECORD_LOSSES);
    }
    pub fn observe_remote_boomerang(&mut self) {
        self.cbits4.insert(flags::ContextBits4::REMOTE_BOOMERANG);
    }
    pub fn clear_remote_boomerang(&mut self) {
        self.cbits4.remove(flags::ContextBits4::REMOTE_BOOMERANG);
    }
    pub fn observe_remote_drone(&mut self) {
        self.cbits4.insert(flags::ContextBits4::REMOTE_DRONE);
    }
    pub fn clear_remote_drone(&mut self) {
        self.cbits4.remove(flags::ContextBits4::REMOTE_DRONE);
    }
    pub fn observe_researchers_missing(&mut self) {
        self.cbits4.insert(flags::ContextBits4::RESEARCHERS_MISSING);
    }
    pub fn clear_researchers_missing(&mut self) {
        self.cbits4.remove(flags::ContextBits4::RESEARCHERS_MISSING);
    }
    pub fn observe_robopede(&mut self) {
        self.cbits5.insert(flags::ContextBits5::ROBOPEDE);
    }
    pub fn clear_robopede(&mut self) {
        self.cbits5.remove(flags::ContextBits5::ROBOPEDE);
    }
    pub fn observe_royal_dagger(&mut self) {
        self.cbits5.insert(flags::ContextBits5::ROYAL_DAGGER);
    }
    pub fn clear_royal_dagger(&mut self) {
        self.cbits5.remove(flags::ContextBits5::ROYAL_DAGGER);
    }
    pub fn observe_royal_ring(&mut self) {
        self.cbits5.insert(flags::ContextBits5::ROYAL_RING);
    }
    pub fn clear_royal_ring(&mut self) {
        self.cbits5.remove(flags::ContextBits5::ROYAL_RING);
    }
    pub fn observe_sagiga_on_the_worldstream(&mut self) {
        self.cbits5.insert(flags::ContextBits5::SAGIGA_ON_THE_WORLDSTREAM);
    }
    pub fn clear_sagiga_on_the_worldstream(&mut self) {
        self.cbits5.remove(flags::ContextBits5::SAGIGA_ON_THE_WORLDSTREAM);
    }
    pub fn observe_separation(&mut self) {
        self.cbits5.insert(flags::ContextBits5::SEPARATION);
    }
    pub fn clear_separation(&mut self) {
        self.cbits5.remove(flags::ContextBits5::SEPARATION);
    }
    pub fn observe_shockwave(&mut self) {
        self.cbits5.insert(flags::ContextBits5::SHOCKWAVE);
    }
    pub fn clear_shockwave(&mut self) {
        self.cbits5.remove(flags::ContextBits5::SHOCKWAVE);
    }
    pub fn observe_sickle_sword(&mut self) {
        self.cbits5.insert(flags::ContextBits5::SICKLE_SWORD);
    }
    pub fn clear_sickle_sword(&mut self) {
        self.cbits5.remove(flags::ContextBits5::SICKLE_SWORD);
    }
    pub fn observe_siuna_storage_wall(&mut self) {
        self.cbits5.insert(flags::ContextBits5::SIUNA_STORAGE_WALL);
    }
    pub fn clear_siuna_storage_wall(&mut self) {
        self.cbits5.remove(flags::ContextBits5::SIUNA_STORAGE_WALL);
    }
    pub fn observe_slingshot_charge(&mut self) {
        self.cbits5.insert(flags::ContextBits5::SLINGSHOT_CHARGE);
    }
    pub fn clear_slingshot_charge(&mut self) {
        self.cbits5.remove(flags::ContextBits5::SLINGSHOT_CHARGE);
    }
    pub fn observe_slingshot_hook(&mut self) {
        self.cbits5.insert(flags::ContextBits5::SLINGSHOT_HOOK);
    }
    pub fn clear_slingshot_hook(&mut self) {
        self.cbits5.remove(flags::ContextBits5::SLINGSHOT_HOOK);
    }
    pub fn observe_slingshot_weapon(&mut self) {
        self.cbits5.insert(flags::ContextBits5::SLINGSHOT_WEAPON);
    }
    pub fn clear_slingshot_weapon(&mut self) {
        self.cbits5.remove(flags::ContextBits5::SLINGSHOT_WEAPON);
    }
    pub fn observe_sniper_valley_rock_1(&mut self) {
        self.cbits5.insert(flags::ContextBits5::SNIPER_VALLEY_ROCK_1);
    }
    pub fn clear_sniper_valley_rock_1(&mut self) {
        self.cbits5.remove(flags::ContextBits5::SNIPER_VALLEY_ROCK_1);
    }
    pub fn observe_sniper_valley_rock_2(&mut self) {
        self.cbits5.insert(flags::ContextBits5::SNIPER_VALLEY_ROCK_2);
    }
    pub fn clear_sniper_valley_rock_2(&mut self) {
        self.cbits5.remove(flags::ContextBits5::SNIPER_VALLEY_ROCK_2);
    }
    pub fn observe_station_power(&mut self) {
        self.cbits5.insert(flags::ContextBits5::STATION_POWER);
    }
    pub fn clear_station_power(&mut self) {
        self.cbits5.remove(flags::ContextBits5::STATION_POWER);
    }
    pub fn observe_storm_bomb(&mut self) {
        self.cbits5.insert(flags::ContextBits5::STORM_BOMB);
    }
    pub fn clear_storm_bomb(&mut self) {
        self.cbits5.remove(flags::ContextBits5::STORM_BOMB);
    }
    pub fn observe_submarine_progress(&mut self) {
        self.cbits5.insert(flags::ContextBits5::SUBMARINE_PROGRESS);
    }
    pub fn clear_submarine_progress(&mut self) {
        self.cbits5.remove(flags::ContextBits5::SUBMARINE_PROGRESS);
    }
    pub fn observe_suspension_bridge(&mut self) {
        self.cbits5.insert(flags::ContextBits5::SUSPENSION_BRIDGE);
    }
    pub fn clear_suspension_bridge(&mut self) {
        self.cbits5.remove(flags::ContextBits5::SUSPENSION_BRIDGE);
    }
    pub fn observe_switch_36_11(&mut self) {
        self.cbits5.insert(flags::ContextBits5::SWITCH_36_11);
    }
    pub fn clear_switch_36_11(&mut self) {
        self.cbits5.remove(flags::ContextBits5::SWITCH_36_11);
    }
    pub fn observe_switch_40_12(&mut self) {
        self.cbits5.insert(flags::ContextBits5::SWITCH_40_12);
    }
    pub fn clear_switch_40_12(&mut self) {
        self.cbits5.remove(flags::ContextBits5::SWITCH_40_12);
    }
    pub fn observe_terminal_breakthrough_1(&mut self) {
        self.cbits5.insert(flags::ContextBits5::TERMINAL_BREAKTHROUGH_1);
    }
    pub fn clear_terminal_breakthrough_1(&mut self) {
        self.cbits5.remove(flags::ContextBits5::TERMINAL_BREAKTHROUGH_1);
    }
    pub fn observe_terminal_breakthrough_2(&mut self) {
        self.cbits5.insert(flags::ContextBits5::TERMINAL_BREAKTHROUGH_2);
    }
    pub fn clear_terminal_breakthrough_2(&mut self) {
        self.cbits5.remove(flags::ContextBits5::TERMINAL_BREAKTHROUGH_2);
    }
    pub fn observe_the_eternal_arm(&mut self) {
        self.cbits5.insert(flags::ContextBits5::THE_ETERNAL_ARM);
    }
    pub fn clear_the_eternal_arm(&mut self) {
        self.cbits5.remove(flags::ContextBits5::THE_ETERNAL_ARM);
    }
    pub fn observe_the_ideal_kiengir(&mut self) {
        self.cbits5.insert(flags::ContextBits5::THE_IDEAL_KIENGIR);
    }
    pub fn clear_the_ideal_kiengir(&mut self) {
        self.cbits5.remove(flags::ContextBits5::THE_IDEAL_KIENGIR);
    }
    pub fn observe_the_student(&mut self) {
        self.cbits5.insert(flags::ContextBits5::THE_STUDENT);
    }
    pub fn clear_the_student(&mut self) {
        self.cbits5.remove(flags::ContextBits5::THE_STUDENT);
    }
    pub fn observe_udusan(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UDUSAN);
    }
    pub fn clear_udusan(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UDUSAN);
    }
    pub fn observe_uhrum_annuna_corridor_block(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_ANNUNA_CORRIDOR_BLOCK);
    }
    pub fn clear_uhrum_annuna_corridor_block(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_ANNUNA_CORRIDOR_BLOCK);
    }
    pub fn observe_uhrum_breach_annuna_gate_gate(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_BREACH_ANNUNA_GATE_GATE);
    }
    pub fn clear_uhrum_breach_annuna_gate_gate(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_BREACH_ANNUNA_GATE_GATE);
    }
    pub fn observe_uhrum_breach_locked_down_gate(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_BREACH_LOCKED_DOWN_GATE);
    }
    pub fn clear_uhrum_breach_locked_down_gate(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_BREACH_LOCKED_DOWN_GATE);
    }
    pub fn observe_uhrum_breach_overgrown_ruins_wall(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_BREACH_OVERGROWN_RUINS_WALL);
    }
    pub fn clear_uhrum_breach_overgrown_ruins_wall(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_BREACH_OVERGROWN_RUINS_WALL);
    }
    pub fn observe_uhrum_breach_rock_and_gate_gate(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_BREACH_ROCK_AND_GATE_GATE);
    }
    pub fn clear_uhrum_breach_rock_and_gate_gate(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_BREACH_ROCK_AND_GATE_GATE);
    }
    pub fn observe_uhrum_breach_rock_and_gate_rock(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_BREACH_ROCK_AND_GATE_ROCK);
    }
    pub fn clear_uhrum_breach_rock_and_gate_rock(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_BREACH_ROCK_AND_GATE_ROCK);
    }
    pub fn observe_uhrum_cavern_wall(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_CAVERN_WALL);
    }
    pub fn clear_uhrum_cavern_wall(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_CAVERN_WALL);
    }
    pub fn observe_uhrum_east_glitch(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_EAST_GLITCH);
    }
    pub fn clear_uhrum_east_glitch(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_EAST_GLITCH);
    }
    pub fn observe_uhrum_east_lake_block(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_EAST_LAKE_BLOCK);
    }
    pub fn clear_uhrum_east_lake_block(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_EAST_LAKE_BLOCK);
    }
    pub fn observe_uhrum_emergence_wall(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_EMERGENCE_WALL);
    }
    pub fn clear_uhrum_emergence_wall(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_EMERGENCE_WALL);
    }
    pub fn observe_uhrum_glitchy_corridor_rock(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_GLITCHY_CORRIDOR_ROCK);
    }
    pub fn clear_uhrum_glitchy_corridor_rock(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_GLITCHY_CORRIDOR_ROCK);
    }
    pub fn observe_uhrum_rocky_gate_rock(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_ROCKY_GATE_ROCK);
    }
    pub fn clear_uhrum_rocky_gate_rock(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_ROCKY_GATE_ROCK);
    }
    pub fn observe_uhrum_waterfall_wall(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_WATERFALL_WALL);
    }
    pub fn clear_uhrum_waterfall_wall(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_WATERFALL_WALL);
    }
    pub fn observe_uhrum_waterfalls_block(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_WATERFALLS_BLOCK);
    }
    pub fn clear_uhrum_waterfalls_block(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_WATERFALLS_BLOCK);
    }
    pub fn observe_uhrum_west_entrance_gate(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_WEST_ENTRANCE_GATE);
    }
    pub fn clear_uhrum_west_entrance_gate(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_WEST_ENTRANCE_GATE);
    }
    pub fn observe_uhrum_west_entrance_lower_wall(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_WEST_ENTRANCE_LOWER_WALL);
    }
    pub fn clear_uhrum_west_entrance_lower_wall(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_WEST_ENTRANCE_LOWER_WALL);
    }
    pub fn observe_uhrum_west_entrance_upper_wall(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_WEST_ENTRANCE_UPPER_WALL);
    }
    pub fn clear_uhrum_west_entrance_upper_wall(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_WEST_ENTRANCE_UPPER_WALL);
    }
    pub fn observe_uhrum_west_glitch(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UHRUM_WEST_GLITCH);
    }
    pub fn clear_uhrum_west_glitch(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UHRUM_WEST_GLITCH);
    }
    pub fn observe_under_siege(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UNDER_SIEGE);
    }
    pub fn clear_under_siege(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UNDER_SIEGE);
    }
    pub fn observe_underwater_movement(&mut self) {
        self.cbits5.insert(flags::ContextBits5::UNDERWATER_MOVEMENT);
    }
    pub fn clear_underwater_movement(&mut self) {
        self.cbits5.remove(flags::ContextBits5::UNDERWATER_MOVEMENT);
    }
    pub fn observe_urgent_message(&mut self) {
        self.cbits5.insert(flags::ContextBits5::URGENT_MESSAGE);
    }
    pub fn clear_urgent_message(&mut self) {
        self.cbits5.remove(flags::ContextBits5::URGENT_MESSAGE);
    }
    pub fn observe_wall_climb(&mut self) {
        self.cbits5.insert(flags::ContextBits5::WALL_CLIMB);
    }
    pub fn clear_wall_climb(&mut self) {
        self.cbits5.remove(flags::ContextBits5::WALL_CLIMB);
    }
    pub fn swap_portal__prev_portal(&mut self) {
        std::mem::swap(&mut self.portal, &mut self.prev_portal);
    }
}

#[derive(Debug)]
pub enum ObservationMatcher {
    PositionLookup(LookupMatcher<Node<Self>, SpotId, SolutionSuffix<Context>>),
    EnergyLookup(LookupMatcher<Node<Self>, i16, SolutionSuffix<Context>>),
    EnergyEq {
        eq: i16,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    EnergyGe {
        lo: i16,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    EnergyLe {
        hi: i16,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    EnergyRange {
        lo: i16,
        hi: i16,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    FlasksLookup(LookupMatcher<Node<Self>, i8, SolutionSuffix<Context>>),
    FlasksEq {
        eq: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    FlasksGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    FlasksLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    FlasksRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    RefillsLookup(LookupMatcher<Node<Self>, i8, SolutionSuffix<Context>>),
    RefillsEq {
        eq: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    RefillsGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    RefillsLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    RefillsRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    ModeLookup(LookupMatcher<Node<Self>, enums::Mode, SolutionSuffix<Context>>),
    SaveLookup(LookupMatcher<Node<Self>, SpotId, SolutionSuffix<Context>>),
    BreachSaveLookup(LookupMatcher<Node<Self>, SpotId, SolutionSuffix<Context>>),
    IndraLookup(LookupMatcher<Node<Self>, SpotId, SolutionSuffix<Context>>),
    LastLookup(LookupMatcher<Node<Self>, SpotId, SolutionSuffix<Context>>),
    PortalLookup(LookupMatcher<Node<Self>, SpotId, SolutionSuffix<Context>>),
    PrevPortalLookup(LookupMatcher<Node<Self>, SpotId, SolutionSuffix<Context>>),
    PrevAreaLookup(LookupMatcher<Node<Self>, AreaId, SolutionSuffix<Context>>),
    // items
    BigFlaskLookup(LookupMatcher<Node<Self>, i8, SolutionSuffix<Context>>),
    BigFlaskEq {
        eq: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    BigFlaskGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    BigFlaskLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    BigFlaskRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    FlaskLookup(LookupMatcher<Node<Self>, i8, SolutionSuffix<Context>>),
    FlaskEq {
        eq: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    FlaskGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    FlaskLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    FlaskRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    HealthFragmentLookup(LookupMatcher<Node<Self>, i8, SolutionSuffix<Context>>),
    HealthFragmentEq {
        eq: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    HealthFragmentGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    HealthFragmentLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    HealthFragmentRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    HealthNodeLookup(LookupMatcher<Node<Self>, i8, SolutionSuffix<Context>>),
    HealthNodeEq {
        eq: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    HealthNodeGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    HealthNodeLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    HealthNodeRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    PowerMatrixLookup(LookupMatcher<Node<Self>, i8, SolutionSuffix<Context>>),
    PowerMatrixEq {
        eq: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    PowerMatrixGe {
        lo: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    PowerMatrixLe {
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    PowerMatrixRange {
        lo: i8,
        hi: i8,
        matcher: BooleanMatcher<Node<Self>, SolutionSuffix<Context>>,
    },
    // bitflags
    LookupCBits1 {
        mask: flags::ContextBits1,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits1, SolutionSuffix<Context>>,
    },
    LookupCBits2 {
        mask: flags::ContextBits2,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits2, SolutionSuffix<Context>>,
    },
    LookupCBits3 {
        mask: flags::ContextBits3,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits3, SolutionSuffix<Context>>,
    },
    LookupCBits4 {
        mask: flags::ContextBits4,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits4, SolutionSuffix<Context>>,
    },
    LookupCBits5 {
        mask: flags::ContextBits5,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits5, SolutionSuffix<Context>>,
    },
    LookupCBits6 {
        mask: flags::ContextBits6,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits6, SolutionSuffix<Context>>,
    },
    LookupCBits7 {
        mask: flags::ContextBits7,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits7, SolutionSuffix<Context>>,
    },
    LookupCBits8 {
        mask: flags::ContextBits8,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits8, SolutionSuffix<Context>>,
    },
    LookupCBits9 {
        mask: flags::ContextBits9,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits9, SolutionSuffix<Context>>,
    },
    LookupCBits10 {
        mask: flags::ContextBits10,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits10, SolutionSuffix<Context>>,
    },
    LookupCBits11 {
        mask: flags::ContextBits11,
        matcher: LookupMatcher<Node<Self>, flags::ContextBits11, SolutionSuffix<Context>>,
    },
}

impl Default for ObservationMatcher {
    fn default() -> Self {
        Self::PositionLookup(LookupMatcher::new())
    }
}

impl MatcherDispatch for ObservationMatcher {
    type Node = Node<Self>;
    type Struct = Context;
    type Value = SolutionSuffix<Context>;
    fn new(obs: &OneObservation) -> (Arc<Mutex<Node<Self>>>, Self) {
        match obs {
            &OneObservation::Position(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::PositionLookup(m))
            }
            &OneObservation::EnergyExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::EnergyLookup(m))
            }
            &OneObservation::EnergyEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::EnergyEq { eq, matcher })
            }
            &OneObservation::EnergyGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::EnergyGe { lo, matcher })
            }
            &OneObservation::EnergyLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::EnergyLe { hi, matcher })
            }
            &OneObservation::EnergyRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::EnergyRange { lo, hi, matcher })
            }
            &OneObservation::FlasksExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::FlasksLookup(m))
            }
            &OneObservation::FlasksEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlasksEq { eq, matcher })
            }
            &OneObservation::FlasksGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlasksGe { lo, matcher })
            }
            &OneObservation::FlasksLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlasksLe { hi, matcher })
            }
            &OneObservation::FlasksRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlasksRange { lo, hi, matcher })
            }
            &OneObservation::RefillsExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::RefillsLookup(m))
            }
            &OneObservation::RefillsEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::RefillsEq { eq, matcher })
            }
            &OneObservation::RefillsGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::RefillsGe { lo, matcher })
            }
            &OneObservation::RefillsLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::RefillsLe { hi, matcher })
            }
            &OneObservation::RefillsRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::RefillsRange { lo, hi, matcher })
            }
            &OneObservation::Mode(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::ModeLookup(m))
            }
            &OneObservation::Save(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::SaveLookup(m))
            }
            &OneObservation::BreachSave(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::BreachSaveLookup(m))
            }
            &OneObservation::Indra(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::IndraLookup(m))
            }
            &OneObservation::Last(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::LastLookup(m))
            }
            &OneObservation::Portal(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::PortalLookup(m))
            }
            &OneObservation::PrevPortal(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::PrevPortalLookup(m))
            }
            &OneObservation::PrevArea(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::PrevAreaLookup(m))
            }
            &OneObservation::BigFlaskExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::BigFlaskLookup(m))
            }
            &OneObservation::BigFlaskEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::BigFlaskEq { eq, matcher })
            }
            &OneObservation::BigFlaskGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::BigFlaskGe { lo, matcher })
            }
            &OneObservation::BigFlaskLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::BigFlaskLe { hi, matcher })
            }
            &OneObservation::BigFlaskRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::BigFlaskRange { lo, hi, matcher })
            }
            &OneObservation::FlaskExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::FlaskLookup(m))
            }
            &OneObservation::FlaskEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlaskEq { eq, matcher })
            }
            &OneObservation::FlaskGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlaskGe { lo, matcher })
            }
            &OneObservation::FlaskLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlaskLe { hi, matcher })
            }
            &OneObservation::FlaskRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::FlaskRange { lo, hi, matcher })
            }
            &OneObservation::HealthFragmentExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::HealthFragmentLookup(m))
            }
            &OneObservation::HealthFragmentEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::HealthFragmentEq { eq, matcher })
            }
            &OneObservation::HealthFragmentGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::HealthFragmentGe { lo, matcher })
            }
            &OneObservation::HealthFragmentLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::HealthFragmentLe { hi, matcher })
            }
            &OneObservation::HealthFragmentRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::HealthFragmentRange { lo, hi, matcher })
            }
            &OneObservation::HealthNodeExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::HealthNodeLookup(m))
            }
            &OneObservation::HealthNodeEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::HealthNodeEq { eq, matcher })
            }
            &OneObservation::HealthNodeGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::HealthNodeGe { lo, matcher })
            }
            &OneObservation::HealthNodeLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::HealthNodeLe { hi, matcher })
            }
            &OneObservation::HealthNodeRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::HealthNodeRange { lo, hi, matcher })
            }
            &OneObservation::PowerMatrixExact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::PowerMatrixLookup(m))
            }
            &OneObservation::PowerMatrixEq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::PowerMatrixEq { eq, matcher })
            }
            &OneObservation::PowerMatrixGe(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::PowerMatrixGe { lo, matcher })
            }
            &OneObservation::PowerMatrixLe(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::PowerMatrixLe { hi, matcher })
            }
            &OneObservation::PowerMatrixRange(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::PowerMatrixRange { lo, hi, matcher })
            }
            &OneObservation::CBits1{ mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits1 { mask, matcher })
            }
            &OneObservation::CBits2{ mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits2 { mask, matcher })
            }
            &OneObservation::CBits3{ mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits3 { mask, matcher })
            }
            &OneObservation::CBits4{ mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits4 { mask, matcher })
            }
            &OneObservation::CBits5{ mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits5 { mask, matcher })
            }
            &OneObservation::CBits6{ mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits6 { mask, matcher })
            }
            &OneObservation::CBits7{ mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits7 { mask, matcher })
            }
            &OneObservation::CBits8{ mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits8 { mask, matcher })
            }
            &OneObservation::CBits9{ mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits9 { mask, matcher })
            }
            &OneObservation::CBits10{ mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits10 { mask, matcher })
            }
            &OneObservation::CBits11{ mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits11 { mask, matcher })
            }
        }
    }

    fn clear(&mut self) {
        match self {
            Self::PositionLookup(m) => m.clear(),
            Self::EnergyLookup(m) => m.clear(),
            Self::EnergyEq { matcher, .. } => matcher.clear(),
            Self::EnergyGe { matcher, .. } => matcher.clear(),
            Self::EnergyLe { matcher, .. } => matcher.clear(),
            Self::EnergyRange { matcher, .. } => matcher.clear(),
            Self::FlasksLookup(m) => m.clear(),
            Self::FlasksEq { matcher, .. } => matcher.clear(),
            Self::FlasksGe { matcher, .. } => matcher.clear(),
            Self::FlasksLe { matcher, .. } => matcher.clear(),
            Self::FlasksRange { matcher, .. } => matcher.clear(),
            Self::RefillsLookup(m) => m.clear(),
            Self::RefillsEq { matcher, .. } => matcher.clear(),
            Self::RefillsGe { matcher, .. } => matcher.clear(),
            Self::RefillsLe { matcher, .. } => matcher.clear(),
            Self::RefillsRange { matcher, .. } => matcher.clear(),
            Self::ModeLookup(m) => m.clear(),
            Self::SaveLookup(m) => m.clear(),
            Self::BreachSaveLookup(m) => m.clear(),
            Self::IndraLookup(m) => m.clear(),
            Self::LastLookup(m) => m.clear(),
            Self::PortalLookup(m) => m.clear(),
            Self::PrevPortalLookup(m) => m.clear(),
            Self::PrevAreaLookup(m) => m.clear(),
            Self::BigFlaskLookup(m) => m.clear(),
            Self::BigFlaskEq { matcher, .. } => matcher.clear(),
            Self::BigFlaskGe { matcher, .. } => matcher.clear(),
            Self::BigFlaskLe { matcher, .. } => matcher.clear(),
            Self::BigFlaskRange { matcher, .. } => matcher.clear(),
            Self::FlaskLookup(m) => m.clear(),
            Self::FlaskEq { matcher, .. } => matcher.clear(),
            Self::FlaskGe { matcher, .. } => matcher.clear(),
            Self::FlaskLe { matcher, .. } => matcher.clear(),
            Self::FlaskRange { matcher, .. } => matcher.clear(),
            Self::HealthFragmentLookup(m) => m.clear(),
            Self::HealthFragmentEq { matcher, .. } => matcher.clear(),
            Self::HealthFragmentGe { matcher, .. } => matcher.clear(),
            Self::HealthFragmentLe { matcher, .. } => matcher.clear(),
            Self::HealthFragmentRange { matcher, .. } => matcher.clear(),
            Self::HealthNodeLookup(m) => m.clear(),
            Self::HealthNodeEq { matcher, .. } => matcher.clear(),
            Self::HealthNodeGe { matcher, .. } => matcher.clear(),
            Self::HealthNodeLe { matcher, .. } => matcher.clear(),
            Self::HealthNodeRange { matcher, .. } => matcher.clear(),
            Self::PowerMatrixLookup(m) => m.clear(),
            Self::PowerMatrixEq { matcher, .. } => matcher.clear(),
            Self::PowerMatrixGe { matcher, .. } => matcher.clear(),
            Self::PowerMatrixLe { matcher, .. } => matcher.clear(),
            Self::PowerMatrixRange { matcher, .. } => matcher.clear(),
            Self::LookupCBits1 { matcher, .. } => matcher.clear(),
            Self::LookupCBits2 { matcher, .. } => matcher.clear(),
            Self::LookupCBits3 { matcher, .. } => matcher.clear(),
            Self::LookupCBits4 { matcher, .. } => matcher.clear(),
            Self::LookupCBits5 { matcher, .. } => matcher.clear(),
            Self::LookupCBits6 { matcher, .. } => matcher.clear(),
            Self::LookupCBits7 { matcher, .. } => matcher.clear(),
            Self::LookupCBits8 { matcher, .. } => matcher.clear(),
            Self::LookupCBits9 { matcher, .. } => matcher.clear(),
            Self::LookupCBits10 { matcher, .. } => matcher.clear(),
            Self::LookupCBits11 { matcher, .. } => matcher.clear(),
        }
    }

    fn lookup(&self, val: &Context) -> (Option<Arc<Mutex<Node<Self>>>>, Vec<Self::Value>) {
        match self {
            Self::PositionLookup(m) => m.lookup(val.position),
            Self::EnergyLookup(m) => m.lookup(val.energy),
            Self::EnergyEq { eq, matcher } => matcher.lookup(val.energy == *eq),
            Self::EnergyGe { lo, matcher } => matcher.lookup(val.energy >= *lo),
            Self::EnergyLe { hi, matcher } => matcher.lookup(val.energy <= *hi),
            Self::EnergyRange { lo, hi, matcher } => matcher.lookup(val.energy >= *lo && val.energy <= *hi),
            Self::FlasksLookup(m) => m.lookup(val.flasks),
            Self::FlasksEq { eq, matcher } => matcher.lookup(val.flasks == *eq),
            Self::FlasksGe { lo, matcher } => matcher.lookup(val.flasks >= *lo),
            Self::FlasksLe { hi, matcher } => matcher.lookup(val.flasks <= *hi),
            Self::FlasksRange { lo, hi, matcher } => matcher.lookup(val.flasks >= *lo && val.flasks <= *hi),
            Self::RefillsLookup(m) => m.lookup(val.refills),
            Self::RefillsEq { eq, matcher } => matcher.lookup(val.refills == *eq),
            Self::RefillsGe { lo, matcher } => matcher.lookup(val.refills >= *lo),
            Self::RefillsLe { hi, matcher } => matcher.lookup(val.refills <= *hi),
            Self::RefillsRange { lo, hi, matcher } => matcher.lookup(val.refills >= *lo && val.refills <= *hi),
            Self::ModeLookup(m) => m.lookup(val.mode),
            Self::SaveLookup(m) => m.lookup(val.save),
            Self::BreachSaveLookup(m) => m.lookup(val.breach_save),
            Self::IndraLookup(m) => m.lookup(val.indra),
            Self::LastLookup(m) => m.lookup(val.last),
            Self::PortalLookup(m) => m.lookup(val.portal),
            Self::PrevPortalLookup(m) => m.lookup(val.prev_portal),
            Self::PrevAreaLookup(m) => m.lookup(val.prev_area),
            Self::BigFlaskLookup(m) => m.lookup(val.big_flask),
            Self::BigFlaskEq { eq, matcher } => matcher.lookup(val.big_flask == *eq),
            Self::BigFlaskGe { lo, matcher } => matcher.lookup(val.big_flask >= *lo),
            Self::BigFlaskLe { hi, matcher } => matcher.lookup(val.big_flask <= *hi),
            Self::BigFlaskRange { lo, hi, matcher } => matcher.lookup(val.big_flask >= *lo && val.big_flask <= *hi),
            Self::FlaskLookup(m) => m.lookup(val.flask),
            Self::FlaskEq { eq, matcher } => matcher.lookup(val.flask == *eq),
            Self::FlaskGe { lo, matcher } => matcher.lookup(val.flask >= *lo),
            Self::FlaskLe { hi, matcher } => matcher.lookup(val.flask <= *hi),
            Self::FlaskRange { lo, hi, matcher } => matcher.lookup(val.flask >= *lo && val.flask <= *hi),
            Self::HealthFragmentLookup(m) => m.lookup(val.health_fragment),
            Self::HealthFragmentEq { eq, matcher } => matcher.lookup(val.health_fragment == *eq),
            Self::HealthFragmentGe { lo, matcher } => matcher.lookup(val.health_fragment >= *lo),
            Self::HealthFragmentLe { hi, matcher } => matcher.lookup(val.health_fragment <= *hi),
            Self::HealthFragmentRange { lo, hi, matcher } => matcher.lookup(val.health_fragment >= *lo && val.health_fragment <= *hi),
            Self::HealthNodeLookup(m) => m.lookup(val.health_node),
            Self::HealthNodeEq { eq, matcher } => matcher.lookup(val.health_node == *eq),
            Self::HealthNodeGe { lo, matcher } => matcher.lookup(val.health_node >= *lo),
            Self::HealthNodeLe { hi, matcher } => matcher.lookup(val.health_node <= *hi),
            Self::HealthNodeRange { lo, hi, matcher } => matcher.lookup(val.health_node >= *lo && val.health_node <= *hi),
            Self::PowerMatrixLookup(m) => m.lookup(val.power_matrix),
            Self::PowerMatrixEq { eq, matcher } => matcher.lookup(val.power_matrix == *eq),
            Self::PowerMatrixGe { lo, matcher } => matcher.lookup(val.power_matrix >= *lo),
            Self::PowerMatrixLe { hi, matcher } => matcher.lookup(val.power_matrix <= *hi),
            Self::PowerMatrixRange { lo, hi, matcher } => matcher.lookup(val.power_matrix >= *lo && val.power_matrix <= *hi),
            Self::LookupCBits1 { mask, matcher } => matcher.lookup(val.cbits1 & *mask),
            Self::LookupCBits2 { mask, matcher } => matcher.lookup(val.cbits2 & *mask),
            Self::LookupCBits3 { mask, matcher } => matcher.lookup(val.cbits3 & *mask),
            Self::LookupCBits4 { mask, matcher } => matcher.lookup(val.cbits4 & *mask),
            Self::LookupCBits5 { mask, matcher } => matcher.lookup(val.cbits5 & *mask),
            Self::LookupCBits6 { mask, matcher } => matcher.lookup(val.cbits6 & *mask),
            Self::LookupCBits7 { mask, matcher } => matcher.lookup(val.cbits7 & *mask),
            Self::LookupCBits8 { mask, matcher } => matcher.lookup(val.cbits8 & *mask),
            Self::LookupCBits9 { mask, matcher } => matcher.lookup(val.cbits9 & *mask),
            Self::LookupCBits10 { mask, matcher } => matcher.lookup(val.cbits10 & *mask),
            Self::LookupCBits11 { mask, matcher } => matcher.lookup(val.cbits11 & *mask),
        }
    }

    fn insert(&mut self, obs: &OneObservation) -> Option<Arc<Mutex<Node<Self>>>> {
        match (self, obs) {
            (Self::PositionLookup(m), OneObservation::Position(v)) => Some(m.insert(*v)),
            (Self::EnergyLookup(m), OneObservation::EnergyExact(v)) => Some(m.insert(*v)),
            (Self::EnergyEq { eq, matcher }, OneObservation::EnergyEq(eq2, v)) if eq2 == eq => Some(matcher.insert(*v)),
            (Self::EnergyGe { lo, matcher }, OneObservation::EnergyGe(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::EnergyLe { hi, matcher }, OneObservation::EnergyLe(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::EnergyRange { lo, hi, matcher }, OneObservation::EnergyRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
            (Self::FlasksLookup(m), OneObservation::FlasksExact(v)) => Some(m.insert(*v)),
            (Self::FlasksEq { eq, matcher }, OneObservation::FlasksEq(eq2, v)) if eq2 == eq => Some(matcher.insert(*v)),
            (Self::FlasksGe { lo, matcher }, OneObservation::FlasksGe(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::FlasksLe { hi, matcher }, OneObservation::FlasksLe(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::FlasksRange { lo, hi, matcher }, OneObservation::FlasksRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
            (Self::RefillsLookup(m), OneObservation::RefillsExact(v)) => Some(m.insert(*v)),
            (Self::RefillsEq { eq, matcher }, OneObservation::RefillsEq(eq2, v)) if eq2 == eq => Some(matcher.insert(*v)),
            (Self::RefillsGe { lo, matcher }, OneObservation::RefillsGe(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::RefillsLe { hi, matcher }, OneObservation::RefillsLe(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::RefillsRange { lo, hi, matcher }, OneObservation::RefillsRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
            (Self::ModeLookup(m), OneObservation::Mode(v)) => Some(m.insert(*v)),
            (Self::SaveLookup(m), OneObservation::Save(v)) => Some(m.insert(*v)),
            (Self::BreachSaveLookup(m), OneObservation::BreachSave(v)) => Some(m.insert(*v)),
            (Self::IndraLookup(m), OneObservation::Indra(v)) => Some(m.insert(*v)),
            (Self::LastLookup(m), OneObservation::Last(v)) => Some(m.insert(*v)),
            (Self::PortalLookup(m), OneObservation::Portal(v)) => Some(m.insert(*v)),
            (Self::PrevPortalLookup(m), OneObservation::PrevPortal(v)) => Some(m.insert(*v)),
            (Self::PrevAreaLookup(m), OneObservation::PrevArea(v)) => Some(m.insert(*v)),
            (Self::BigFlaskLookup(m), OneObservation::BigFlaskExact(v)) => Some(m.insert(*v)),
            (Self::BigFlaskEq { eq, matcher }, OneObservation::BigFlaskEq(eq2, v)) if eq2 == eq => Some(matcher.insert(*v)),
            (Self::BigFlaskGe { lo, matcher }, OneObservation::BigFlaskGe(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::BigFlaskLe { hi, matcher }, OneObservation::BigFlaskLe(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::BigFlaskRange { lo, hi, matcher }, OneObservation::BigFlaskRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
            (Self::FlaskLookup(m), OneObservation::FlaskExact(v)) => Some(m.insert(*v)),
            (Self::FlaskEq { eq, matcher }, OneObservation::FlaskEq(eq2, v)) if eq2 == eq => Some(matcher.insert(*v)),
            (Self::FlaskGe { lo, matcher }, OneObservation::FlaskGe(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::FlaskLe { hi, matcher }, OneObservation::FlaskLe(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::FlaskRange { lo, hi, matcher }, OneObservation::FlaskRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
            (Self::HealthFragmentLookup(m), OneObservation::HealthFragmentExact(v)) => Some(m.insert(*v)),
            (Self::HealthFragmentEq { eq, matcher }, OneObservation::HealthFragmentEq(eq2, v)) if eq2 == eq => Some(matcher.insert(*v)),
            (Self::HealthFragmentGe { lo, matcher }, OneObservation::HealthFragmentGe(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::HealthFragmentLe { hi, matcher }, OneObservation::HealthFragmentLe(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::HealthFragmentRange { lo, hi, matcher }, OneObservation::HealthFragmentRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
            (Self::HealthNodeLookup(m), OneObservation::HealthNodeExact(v)) => Some(m.insert(*v)),
            (Self::HealthNodeEq { eq, matcher }, OneObservation::HealthNodeEq(eq2, v)) if eq2 == eq => Some(matcher.insert(*v)),
            (Self::HealthNodeGe { lo, matcher }, OneObservation::HealthNodeGe(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::HealthNodeLe { hi, matcher }, OneObservation::HealthNodeLe(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::HealthNodeRange { lo, hi, matcher }, OneObservation::HealthNodeRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
            (Self::PowerMatrixLookup(m), OneObservation::PowerMatrixExact(v)) => Some(m.insert(*v)),
            (Self::PowerMatrixEq { eq, matcher }, OneObservation::PowerMatrixEq(eq2, v)) if eq2 == eq => Some(matcher.insert(*v)),
            (Self::PowerMatrixGe { lo, matcher }, OneObservation::PowerMatrixGe(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::PowerMatrixLe { hi, matcher }, OneObservation::PowerMatrixLe(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::PowerMatrixRange { lo, hi, matcher }, OneObservation::PowerMatrixRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
            (Self::LookupCBits1 { mask, matcher }, OneObservation::CBits1 { mask: mask2, result }) if mask == mask2 => Some(matcher.insert(*result)),
            (Self::LookupCBits2 { mask, matcher }, OneObservation::CBits2 { mask: mask2, result }) if mask == mask2 => Some(matcher.insert(*result)),
            (Self::LookupCBits3 { mask, matcher }, OneObservation::CBits3 { mask: mask2, result }) if mask == mask2 => Some(matcher.insert(*result)),
            (Self::LookupCBits4 { mask, matcher }, OneObservation::CBits4 { mask: mask2, result }) if mask == mask2 => Some(matcher.insert(*result)),
            (Self::LookupCBits5 { mask, matcher }, OneObservation::CBits5 { mask: mask2, result }) if mask == mask2 => Some(matcher.insert(*result)),
            (Self::LookupCBits6 { mask, matcher }, OneObservation::CBits6 { mask: mask2, result }) if mask == mask2 => Some(matcher.insert(*result)),
            (Self::LookupCBits7 { mask, matcher }, OneObservation::CBits7 { mask: mask2, result }) if mask == mask2 => Some(matcher.insert(*result)),
            (Self::LookupCBits8 { mask, matcher }, OneObservation::CBits8 { mask: mask2, result }) if mask == mask2 => Some(matcher.insert(*result)),
            (Self::LookupCBits9 { mask, matcher }, OneObservation::CBits9 { mask: mask2, result }) if mask == mask2 => Some(matcher.insert(*result)),
            (Self::LookupCBits10 { mask, matcher }, OneObservation::CBits10 { mask: mask2, result }) if mask == mask2 => Some(matcher.insert(*result)),
            (Self::LookupCBits11 { mask, matcher }, OneObservation::CBits11 { mask: mask2, result }) if mask == mask2 => Some(matcher.insert(*result)),
            _ => None,
        }
    }

    fn add_value(&mut self, obs: &OneObservation, value: Self::Value) {
        match (self, obs) {
            (Self::PositionLookup(m), OneObservation::Position(v)) => m.add_value(*v, value),
            (Self::EnergyLookup(m), OneObservation::EnergyExact(v)) => m.add_value(*v, value),
            (Self::EnergyEq { eq, matcher }, OneObservation::EnergyEq(eq2, v)) if eq2 == eq => matcher.add_value(*v, value),
            (Self::EnergyGe { lo, matcher }, OneObservation::EnergyGe(lo2, v)) if lo2 == lo => matcher.add_value(*v, value),
            (Self::EnergyLe { hi, matcher }, OneObservation::EnergyLe(hi2, v)) if hi2 == hi => matcher.add_value(*v, value),
            (Self::EnergyRange { lo, hi, matcher }, OneObservation::EnergyRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value(*v, value),
            (Self::FlasksLookup(m), OneObservation::FlasksExact(v)) => m.add_value(*v, value),
            (Self::FlasksEq { eq, matcher }, OneObservation::FlasksEq(eq2, v)) if eq2 == eq => matcher.add_value(*v, value),
            (Self::FlasksGe { lo, matcher }, OneObservation::FlasksGe(lo2, v)) if lo2 == lo => matcher.add_value(*v, value),
            (Self::FlasksLe { hi, matcher }, OneObservation::FlasksLe(hi2, v)) if hi2 == hi => matcher.add_value(*v, value),
            (Self::FlasksRange { lo, hi, matcher }, OneObservation::FlasksRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value(*v, value),
            (Self::RefillsLookup(m), OneObservation::RefillsExact(v)) => m.add_value(*v, value),
            (Self::RefillsEq { eq, matcher }, OneObservation::RefillsEq(eq2, v)) if eq2 == eq => matcher.add_value(*v, value),
            (Self::RefillsGe { lo, matcher }, OneObservation::RefillsGe(lo2, v)) if lo2 == lo => matcher.add_value(*v, value),
            (Self::RefillsLe { hi, matcher }, OneObservation::RefillsLe(hi2, v)) if hi2 == hi => matcher.add_value(*v, value),
            (Self::RefillsRange { lo, hi, matcher }, OneObservation::RefillsRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value(*v, value),
            (Self::ModeLookup(m), OneObservation::Mode(v)) => m.add_value(*v, value),
            (Self::SaveLookup(m), OneObservation::Save(v)) => m.add_value(*v, value),
            (Self::BreachSaveLookup(m), OneObservation::BreachSave(v)) => m.add_value(*v, value),
            (Self::IndraLookup(m), OneObservation::Indra(v)) => m.add_value(*v, value),
            (Self::LastLookup(m), OneObservation::Last(v)) => m.add_value(*v, value),
            (Self::PortalLookup(m), OneObservation::Portal(v)) => m.add_value(*v, value),
            (Self::PrevPortalLookup(m), OneObservation::PrevPortal(v)) => m.add_value(*v, value),
            (Self::PrevAreaLookup(m), OneObservation::PrevArea(v)) => m.add_value(*v, value),
            (Self::BigFlaskLookup(m), OneObservation::BigFlaskExact(v)) => m.add_value(*v, value),
            (Self::BigFlaskEq { eq, matcher }, OneObservation::BigFlaskEq(eq2, v)) if eq2 == eq => matcher.add_value(*v, value),
            (Self::BigFlaskGe { lo, matcher }, OneObservation::BigFlaskGe(lo2, v)) if lo2 == lo => matcher.add_value(*v, value),
            (Self::BigFlaskLe { hi, matcher }, OneObservation::BigFlaskLe(hi2, v)) if hi2 == hi => matcher.add_value(*v, value),
            (Self::BigFlaskRange { lo, hi, matcher }, OneObservation::BigFlaskRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value(*v, value),
            (Self::FlaskLookup(m), OneObservation::FlaskExact(v)) => m.add_value(*v, value),
            (Self::FlaskEq { eq, matcher }, OneObservation::FlaskEq(eq2, v)) if eq2 == eq => matcher.add_value(*v, value),
            (Self::FlaskGe { lo, matcher }, OneObservation::FlaskGe(lo2, v)) if lo2 == lo => matcher.add_value(*v, value),
            (Self::FlaskLe { hi, matcher }, OneObservation::FlaskLe(hi2, v)) if hi2 == hi => matcher.add_value(*v, value),
            (Self::FlaskRange { lo, hi, matcher }, OneObservation::FlaskRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value(*v, value),
            (Self::HealthFragmentLookup(m), OneObservation::HealthFragmentExact(v)) => m.add_value(*v, value),
            (Self::HealthFragmentEq { eq, matcher }, OneObservation::HealthFragmentEq(eq2, v)) if eq2 == eq => matcher.add_value(*v, value),
            (Self::HealthFragmentGe { lo, matcher }, OneObservation::HealthFragmentGe(lo2, v)) if lo2 == lo => matcher.add_value(*v, value),
            (Self::HealthFragmentLe { hi, matcher }, OneObservation::HealthFragmentLe(hi2, v)) if hi2 == hi => matcher.add_value(*v, value),
            (Self::HealthFragmentRange { lo, hi, matcher }, OneObservation::HealthFragmentRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value(*v, value),
            (Self::HealthNodeLookup(m), OneObservation::HealthNodeExact(v)) => m.add_value(*v, value),
            (Self::HealthNodeEq { eq, matcher }, OneObservation::HealthNodeEq(eq2, v)) if eq2 == eq => matcher.add_value(*v, value),
            (Self::HealthNodeGe { lo, matcher }, OneObservation::HealthNodeGe(lo2, v)) if lo2 == lo => matcher.add_value(*v, value),
            (Self::HealthNodeLe { hi, matcher }, OneObservation::HealthNodeLe(hi2, v)) if hi2 == hi => matcher.add_value(*v, value),
            (Self::HealthNodeRange { lo, hi, matcher }, OneObservation::HealthNodeRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value(*v, value),
            (Self::PowerMatrixLookup(m), OneObservation::PowerMatrixExact(v)) => m.add_value(*v, value),
            (Self::PowerMatrixEq { eq, matcher }, OneObservation::PowerMatrixEq(eq2, v)) if eq2 == eq => matcher.add_value(*v, value),
            (Self::PowerMatrixGe { lo, matcher }, OneObservation::PowerMatrixGe(lo2, v)) if lo2 == lo => matcher.add_value(*v, value),
            (Self::PowerMatrixLe { hi, matcher }, OneObservation::PowerMatrixLe(hi2, v)) if hi2 == hi => matcher.add_value(*v, value),
            (Self::PowerMatrixRange { lo, hi, matcher }, OneObservation::PowerMatrixRange(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value(*v, value),
            (Self::LookupCBits1 { mask, matcher }, OneObservation::CBits1 { mask: mask2, result }) if mask == mask2 => matcher.add_value(*result, value),
            (Self::LookupCBits2 { mask, matcher }, OneObservation::CBits2 { mask: mask2, result }) if mask == mask2 => matcher.add_value(*result, value),
            (Self::LookupCBits3 { mask, matcher }, OneObservation::CBits3 { mask: mask2, result }) if mask == mask2 => matcher.add_value(*result, value),
            (Self::LookupCBits4 { mask, matcher }, OneObservation::CBits4 { mask: mask2, result }) if mask == mask2 => matcher.add_value(*result, value),
            (Self::LookupCBits5 { mask, matcher }, OneObservation::CBits5 { mask: mask2, result }) if mask == mask2 => matcher.add_value(*result, value),
            (Self::LookupCBits6 { mask, matcher }, OneObservation::CBits6 { mask: mask2, result }) if mask == mask2 => matcher.add_value(*result, value),
            (Self::LookupCBits7 { mask, matcher }, OneObservation::CBits7 { mask: mask2, result }) if mask == mask2 => matcher.add_value(*result, value),
            (Self::LookupCBits8 { mask, matcher }, OneObservation::CBits8 { mask: mask2, result }) if mask == mask2 => matcher.add_value(*result, value),
            (Self::LookupCBits9 { mask, matcher }, OneObservation::CBits9 { mask: mask2, result }) if mask == mask2 => matcher.add_value(*result, value),
            (Self::LookupCBits10 { mask, matcher }, OneObservation::CBits10 { mask: mask2, result }) if mask == mask2 => matcher.add_value(*result, value),
            (Self::LookupCBits11 { mask, matcher }, OneObservation::CBits11 { mask: mask2, result }) if mask == mask2 => matcher.add_value(*result, value),
            _ => (),
        }
    }

    fn nodes(&self) -> Vec<Arc<Mutex<Node<Self>>>> {
        match self {
            Self::PositionLookup(m) => m.nodes(),
            Self::EnergyLookup(m) => m.nodes(),
            Self::EnergyEq { matcher, .. } => matcher.nodes(),
            Self::EnergyGe { matcher, .. } => matcher.nodes(),
            Self::EnergyLe { matcher, .. } => matcher.nodes(),
            Self::EnergyRange { matcher, .. } => matcher.nodes(),
            Self::FlasksLookup(m) => m.nodes(),
            Self::FlasksEq { matcher, .. } => matcher.nodes(),
            Self::FlasksGe { matcher, .. } => matcher.nodes(),
            Self::FlasksLe { matcher, .. } => matcher.nodes(),
            Self::FlasksRange { matcher, .. } => matcher.nodes(),
            Self::RefillsLookup(m) => m.nodes(),
            Self::RefillsEq { matcher, .. } => matcher.nodes(),
            Self::RefillsGe { matcher, .. } => matcher.nodes(),
            Self::RefillsLe { matcher, .. } => matcher.nodes(),
            Self::RefillsRange { matcher, .. } => matcher.nodes(),
            Self::ModeLookup(m) => m.nodes(),
            Self::SaveLookup(m) => m.nodes(),
            Self::BreachSaveLookup(m) => m.nodes(),
            Self::IndraLookup(m) => m.nodes(),
            Self::LastLookup(m) => m.nodes(),
            Self::PortalLookup(m) => m.nodes(),
            Self::PrevPortalLookup(m) => m.nodes(),
            Self::PrevAreaLookup(m) => m.nodes(),
            Self::BigFlaskLookup(m) => m.nodes(),
            Self::BigFlaskEq { matcher, .. } => matcher.nodes(),
            Self::BigFlaskGe { matcher, .. } => matcher.nodes(),
            Self::BigFlaskLe { matcher, .. } => matcher.nodes(),
            Self::BigFlaskRange { matcher, .. } => matcher.nodes(),
            Self::FlaskLookup(m) => m.nodes(),
            Self::FlaskEq { matcher, .. } => matcher.nodes(),
            Self::FlaskGe { matcher, .. } => matcher.nodes(),
            Self::FlaskLe { matcher, .. } => matcher.nodes(),
            Self::FlaskRange { matcher, .. } => matcher.nodes(),
            Self::HealthFragmentLookup(m) => m.nodes(),
            Self::HealthFragmentEq { matcher, .. } => matcher.nodes(),
            Self::HealthFragmentGe { matcher, .. } => matcher.nodes(),
            Self::HealthFragmentLe { matcher, .. } => matcher.nodes(),
            Self::HealthFragmentRange { matcher, .. } => matcher.nodes(),
            Self::HealthNodeLookup(m) => m.nodes(),
            Self::HealthNodeEq { matcher, .. } => matcher.nodes(),
            Self::HealthNodeGe { matcher, .. } => matcher.nodes(),
            Self::HealthNodeLe { matcher, .. } => matcher.nodes(),
            Self::HealthNodeRange { matcher, .. } => matcher.nodes(),
            Self::PowerMatrixLookup(m) => m.nodes(),
            Self::PowerMatrixEq { matcher, .. } => matcher.nodes(),
            Self::PowerMatrixGe { matcher, .. } => matcher.nodes(),
            Self::PowerMatrixLe { matcher, .. } => matcher.nodes(),
            Self::PowerMatrixRange { matcher, .. } => matcher.nodes(),
            Self::LookupCBits1 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits2 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits3 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits4 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits5 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits6 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits7 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits8 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits9 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits10 { matcher, .. } => matcher.nodes(),
            Self::LookupCBits11 { matcher, .. } => matcher.nodes(),
        }
    }

    fn num_values(&self) -> usize {
        match self {
            Self::PositionLookup(m) => m.num_values(),
            Self::EnergyLookup(m) => m.num_values(),
            Self::EnergyEq { matcher, .. } => matcher.num_values(),
            Self::EnergyGe { matcher, .. } => matcher.num_values(),
            Self::EnergyLe { matcher, .. } => matcher.num_values(),
            Self::EnergyRange { matcher, .. } => matcher.num_values(),
            Self::FlasksLookup(m) => m.num_values(),
            Self::FlasksEq { matcher, .. } => matcher.num_values(),
            Self::FlasksGe { matcher, .. } => matcher.num_values(),
            Self::FlasksLe { matcher, .. } => matcher.num_values(),
            Self::FlasksRange { matcher, .. } => matcher.num_values(),
            Self::RefillsLookup(m) => m.num_values(),
            Self::RefillsEq { matcher, .. } => matcher.num_values(),
            Self::RefillsGe { matcher, .. } => matcher.num_values(),
            Self::RefillsLe { matcher, .. } => matcher.num_values(),
            Self::RefillsRange { matcher, .. } => matcher.num_values(),
            Self::ModeLookup(m) => m.num_values(),
            Self::SaveLookup(m) => m.num_values(),
            Self::BreachSaveLookup(m) => m.num_values(),
            Self::IndraLookup(m) => m.num_values(),
            Self::LastLookup(m) => m.num_values(),
            Self::PortalLookup(m) => m.num_values(),
            Self::PrevPortalLookup(m) => m.num_values(),
            Self::PrevAreaLookup(m) => m.num_values(),
            Self::BigFlaskLookup(m) => m.num_values(),
            Self::BigFlaskEq { matcher, .. } => matcher.num_values(),
            Self::BigFlaskGe { matcher, .. } => matcher.num_values(),
            Self::BigFlaskLe { matcher, .. } => matcher.num_values(),
            Self::BigFlaskRange { matcher, .. } => matcher.num_values(),
            Self::FlaskLookup(m) => m.num_values(),
            Self::FlaskEq { matcher, .. } => matcher.num_values(),
            Self::FlaskGe { matcher, .. } => matcher.num_values(),
            Self::FlaskLe { matcher, .. } => matcher.num_values(),
            Self::FlaskRange { matcher, .. } => matcher.num_values(),
            Self::HealthFragmentLookup(m) => m.num_values(),
            Self::HealthFragmentEq { matcher, .. } => matcher.num_values(),
            Self::HealthFragmentGe { matcher, .. } => matcher.num_values(),
            Self::HealthFragmentLe { matcher, .. } => matcher.num_values(),
            Self::HealthFragmentRange { matcher, .. } => matcher.num_values(),
            Self::HealthNodeLookup(m) => m.num_values(),
            Self::HealthNodeEq { matcher, .. } => matcher.num_values(),
            Self::HealthNodeGe { matcher, .. } => matcher.num_values(),
            Self::HealthNodeLe { matcher, .. } => matcher.num_values(),
            Self::HealthNodeRange { matcher, .. } => matcher.num_values(),
            Self::PowerMatrixLookup(m) => m.num_values(),
            Self::PowerMatrixEq { matcher, .. } => matcher.num_values(),
            Self::PowerMatrixGe { matcher, .. } => matcher.num_values(),
            Self::PowerMatrixLe { matcher, .. } => matcher.num_values(),
            Self::PowerMatrixRange { matcher, .. } => matcher.num_values(),
            Self::LookupCBits1 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits2 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits3 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits4 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits5 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits6 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits7 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits8 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits9 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits10 { matcher, .. } => matcher.num_values(),
            Self::LookupCBits11 { matcher, .. } => matcher.num_values(),
        }
    }
}
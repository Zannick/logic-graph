//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::*;
use crate::items::*;
use crate::prices::Currency;
use crate::rules;
use analyzer::context::Ctx;
use analyzer::world;
use enum_map::{enum_map, Enum, EnumMap};
use std::fmt;
use std::ops::Range;
use std::option::Option;

#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd, enum_map::Enum)]
pub enum RegionId {
    Antarctica,
    Glacier,
}
impl fmt::Display for RegionId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            RegionId::Antarctica => write!(f, "{}", "Antarctica"),
            RegionId::Glacier => write!(f, "{}", "Glacier"),
        }
    }
}
impl analyzer::world::Id for RegionId {}
impl std::str::FromStr for RegionId {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Antarctica" => Ok(RegionId::Antarctica),
            "Glacier" => Ok(RegionId::Glacier),
            _ => Err(format!("Could not recognize as a RegionId: {}", s)),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd, enum_map::Enum)]
pub enum AreaId {
    Antarctica__Building_1E,
    Antarctica__Building_1W,
    Antarctica__Building_2L,
    Antarctica__Building_2U,
    Antarctica__Building_2U_Corner,
    Antarctica__East,
    Antarctica__Freight_Elevator,
    Antarctica__Power_Room,
    Antarctica__Shed,
    Antarctica__Top,
    Antarctica__West,
    Glacier__Apocalypse_Entry,
    Glacier__Compass_Room,
    Glacier__Dock_Elevator,
    Glacier__Dock_Interior,
    Glacier__Dock_Outside,
    Glacier__Grid_4110,
    Glacier__Grid_419,
    Glacier__Grid_4210,
    Glacier__Grid_431011,
    Glacier__Revival,
    Glacier__The_Big_Drop,
}
impl fmt::Display for AreaId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            AreaId::Antarctica__Building_1E => write!(f, "{}", "Antarctica > Building 1E"),
            AreaId::Antarctica__Building_1W => write!(f, "{}", "Antarctica > Building 1W"),
            AreaId::Antarctica__Building_2L => write!(f, "{}", "Antarctica > Building 2L"),
            AreaId::Antarctica__Building_2U => write!(f, "{}", "Antarctica > Building 2U"),
            AreaId::Antarctica__Building_2U_Corner => {
                write!(f, "{}", "Antarctica > Building 2U Corner")
            }
            AreaId::Antarctica__East => write!(f, "{}", "Antarctica > East"),
            AreaId::Antarctica__Freight_Elevator => {
                write!(f, "{}", "Antarctica > Freight Elevator")
            }
            AreaId::Antarctica__Power_Room => write!(f, "{}", "Antarctica > Power Room"),
            AreaId::Antarctica__Shed => write!(f, "{}", "Antarctica > Shed"),
            AreaId::Antarctica__Top => write!(f, "{}", "Antarctica > Top"),
            AreaId::Antarctica__West => write!(f, "{}", "Antarctica > West"),
            AreaId::Glacier__Apocalypse_Entry => write!(f, "{}", "Glacier > Apocalypse Entry"),
            AreaId::Glacier__Compass_Room => write!(f, "{}", "Glacier > Compass Room"),
            AreaId::Glacier__Dock_Elevator => write!(f, "{}", "Glacier > Dock Elevator"),
            AreaId::Glacier__Dock_Interior => write!(f, "{}", "Glacier > Dock Interior"),
            AreaId::Glacier__Dock_Outside => write!(f, "{}", "Glacier > Dock Outside"),
            AreaId::Glacier__Grid_4110 => write!(f, "{}", "Glacier > Grid 41,10"),
            AreaId::Glacier__Grid_419 => write!(f, "{}", "Glacier > Grid 41,9"),
            AreaId::Glacier__Grid_4210 => write!(f, "{}", "Glacier > Grid 42,10"),
            AreaId::Glacier__Grid_431011 => write!(f, "{}", "Glacier > Grid 43,10-11"),
            AreaId::Glacier__Revival => write!(f, "{}", "Glacier > Revival"),
            AreaId::Glacier__The_Big_Drop => write!(f, "{}", "Glacier > The Big Drop"),
        }
    }
}
impl analyzer::world::Id for AreaId {}
impl std::str::FromStr for AreaId {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Antarctica > Building 1E" => Ok(AreaId::Antarctica__Building_1E),
            "Antarctica > Building 1W" => Ok(AreaId::Antarctica__Building_1W),
            "Antarctica > Building 2L" => Ok(AreaId::Antarctica__Building_2L),
            "Antarctica > Building 2U" => Ok(AreaId::Antarctica__Building_2U),
            "Antarctica > Building 2U Corner" => Ok(AreaId::Antarctica__Building_2U_Corner),
            "Antarctica > East" => Ok(AreaId::Antarctica__East),
            "Antarctica > Freight Elevator" => Ok(AreaId::Antarctica__Freight_Elevator),
            "Antarctica > Power Room" => Ok(AreaId::Antarctica__Power_Room),
            "Antarctica > Shed" => Ok(AreaId::Antarctica__Shed),
            "Antarctica > Top" => Ok(AreaId::Antarctica__Top),
            "Antarctica > West" => Ok(AreaId::Antarctica__West),
            "Glacier > Apocalypse Entry" => Ok(AreaId::Glacier__Apocalypse_Entry),
            "Glacier > Compass Room" => Ok(AreaId::Glacier__Compass_Room),
            "Glacier > Dock Elevator" => Ok(AreaId::Glacier__Dock_Elevator),
            "Glacier > Dock Interior" => Ok(AreaId::Glacier__Dock_Interior),
            "Glacier > Dock Outside" => Ok(AreaId::Glacier__Dock_Outside),
            "Glacier > Grid 41,10" => Ok(AreaId::Glacier__Grid_4110),
            "Glacier > Grid 41,9" => Ok(AreaId::Glacier__Grid_419),
            "Glacier > Grid 42,10" => Ok(AreaId::Glacier__Grid_4210),
            "Glacier > Grid 43,10-11" => Ok(AreaId::Glacier__Grid_431011),
            "Glacier > Revival" => Ok(AreaId::Glacier__Revival),
            "Glacier > The Big Drop" => Ok(AreaId::Glacier__The_Big_Drop),
            _ => Err(format!("Could not recognize as a AreaId: {}", s)),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd, enum_map::Enum, Default)]
pub enum SpotId {
    #[default]
    None,
    Antarctica__Building_1E__Connector,
    Antarctica__Building_1E__East_Entry,
    Antarctica__Building_1W__Connector,
    Antarctica__Building_1W__West_Entry,
    Antarctica__Building_2L__Entry,
    Antarctica__Building_2U__Door,
    Antarctica__Building_2U__Stairs,
    Antarctica__Building_2U_Corner__Behind_Boxes,
    Antarctica__East__Building_1_Entry,
    Antarctica__East__Building_2_Entry,
    Antarctica__East__Building_2_Upper,
    Antarctica__East__Save_Point,
    Antarctica__Freight_Elevator__Controls,
    Antarctica__Freight_Elevator__Left,
    Antarctica__Power_Room__Entry,
    Antarctica__Power_Room__Switch,
    Antarctica__Shed__Interior,
    Antarctica__Top__Power_Entry,
    Antarctica__West__Boxes,
    Antarctica__West__Helipad,
    Antarctica__West__Shed_Entry,
    Glacier__Apocalypse_Entry__Terminal,
    Glacier__Apocalypse_Entry__West,
    Glacier__Compass_Room__Center,
    Glacier__Compass_Room__East,
    Glacier__Compass_Room__West,
    Glacier__Dock_Elevator__Connector,
    Glacier__Dock_Elevator__Elevator,
    Glacier__Dock_Interior__Connector,
    Glacier__Dock_Interior__Entry,
    Glacier__Dock_Outside__Do_Not_Enter,
    Glacier__Dock_Outside__Entry,
    Glacier__Grid_4110__East,
    Glacier__Grid_419__East,
    Glacier__Grid_419__Overhang,
    Glacier__Grid_4210__East,
    Glacier__Grid_4210__West,
    Glacier__Grid_431011__East,
    Glacier__Grid_431011__Lower,
    Glacier__Grid_431011__Top,
    Glacier__Revival__Save_Point,
    Glacier__Revival__West,
    Glacier__The_Big_Drop__East,
    Glacier__The_Big_Drop__Small_Path,
    Glacier__The_Big_Drop__Water_Surface,
}
impl fmt::Display for SpotId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            SpotId::None => write!(f, "{}", "None"),
            SpotId::Antarctica__Building_1E__Connector => {
                write!(f, "{}", "Antarctica > Building 1E > Connector")
            }
            SpotId::Antarctica__Building_1E__East_Entry => {
                write!(f, "{}", "Antarctica > Building 1E > East Entry")
            }
            SpotId::Antarctica__Building_1W__Connector => {
                write!(f, "{}", "Antarctica > Building 1W > Connector")
            }
            SpotId::Antarctica__Building_1W__West_Entry => {
                write!(f, "{}", "Antarctica > Building 1W > West Entry")
            }
            SpotId::Antarctica__Building_2L__Entry => {
                write!(f, "{}", "Antarctica > Building 2L > Entry")
            }
            SpotId::Antarctica__Building_2U__Door => {
                write!(f, "{}", "Antarctica > Building 2U > Door")
            }
            SpotId::Antarctica__Building_2U__Stairs => {
                write!(f, "{}", "Antarctica > Building 2U > Stairs")
            }
            SpotId::Antarctica__Building_2U_Corner__Behind_Boxes => {
                write!(f, "{}", "Antarctica > Building 2U Corner > Behind Boxes")
            }
            SpotId::Antarctica__East__Building_1_Entry => {
                write!(f, "{}", "Antarctica > East > Building 1 Entry")
            }
            SpotId::Antarctica__East__Building_2_Entry => {
                write!(f, "{}", "Antarctica > East > Building 2 Entry")
            }
            SpotId::Antarctica__East__Building_2_Upper => {
                write!(f, "{}", "Antarctica > East > Building 2 Upper")
            }
            SpotId::Antarctica__East__Save_Point => {
                write!(f, "{}", "Antarctica > East > Save Point")
            }
            SpotId::Antarctica__Freight_Elevator__Controls => {
                write!(f, "{}", "Antarctica > Freight Elevator > Controls")
            }
            SpotId::Antarctica__Freight_Elevator__Left => {
                write!(f, "{}", "Antarctica > Freight Elevator > Left")
            }
            SpotId::Antarctica__Power_Room__Entry => {
                write!(f, "{}", "Antarctica > Power Room > Entry")
            }
            SpotId::Antarctica__Power_Room__Switch => {
                write!(f, "{}", "Antarctica > Power Room > Switch")
            }
            SpotId::Antarctica__Shed__Interior => write!(f, "{}", "Antarctica > Shed > Interior"),
            SpotId::Antarctica__Top__Power_Entry => {
                write!(f, "{}", "Antarctica > Top > Power Entry")
            }
            SpotId::Antarctica__West__Boxes => write!(f, "{}", "Antarctica > West > Boxes"),
            SpotId::Antarctica__West__Helipad => write!(f, "{}", "Antarctica > West > Helipad"),
            SpotId::Antarctica__West__Shed_Entry => {
                write!(f, "{}", "Antarctica > West > Shed Entry")
            }
            SpotId::Glacier__Apocalypse_Entry__Terminal => {
                write!(f, "{}", "Glacier > Apocalypse Entry > Terminal")
            }
            SpotId::Glacier__Apocalypse_Entry__West => {
                write!(f, "{}", "Glacier > Apocalypse Entry > West")
            }
            SpotId::Glacier__Compass_Room__Center => {
                write!(f, "{}", "Glacier > Compass Room > Center")
            }
            SpotId::Glacier__Compass_Room__East => write!(f, "{}", "Glacier > Compass Room > East"),
            SpotId::Glacier__Compass_Room__West => write!(f, "{}", "Glacier > Compass Room > West"),
            SpotId::Glacier__Dock_Elevator__Connector => {
                write!(f, "{}", "Glacier > Dock Elevator > Connector")
            }
            SpotId::Glacier__Dock_Elevator__Elevator => {
                write!(f, "{}", "Glacier > Dock Elevator > Elevator")
            }
            SpotId::Glacier__Dock_Interior__Connector => {
                write!(f, "{}", "Glacier > Dock Interior > Connector")
            }
            SpotId::Glacier__Dock_Interior__Entry => {
                write!(f, "{}", "Glacier > Dock Interior > Entry")
            }
            SpotId::Glacier__Dock_Outside__Do_Not_Enter => {
                write!(f, "{}", "Glacier > Dock Outside > Do Not Enter")
            }
            SpotId::Glacier__Dock_Outside__Entry => {
                write!(f, "{}", "Glacier > Dock Outside > Entry")
            }
            SpotId::Glacier__Grid_4110__East => write!(f, "{}", "Glacier > Grid 41,10 > East"),
            SpotId::Glacier__Grid_419__East => write!(f, "{}", "Glacier > Grid 41,9 > East"),
            SpotId::Glacier__Grid_419__Overhang => {
                write!(f, "{}", "Glacier > Grid 41,9 > Overhang")
            }
            SpotId::Glacier__Grid_4210__East => write!(f, "{}", "Glacier > Grid 42,10 > East"),
            SpotId::Glacier__Grid_4210__West => write!(f, "{}", "Glacier > Grid 42,10 > West"),
            SpotId::Glacier__Grid_431011__East => write!(f, "{}", "Glacier > Grid 43,10-11 > East"),
            SpotId::Glacier__Grid_431011__Lower => {
                write!(f, "{}", "Glacier > Grid 43,10-11 > Lower")
            }
            SpotId::Glacier__Grid_431011__Top => write!(f, "{}", "Glacier > Grid 43,10-11 > Top"),
            SpotId::Glacier__Revival__Save_Point => {
                write!(f, "{}", "Glacier > Revival > Save Point")
            }
            SpotId::Glacier__Revival__West => write!(f, "{}", "Glacier > Revival > West"),
            SpotId::Glacier__The_Big_Drop__East => write!(f, "{}", "Glacier > The Big Drop > East"),
            SpotId::Glacier__The_Big_Drop__Small_Path => {
                write!(f, "{}", "Glacier > The Big Drop > Small Path")
            }
            SpotId::Glacier__The_Big_Drop__Water_Surface => {
                write!(f, "{}", "Glacier > The Big Drop > Water Surface")
            }
        }
    }
}
impl analyzer::world::Id for SpotId {}
impl std::str::FromStr for SpotId {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Antarctica > Building 1E > Connector" => {
                Ok(SpotId::Antarctica__Building_1E__Connector)
            }
            "Antarctica > Building 1E > East Entry" => {
                Ok(SpotId::Antarctica__Building_1E__East_Entry)
            }
            "Antarctica > Building 1W > Connector" => {
                Ok(SpotId::Antarctica__Building_1W__Connector)
            }
            "Antarctica > Building 1W > West Entry" => {
                Ok(SpotId::Antarctica__Building_1W__West_Entry)
            }
            "Antarctica > Building 2L > Entry" => Ok(SpotId::Antarctica__Building_2L__Entry),
            "Antarctica > Building 2U > Door" => Ok(SpotId::Antarctica__Building_2U__Door),
            "Antarctica > Building 2U > Stairs" => Ok(SpotId::Antarctica__Building_2U__Stairs),
            "Antarctica > Building 2U Corner > Behind Boxes" => {
                Ok(SpotId::Antarctica__Building_2U_Corner__Behind_Boxes)
            }
            "Antarctica > East > Building 1 Entry" => {
                Ok(SpotId::Antarctica__East__Building_1_Entry)
            }
            "Antarctica > East > Building 2 Entry" => {
                Ok(SpotId::Antarctica__East__Building_2_Entry)
            }
            "Antarctica > East > Building 2 Upper" => {
                Ok(SpotId::Antarctica__East__Building_2_Upper)
            }
            "Antarctica > East > Save Point" => Ok(SpotId::Antarctica__East__Save_Point),
            "Antarctica > Freight Elevator > Controls" => {
                Ok(SpotId::Antarctica__Freight_Elevator__Controls)
            }
            "Antarctica > Freight Elevator > Left" => {
                Ok(SpotId::Antarctica__Freight_Elevator__Left)
            }
            "Antarctica > Power Room > Entry" => Ok(SpotId::Antarctica__Power_Room__Entry),
            "Antarctica > Power Room > Switch" => Ok(SpotId::Antarctica__Power_Room__Switch),
            "Antarctica > Shed > Interior" => Ok(SpotId::Antarctica__Shed__Interior),
            "Antarctica > Top > Power Entry" => Ok(SpotId::Antarctica__Top__Power_Entry),
            "Antarctica > West > Boxes" => Ok(SpotId::Antarctica__West__Boxes),
            "Antarctica > West > Helipad" => Ok(SpotId::Antarctica__West__Helipad),
            "Antarctica > West > Shed Entry" => Ok(SpotId::Antarctica__West__Shed_Entry),
            "Glacier > Apocalypse Entry > Terminal" => {
                Ok(SpotId::Glacier__Apocalypse_Entry__Terminal)
            }
            "Glacier > Apocalypse Entry > West" => Ok(SpotId::Glacier__Apocalypse_Entry__West),
            "Glacier > Compass Room > Center" => Ok(SpotId::Glacier__Compass_Room__Center),
            "Glacier > Compass Room > East" => Ok(SpotId::Glacier__Compass_Room__East),
            "Glacier > Compass Room > West" => Ok(SpotId::Glacier__Compass_Room__West),
            "Glacier > Dock Elevator > Connector" => Ok(SpotId::Glacier__Dock_Elevator__Connector),
            "Glacier > Dock Elevator > Elevator" => Ok(SpotId::Glacier__Dock_Elevator__Elevator),
            "Glacier > Dock Interior > Connector" => Ok(SpotId::Glacier__Dock_Interior__Connector),
            "Glacier > Dock Interior > Entry" => Ok(SpotId::Glacier__Dock_Interior__Entry),
            "Glacier > Dock Outside > Do Not Enter" => {
                Ok(SpotId::Glacier__Dock_Outside__Do_Not_Enter)
            }
            "Glacier > Dock Outside > Entry" => Ok(SpotId::Glacier__Dock_Outside__Entry),
            "Glacier > Grid 41,10 > East" => Ok(SpotId::Glacier__Grid_4110__East),
            "Glacier > Grid 41,9 > East" => Ok(SpotId::Glacier__Grid_419__East),
            "Glacier > Grid 41,9 > Overhang" => Ok(SpotId::Glacier__Grid_419__Overhang),
            "Glacier > Grid 42,10 > East" => Ok(SpotId::Glacier__Grid_4210__East),
            "Glacier > Grid 42,10 > West" => Ok(SpotId::Glacier__Grid_4210__West),
            "Glacier > Grid 43,10-11 > East" => Ok(SpotId::Glacier__Grid_431011__East),
            "Glacier > Grid 43,10-11 > Lower" => Ok(SpotId::Glacier__Grid_431011__Lower),
            "Glacier > Grid 43,10-11 > Top" => Ok(SpotId::Glacier__Grid_431011__Top),
            "Glacier > Revival > Save Point" => Ok(SpotId::Glacier__Revival__Save_Point),
            "Glacier > Revival > West" => Ok(SpotId::Glacier__Revival__West),
            "Glacier > The Big Drop > East" => Ok(SpotId::Glacier__The_Big_Drop__East),
            "Glacier > The Big Drop > Small Path" => Ok(SpotId::Glacier__The_Big_Drop__Small_Path),
            "Glacier > The Big Drop > Water Surface" => {
                Ok(SpotId::Glacier__The_Big_Drop__Water_Surface)
            }
            _ => Err(format!("Could not recognize as a SpotId: {}", s)),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd, enum_map::Enum)]
pub enum LocationId {
    Antarctica__Building_2U_Corner__Behind_Boxes__Note,
    Antarctica__Power_Room__Switch__Flip,
    Antarctica__Shed__Interior__Shelf,
    Glacier__Apocalypse_Entry__Terminal__Escape,
    Glacier__Compass_Room__Center__Table,
    Glacier__The_Big_Drop__Water_Surface__Drown,
}
impl fmt::Display for LocationId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            LocationId::Antarctica__Building_2U_Corner__Behind_Boxes__Note => write!(
                f,
                "{}",
                "Antarctica > Building 2U Corner > Behind Boxes: Note"
            ),
            LocationId::Antarctica__Power_Room__Switch__Flip => {
                write!(f, "{}", "Antarctica > Power Room > Switch: Flip")
            }
            LocationId::Antarctica__Shed__Interior__Shelf => {
                write!(f, "{}", "Antarctica > Shed > Interior: Shelf")
            }
            LocationId::Glacier__Apocalypse_Entry__Terminal__Escape => {
                write!(f, "{}", "Glacier > Apocalypse Entry > Terminal: Escape")
            }
            LocationId::Glacier__Compass_Room__Center__Table => {
                write!(f, "{}", "Glacier > Compass Room > Center: Table")
            }
            LocationId::Glacier__The_Big_Drop__Water_Surface__Drown => {
                write!(f, "{}", "Glacier > The Big Drop > Water Surface: Drown")
            }
        }
    }
}
impl analyzer::world::Id for LocationId {}
impl std::str::FromStr for LocationId {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Antarctica > Building 2U Corner > Behind Boxes: Note" => {
                Ok(LocationId::Antarctica__Building_2U_Corner__Behind_Boxes__Note)
            }
            "Antarctica > Power Room > Switch: Flip" => {
                Ok(LocationId::Antarctica__Power_Room__Switch__Flip)
            }
            "Antarctica > Shed > Interior: Shelf" => {
                Ok(LocationId::Antarctica__Shed__Interior__Shelf)
            }
            "Glacier > Apocalypse Entry > Terminal: Escape" => {
                Ok(LocationId::Glacier__Apocalypse_Entry__Terminal__Escape)
            }
            "Glacier > Compass Room > Center: Table" => {
                Ok(LocationId::Glacier__Compass_Room__Center__Table)
            }
            "Glacier > The Big Drop > Water Surface: Drown" => {
                Ok(LocationId::Glacier__The_Big_Drop__Water_Surface__Drown)
            }
            _ => Err(format!("Could not recognize as a LocationId: {}", s)),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd, enum_map::Enum)]
pub enum ExitId {
    Antarctica__Building_1E__East_Entry__ex__East__Building_1_Entry_1,
    Antarctica__Building_1W__Connector__ex__Building_1E__Connector_1,
    Antarctica__Building_1W__West_Entry__ex__West__Boxes_1,
    Antarctica__Building_2L__Entry__ex__Building_2U__Stairs_1,
    Antarctica__Building_2L__Entry__ex__Freight_Elevator__Left_1,
    Antarctica__Building_2U__Door__ex__East__Building_2_Upper_1,
    Antarctica__Building_2U__Stairs__ex__Building_2L__Entry_1,
    Antarctica__Building_2U__Stairs__ex__Building_2U_Corner__Behind_Boxes_1,
    Antarctica__East__Building_1_Entry__ex__Building_1E__East_Entry_1,
    Antarctica__East__Building_2_Entry__ex__Building_2L__Entry_1,
    Antarctica__East__Building_2_Upper__ex__Building_2U__Door_1,
    Antarctica__East__Building_2_Upper__ex__Top__Power_Entry_1,
    Antarctica__Freight_Elevator__Controls__ex__Glacier__Dock_Elevator__Elevator_1,
    Antarctica__Freight_Elevator__Left__ex__Building_2L__Entry_1,
    Antarctica__Power_Room__Entry__ex__Top__Power_Entry_1,
    Antarctica__Shed__Interior__ex__West__Shed_Entry_1,
    Antarctica__Top__Power_Entry__ex__East__Building_2_Upper_1,
    Antarctica__Top__Power_Entry__ex__Power_Room__Entry_1,
    Antarctica__West__Boxes__ex__Building_1W__West_Entry_1,
    Antarctica__West__Shed_Entry__ex__Shed__Interior_1,
    Glacier__Apocalypse_Entry__West__ex__Grid_431011__East_1,
    Glacier__Compass_Room__East__ex__Grid_431011__Lower_1,
    Glacier__Compass_Room__West__ex__The_Big_Drop__East_1,
    Glacier__Dock_Elevator__Connector__ex__Dock_Interior__Connector_1,
    Glacier__Dock_Interior__Connector__ex__Dock_Elevator__Connector_1,
    Glacier__Dock_Interior__Entry__ex__Dock_Outside__Entry_1,
    Glacier__Dock_Outside__Do_Not_Enter__ex__Grid_419__East_1,
    Glacier__Dock_Outside__Entry__ex__Dock_Interior__Entry_1,
    Glacier__Grid_4110__East__ex__Grid_419__Overhang_1,
    Glacier__Grid_4110__East__ex__Grid_4210__West_1,
    Glacier__Grid_419__East__ex__Dock_Outside__Do_Not_Enter_1,
    Glacier__Grid_419__Overhang__ex__Grid_4110__East_1,
    Glacier__Grid_4210__East__ex__Grid_431011__Top_1,
    Glacier__Grid_4210__West__ex__Grid_4110__East_1,
    Glacier__Grid_431011__East__ex__Apocalypse_Entry__West_1,
    Glacier__Grid_431011__Lower__ex__East_1,
    Glacier__Grid_431011__Lower__ex__Top_1,
    Glacier__Grid_431011__Top__ex__Grid_4210__East_1,
    Glacier__The_Big_Drop__East__ex__Compass_Room__West_1,
}
impl fmt::Display for ExitId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            ExitId::Antarctica__Building_1E__East_Entry__ex__East__Building_1_Entry_1 => write!(f, "{}", "Antarctica > Building 1E > East Entry ==> East > Building 1 Entry (1)"),
            ExitId::Antarctica__Building_1W__Connector__ex__Building_1E__Connector_1 => write!(f, "{}", "Antarctica > Building 1W > Connector ==> Building 1E > Connector (1)"),
            ExitId::Antarctica__Building_1W__West_Entry__ex__West__Boxes_1 => write!(f, "{}", "Antarctica > Building 1W > West Entry ==> West > Boxes (1)"),
            ExitId::Antarctica__Building_2L__Entry__ex__Building_2U__Stairs_1 => write!(f, "{}", "Antarctica > Building 2L > Entry ==> Building 2U > Stairs (1)"),
            ExitId::Antarctica__Building_2L__Entry__ex__Freight_Elevator__Left_1 => write!(f, "{}", "Antarctica > Building 2L > Entry ==> Freight Elevator > Left (1)"),
            ExitId::Antarctica__Building_2U__Door__ex__East__Building_2_Upper_1 => write!(f, "{}", "Antarctica > Building 2U > Door ==> East > Building 2 Upper (1)"),
            ExitId::Antarctica__Building_2U__Stairs__ex__Building_2L__Entry_1 => write!(f, "{}", "Antarctica > Building 2U > Stairs ==> Building 2L > Entry (1)"),
            ExitId::Antarctica__Building_2U__Stairs__ex__Building_2U_Corner__Behind_Boxes_1 => write!(f, "{}", "Antarctica > Building 2U > Stairs ==> Building 2U Corner > Behind Boxes (1)"),
            ExitId::Antarctica__East__Building_1_Entry__ex__Building_1E__East_Entry_1 => write!(f, "{}", "Antarctica > East > Building 1 Entry ==> Building 1E > East Entry (1)"),
            ExitId::Antarctica__East__Building_2_Entry__ex__Building_2L__Entry_1 => write!(f, "{}", "Antarctica > East > Building 2 Entry ==> Building 2L > Entry (1)"),
            ExitId::Antarctica__East__Building_2_Upper__ex__Building_2U__Door_1 => write!(f, "{}", "Antarctica > East > Building 2 Upper ==> Building 2U > Door (1)"),
            ExitId::Antarctica__East__Building_2_Upper__ex__Top__Power_Entry_1 => write!(f, "{}", "Antarctica > East > Building 2 Upper ==> Top > Power Entry (1)"),
            ExitId::Antarctica__Freight_Elevator__Controls__ex__Glacier__Dock_Elevator__Elevator_1 => write!(f, "{}", "Antarctica > Freight Elevator > Controls ==> Glacier > Dock Elevator > Elevator (1)"),
            ExitId::Antarctica__Freight_Elevator__Left__ex__Building_2L__Entry_1 => write!(f, "{}", "Antarctica > Freight Elevator > Left ==> Building 2L > Entry (1)"),
            ExitId::Antarctica__Power_Room__Entry__ex__Top__Power_Entry_1 => write!(f, "{}", "Antarctica > Power Room > Entry ==> Top > Power Entry (1)"),
            ExitId::Antarctica__Shed__Interior__ex__West__Shed_Entry_1 => write!(f, "{}", "Antarctica > Shed > Interior ==> West > Shed Entry (1)"),
            ExitId::Antarctica__Top__Power_Entry__ex__East__Building_2_Upper_1 => write!(f, "{}", "Antarctica > Top > Power Entry ==> East > Building 2 Upper (1)"),
            ExitId::Antarctica__Top__Power_Entry__ex__Power_Room__Entry_1 => write!(f, "{}", "Antarctica > Top > Power Entry ==> Power Room > Entry (1)"),
            ExitId::Antarctica__West__Boxes__ex__Building_1W__West_Entry_1 => write!(f, "{}", "Antarctica > West > Boxes ==> Building 1W > West Entry (1)"),
            ExitId::Antarctica__West__Shed_Entry__ex__Shed__Interior_1 => write!(f, "{}", "Antarctica > West > Shed Entry ==> Shed > Interior (1)"),
            ExitId::Glacier__Apocalypse_Entry__West__ex__Grid_431011__East_1 => write!(f, "{}", "Glacier > Apocalypse Entry > West ==> Grid 43,10-11 > East (1)"),
            ExitId::Glacier__Compass_Room__East__ex__Grid_431011__Lower_1 => write!(f, "{}", "Glacier > Compass Room > East ==> Grid 43,10-11 > Lower (1)"),
            ExitId::Glacier__Compass_Room__West__ex__The_Big_Drop__East_1 => write!(f, "{}", "Glacier > Compass Room > West ==> The Big Drop > East (1)"),
            ExitId::Glacier__Dock_Elevator__Connector__ex__Dock_Interior__Connector_1 => write!(f, "{}", "Glacier > Dock Elevator > Connector ==> Dock Interior > Connector (1)"),
            ExitId::Glacier__Dock_Interior__Connector__ex__Dock_Elevator__Connector_1 => write!(f, "{}", "Glacier > Dock Interior > Connector ==> Dock Elevator > Connector (1)"),
            ExitId::Glacier__Dock_Interior__Entry__ex__Dock_Outside__Entry_1 => write!(f, "{}", "Glacier > Dock Interior > Entry ==> Dock Outside > Entry (1)"),
            ExitId::Glacier__Dock_Outside__Do_Not_Enter__ex__Grid_419__East_1 => write!(f, "{}", "Glacier > Dock Outside > Do Not Enter ==> Grid 41,9 > East (1)"),
            ExitId::Glacier__Dock_Outside__Entry__ex__Dock_Interior__Entry_1 => write!(f, "{}", "Glacier > Dock Outside > Entry ==> Dock Interior > Entry (1)"),
            ExitId::Glacier__Grid_4110__East__ex__Grid_419__Overhang_1 => write!(f, "{}", "Glacier > Grid 41,10 > East ==> Grid 41,9 > Overhang (1)"),
            ExitId::Glacier__Grid_4110__East__ex__Grid_4210__West_1 => write!(f, "{}", "Glacier > Grid 41,10 > East ==> Grid 42,10 > West (1)"),
            ExitId::Glacier__Grid_419__East__ex__Dock_Outside__Do_Not_Enter_1 => write!(f, "{}", "Glacier > Grid 41,9 > East ==> Dock Outside > Do Not Enter (1)"),
            ExitId::Glacier__Grid_419__Overhang__ex__Grid_4110__East_1 => write!(f, "{}", "Glacier > Grid 41,9 > Overhang ==> Grid 41,10 > East (1)"),
            ExitId::Glacier__Grid_4210__East__ex__Grid_431011__Top_1 => write!(f, "{}", "Glacier > Grid 42,10 > East ==> Grid 43,10-11 > Top (1)"),
            ExitId::Glacier__Grid_4210__West__ex__Grid_4110__East_1 => write!(f, "{}", "Glacier > Grid 42,10 > West ==> Grid 41,10 > East (1)"),
            ExitId::Glacier__Grid_431011__East__ex__Apocalypse_Entry__West_1 => write!(f, "{}", "Glacier > Grid 43,10-11 > East ==> Apocalypse Entry > West (1)"),
            ExitId::Glacier__Grid_431011__Lower__ex__East_1 => write!(f, "{}", "Glacier > Grid 43,10-11 > Lower ==> East (1)"),
            ExitId::Glacier__Grid_431011__Lower__ex__Top_1 => write!(f, "{}", "Glacier > Grid 43,10-11 > Lower ==> Top (1)"),
            ExitId::Glacier__Grid_431011__Top__ex__Grid_4210__East_1 => write!(f, "{}", "Glacier > Grid 43,10-11 > Top ==> Grid 42,10 > East (1)"),
            ExitId::Glacier__The_Big_Drop__East__ex__Compass_Room__West_1 => write!(f, "{}", "Glacier > The Big Drop > East ==> Compass Room > West (1)"),
        }
    }
}
impl analyzer::world::Id for ExitId {}
impl std::str::FromStr for ExitId {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Antarctica > Building 1E > East Entry ==> East > Building 1 Entry (1)" => Ok(ExitId::Antarctica__Building_1E__East_Entry__ex__East__Building_1_Entry_1),
            "Antarctica > Building 1W > Connector ==> Building 1E > Connector (1)" => Ok(ExitId::Antarctica__Building_1W__Connector__ex__Building_1E__Connector_1),
            "Antarctica > Building 1W > West Entry ==> West > Boxes (1)" => Ok(ExitId::Antarctica__Building_1W__West_Entry__ex__West__Boxes_1),
            "Antarctica > Building 2L > Entry ==> Building 2U > Stairs (1)" => Ok(ExitId::Antarctica__Building_2L__Entry__ex__Building_2U__Stairs_1),
            "Antarctica > Building 2L > Entry ==> Freight Elevator > Left (1)" => Ok(ExitId::Antarctica__Building_2L__Entry__ex__Freight_Elevator__Left_1),
            "Antarctica > Building 2U > Door ==> East > Building 2 Upper (1)" => Ok(ExitId::Antarctica__Building_2U__Door__ex__East__Building_2_Upper_1),
            "Antarctica > Building 2U > Stairs ==> Building 2L > Entry (1)" => Ok(ExitId::Antarctica__Building_2U__Stairs__ex__Building_2L__Entry_1),
            "Antarctica > Building 2U > Stairs ==> Building 2U Corner > Behind Boxes (1)" => Ok(ExitId::Antarctica__Building_2U__Stairs__ex__Building_2U_Corner__Behind_Boxes_1),
            "Antarctica > East > Building 1 Entry ==> Building 1E > East Entry (1)" => Ok(ExitId::Antarctica__East__Building_1_Entry__ex__Building_1E__East_Entry_1),
            "Antarctica > East > Building 2 Entry ==> Building 2L > Entry (1)" => Ok(ExitId::Antarctica__East__Building_2_Entry__ex__Building_2L__Entry_1),
            "Antarctica > East > Building 2 Upper ==> Building 2U > Door (1)" => Ok(ExitId::Antarctica__East__Building_2_Upper__ex__Building_2U__Door_1),
            "Antarctica > East > Building 2 Upper ==> Top > Power Entry (1)" => Ok(ExitId::Antarctica__East__Building_2_Upper__ex__Top__Power_Entry_1),
            "Antarctica > Freight Elevator > Controls ==> Glacier > Dock Elevator > Elevator (1)" => Ok(ExitId::Antarctica__Freight_Elevator__Controls__ex__Glacier__Dock_Elevator__Elevator_1),
            "Antarctica > Freight Elevator > Left ==> Building 2L > Entry (1)" => Ok(ExitId::Antarctica__Freight_Elevator__Left__ex__Building_2L__Entry_1),
            "Antarctica > Power Room > Entry ==> Top > Power Entry (1)" => Ok(ExitId::Antarctica__Power_Room__Entry__ex__Top__Power_Entry_1),
            "Antarctica > Shed > Interior ==> West > Shed Entry (1)" => Ok(ExitId::Antarctica__Shed__Interior__ex__West__Shed_Entry_1),
            "Antarctica > Top > Power Entry ==> East > Building 2 Upper (1)" => Ok(ExitId::Antarctica__Top__Power_Entry__ex__East__Building_2_Upper_1),
            "Antarctica > Top > Power Entry ==> Power Room > Entry (1)" => Ok(ExitId::Antarctica__Top__Power_Entry__ex__Power_Room__Entry_1),
            "Antarctica > West > Boxes ==> Building 1W > West Entry (1)" => Ok(ExitId::Antarctica__West__Boxes__ex__Building_1W__West_Entry_1),
            "Antarctica > West > Shed Entry ==> Shed > Interior (1)" => Ok(ExitId::Antarctica__West__Shed_Entry__ex__Shed__Interior_1),
            "Glacier > Apocalypse Entry > West ==> Grid 43,10-11 > East (1)" => Ok(ExitId::Glacier__Apocalypse_Entry__West__ex__Grid_431011__East_1),
            "Glacier > Compass Room > East ==> Grid 43,10-11 > Lower (1)" => Ok(ExitId::Glacier__Compass_Room__East__ex__Grid_431011__Lower_1),
            "Glacier > Compass Room > West ==> The Big Drop > East (1)" => Ok(ExitId::Glacier__Compass_Room__West__ex__The_Big_Drop__East_1),
            "Glacier > Dock Elevator > Connector ==> Dock Interior > Connector (1)" => Ok(ExitId::Glacier__Dock_Elevator__Connector__ex__Dock_Interior__Connector_1),
            "Glacier > Dock Interior > Connector ==> Dock Elevator > Connector (1)" => Ok(ExitId::Glacier__Dock_Interior__Connector__ex__Dock_Elevator__Connector_1),
            "Glacier > Dock Interior > Entry ==> Dock Outside > Entry (1)" => Ok(ExitId::Glacier__Dock_Interior__Entry__ex__Dock_Outside__Entry_1),
            "Glacier > Dock Outside > Do Not Enter ==> Grid 41,9 > East (1)" => Ok(ExitId::Glacier__Dock_Outside__Do_Not_Enter__ex__Grid_419__East_1),
            "Glacier > Dock Outside > Entry ==> Dock Interior > Entry (1)" => Ok(ExitId::Glacier__Dock_Outside__Entry__ex__Dock_Interior__Entry_1),
            "Glacier > Grid 41,10 > East ==> Grid 41,9 > Overhang (1)" => Ok(ExitId::Glacier__Grid_4110__East__ex__Grid_419__Overhang_1),
            "Glacier > Grid 41,10 > East ==> Grid 42,10 > West (1)" => Ok(ExitId::Glacier__Grid_4110__East__ex__Grid_4210__West_1),
            "Glacier > Grid 41,9 > East ==> Dock Outside > Do Not Enter (1)" => Ok(ExitId::Glacier__Grid_419__East__ex__Dock_Outside__Do_Not_Enter_1),
            "Glacier > Grid 41,9 > Overhang ==> Grid 41,10 > East (1)" => Ok(ExitId::Glacier__Grid_419__Overhang__ex__Grid_4110__East_1),
            "Glacier > Grid 42,10 > East ==> Grid 43,10-11 > Top (1)" => Ok(ExitId::Glacier__Grid_4210__East__ex__Grid_431011__Top_1),
            "Glacier > Grid 42,10 > West ==> Grid 41,10 > East (1)" => Ok(ExitId::Glacier__Grid_4210__West__ex__Grid_4110__East_1),
            "Glacier > Grid 43,10-11 > East ==> Apocalypse Entry > West (1)" => Ok(ExitId::Glacier__Grid_431011__East__ex__Apocalypse_Entry__West_1),
            "Glacier > Grid 43,10-11 > Lower ==> East (1)" => Ok(ExitId::Glacier__Grid_431011__Lower__ex__East_1),
            "Glacier > Grid 43,10-11 > Lower ==> Top (1)" => Ok(ExitId::Glacier__Grid_431011__Lower__ex__Top_1),
            "Glacier > Grid 43,10-11 > Top ==> Grid 42,10 > East (1)" => Ok(ExitId::Glacier__Grid_431011__Top__ex__Grid_4210__East_1),
            "Glacier > The Big Drop > East ==> Compass Room > West (1)" => Ok(ExitId::Glacier__The_Big_Drop__East__ex__Compass_Room__West_1),
            _ => Err(format!("Could not recognize as a ExitId: {}", s)),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd, enum_map::Enum)]
pub enum ActionId {
    Glacier__Revival__Save_Point__Save,
    Global__Placeholder,
}
impl fmt::Display for ActionId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            ActionId::Glacier__Revival__Save_Point__Save => {
                write!(f, "{}", "Glacier > Revival > Save Point: Save")
            }
            ActionId::Global__Placeholder => write!(f, "{}", "Placeholder"),
        }
    }
}
impl analyzer::world::Id for ActionId {}
impl std::str::FromStr for ActionId {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Glacier > Revival > Save Point: Save" => {
                Ok(ActionId::Glacier__Revival__Save_Point__Save)
            }
            "Placeholder" => Ok(ActionId::Global__Placeholder),
            _ => Err(format!("Could not recognize as a ActionId: {}", s)),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd, enum_map::Enum, Default)]
pub enum CanonId {
    #[default]
    None,
    Notes_2053_02_27,
}
impl fmt::Display for CanonId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            CanonId::None => write!(f, "{}", "None"),
            CanonId::Notes_2053_02_27 => write!(f, "{}", "Notes_2053_02_27"),
        }
    }
}
impl analyzer::world::Id for CanonId {}
impl std::str::FromStr for CanonId {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Notes_2053_02_27" => Ok(CanonId::Notes_2053_02_27),
            _ => Err(format!("Could not recognize as a CanonId: {}", s)),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd, enum_map::Enum)]
pub enum WarpId {
    Save,
}
impl fmt::Display for WarpId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            WarpId::Save => write!(f, "{}", "Save"),
        }
    }
}
impl analyzer::world::Id for WarpId {}
impl std::str::FromStr for WarpId {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Save" => Ok(WarpId::Save),
            _ => Err(format!("Could not recognize as a WarpId: {}", s)),
        }
    }
}

#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd, Default)]
pub enum Objective {
    #[default]
    Start,
    Everything,
}
impl fmt::Display for Objective {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            Objective::Start => write!(f, "{}", "Start"),
            Objective::Everything => write!(f, "{}", "Everything"),
        }
    }
}
impl std::str::FromStr for Objective {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Start" => Ok(Objective::Start),
            "Everything" => Ok(Objective::Everything),
            _ => Err(format!("Could not recognize as a Objective: {}", s)),
        }
    }
}

pub fn get_area(spot: SpotId) -> AreaId {
    match spot {
        SpotId::None => panic!("Spot not valid"),
        SpotId::Antarctica__West__Helipad
        | SpotId::Antarctica__West__Shed_Entry
        | SpotId::Antarctica__West__Boxes => AreaId::Antarctica__West,
        SpotId::Antarctica__Shed__Interior => AreaId::Antarctica__Shed,
        SpotId::Antarctica__Building_1W__West_Entry
        | SpotId::Antarctica__Building_1W__Connector => AreaId::Antarctica__Building_1W,
        SpotId::Antarctica__Building_1E__Connector
        | SpotId::Antarctica__Building_1E__East_Entry => AreaId::Antarctica__Building_1E,
        SpotId::Antarctica__East__Building_1_Entry
        | SpotId::Antarctica__East__Save_Point
        | SpotId::Antarctica__East__Building_2_Entry
        | SpotId::Antarctica__East__Building_2_Upper => AreaId::Antarctica__East,
        SpotId::Antarctica__Building_2L__Entry => AreaId::Antarctica__Building_2L,
        SpotId::Antarctica__Building_2U__Stairs | SpotId::Antarctica__Building_2U__Door => {
            AreaId::Antarctica__Building_2U
        }
        SpotId::Antarctica__Building_2U_Corner__Behind_Boxes => {
            AreaId::Antarctica__Building_2U_Corner
        }
        SpotId::Antarctica__Top__Power_Entry => AreaId::Antarctica__Top,
        SpotId::Antarctica__Power_Room__Entry | SpotId::Antarctica__Power_Room__Switch => {
            AreaId::Antarctica__Power_Room
        }
        SpotId::Antarctica__Freight_Elevator__Left
        | SpotId::Antarctica__Freight_Elevator__Controls => AreaId::Antarctica__Freight_Elevator,
        SpotId::Glacier__Dock_Elevator__Elevator | SpotId::Glacier__Dock_Elevator__Connector => {
            AreaId::Glacier__Dock_Elevator
        }
        SpotId::Glacier__Dock_Interior__Connector | SpotId::Glacier__Dock_Interior__Entry => {
            AreaId::Glacier__Dock_Interior
        }
        SpotId::Glacier__Dock_Outside__Entry | SpotId::Glacier__Dock_Outside__Do_Not_Enter => {
            AreaId::Glacier__Dock_Outside
        }
        SpotId::Glacier__Grid_419__East | SpotId::Glacier__Grid_419__Overhang => {
            AreaId::Glacier__Grid_419
        }
        SpotId::Glacier__Grid_4110__East => AreaId::Glacier__Grid_4110,
        SpotId::Glacier__Grid_4210__West | SpotId::Glacier__Grid_4210__East => {
            AreaId::Glacier__Grid_4210
        }
        SpotId::Glacier__Grid_431011__Top
        | SpotId::Glacier__Grid_431011__East
        | SpotId::Glacier__Grid_431011__Lower => AreaId::Glacier__Grid_431011,
        SpotId::Glacier__Compass_Room__East
        | SpotId::Glacier__Compass_Room__Center
        | SpotId::Glacier__Compass_Room__West => AreaId::Glacier__Compass_Room,
        SpotId::Glacier__The_Big_Drop__East
        | SpotId::Glacier__The_Big_Drop__Small_Path
        | SpotId::Glacier__The_Big_Drop__Water_Surface => AreaId::Glacier__The_Big_Drop,
        SpotId::Glacier__Revival__Save_Point | SpotId::Glacier__Revival__West => {
            AreaId::Glacier__Revival
        }
        SpotId::Glacier__Apocalypse_Entry__West | SpotId::Glacier__Apocalypse_Entry__Terminal => {
            AreaId::Glacier__Apocalypse_Entry
        }
    }
}
pub fn get_region(spot: SpotId) -> RegionId {
    match spot {
        SpotId::None => panic!("Spot not valid"),
        SpotId::Antarctica__West__Helipad
        | SpotId::Antarctica__West__Shed_Entry
        | SpotId::Antarctica__West__Boxes => RegionId::Antarctica,
        SpotId::Antarctica__Shed__Interior => RegionId::Antarctica,
        SpotId::Antarctica__Building_1W__West_Entry
        | SpotId::Antarctica__Building_1W__Connector => RegionId::Antarctica,
        SpotId::Antarctica__Building_1E__Connector
        | SpotId::Antarctica__Building_1E__East_Entry => RegionId::Antarctica,
        SpotId::Antarctica__East__Building_1_Entry
        | SpotId::Antarctica__East__Save_Point
        | SpotId::Antarctica__East__Building_2_Entry
        | SpotId::Antarctica__East__Building_2_Upper => RegionId::Antarctica,
        SpotId::Antarctica__Building_2L__Entry => RegionId::Antarctica,
        SpotId::Antarctica__Building_2U__Stairs | SpotId::Antarctica__Building_2U__Door => {
            RegionId::Antarctica
        }
        SpotId::Antarctica__Building_2U_Corner__Behind_Boxes => RegionId::Antarctica,
        SpotId::Antarctica__Top__Power_Entry => RegionId::Antarctica,
        SpotId::Antarctica__Power_Room__Entry | SpotId::Antarctica__Power_Room__Switch => {
            RegionId::Antarctica
        }
        SpotId::Antarctica__Freight_Elevator__Left
        | SpotId::Antarctica__Freight_Elevator__Controls => RegionId::Antarctica,
        SpotId::Glacier__Dock_Elevator__Elevator | SpotId::Glacier__Dock_Elevator__Connector => {
            RegionId::Glacier
        }
        SpotId::Glacier__Dock_Interior__Connector | SpotId::Glacier__Dock_Interior__Entry => {
            RegionId::Glacier
        }
        SpotId::Glacier__Dock_Outside__Entry | SpotId::Glacier__Dock_Outside__Do_Not_Enter => {
            RegionId::Glacier
        }
        SpotId::Glacier__Grid_419__East | SpotId::Glacier__Grid_419__Overhang => RegionId::Glacier,
        SpotId::Glacier__Grid_4110__East => RegionId::Glacier,
        SpotId::Glacier__Grid_4210__West | SpotId::Glacier__Grid_4210__East => RegionId::Glacier,
        SpotId::Glacier__Grid_431011__Top
        | SpotId::Glacier__Grid_431011__East
        | SpotId::Glacier__Grid_431011__Lower => RegionId::Glacier,
        SpotId::Glacier__Compass_Room__East
        | SpotId::Glacier__Compass_Room__Center
        | SpotId::Glacier__Compass_Room__West => RegionId::Glacier,
        SpotId::Glacier__The_Big_Drop__East
        | SpotId::Glacier__The_Big_Drop__Small_Path
        | SpotId::Glacier__The_Big_Drop__Water_Surface => RegionId::Glacier,
        SpotId::Glacier__Revival__Save_Point | SpotId::Glacier__Revival__West => RegionId::Glacier,
        SpotId::Glacier__Apocalypse_Entry__West | SpotId::Glacier__Apocalypse_Entry__Terminal => {
            RegionId::Glacier
        }
    }
}

#[derive(Copy, Clone, Debug)]
pub struct Location {
    id: LocationId,
    item: Item,
    canonical: CanonId,
    time: i32,
    exit_id: Option<ExitId>,
    price: Currency,
}

impl world::Accessible for Location {
    type Context = Context;
    type Currency = Currency;

    fn can_access(&self, ctx: &Context) -> bool {
        ctx.can_afford(&self.price)
            && match self.id {
                LocationId::Antarctica__Shed__Interior__Shelf => true,
                LocationId::Antarctica__Building_2U_Corner__Behind_Boxes__Note => true,
                LocationId::Antarctica__Power_Room__Switch__Flip => true,
                LocationId::Glacier__Compass_Room__Center__Table => true,
                LocationId::Glacier__The_Big_Drop__Water_Surface__Drown => true,
                LocationId::Glacier__Apocalypse_Entry__Terminal__Escape => {
                    rules::access_apocalypse_bomb(&ctx)
                }
            }
    }
    fn time(&self) -> i32 {
        self.time
    }
    fn price(&self) -> &Currency {
        &self.price
    }
}

impl world::Location for Location {
    type LocId = LocationId;
    type CanonId = CanonId;
    type ExitId = ExitId;

    fn id(&self) -> LocationId {
        self.id
    }
    fn item(&self) -> Item {
        self.item
    }
    fn canon_id(&self) -> CanonId {
        self.canonical
    }
    fn exit_id(&self) -> &Option<ExitId> {
        &self.exit_id
    }
}

#[derive(Copy, Clone, Debug)]
pub struct Exit {
    id: ExitId,
    time: i32,
    dest: SpotId,
    price: Currency,
    loc_id: Option<LocationId>,
}

impl world::Accessible for Exit {
    type Context = Context;
    type Currency = Currency;
    fn can_access(&self, ctx: &Context) -> bool {
        ctx.can_afford(&self.price) && match self.id {
            ExitId::Antarctica__West__Shed_Entry__ex__Shed__Interior_1 => true,
            ExitId::Antarctica__West__Boxes__ex__Building_1W__West_Entry_1 => rules::access_break_box(&ctx),
            ExitId::Antarctica__Shed__Interior__ex__West__Shed_Entry_1 => true,
            ExitId::Antarctica__Building_1W__West_Entry__ex__West__Boxes_1 => true,
            ExitId::Antarctica__Building_1W__Connector__ex__Building_1E__Connector_1 => true,
            ExitId::Antarctica__Building_1E__East_Entry__ex__East__Building_1_Entry_1 => true,
            ExitId::Antarctica__East__Building_1_Entry__ex__Building_1E__East_Entry_1 => true,
            ExitId::Antarctica__East__Building_2_Entry__ex__Building_2L__Entry_1 => true,
            ExitId::Antarctica__East__Building_2_Upper__ex__Building_2U__Door_1 => true,
            ExitId::Antarctica__East__Building_2_Upper__ex__Top__Power_Entry_1 => true,
            ExitId::Antarctica__Building_2L__Entry__ex__Building_2U__Stairs_1 => true,
            ExitId::Antarctica__Building_2L__Entry__ex__Freight_Elevator__Left_1 => rules::access_station_power(&ctx),
            ExitId::Antarctica__Building_2U__Stairs__ex__Building_2U_Corner__Behind_Boxes_1 => rules::access_break_box(&ctx),
            ExitId::Antarctica__Building_2U__Stairs__ex__Building_2L__Entry_1 => true,
            ExitId::Antarctica__Building_2U__Door__ex__East__Building_2_Upper_1 => true,
            ExitId::Antarctica__Top__Power_Entry__ex__Power_Room__Entry_1 => true,
            ExitId::Antarctica__Top__Power_Entry__ex__East__Building_2_Upper_1 => true,
            ExitId::Antarctica__Power_Room__Entry__ex__Top__Power_Entry_1 => true,
            ExitId::Antarctica__Freight_Elevator__Left__ex__Building_2L__Entry_1 => true,
            ExitId::Antarctica__Freight_Elevator__Controls__ex__Glacier__Dock_Elevator__Elevator_1 => true,
            ExitId::Glacier__Dock_Elevator__Connector__ex__Dock_Interior__Connector_1 => true,
            ExitId::Glacier__Dock_Interior__Connector__ex__Dock_Elevator__Connector_1 => true,
            ExitId::Glacier__Dock_Interior__Entry__ex__Dock_Outside__Entry_1 => true,
            ExitId::Glacier__Dock_Outside__Entry__ex__Dock_Interior__Entry_1 => true,
            ExitId::Glacier__Dock_Outside__Do_Not_Enter__ex__Grid_419__East_1 => true,
            ExitId::Glacier__Grid_419__East__ex__Dock_Outside__Do_Not_Enter_1 => true,
            ExitId::Glacier__Grid_419__Overhang__ex__Grid_4110__East_1 => true,
            ExitId::Glacier__Grid_4110__East__ex__Grid_419__Overhang_1 => true,
            ExitId::Glacier__Grid_4110__East__ex__Grid_4210__West_1 => true,
            ExitId::Glacier__Grid_4210__West__ex__Grid_4110__East_1 => true,
            ExitId::Glacier__Grid_4210__East__ex__Grid_431011__Top_1 => true,
            ExitId::Glacier__Grid_431011__Top__ex__Grid_4210__East_1 => true,
            ExitId::Glacier__Grid_431011__East__ex__Apocalypse_Entry__West_1 => true,
            ExitId::Glacier__Grid_431011__Lower__ex__Top_1 => true,
            ExitId::Glacier__Grid_431011__Lower__ex__East_1 => true,
            ExitId::Glacier__Compass_Room__East__ex__Grid_431011__Lower_1 => true,
            ExitId::Glacier__Compass_Room__West__ex__The_Big_Drop__East_1 => true,
            ExitId::Glacier__The_Big_Drop__East__ex__Compass_Room__West_1 => true,
            ExitId::Glacier__Apocalypse_Entry__West__ex__Grid_431011__East_1 => true,
        }
    }
    fn time(&self) -> i32 {
        self.time
    }
    fn price(&self) -> &Currency {
        &self.price
    }
}

impl world::Exit for Exit {
    type ExitId = ExitId;
    type SpotId = SpotId;
    type LocId = LocationId;

    fn id(&self) -> ExitId {
        self.id
    }
    fn dest(&self) -> SpotId {
        self.dest
    }
    fn connect(&mut self, dest: SpotId) {
        self.dest = dest;
    }
    fn loc_id(&self) -> &Option<LocationId> {
        &self.loc_id
    }
}

#[derive(Copy, Clone, Debug)]
pub struct Action {
    id: ActionId,
    time: i32,
    price: Currency,
    cycle: Option<i8>,
}

impl world::Accessible for Action {
    type Context = Context;
    type Currency = Currency;
    fn can_access(&self, ctx: &Context) -> bool {
        ctx.can_afford(&self.price)
            && match self.id {
                ActionId::Global__Placeholder => rules::access_placeholder(&ctx),
                ActionId::Glacier__Revival__Save_Point__Save => true,
            }
    }
    fn time(&self) -> i32 {
        self.time
    }
    fn price(&self) -> &Currency {
        &self.price
    }
}
impl world::Action for Action {
    type ActionId = ActionId;
    fn id(&self) -> ActionId {
        self.id
    }
    fn perform(&self, ctx: &mut Context) {
        match self.id {
            ActionId::Global__Placeholder => rules::action_energy__1(ctx),
            ActionId::Glacier__Revival__Save_Point__Save => rules::action_save__position(ctx),
        }
    }
    fn has_effect(&self, ctx: &Context) -> bool {
        match self.id {
            ActionId::Global__Placeholder => rules::action_has_effect_energy__1(ctx),
            ActionId::Glacier__Revival__Save_Point__Save => {
                rules::action_has_effect_save__position(ctx)
            }
        }
    }
    fn cycle_length(&self) -> Option<i8> {
        self.cycle
    }
}

#[derive(Copy, Clone, Debug)]
pub struct Warp {
    id: WarpId,
    dest: SpotId,
    time: i32,
    price: Currency,
}
impl world::Accessible for Warp {
    type Context = Context;
    type Currency = Currency;

    fn can_access(&self, ctx: &Context) -> bool {
        ctx.can_afford(&self.price)
            && match self.id {
                WarpId::Save => true,
            }
    }
    fn time(&self) -> i32 {
        self.time
    }
    fn price(&self) -> &Currency {
        &self.price
    }
}
impl world::Warp for Warp {
    type WarpId = WarpId;
    type SpotId = SpotId;

    fn id(&self) -> WarpId {
        self.id
    }
    fn dest(&self, ctx: &Context) -> SpotId {
        if self.dest == SpotId::None {
            match self.id {
                WarpId::Save => ctx.save(),
            }
        } else {
            self.dest
        }
    }
    fn connect(&mut self, dest: SpotId) {
        self.dest = dest;
    }
}

#[derive(Clone, Debug, Default)]
pub struct Spot {
    pub id: SpotId,
    pub locations: Range<usize>,
    pub exits: Range<usize>,
    pub actions: Range<usize>,
    // spots don't reference their area, so we index these by spot
    pub area_spots: Range<usize>,
}

#[derive(Clone, Debug)]
pub struct World {
    pub objective: Objective,
    // These are arrays that group the items together by their parent.
    // Using EnumMap for this ONLY WORKS if the keys are properly ordered to group
    // nearby things together.
    // For entrance rando, we would need to have a layer of indirection:
    // list_index: EnumMap<EnumType, usize>,
    // list: EnumArray<ObjType>,
    locations: EnumMap<LocationId, Location>,
    exits: EnumMap<ExitId, Exit>,
    actions: EnumMap<ActionId, Action>,
    warps: EnumMap<WarpId, Warp>,
    raw_spots: [SpotId; 46],
    // Index ranges for slices into the above arrays
    spots: EnumMap<SpotId, Spot>,
    global_actions: Range<usize>,
}

impl world::World for World {
    type Location = Location;
    type Exit = Exit;
    type Action = Action;
    type Warp = Warp;
    const NUM_LOCATIONS: i32 = 6;

    fn get_location(&self, id: LocationId) -> &Location {
        &self.locations[id]
    }
    fn get_spot_locations(&self, spot_id: SpotId) -> &[Location] {
        let r = &self.spots[spot_id].locations;
        &self.locations.as_slice()[r.start..r.end]
    }
    fn get_exit(&self, id: ExitId) -> &Exit {
        &self.exits[id]
    }
    fn get_spot_exits(&self, spot_id: SpotId) -> &[Exit] {
        let r = &self.spots[spot_id].exits;
        &self.exits.as_slice()[r.start..r.end]
    }
    fn get_action(&self, id: ActionId) -> &Action {
        &self.actions[id]
    }
    fn get_spot_actions(&self, spot_id: SpotId) -> &[Action] {
        let r = &self.spots[spot_id].actions;
        &self.actions.as_slice()[r.start..r.end]
    }
    fn get_global_actions(&self) -> &[Action] {
        &self.actions.as_slice()[self.global_actions.start..self.global_actions.end]
    }
    fn get_warp(&self, id: WarpId) -> &Warp {
        &self.warps[id]
    }

    fn get_canon_locations(&self, loc_id: LocationId) -> Vec<LocationId> {
        let loc = self.get_location(loc_id);
        match world::Location::canon_id(loc) {
            CanonId::None => vec![],
            CanonId::Notes_2053_02_27 => {
                vec![LocationId::Antarctica__Building_2U_Corner__Behind_Boxes__Note]
            }
        }
    }

    fn get_area_spots(&self, spot_id: SpotId) -> &[SpotId] {
        let r = &self.spots[spot_id].area_spots;
        &self.raw_spots[r.start..r.end]
    }
    fn get_warps(&self) -> &[Warp] {
        &self.warps.as_slice()
    }

    fn get_all_locations(&self) -> &[Location] {
        &self.locations.as_slice()
    }

    fn skip_unused_items(&self, ctx: &mut Context) {
        for (id, loc) in &self.locations {
            if unused_item(world::Location::item(loc)) {
                ctx.skip(id);
            }
        }
    }

    fn won(&self, ctx: &Context) -> bool {
        match self.objective {
            Objective::Start => rules::access_amashilama(ctx),
            Objective::Everything => rules::access_amashilama__notes_2053_02_27(ctx),
        }
    }
}

impl World {
    pub fn new() -> World {
        World {
            objective: Objective::default(),
            locations: build_locations(),
            exits: build_exits(),
            actions: build_actions(),
            warps: build_warps(),
            raw_spots: [
                SpotId::None,
                SpotId::Antarctica__Building_1E__Connector,
                SpotId::Antarctica__Building_1E__East_Entry,
                SpotId::Antarctica__Building_1W__Connector,
                SpotId::Antarctica__Building_1W__West_Entry,
                SpotId::Antarctica__Building_2L__Entry,
                SpotId::Antarctica__Building_2U__Door,
                SpotId::Antarctica__Building_2U__Stairs,
                SpotId::Antarctica__Building_2U_Corner__Behind_Boxes,
                SpotId::Antarctica__East__Building_1_Entry,
                SpotId::Antarctica__East__Building_2_Entry,
                SpotId::Antarctica__East__Building_2_Upper,
                SpotId::Antarctica__East__Save_Point,
                SpotId::Antarctica__Freight_Elevator__Controls,
                SpotId::Antarctica__Freight_Elevator__Left,
                SpotId::Antarctica__Power_Room__Entry,
                SpotId::Antarctica__Power_Room__Switch,
                SpotId::Antarctica__Shed__Interior,
                SpotId::Antarctica__Top__Power_Entry,
                SpotId::Antarctica__West__Boxes,
                SpotId::Antarctica__West__Helipad,
                SpotId::Antarctica__West__Shed_Entry,
                SpotId::Glacier__Apocalypse_Entry__Terminal,
                SpotId::Glacier__Apocalypse_Entry__West,
                SpotId::Glacier__Compass_Room__Center,
                SpotId::Glacier__Compass_Room__East,
                SpotId::Glacier__Compass_Room__West,
                SpotId::Glacier__Dock_Elevator__Connector,
                SpotId::Glacier__Dock_Elevator__Elevator,
                SpotId::Glacier__Dock_Interior__Connector,
                SpotId::Glacier__Dock_Interior__Entry,
                SpotId::Glacier__Dock_Outside__Do_Not_Enter,
                SpotId::Glacier__Dock_Outside__Entry,
                SpotId::Glacier__Grid_4110__East,
                SpotId::Glacier__Grid_419__East,
                SpotId::Glacier__Grid_419__Overhang,
                SpotId::Glacier__Grid_4210__East,
                SpotId::Glacier__Grid_4210__West,
                SpotId::Glacier__Grid_431011__East,
                SpotId::Glacier__Grid_431011__Lower,
                SpotId::Glacier__Grid_431011__Top,
                SpotId::Glacier__Revival__Save_Point,
                SpotId::Glacier__Revival__West,
                SpotId::Glacier__The_Big_Drop__East,
                SpotId::Glacier__The_Big_Drop__Small_Path,
                SpotId::Glacier__The_Big_Drop__Water_Surface,
            ],
            spots: build_spots(),
            global_actions: Range {
                start: ActionId::Global__Placeholder.into_usize(),
                end: ActionId::Global__Placeholder.into_usize() + 1,
            },
        }
    }
}

pub fn build_locations() -> EnumMap<LocationId, Location> {
    enum_map! {
        LocationId::Antarctica__Shed__Interior__Shelf => Location {
            id: LocationId::Antarctica__Shed__Interior__Shelf,
            canonical: CanonId::None,
            item: Item::Ice_Axe,
            price: Currency::Free,
            time: 500,
            exit_id: None,
        },
        LocationId::Antarctica__Building_2U_Corner__Behind_Boxes__Note => Location {
            id: LocationId::Antarctica__Building_2U_Corner__Behind_Boxes__Note,
            canonical: CanonId::Notes_2053_02_27,
            item: Item::Notes_2053_02_27,
            price: Currency::Free,
            time: 0,
            exit_id: None,
        },
        LocationId::Antarctica__Power_Room__Switch__Flip => Location {
            id: LocationId::Antarctica__Power_Room__Switch__Flip,
            canonical: CanonId::None,
            item: Item::Station_Power,
            price: Currency::Free,
            time: 0,
            exit_id: None,
        },
        LocationId::Glacier__Compass_Room__Center__Table => Location {
            id: LocationId::Glacier__Compass_Room__Center__Table,
            canonical: CanonId::None,
            item: Item::Compass,
            price: Currency::Free,
            time: 0,
            exit_id: None,
        },
        LocationId::Glacier__The_Big_Drop__Water_Surface__Drown => Location {
            id: LocationId::Glacier__The_Big_Drop__Water_Surface__Drown,
            canonical: CanonId::None,
            item: Item::Amashilama,
            price: Currency::Free,
            time: 48500,
            exit_id: None,
        },
        LocationId::Glacier__Apocalypse_Entry__Terminal__Escape => Location {
            id: LocationId::Glacier__Apocalypse_Entry__Terminal__Escape,
            canonical: CanonId::None,
            item: Item::Escape,
            price: Currency::Free,
            time: 1000,
            exit_id: None,
        },
    }
}

pub fn build_exits() -> EnumMap<ExitId, Exit> {
    enum_map! {
        ExitId::Antarctica__West__Shed_Entry__ex__Shed__Interior_1 => Exit {
            id: ExitId::Antarctica__West__Shed_Entry__ex__Shed__Interior_1,
            time: 750,
            dest: SpotId::Antarctica__Shed__Interior,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__West__Boxes__ex__Building_1W__West_Entry_1 => Exit {
            id: ExitId::Antarctica__West__Boxes__ex__Building_1W__West_Entry_1,
            time: 2000,
            dest: SpotId::Antarctica__Building_1W__West_Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__Shed__Interior__ex__West__Shed_Entry_1 => Exit {
            id: ExitId::Antarctica__Shed__Interior__ex__West__Shed_Entry_1,
            time: 750,
            dest: SpotId::Antarctica__West__Shed_Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__Building_1W__West_Entry__ex__West__Boxes_1 => Exit {
            id: ExitId::Antarctica__Building_1W__West_Entry__ex__West__Boxes_1,
            time: 750,
            dest: SpotId::Antarctica__West__Boxes,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__Building_1W__Connector__ex__Building_1E__Connector_1 => Exit {
            id: ExitId::Antarctica__Building_1W__Connector__ex__Building_1E__Connector_1,
            time: 1350,
            dest: SpotId::Antarctica__Building_1E__Connector,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__Building_1E__East_Entry__ex__East__Building_1_Entry_1 => Exit {
            id: ExitId::Antarctica__Building_1E__East_Entry__ex__East__Building_1_Entry_1,
            time: 750,
            dest: SpotId::Antarctica__East__Building_1_Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__East__Building_1_Entry__ex__Building_1E__East_Entry_1 => Exit {
            id: ExitId::Antarctica__East__Building_1_Entry__ex__Building_1E__East_Entry_1,
            time: 750,
            dest: SpotId::Antarctica__Building_1E__East_Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__East__Building_2_Entry__ex__Building_2L__Entry_1 => Exit {
            id: ExitId::Antarctica__East__Building_2_Entry__ex__Building_2L__Entry_1,
            time: 750,
            dest: SpotId::Antarctica__Building_2L__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__East__Building_2_Upper__ex__Building_2U__Door_1 => Exit {
            id: ExitId::Antarctica__East__Building_2_Upper__ex__Building_2U__Door_1,
            time: 750,
            dest: SpotId::Antarctica__Building_2U__Door,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__East__Building_2_Upper__ex__Top__Power_Entry_1 => Exit {
            id: ExitId::Antarctica__East__Building_2_Upper__ex__Top__Power_Entry_1,
            time: 3000,
            dest: SpotId::Antarctica__Top__Power_Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__Building_2L__Entry__ex__Building_2U__Stairs_1 => Exit {
            id: ExitId::Antarctica__Building_2L__Entry__ex__Building_2U__Stairs_1,
            time: 4000,
            dest: SpotId::Antarctica__Building_2U__Stairs,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__Building_2L__Entry__ex__Freight_Elevator__Left_1 => Exit {
            id: ExitId::Antarctica__Building_2L__Entry__ex__Freight_Elevator__Left_1,
            time: 3000,
            dest: SpotId::Antarctica__Freight_Elevator__Left,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__Building_2U__Stairs__ex__Building_2U_Corner__Behind_Boxes_1 => Exit {
            id: ExitId::Antarctica__Building_2U__Stairs__ex__Building_2U_Corner__Behind_Boxes_1,
            time: 3000,
            dest: SpotId::Antarctica__Building_2U_Corner__Behind_Boxes,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__Building_2U__Stairs__ex__Building_2L__Entry_1 => Exit {
            id: ExitId::Antarctica__Building_2U__Stairs__ex__Building_2L__Entry_1,
            time: 2000,
            dest: SpotId::Antarctica__Building_2L__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__Building_2U__Door__ex__East__Building_2_Upper_1 => Exit {
            id: ExitId::Antarctica__Building_2U__Door__ex__East__Building_2_Upper_1,
            time: 750,
            dest: SpotId::Antarctica__East__Building_2_Upper,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__Top__Power_Entry__ex__Power_Room__Entry_1 => Exit {
            id: ExitId::Antarctica__Top__Power_Entry__ex__Power_Room__Entry_1,
            time: 750,
            dest: SpotId::Antarctica__Power_Room__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__Top__Power_Entry__ex__East__Building_2_Upper_1 => Exit {
            id: ExitId::Antarctica__Top__Power_Entry__ex__East__Building_2_Upper_1,
            time: 3500,
            dest: SpotId::Antarctica__East__Building_2_Upper,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__Power_Room__Entry__ex__Top__Power_Entry_1 => Exit {
            id: ExitId::Antarctica__Power_Room__Entry__ex__Top__Power_Entry_1,
            time: 750,
            dest: SpotId::Antarctica__Top__Power_Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__Freight_Elevator__Left__ex__Building_2L__Entry_1 => Exit {
            id: ExitId::Antarctica__Freight_Elevator__Left__ex__Building_2L__Entry_1,
            time: 3000,
            dest: SpotId::Antarctica__Building_2L__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Antarctica__Freight_Elevator__Controls__ex__Glacier__Dock_Elevator__Elevator_1 => Exit {
            id: ExitId::Antarctica__Freight_Elevator__Controls__ex__Glacier__Dock_Elevator__Elevator_1,
            time: 15000,
            dest: SpotId::Glacier__Dock_Elevator__Elevator,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Dock_Elevator__Connector__ex__Dock_Interior__Connector_1 => Exit {
            id: ExitId::Glacier__Dock_Elevator__Connector__ex__Dock_Interior__Connector_1,
            time: 1350,
            dest: SpotId::Glacier__Dock_Interior__Connector,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Dock_Interior__Connector__ex__Dock_Elevator__Connector_1 => Exit {
            id: ExitId::Glacier__Dock_Interior__Connector__ex__Dock_Elevator__Connector_1,
            time: 1350,
            dest: SpotId::Glacier__Dock_Elevator__Connector,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Dock_Interior__Entry__ex__Dock_Outside__Entry_1 => Exit {
            id: ExitId::Glacier__Dock_Interior__Entry__ex__Dock_Outside__Entry_1,
            time: 750,
            dest: SpotId::Glacier__Dock_Outside__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Dock_Outside__Entry__ex__Dock_Interior__Entry_1 => Exit {
            id: ExitId::Glacier__Dock_Outside__Entry__ex__Dock_Interior__Entry_1,
            time: 750,
            dest: SpotId::Glacier__Dock_Interior__Entry,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Dock_Outside__Do_Not_Enter__ex__Grid_419__East_1 => Exit {
            id: ExitId::Glacier__Dock_Outside__Do_Not_Enter__ex__Grid_419__East_1,
            time: 1350,
            dest: SpotId::Glacier__Grid_419__East,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Grid_419__East__ex__Dock_Outside__Do_Not_Enter_1 => Exit {
            id: ExitId::Glacier__Grid_419__East__ex__Dock_Outside__Do_Not_Enter_1,
            time: 1350,
            dest: SpotId::Glacier__Dock_Outside__Do_Not_Enter,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Grid_419__Overhang__ex__Grid_4110__East_1 => Exit {
            id: ExitId::Glacier__Grid_419__Overhang__ex__Grid_4110__East_1,
            time: 2750,
            dest: SpotId::Glacier__Grid_4110__East,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Grid_4110__East__ex__Grid_419__Overhang_1 => Exit {
            id: ExitId::Glacier__Grid_4110__East__ex__Grid_419__Overhang_1,
            time: 7000,
            dest: SpotId::Glacier__Grid_419__Overhang,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Grid_4110__East__ex__Grid_4210__West_1 => Exit {
            id: ExitId::Glacier__Grid_4110__East__ex__Grid_4210__West_1,
            time: 1350,
            dest: SpotId::Glacier__Grid_4210__West,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Grid_4210__West__ex__Grid_4110__East_1 => Exit {
            id: ExitId::Glacier__Grid_4210__West__ex__Grid_4110__East_1,
            time: 1350,
            dest: SpotId::Glacier__Grid_4110__East,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Grid_4210__East__ex__Grid_431011__Top_1 => Exit {
            id: ExitId::Glacier__Grid_4210__East__ex__Grid_431011__Top_1,
            time: 1350,
            dest: SpotId::Glacier__Grid_431011__Top,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Grid_431011__Top__ex__Grid_4210__East_1 => Exit {
            id: ExitId::Glacier__Grid_431011__Top__ex__Grid_4210__East_1,
            time: 1350,
            dest: SpotId::Glacier__Grid_4210__East,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Grid_431011__East__ex__Apocalypse_Entry__West_1 => Exit {
            id: ExitId::Glacier__Grid_431011__East__ex__Apocalypse_Entry__West_1,
            time: 1350,
            dest: SpotId::Glacier__Apocalypse_Entry__West,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Grid_431011__Lower__ex__Top_1 => Exit {
            id: ExitId::Glacier__Grid_431011__Lower__ex__Top_1,
            time: 5000,
            dest: SpotId::Glacier__Grid_431011__Top,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Grid_431011__Lower__ex__East_1 => Exit {
            id: ExitId::Glacier__Grid_431011__Lower__ex__East_1,
            time: 3500,
            dest: SpotId::Glacier__Grid_431011__East,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Compass_Room__East__ex__Grid_431011__Lower_1 => Exit {
            id: ExitId::Glacier__Compass_Room__East__ex__Grid_431011__Lower_1,
            time: 1350,
            dest: SpotId::Glacier__Grid_431011__Lower,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Compass_Room__West__ex__The_Big_Drop__East_1 => Exit {
            id: ExitId::Glacier__Compass_Room__West__ex__The_Big_Drop__East_1,
            time: 1350,
            dest: SpotId::Glacier__The_Big_Drop__East,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__The_Big_Drop__East__ex__Compass_Room__West_1 => Exit {
            id: ExitId::Glacier__The_Big_Drop__East__ex__Compass_Room__West_1,
            time: 1350,
            dest: SpotId::Glacier__Compass_Room__West,
            price: Currency::Free,
            loc_id: None,
        },
        ExitId::Glacier__Apocalypse_Entry__West__ex__Grid_431011__East_1 => Exit {
            id: ExitId::Glacier__Apocalypse_Entry__West__ex__Grid_431011__East_1,
            time: 1350,
            dest: SpotId::Glacier__Grid_431011__East,
            price: Currency::Free,
            loc_id: None,
        },
    }
}

pub fn build_actions() -> EnumMap<ActionId, Action> {
    enum_map! {
        ActionId::Global__Placeholder => Action {
            id: ActionId::Global__Placeholder,
            time: 1000,
            price: Currency::Free,
            cycle: None,
        },
        ActionId::Glacier__Revival__Save_Point__Save => Action {
            id: ActionId::Glacier__Revival__Save_Point__Save,
            time: 1200,
            price: Currency::Free,
            cycle: None,
        },
    }
}

pub fn build_spots() -> EnumMap<SpotId, Spot> {
    enum_map! {
        SpotId::None => Spot::default(),
        SpotId::Antarctica__West__Helipad => Spot {
            id: SpotId::Antarctica__West__Helipad,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__West__Boxes.into_usize(),
                end: SpotId::Antarctica__West__Shed_Entry.into_usize() + 1,
            },
        },
        SpotId::Antarctica__West__Shed_Entry => Spot {
            id: SpotId::Antarctica__West__Shed_Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Antarctica__West__Shed_Entry__ex__Shed__Interior_1.into_usize(),
                end: ExitId::Antarctica__West__Shed_Entry__ex__Shed__Interior_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__West__Boxes.into_usize(),
                end: SpotId::Antarctica__West__Shed_Entry.into_usize() + 1,
            },
        },
        SpotId::Antarctica__West__Boxes => Spot {
            id: SpotId::Antarctica__West__Boxes,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Antarctica__West__Boxes__ex__Building_1W__West_Entry_1.into_usize(),
                end: ExitId::Antarctica__West__Boxes__ex__Building_1W__West_Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__West__Boxes.into_usize(),
                end: SpotId::Antarctica__West__Shed_Entry.into_usize() + 1,
            },
        },
        SpotId::Antarctica__Shed__Interior => Spot {
            id: SpotId::Antarctica__Shed__Interior,
            locations: Range {
                start: LocationId::Antarctica__Shed__Interior__Shelf.into_usize(),
                end: LocationId::Antarctica__Shed__Interior__Shelf.into_usize() + 1,
            },
            exits: Range {
                start: ExitId::Antarctica__Shed__Interior__ex__West__Shed_Entry_1.into_usize(),
                end: ExitId::Antarctica__Shed__Interior__ex__West__Shed_Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__Shed__Interior.into_usize(),
                end: SpotId::Antarctica__Shed__Interior.into_usize() + 1,
            },
        },
        SpotId::Antarctica__Building_1W__West_Entry => Spot {
            id: SpotId::Antarctica__Building_1W__West_Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Antarctica__Building_1W__West_Entry__ex__West__Boxes_1.into_usize(),
                end: ExitId::Antarctica__Building_1W__West_Entry__ex__West__Boxes_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__Building_1W__Connector.into_usize(),
                end: SpotId::Antarctica__Building_1W__West_Entry.into_usize() + 1,
            },
        },
        SpotId::Antarctica__Building_1W__Connector => Spot {
            id: SpotId::Antarctica__Building_1W__Connector,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Antarctica__Building_1W__Connector__ex__Building_1E__Connector_1.into_usize(),
                end: ExitId::Antarctica__Building_1W__Connector__ex__Building_1E__Connector_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__Building_1W__Connector.into_usize(),
                end: SpotId::Antarctica__Building_1W__West_Entry.into_usize() + 1,
            },
        },
        SpotId::Antarctica__Building_1E__Connector => Spot {
            id: SpotId::Antarctica__Building_1E__Connector,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__Building_1E__Connector.into_usize(),
                end: SpotId::Antarctica__Building_1E__East_Entry.into_usize() + 1,
            },
        },
        SpotId::Antarctica__Building_1E__East_Entry => Spot {
            id: SpotId::Antarctica__Building_1E__East_Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Antarctica__Building_1E__East_Entry__ex__East__Building_1_Entry_1.into_usize(),
                end: ExitId::Antarctica__Building_1E__East_Entry__ex__East__Building_1_Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__Building_1E__Connector.into_usize(),
                end: SpotId::Antarctica__Building_1E__East_Entry.into_usize() + 1,
            },
        },
        SpotId::Antarctica__East__Building_1_Entry => Spot {
            id: SpotId::Antarctica__East__Building_1_Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Antarctica__East__Building_1_Entry__ex__Building_1E__East_Entry_1.into_usize(),
                end: ExitId::Antarctica__East__Building_1_Entry__ex__Building_1E__East_Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__East__Building_1_Entry.into_usize(),
                end: SpotId::Antarctica__East__Save_Point.into_usize() + 1,
            },
        },
        SpotId::Antarctica__East__Save_Point => Spot {
            id: SpotId::Antarctica__East__Save_Point,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__East__Building_1_Entry.into_usize(),
                end: SpotId::Antarctica__East__Save_Point.into_usize() + 1,
            },
        },
        SpotId::Antarctica__East__Building_2_Entry => Spot {
            id: SpotId::Antarctica__East__Building_2_Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Antarctica__East__Building_2_Entry__ex__Building_2L__Entry_1.into_usize(),
                end: ExitId::Antarctica__East__Building_2_Entry__ex__Building_2L__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__East__Building_1_Entry.into_usize(),
                end: SpotId::Antarctica__East__Save_Point.into_usize() + 1,
            },
        },
        SpotId::Antarctica__East__Building_2_Upper => Spot {
            id: SpotId::Antarctica__East__Building_2_Upper,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Antarctica__East__Building_2_Upper__ex__Building_2U__Door_1.into_usize(),
                end: ExitId::Antarctica__East__Building_2_Upper__ex__Top__Power_Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__East__Building_1_Entry.into_usize(),
                end: SpotId::Antarctica__East__Save_Point.into_usize() + 1,
            },
        },
        SpotId::Antarctica__Building_2L__Entry => Spot {
            id: SpotId::Antarctica__Building_2L__Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Antarctica__Building_2L__Entry__ex__Building_2U__Stairs_1.into_usize(),
                end: ExitId::Antarctica__Building_2L__Entry__ex__Freight_Elevator__Left_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__Building_2L__Entry.into_usize(),
                end: SpotId::Antarctica__Building_2L__Entry.into_usize() + 1,
            },
        },
        SpotId::Antarctica__Building_2U__Stairs => Spot {
            id: SpotId::Antarctica__Building_2U__Stairs,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Antarctica__Building_2U__Stairs__ex__Building_2L__Entry_1.into_usize(),
                end: ExitId::Antarctica__Building_2U__Stairs__ex__Building_2U_Corner__Behind_Boxes_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__Building_2U__Door.into_usize(),
                end: SpotId::Antarctica__Building_2U__Stairs.into_usize() + 1,
            },
        },
        SpotId::Antarctica__Building_2U__Door => Spot {
            id: SpotId::Antarctica__Building_2U__Door,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Antarctica__Building_2U__Door__ex__East__Building_2_Upper_1.into_usize(),
                end: ExitId::Antarctica__Building_2U__Door__ex__East__Building_2_Upper_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__Building_2U__Door.into_usize(),
                end: SpotId::Antarctica__Building_2U__Stairs.into_usize() + 1,
            },
        },
        SpotId::Antarctica__Building_2U_Corner__Behind_Boxes => Spot {
            id: SpotId::Antarctica__Building_2U_Corner__Behind_Boxes,
            locations: Range {
                start: LocationId::Antarctica__Building_2U_Corner__Behind_Boxes__Note.into_usize(),
                end: LocationId::Antarctica__Building_2U_Corner__Behind_Boxes__Note.into_usize() + 1,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__Building_2U_Corner__Behind_Boxes.into_usize(),
                end: SpotId::Antarctica__Building_2U_Corner__Behind_Boxes.into_usize() + 1,
            },
        },
        SpotId::Antarctica__Top__Power_Entry => Spot {
            id: SpotId::Antarctica__Top__Power_Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Antarctica__Top__Power_Entry__ex__East__Building_2_Upper_1.into_usize(),
                end: ExitId::Antarctica__Top__Power_Entry__ex__Power_Room__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__Top__Power_Entry.into_usize(),
                end: SpotId::Antarctica__Top__Power_Entry.into_usize() + 1,
            },
        },
        SpotId::Antarctica__Power_Room__Entry => Spot {
            id: SpotId::Antarctica__Power_Room__Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Antarctica__Power_Room__Entry__ex__Top__Power_Entry_1.into_usize(),
                end: ExitId::Antarctica__Power_Room__Entry__ex__Top__Power_Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__Power_Room__Entry.into_usize(),
                end: SpotId::Antarctica__Power_Room__Switch.into_usize() + 1,
            },
        },
        SpotId::Antarctica__Power_Room__Switch => Spot {
            id: SpotId::Antarctica__Power_Room__Switch,
            locations: Range {
                start: LocationId::Antarctica__Power_Room__Switch__Flip.into_usize(),
                end: LocationId::Antarctica__Power_Room__Switch__Flip.into_usize() + 1,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__Power_Room__Entry.into_usize(),
                end: SpotId::Antarctica__Power_Room__Switch.into_usize() + 1,
            },
        },
        SpotId::Antarctica__Freight_Elevator__Left => Spot {
            id: SpotId::Antarctica__Freight_Elevator__Left,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Antarctica__Freight_Elevator__Left__ex__Building_2L__Entry_1.into_usize(),
                end: ExitId::Antarctica__Freight_Elevator__Left__ex__Building_2L__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__Freight_Elevator__Controls.into_usize(),
                end: SpotId::Antarctica__Freight_Elevator__Left.into_usize() + 1,
            },
        },
        SpotId::Antarctica__Freight_Elevator__Controls => Spot {
            id: SpotId::Antarctica__Freight_Elevator__Controls,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Antarctica__Freight_Elevator__Controls__ex__Glacier__Dock_Elevator__Elevator_1.into_usize(),
                end: ExitId::Antarctica__Freight_Elevator__Controls__ex__Glacier__Dock_Elevator__Elevator_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Antarctica__Freight_Elevator__Controls.into_usize(),
                end: SpotId::Antarctica__Freight_Elevator__Left.into_usize() + 1,
            },
        },
        SpotId::Glacier__Dock_Elevator__Elevator => Spot {
            id: SpotId::Glacier__Dock_Elevator__Elevator,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Dock_Elevator__Connector.into_usize(),
                end: SpotId::Glacier__Dock_Elevator__Elevator.into_usize() + 1,
            },
        },
        SpotId::Glacier__Dock_Elevator__Connector => Spot {
            id: SpotId::Glacier__Dock_Elevator__Connector,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__Dock_Elevator__Connector__ex__Dock_Interior__Connector_1.into_usize(),
                end: ExitId::Glacier__Dock_Elevator__Connector__ex__Dock_Interior__Connector_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Dock_Elevator__Connector.into_usize(),
                end: SpotId::Glacier__Dock_Elevator__Elevator.into_usize() + 1,
            },
        },
        SpotId::Glacier__Dock_Interior__Connector => Spot {
            id: SpotId::Glacier__Dock_Interior__Connector,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__Dock_Interior__Connector__ex__Dock_Elevator__Connector_1.into_usize(),
                end: ExitId::Glacier__Dock_Interior__Connector__ex__Dock_Elevator__Connector_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Dock_Interior__Connector.into_usize(),
                end: SpotId::Glacier__Dock_Interior__Entry.into_usize() + 1,
            },
        },
        SpotId::Glacier__Dock_Interior__Entry => Spot {
            id: SpotId::Glacier__Dock_Interior__Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__Dock_Interior__Entry__ex__Dock_Outside__Entry_1.into_usize(),
                end: ExitId::Glacier__Dock_Interior__Entry__ex__Dock_Outside__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Dock_Interior__Connector.into_usize(),
                end: SpotId::Glacier__Dock_Interior__Entry.into_usize() + 1,
            },
        },
        SpotId::Glacier__Dock_Outside__Entry => Spot {
            id: SpotId::Glacier__Dock_Outside__Entry,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__Dock_Outside__Entry__ex__Dock_Interior__Entry_1.into_usize(),
                end: ExitId::Glacier__Dock_Outside__Entry__ex__Dock_Interior__Entry_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Dock_Outside__Do_Not_Enter.into_usize(),
                end: SpotId::Glacier__Dock_Outside__Entry.into_usize() + 1,
            },
        },
        SpotId::Glacier__Dock_Outside__Do_Not_Enter => Spot {
            id: SpotId::Glacier__Dock_Outside__Do_Not_Enter,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__Dock_Outside__Do_Not_Enter__ex__Grid_419__East_1.into_usize(),
                end: ExitId::Glacier__Dock_Outside__Do_Not_Enter__ex__Grid_419__East_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Dock_Outside__Do_Not_Enter.into_usize(),
                end: SpotId::Glacier__Dock_Outside__Entry.into_usize() + 1,
            },
        },
        SpotId::Glacier__Grid_419__East => Spot {
            id: SpotId::Glacier__Grid_419__East,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__Grid_419__East__ex__Dock_Outside__Do_Not_Enter_1.into_usize(),
                end: ExitId::Glacier__Grid_419__East__ex__Dock_Outside__Do_Not_Enter_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Grid_419__East.into_usize(),
                end: SpotId::Glacier__Grid_419__Overhang.into_usize() + 1,
            },
        },
        SpotId::Glacier__Grid_419__Overhang => Spot {
            id: SpotId::Glacier__Grid_419__Overhang,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__Grid_419__Overhang__ex__Grid_4110__East_1.into_usize(),
                end: ExitId::Glacier__Grid_419__Overhang__ex__Grid_4110__East_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Grid_419__East.into_usize(),
                end: SpotId::Glacier__Grid_419__Overhang.into_usize() + 1,
            },
        },
        SpotId::Glacier__Grid_4110__East => Spot {
            id: SpotId::Glacier__Grid_4110__East,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__Grid_4110__East__ex__Grid_419__Overhang_1.into_usize(),
                end: ExitId::Glacier__Grid_4110__East__ex__Grid_4210__West_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Grid_4110__East.into_usize(),
                end: SpotId::Glacier__Grid_4110__East.into_usize() + 1,
            },
        },
        SpotId::Glacier__Grid_4210__West => Spot {
            id: SpotId::Glacier__Grid_4210__West,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__Grid_4210__West__ex__Grid_4110__East_1.into_usize(),
                end: ExitId::Glacier__Grid_4210__West__ex__Grid_4110__East_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Grid_4210__East.into_usize(),
                end: SpotId::Glacier__Grid_4210__West.into_usize() + 1,
            },
        },
        SpotId::Glacier__Grid_4210__East => Spot {
            id: SpotId::Glacier__Grid_4210__East,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__Grid_4210__East__ex__Grid_431011__Top_1.into_usize(),
                end: ExitId::Glacier__Grid_4210__East__ex__Grid_431011__Top_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Grid_4210__East.into_usize(),
                end: SpotId::Glacier__Grid_4210__West.into_usize() + 1,
            },
        },
        SpotId::Glacier__Grid_431011__Top => Spot {
            id: SpotId::Glacier__Grid_431011__Top,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__Grid_431011__Top__ex__Grid_4210__East_1.into_usize(),
                end: ExitId::Glacier__Grid_431011__Top__ex__Grid_4210__East_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Grid_431011__East.into_usize(),
                end: SpotId::Glacier__Grid_431011__Top.into_usize() + 1,
            },
        },
        SpotId::Glacier__Grid_431011__East => Spot {
            id: SpotId::Glacier__Grid_431011__East,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__Grid_431011__East__ex__Apocalypse_Entry__West_1.into_usize(),
                end: ExitId::Glacier__Grid_431011__East__ex__Apocalypse_Entry__West_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Grid_431011__East.into_usize(),
                end: SpotId::Glacier__Grid_431011__Top.into_usize() + 1,
            },
        },
        SpotId::Glacier__Grid_431011__Lower => Spot {
            id: SpotId::Glacier__Grid_431011__Lower,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__Grid_431011__Lower__ex__East_1.into_usize(),
                end: ExitId::Glacier__Grid_431011__Lower__ex__Top_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Grid_431011__East.into_usize(),
                end: SpotId::Glacier__Grid_431011__Top.into_usize() + 1,
            },
        },
        SpotId::Glacier__Compass_Room__East => Spot {
            id: SpotId::Glacier__Compass_Room__East,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__Compass_Room__East__ex__Grid_431011__Lower_1.into_usize(),
                end: ExitId::Glacier__Compass_Room__East__ex__Grid_431011__Lower_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Compass_Room__Center.into_usize(),
                end: SpotId::Glacier__Compass_Room__West.into_usize() + 1,
            },
        },
        SpotId::Glacier__Compass_Room__Center => Spot {
            id: SpotId::Glacier__Compass_Room__Center,
            locations: Range {
                start: LocationId::Glacier__Compass_Room__Center__Table.into_usize(),
                end: LocationId::Glacier__Compass_Room__Center__Table.into_usize() + 1,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Compass_Room__Center.into_usize(),
                end: SpotId::Glacier__Compass_Room__West.into_usize() + 1,
            },
        },
        SpotId::Glacier__Compass_Room__West => Spot {
            id: SpotId::Glacier__Compass_Room__West,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__Compass_Room__West__ex__The_Big_Drop__East_1.into_usize(),
                end: ExitId::Glacier__Compass_Room__West__ex__The_Big_Drop__East_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Compass_Room__Center.into_usize(),
                end: SpotId::Glacier__Compass_Room__West.into_usize() + 1,
            },
        },
        SpotId::Glacier__The_Big_Drop__East => Spot {
            id: SpotId::Glacier__The_Big_Drop__East,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__The_Big_Drop__East__ex__Compass_Room__West_1.into_usize(),
                end: ExitId::Glacier__The_Big_Drop__East__ex__Compass_Room__West_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__The_Big_Drop__East.into_usize(),
                end: SpotId::Glacier__The_Big_Drop__Water_Surface.into_usize() + 1,
            },
        },
        SpotId::Glacier__The_Big_Drop__Small_Path => Spot {
            id: SpotId::Glacier__The_Big_Drop__Small_Path,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__The_Big_Drop__East.into_usize(),
                end: SpotId::Glacier__The_Big_Drop__Water_Surface.into_usize() + 1,
            },
        },
        SpotId::Glacier__The_Big_Drop__Water_Surface => Spot {
            id: SpotId::Glacier__The_Big_Drop__Water_Surface,
            locations: Range {
                start: LocationId::Glacier__The_Big_Drop__Water_Surface__Drown.into_usize(),
                end: LocationId::Glacier__The_Big_Drop__Water_Surface__Drown.into_usize() + 1,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__The_Big_Drop__East.into_usize(),
                end: SpotId::Glacier__The_Big_Drop__Water_Surface.into_usize() + 1,
            },
        },
        SpotId::Glacier__Revival__Save_Point => Spot {
            id: SpotId::Glacier__Revival__Save_Point,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: ActionId::Glacier__Revival__Save_Point__Save.into_usize(),
                end: ActionId::Glacier__Revival__Save_Point__Save.into_usize() + 1,
            },
            area_spots: Range {
                start: SpotId::Glacier__Revival__Save_Point.into_usize(),
                end: SpotId::Glacier__Revival__West.into_usize() + 1,
            },
        },
        SpotId::Glacier__Revival__West => Spot {
            id: SpotId::Glacier__Revival__West,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Revival__Save_Point.into_usize(),
                end: SpotId::Glacier__Revival__West.into_usize() + 1,
            },
        },
        SpotId::Glacier__Apocalypse_Entry__West => Spot {
            id: SpotId::Glacier__Apocalypse_Entry__West,
            locations: Range {
                start: 0, end: 0,
            },
            exits: Range {
                start: ExitId::Glacier__Apocalypse_Entry__West__ex__Grid_431011__East_1.into_usize(),
                end: ExitId::Glacier__Apocalypse_Entry__West__ex__Grid_431011__East_1.into_usize() + 1,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Apocalypse_Entry__Terminal.into_usize(),
                end: SpotId::Glacier__Apocalypse_Entry__West.into_usize() + 1,
            },
        },
        SpotId::Glacier__Apocalypse_Entry__Terminal => Spot {
            id: SpotId::Glacier__Apocalypse_Entry__Terminal,
            locations: Range {
                start: LocationId::Glacier__Apocalypse_Entry__Terminal__Escape.into_usize(),
                end: LocationId::Glacier__Apocalypse_Entry__Terminal__Escape.into_usize() + 1,
            },
            exits: Range {
                start: 0, end: 0,
            },
            actions: Range {
                start: 0, end: 0,
            },
            area_spots: Range {
                start: SpotId::Glacier__Apocalypse_Entry__Terminal.into_usize(),
                end: SpotId::Glacier__Apocalypse_Entry__West.into_usize() + 1,
            },
        },
    }
}

pub fn build_warps() -> EnumMap<WarpId, Warp> {
    enum_map! {
        WarpId::Save => Warp {
            id: WarpId::Save,
            dest: SpotId::None,
            time: 5000,
            price: Currency::Free,
        },
    }
}

pub fn spot_locations(id: SpotId) -> Range<usize> {
    match id {
        SpotId::None => Range { start: 0, end: 0 },
        SpotId::Antarctica__West__Helipad => Range { start: 0, end: 0 },
        SpotId::Antarctica__West__Shed_Entry => Range { start: 0, end: 0 },
        SpotId::Antarctica__West__Boxes => Range { start: 0, end: 0 },
        SpotId::Antarctica__Shed__Interior => Range {
            start: LocationId::Antarctica__Shed__Interior__Shelf.into_usize(),
            end: LocationId::Antarctica__Shed__Interior__Shelf.into_usize() + 1,
        },
        SpotId::Antarctica__Building_1W__West_Entry => Range { start: 0, end: 0 },
        SpotId::Antarctica__Building_1W__Connector => Range { start: 0, end: 0 },
        SpotId::Antarctica__Building_1E__Connector => Range { start: 0, end: 0 },
        SpotId::Antarctica__Building_1E__East_Entry => Range { start: 0, end: 0 },
        SpotId::Antarctica__East__Building_1_Entry => Range { start: 0, end: 0 },
        SpotId::Antarctica__East__Save_Point => Range { start: 0, end: 0 },
        SpotId::Antarctica__East__Building_2_Entry => Range { start: 0, end: 0 },
        SpotId::Antarctica__East__Building_2_Upper => Range { start: 0, end: 0 },
        SpotId::Antarctica__Building_2L__Entry => Range { start: 0, end: 0 },
        SpotId::Antarctica__Building_2U__Stairs => Range { start: 0, end: 0 },
        SpotId::Antarctica__Building_2U__Door => Range { start: 0, end: 0 },
        SpotId::Antarctica__Building_2U_Corner__Behind_Boxes => Range {
            start: LocationId::Antarctica__Building_2U_Corner__Behind_Boxes__Note.into_usize(),
            end: LocationId::Antarctica__Building_2U_Corner__Behind_Boxes__Note.into_usize() + 1,
        },
        SpotId::Antarctica__Top__Power_Entry => Range { start: 0, end: 0 },
        SpotId::Antarctica__Power_Room__Entry => Range { start: 0, end: 0 },
        SpotId::Antarctica__Power_Room__Switch => Range {
            start: LocationId::Antarctica__Power_Room__Switch__Flip.into_usize(),
            end: LocationId::Antarctica__Power_Room__Switch__Flip.into_usize() + 1,
        },
        SpotId::Antarctica__Freight_Elevator__Left => Range { start: 0, end: 0 },
        SpotId::Antarctica__Freight_Elevator__Controls => Range { start: 0, end: 0 },
        SpotId::Glacier__Dock_Elevator__Elevator => Range { start: 0, end: 0 },
        SpotId::Glacier__Dock_Elevator__Connector => Range { start: 0, end: 0 },
        SpotId::Glacier__Dock_Interior__Connector => Range { start: 0, end: 0 },
        SpotId::Glacier__Dock_Interior__Entry => Range { start: 0, end: 0 },
        SpotId::Glacier__Dock_Outside__Entry => Range { start: 0, end: 0 },
        SpotId::Glacier__Dock_Outside__Do_Not_Enter => Range { start: 0, end: 0 },
        SpotId::Glacier__Grid_419__East => Range { start: 0, end: 0 },
        SpotId::Glacier__Grid_419__Overhang => Range { start: 0, end: 0 },
        SpotId::Glacier__Grid_4110__East => Range { start: 0, end: 0 },
        SpotId::Glacier__Grid_4210__West => Range { start: 0, end: 0 },
        SpotId::Glacier__Grid_4210__East => Range { start: 0, end: 0 },
        SpotId::Glacier__Grid_431011__Top => Range { start: 0, end: 0 },
        SpotId::Glacier__Grid_431011__East => Range { start: 0, end: 0 },
        SpotId::Glacier__Grid_431011__Lower => Range { start: 0, end: 0 },
        SpotId::Glacier__Compass_Room__East => Range { start: 0, end: 0 },
        SpotId::Glacier__Compass_Room__Center => Range {
            start: LocationId::Glacier__Compass_Room__Center__Table.into_usize(),
            end: LocationId::Glacier__Compass_Room__Center__Table.into_usize() + 1,
        },
        SpotId::Glacier__Compass_Room__West => Range { start: 0, end: 0 },
        SpotId::Glacier__The_Big_Drop__East => Range { start: 0, end: 0 },
        SpotId::Glacier__The_Big_Drop__Small_Path => Range { start: 0, end: 0 },
        SpotId::Glacier__The_Big_Drop__Water_Surface => Range {
            start: LocationId::Glacier__The_Big_Drop__Water_Surface__Drown.into_usize(),
            end: LocationId::Glacier__The_Big_Drop__Water_Surface__Drown.into_usize() + 1,
        },
        SpotId::Glacier__Revival__Save_Point => Range { start: 0, end: 0 },
        SpotId::Glacier__Revival__West => Range { start: 0, end: 0 },
        SpotId::Glacier__Apocalypse_Entry__West => Range { start: 0, end: 0 },
        SpotId::Glacier__Apocalypse_Entry__Terminal => Range {
            start: LocationId::Glacier__Apocalypse_Entry__Terminal__Escape.into_usize(),
            end: LocationId::Glacier__Apocalypse_Entry__Terminal__Escape.into_usize() + 1,
        },
    }
}

pub fn area_locations(id: AreaId) -> Range<usize> {
    match id {
        AreaId::Antarctica__West => Range { start: 0, end: 0 },
        AreaId::Antarctica__Shed => Range {
            start: LocationId::Antarctica__Shed__Interior__Shelf.into_usize(),
            end: LocationId::Antarctica__Shed__Interior__Shelf.into_usize(),
        },
        AreaId::Antarctica__Building_1W => Range { start: 0, end: 0 },
        AreaId::Antarctica__Building_1E => Range { start: 0, end: 0 },
        AreaId::Antarctica__East => Range { start: 0, end: 0 },
        AreaId::Antarctica__Building_2L => Range { start: 0, end: 0 },
        AreaId::Antarctica__Building_2U => Range { start: 0, end: 0 },
        AreaId::Antarctica__Building_2U_Corner => Range {
            start: LocationId::Antarctica__Building_2U_Corner__Behind_Boxes__Note.into_usize(),
            end: LocationId::Antarctica__Building_2U_Corner__Behind_Boxes__Note.into_usize(),
        },
        AreaId::Antarctica__Top => Range { start: 0, end: 0 },
        AreaId::Antarctica__Power_Room => Range {
            start: LocationId::Antarctica__Power_Room__Switch__Flip.into_usize(),
            end: LocationId::Antarctica__Power_Room__Switch__Flip.into_usize(),
        },
        AreaId::Antarctica__Freight_Elevator => Range { start: 0, end: 0 },
        AreaId::Glacier__Dock_Elevator => Range { start: 0, end: 0 },
        AreaId::Glacier__Dock_Interior => Range { start: 0, end: 0 },
        AreaId::Glacier__Dock_Outside => Range { start: 0, end: 0 },
        AreaId::Glacier__Grid_419 => Range { start: 0, end: 0 },
        AreaId::Glacier__Grid_4110 => Range { start: 0, end: 0 },
        AreaId::Glacier__Grid_4210 => Range { start: 0, end: 0 },
        AreaId::Glacier__Grid_431011 => Range { start: 0, end: 0 },
        AreaId::Glacier__Compass_Room => Range {
            start: LocationId::Glacier__Compass_Room__Center__Table.into_usize(),
            end: LocationId::Glacier__Compass_Room__Center__Table.into_usize(),
        },
        AreaId::Glacier__The_Big_Drop => Range {
            start: LocationId::Glacier__The_Big_Drop__Water_Surface__Drown.into_usize(),
            end: LocationId::Glacier__The_Big_Drop__Water_Surface__Drown.into_usize(),
        },
        AreaId::Glacier__Revival => Range { start: 0, end: 0 },
        AreaId::Glacier__Apocalypse_Entry => Range {
            start: LocationId::Glacier__Apocalypse_Entry__Terminal__Escape.into_usize(),
            end: LocationId::Glacier__Apocalypse_Entry__Terminal__Escape.into_usize(),
        },
    }
}

pub fn region_locations(id: RegionId) -> Range<usize> {
    match id {
        RegionId::Antarctica => Range {
            start: LocationId::Antarctica__Building_2U_Corner__Behind_Boxes__Note.into_usize(),
            end: LocationId::Antarctica__Shed__Interior__Shelf.into_usize(),
        },
        RegionId::Glacier => Range {
            start: LocationId::Glacier__Apocalypse_Entry__Terminal__Escape.into_usize(),
            end: LocationId::Glacier__The_Big_Drop__Water_Surface__Drown.into_usize(),
        },
    }
}

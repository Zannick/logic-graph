//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

/// $melee (  )
/// Ice_Axe or ^mode == 'drone'
#[macro_export]
macro_rules! helper__melee {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.has(Item::Ice_Axe) || $ctx.mode() == enums::Mode::Drone)
    }};
}

/// $boomerang (  )
/// ^mode != 'drone' and Boomerang
#[macro_export]
macro_rules! helper__boomerang {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() != enums::Mode::Drone && $ctx.has(Item::Boomerang))
    }};
}

/// $can_damage (  )
/// $melee or Boomerang
#[macro_export]
macro_rules! helper__can_damage {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        (helper__melee!($ctx) || $ctx.has(Item::Boomerang))
    }};
}

/// $grab (  )
/// ^mode != 'drone' and Ledge_Grab
#[macro_export]
macro_rules! helper__grab {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() != enums::Mode::Drone && $ctx.has(Item::Ledge_Grab))
    }};
}

/// $climb (  )
/// ^mode != 'drone' and Wall_Climb
#[macro_export]
macro_rules! helper__climb {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() != enums::Mode::Drone && $ctx.has(Item::Wall_Climb))
    }};
}

/// $hook (  )
/// ^mode == 'drone' and Slingshot_Hook
#[macro_export]
macro_rules! helper__hook {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() == enums::Mode::Drone && $ctx.has(Item::Slingshot_Hook))
    }};
}

/// $hover (  )
/// ^mode == 'drone' and Drone_Hover
#[macro_export]
macro_rules! helper__hover {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() == enums::Mode::Drone && $ctx.has(Item::Drone_Hover))
    }};
}

/// $can_deploy (  )
/// Remote_Drone and ^mode != 'drone' and not Anuman
#[macro_export]
macro_rules! helper__can_deploy {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        (($ctx.has(Item::Remote_Drone) && $ctx.mode() != enums::Mode::Drone)
            && !$ctx.has(Item::Anuman))
    }};
}

/// $can_recall (  )
/// ^mode == 'drone' and not Anuman
#[macro_export]
macro_rules! helper__can_recall {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() == enums::Mode::Drone && !$ctx.has(Item::Anuman))
    }};
}

/// $shockwave (  )
/// ^mode != 'drone' and Shockwave
#[macro_export]
macro_rules! helper__shockwave {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() != enums::Mode::Drone && $ctx.has(Item::Shockwave))
    }};
}

/// $open (  )
/// Infect
#[macro_export]
macro_rules! helper__open {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.has(Item::Infect)
    }};
}

/// $activate (  )
/// Infect
#[macro_export]
macro_rules! helper__activate {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.has(Item::Infect)
    }};
}

/// $platform (  )
/// Infect
#[macro_export]
macro_rules! helper__platform {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.has(Item::Infect)
    }};
}

/// $overheat (  )
/// Infect
#[macro_export]
macro_rules! helper__overheat {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.has(Item::Infect)
    }};
}

/// $allegiance1 (  )
/// Infect
#[macro_export]
macro_rules! helper__allegiance1 {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.has(Item::Infect)
    }};
}

/// $allegiance2 (  )
/// Infect{2}
#[macro_export]
macro_rules! helper__allegiance2 {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.count(Item::Infect) >= 2
    }};
}

/// $unlock2 (  )
/// Infect{2}
#[macro_export]
macro_rules! helper__unlock2 {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.count(Item::Infect) >= 2
    }};
}

/// $unlock3 (  )
/// Infect{3}
#[macro_export]
macro_rules! helper__unlock3 {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.count(Item::Infect) >= 3
    }};
}

/// $more_refills (  )
/// ^refills < $count(Power_Matrix)
#[macro_export]
macro_rules! helper__more_refills {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        Into::<i32>::into($ctx.refills()) < $ctx.count(Item::Power_Matrix).into()
    }};
}

/// $max_energy (  )
/// PER Nano_Points { 3 => 450, 2 => 400, 1 => 350, _ => 300 }
#[macro_export]
macro_rules! helper__max_energy {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        match $ctx.count(Item::Nano_Points) {
            3 => 450,
            2 => 400,
            1 => 350,
            _ => 300,
        }
    }};
}

/// $bs (  )
/// boomerang_steering and $boomerang
#[macro_export]
macro_rules! helper__bs {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.boomerang_steering() && helper__boomerang!($ctx))
    }};
}

/// $offset (  )
/// major_glitches and $melee
#[macro_export]
macro_rules! helper__offset {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.major_glitches() && helper__melee!($ctx))
    }};
}

/// $block_clip (  )
/// minor_glitches and ^mode == 'drone'
#[macro_export]
macro_rules! helper__block_clip {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.minor_glitches() && $ctx.mode() == enums::Mode::Drone)
    }};
}

/// $block_clip_escape (  )
/// minor_glitches and $hook
#[macro_export]
macro_rules! helper__block_clip_escape {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.minor_glitches() && helper__hook!($ctx))
    }};
}

/// $all_notes (  )
/// Dear_Ernest and Researchers_Missing and Letter_from_Trace and Heretics_Tablet and Terminal_Breakthrough_1 and Companies_Layoff and Record_Losses and Under_Siege
#[macro_export]
macro_rules! helper__all_notes {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ((((((($ctx.has(Item::Dear_Ernest) && $ctx.has(Item::Researchers_Missing))
            && $ctx.has(Item::Letter_from_Trace))
            && $ctx.has(Item::Heretics_Tablet))
            && $ctx.has(Item::Terminal_Breakthrough_1))
            && $ctx.has(Item::Companies_Layoff))
            && $ctx.has(Item::Record_Losses))
            && $ctx.has(Item::Under_Siege))
    }};
}

/// $save (  )
/// ^save = ^position; ^energy = $max_energy
#[macro_export]
macro_rules! helper__save {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.set_save($ctx.position());
        $ctx.set_energy(helper__max_energy!($ctx));
    }};
}

/// $deploy_drone ( TypedVar(name='newpos', type='SpotId') )
/// ^mode = 'drone'; ^indra = ^position; ^position = ^newpos;
#[macro_export]
macro_rules! helper__deploy_drone {
    ($ctx:expr, $newpos:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.set_mode(enums::Mode::Drone);
        $ctx.set_indra($ctx.position());
        $ctx.set_position($newpos);
    }};
}

/// $deploy_drone_and_move ( TypedVar(name='dronepos', type='SpotId'),TypedVar(name='indrapos', type='SpotId') )
/// ^mode = 'drone'; ^indra = ^indrapos; ^position = ^dronepos;
#[macro_export]
macro_rules! helper__deploy_drone_and_move {
    ($ctx:expr, $dronepos:expr, $indrapos:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.set_mode(enums::Mode::Drone);
        $ctx.set_indra($indrapos);
        $ctx.set_position($dronepos);
    }};
}

/// $reset_old_area ( TypedVar(name='newpos', type='SpotId') )
/// IF (^position NOT WITHIN ^prev_area     AND ^position NOT WITHIN `Menu`     AND ^newpos NOT WITHIN $get_area(^position)) {         IF (^newpos NOT WITHIN ^prev_area) {             $reset_area(^prev_area);         };         ^prev_area = $get_area(^position); }
#[macro_export]
macro_rules! helper__reset_old_area {
    ($ctx:expr, $newpos:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        if ((get_area($ctx.position()) != $ctx.prev_area()
            && get_region($ctx.position()) != RegionId::Menu)
            && get_area($newpos) != get_area($ctx.position()))
        {
            if get_area($newpos) != $ctx.prev_area() {
                $ctx.reset_area($ctx.prev_area());
            }
            $ctx.set_prev_area(get_area($ctx.position()));
        }
    }};
}

/// $breach_entry ( TypedVar(name='newsave', type='SpotId') )
/// IF (NOT ^breach) { ^save = ^newsave; }
#[macro_export]
macro_rules! helper__breach_entry {
    ($ctx:expr, $newsave:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        if !data::breach($ctx.position()) {
            $ctx.set_save($newsave);
        }
    }};
}

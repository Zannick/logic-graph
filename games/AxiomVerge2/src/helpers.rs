//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

/// $melee (  )
/// Ice_Axe
#[macro_export]
macro_rules! helper__melee {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.has(Item::Ice_Axe)
    }};
}

/// $break_box (  )
/// $melee
#[macro_export]
macro_rules! helper__break_box {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        helper__melee!($ctx)
    }};
}

/// $grab (  )
/// ^mode != 'drone' and Ledge_Grab
#[macro_export]
macro_rules! helper__grab {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() != enums::Mode::Drone && $ctx.has(Item::Ledge_Grab))
    }};
}

/// $hook (  )
/// ^mode == 'drone' and Slingshot_Hook
#[macro_export]
macro_rules! helper__hook {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() == enums::Mode::Drone && $ctx.has(Item::Slingshot_Hook))
    }};
}

/// $offset (  )
/// major_glitches and $melee
#[macro_export]
macro_rules! helper__offset {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.major_glitches && helper__melee!($ctx))
    }};
}

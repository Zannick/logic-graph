//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

/// $melee (  )
/// Ice_Axe or ^mode == 'drone'
#[macro_export]
macro_rules! helper__melee {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.has(Item::Ice_Axe) || $ctx.mode() == enums::Mode::Drone)
    }};
}

/// $boomerang (  )
/// ^mode != 'drone' and Boomerang
#[macro_export]
macro_rules! helper__boomerang {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() != enums::Mode::Drone && $ctx.has(Item::Boomerang))
    }};
}

/// $can_damage (  )
/// $melee or Boomerang
#[macro_export]
macro_rules! helper__can_damage {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        (helper__melee!($ctx) || $ctx.has(Item::Boomerang))
    }};
}

/// $grab (  )
/// ^mode != 'drone' and Ledge_Grab
#[macro_export]
macro_rules! helper__grab {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() != enums::Mode::Drone && $ctx.has(Item::Ledge_Grab))
    }};
}

/// $climb (  )
/// ^mode != 'drone' and Wall_Climb
#[macro_export]
macro_rules! helper__climb {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() != enums::Mode::Drone && $ctx.has(Item::Wall_Climb))
    }};
}

/// $hook (  )
/// ^mode == 'drone' and Slingshot_Hook
#[macro_export]
macro_rules! helper__hook {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() == enums::Mode::Drone && $ctx.has(Item::Slingshot_Hook))
    }};
}

/// $hover (  )
/// ^mode == 'drone' and Drone_Hover
#[macro_export]
macro_rules! helper__hover {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() == enums::Mode::Drone && $ctx.has(Item::Drone_Hover))
    }};
}

/// $can_deploy (  )
/// Remote_Drone and ^mode != 'drone' and not Anuman
#[macro_export]
macro_rules! helper__can_deploy {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        (($ctx.has(Item::Remote_Drone) && $ctx.mode() != enums::Mode::Drone)
            && !$ctx.has(Item::Anuman))
    }};
}

/// $can_recall (  )
/// ^mode == 'drone' and not Anuman
#[macro_export]
macro_rules! helper__can_recall {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() == enums::Mode::Drone && !$ctx.has(Item::Anuman))
    }};
}

/// $max_energy (  )
/// PER Nano_Points { 3 => 450, 2 => 400, 1 => 350, _ => 300 }
#[macro_export]
macro_rules! helper__max_energy {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        match $ctx.count(Item::Nano_Points) {
            3 => 450,
            2 => 400,
            1 => 350,
            _ => 300,
        }
    }};
}

/// $offset (  )
/// major_glitches and $melee
#[macro_export]
macro_rules! helper__offset {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.major_glitches && helper__melee!($ctx))
    }};
}

/// $block_clip (  )
/// minor_glitches and ^mode == 'drone'
#[macro_export]
macro_rules! helper__block_clip {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.minor_glitches && $ctx.mode() == enums::Mode::Drone)
    }};
}

/// $block_clip_escape (  )
/// minor_glitches and $hook
#[macro_export]
macro_rules! helper__block_clip_escape {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.minor_glitches && helper__hook!($ctx))
    }};
}

/// $save (  )
/// ^save = ^position; ^energy = $max_energy
#[macro_export]
macro_rules! helper__save {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.save = $ctx.position();
        $ctx.energy = helper__max_energy!($ctx);
    }};
}

#[macro_export]
macro_rules! helper_has_effect__save {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.save != $ctx.position() || $ctx.energy != helper__max_energy!($ctx)
    }};
}
/// $reset_old_area ( TypedVar(name='newpos', type='SpotId') )
/// IF (^newpos NOT WITHIN ^prev_area     AND ^position NOT WITHIN ^prev_area     AND ^newpos NOT WITHIN $get_area(^position)) {        $reset_area(^prev_area); ^prev_area = $get_area(^position); }
#[macro_export]
macro_rules! helper__reset_old_area {
    ($ctx:expr, $newpos:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        if ((get_area($newpos) != $ctx.prev_area()
            && get_area($ctx.position()) != $ctx.prev_area())
            && get_area($newpos) != get_area($ctx.position()))
        {
            $ctx.reset_area($ctx.prev_area());
            $ctx.prev_area = get_area($ctx.position());
        }
    }};
}

#[macro_export]
macro_rules! helper_has_effect__reset_old_area {
    ($ctx:expr, $newpos:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        if ((get_area($newpos) != $ctx.prev_area()
            && get_area($ctx.position()) != $ctx.prev_area())
            && get_area($newpos) != get_area($ctx.position()))
        {
            panic!("builtin action shouldn't be checked for an effect!")
                || $ctx.prev_area != get_area($ctx.position())
        }
    }};
}

//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

/// $melee (  )
/// Ice_Axe
#[macro_export]
macro_rules! helper__melee {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        $ctx.has(Item::Ice_Axe)
    }};
}

/// $break_box (  )
/// $melee or Boomerang
#[macro_export]
macro_rules! helper__break_box {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        (helper__melee!($ctx) || $ctx.has(Item::Boomerang))
    }};
}

/// $grab (  )
/// ^mode != 'drone' and Ledge_Grab
#[macro_export]
macro_rules! helper__grab {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() != enums::Mode::Drone && $ctx.has(Item::Ledge_Grab))
    }};
}

/// $climb (  )
/// ^mode != 'drone' and Wall_Climb
#[macro_export]
macro_rules! helper__climb {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() != enums::Mode::Drone && $ctx.has(Item::Wall_Climb))
    }};
}

/// $hook (  )
/// ^mode == 'drone' and Slingshot_Hook
#[macro_export]
macro_rules! helper__hook {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.mode() == enums::Mode::Drone && $ctx.has(Item::Slingshot_Hook))
    }};
}

/// $max_energy (  )
/// PER Nano_Points { 3 => 450, 2 => 400, 1 => 350, _ => 300 }
#[macro_export]
macro_rules! helper__max_energy {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        match $ctx.count(Item::Nano_Points) {
            3 => 450,
            2 => 400,
            1 => 350,
            _ => 300,
        }
    }};
}

/// $offset (  )
/// major_glitches and $melee
#[macro_export]
macro_rules! helper__offset {
    ($ctx:expr) => {{
        #[allow(unused_imports)]
        use $crate::items::Item;
        ($ctx.major_glitches && helper__melee!($ctx))
    }};
}

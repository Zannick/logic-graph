//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::*;
use crate::graph::*;
use crate::items::Item;
use crate::prices::Currency;
use crate::*;
use analyzer::context::Ctx;
use analyzer::world;

pub fn access_default(_ctx: &Context) -> bool {
    true
}

pub fn access_amagi__main_area__carving__ex__secret_outcropping_1__req(ctx: &Context) -> bool {
    // ^_combo and ($grab or $climb)
    (ctx.amagi__main_area__ctx__combo() && (helper__grab!(ctx) || helper__climb!(ctx)))
}
pub fn access_amagi__main_area__carving__ex__secret_outcropping_2__req(ctx: &Context) -> bool {
    // ^_combo and $hook
    (ctx.amagi__main_area__ctx__combo() && helper__hook!(ctx))
}
pub fn access_amagi__main_area__carving__key_combo__req(ctx: &Context) -> bool {
    // not ^_combo
    !ctx.amagi__main_area__ctx__combo()
}
pub fn access_apocalypse_bomb(ctx: &Context) -> bool {
    // Apocalypse_Bomb
    ctx.has(Item::Apocalypse_Bomb)
}
pub fn access_boomerang(ctx: &Context) -> bool {
    // Boomerang
    ctx.has(Item::Boomerang)
}
pub fn access_bs(ctx: &Context) -> bool {
    // $bs
    helper__bs!(ctx)
}
pub fn access_can_damage(ctx: &Context) -> bool {
    // $can_damage
    helper__can_damage!(ctx)
}
pub fn access_can_deploy(ctx: &Context) -> bool {
    // $can_deploy
    helper__can_deploy!(ctx)
}
pub fn access_climb(ctx: &Context) -> bool {
    // $climb
    helper__climb!(ctx)
}
pub fn access_climb_and_grab(ctx: &Context) -> bool {
    // $climb and $grab
    (helper__climb!(ctx) && helper__grab!(ctx))
}
pub fn access_defeat_ebih_alu(ctx: &Context) -> bool {
    // Defeat_Ebih_Alu
    ctx.has(Item::Defeat_Ebih_Alu)
}
pub fn access_drone_melee_damage(ctx: &Context) -> bool {
    // Drone_Melee_Damage
    ctx.has(Item::Drone_Melee_Damage)
}
pub fn access_drone_melee_damage__2(ctx: &Context) -> bool {
    // Drone_Melee_Damage{2}
    ctx.count(Item::Drone_Melee_Damage) >= 2
}
pub fn access_drone_melee_speed(ctx: &Context) -> bool {
    // Drone_Melee_Speed
    ctx.has(Item::Drone_Melee_Speed)
}
pub fn access_drone_melee_speed__2(ctx: &Context) -> bool {
    // Drone_Melee_Speed{2}
    ctx.count(Item::Drone_Melee_Speed) >= 2
}
pub fn access_ebih__drone_room__pit_left__activate_lift__req(ctx: &Context) -> bool {
    // Infect and ^_platform_moved
    (ctx.has(Item::Infect) && ctx.ebih__drone_room__ctx__platform_moved())
}
pub fn access_ebih__drone_room__pit_left__activate_lift_but_get_off_early__req(
    ctx: &Context,
) -> bool {
    // Infect and ^_platform_moved
    (ctx.has(Item::Infect) && ctx.ebih__drone_room__ctx__platform_moved())
}
pub fn access_ebih__drone_room__portal_exit__activate_platform__req(ctx: &Context) -> bool {
    // Infect and not ^_platform_moved
    (ctx.has(Item::Infect) && !ctx.ebih__drone_room__ctx__platform_moved())
}
pub fn access_ebih__drone_room__portal_exit__ex__moving_platform_1__req(ctx: &Context) -> bool {
    // Infect and not ^_platform_moved
    (ctx.has(Item::Infect) && !ctx.ebih__drone_room__ctx__platform_moved())
}
pub fn access_ebih__ebih_east__dispenser__activate_lift__req(ctx: &Context) -> bool {
    // Infect and ^_platform2_moved
    (ctx.has(Item::Infect) && ctx.ebih__ebih_east__ctx__platform2_moved())
}
pub fn access_ebih__ebih_east__lower_moving_platform__activate_lift__req(ctx: &Context) -> bool {
    // Infect and $grab and not ^_platform2_moved
    ((ctx.has(Item::Infect) && helper__grab!(ctx)) && !ctx.ebih__ebih_east__ctx__platform2_moved())
}
pub fn access_ebih__ebih_east__lower_moving_platform__activate_ride__req(ctx: &Context) -> bool {
    // Infect and not ^_platform2_moved
    (ctx.has(Item::Infect) && !ctx.ebih__ebih_east__ctx__platform2_moved())
}
pub fn access_ebih__ebih_east__moving_platform__activate_ride__req(ctx: &Context) -> bool {
    // Infect and $grab and not ^_platform1_moved
    ((ctx.has(Item::Infect) && helper__grab!(ctx)) && !ctx.ebih__ebih_east__ctx__platform1_moved())
}
pub fn access_ebih__waterfall__west_door__ex__west_door_left_1__req(ctx: &Context) -> bool {
    // ^_west_door_open
    ctx.ebih__waterfall__ctx__west_door_open()
}
pub fn access_ebih__waterfall__west_door__ex__west_door_right_1__req(ctx: &Context) -> bool {
    // ^_west_door_open
    ctx.ebih__waterfall__ctx__west_door_open()
}
pub fn access_ebih__waterfall__west_door_left__ex__west_door_1__req(ctx: &Context) -> bool {
    // ^_west_door_open
    ctx.ebih__waterfall__ctx__west_door_open()
}
pub fn access_ebih__waterfall__west_door_right__ex__west_door_1__req(ctx: &Context) -> bool {
    // ^_west_door_open
    ctx.ebih__waterfall__ctx__west_door_open()
}
pub fn access_grab(ctx: &Context) -> bool {
    // $grab
    helper__grab!(ctx)
}
pub fn access_grab_and_switch_40_12(ctx: &Context) -> bool {
    // $grab and Switch_40_12
    (helper__grab!(ctx) && ctx.has(Item::Switch_40_12))
}
pub fn access_grab_or_climb(ctx: &Context) -> bool {
    // $grab or $climb
    (helper__grab!(ctx) || helper__climb!(ctx))
}
pub fn access_grab_or_climb_or_hook(ctx: &Context) -> bool {
    // $grab or $climb or $hook
    ((helper__grab!(ctx) || helper__climb!(ctx)) || helper__hook!(ctx))
}
pub fn access_grab_or_liru(ctx: &Context) -> bool {
    // $grab or Liru
    (helper__grab!(ctx) || ctx.has(Item::Liru))
}
pub fn access_health_upgrade(ctx: &Context) -> bool {
    // Health_Upgrade
    ctx.has(Item::Health_Upgrade)
}
pub fn access_health_upgrade__2(ctx: &Context) -> bool {
    // Health_Upgrade{2}
    ctx.count(Item::Health_Upgrade) >= 2
}
pub fn access_health_upgrade__3(ctx: &Context) -> bool {
    // Health_Upgrade{3}
    ctx.count(Item::Health_Upgrade) >= 3
}
pub fn access_health_upgrade__4(ctx: &Context) -> bool {
    // Health_Upgrade{4}
    ctx.count(Item::Health_Upgrade) >= 4
}
pub fn access_hook(ctx: &Context) -> bool {
    // $hook
    helper__hook!(ctx)
}
pub fn access_hook_and_hover(ctx: &Context) -> bool {
    // $hook and $hover
    (helper__hook!(ctx) && helper__hover!(ctx))
}
pub fn access_hook_and_hover_and_liru(ctx: &Context) -> bool {
    // $hook and $hover and Liru
    ((helper__hook!(ctx) && helper__hover!(ctx)) && ctx.has(Item::Liru))
}
pub fn access_hook_and_liru(ctx: &Context) -> bool {
    // $hook and Liru
    (helper__hook!(ctx) && ctx.has(Item::Liru))
}
pub fn access_hover(ctx: &Context) -> bool {
    // $hover
    helper__hover!(ctx)
}
pub fn access_infect(ctx: &Context) -> bool {
    // Infect
    ctx.has(Item::Infect)
}
pub fn access_infect__2(ctx: &Context) -> bool {
    // Infect{2}
    ctx.count(Item::Infect) >= 2
}
pub fn access_infect__2_and___melee_or_boomerang(ctx: &Context) -> bool {
    // Infect{2} and ($melee or $boomerang)
    (ctx.count(Item::Infect) >= 2 && (helper__melee!(ctx) || helper__boomerang!(ctx)))
}
pub fn access_infect__3(ctx: &Context) -> bool {
    // Infect{3}
    ctx.count(Item::Infect) >= 3
}
pub fn access_infection_range(ctx: &Context) -> bool {
    // Infection_Range
    ctx.has(Item::Infection_Range)
}
pub fn access_infection_range__2(ctx: &Context) -> bool {
    // Infection_Range{2}
    ctx.count(Item::Infection_Range) >= 2
}
pub fn access_infection_speed(ctx: &Context) -> bool {
    // Infection_Speed
    ctx.has(Item::Infection_Speed)
}
pub fn access_liru(ctx: &Context) -> bool {
    // Liru
    ctx.has(Item::Liru)
}
pub fn access_liru_and___grab_or_climb(ctx: &Context) -> bool {
    // Liru and ($grab or $climb)
    (ctx.has(Item::Liru) && (helper__grab!(ctx) || helper__climb!(ctx)))
}
pub fn access_liru_and_hook(ctx: &Context) -> bool {
    // Liru and $hook
    (ctx.has(Item::Liru) && helper__hook!(ctx))
}
pub fn access_melee_damage(ctx: &Context) -> bool {
    // Melee_Damage
    ctx.has(Item::Melee_Damage)
}
pub fn access_melee_damage__2(ctx: &Context) -> bool {
    // Melee_Damage{2}
    ctx.count(Item::Melee_Damage) >= 2
}
pub fn access_melee_or_boomerang(ctx: &Context) -> bool {
    // $melee or $boomerang
    (helper__melee!(ctx) || helper__boomerang!(ctx))
}
pub fn access_melee_speed(ctx: &Context) -> bool {
    // Melee_Speed
    ctx.has(Item::Melee_Speed)
}
pub fn access_melee_speed__2(ctx: &Context) -> bool {
    // Melee_Speed{2}
    ctx.count(Item::Melee_Speed) >= 2
}
pub fn access_mist_upgrade(ctx: &Context) -> bool {
    // Mist_Upgrade
    ctx.has(Item::Mist_Upgrade)
}
pub fn access_mode__drone(ctx: &Context) -> bool {
    // ^mode == 'drone'
    ctx.mode() == enums::Mode::Drone
}
pub fn access_nanite_mist(ctx: &Context) -> bool {
    // Nanite_Mist
    ctx.has(Item::Nanite_Mist)
}
pub fn access_nano_points(ctx: &Context) -> bool {
    // Nano_Points
    ctx.has(Item::Nano_Points)
}
pub fn access_nano_points__2(ctx: &Context) -> bool {
    // Nano_Points{2}
    ctx.count(Item::Nano_Points) >= 2
}
pub fn access_not_amashilama(ctx: &Context) -> bool {
    // NOT Amashilama
    !ctx.has(Item::Amashilama)
}
pub fn access_not_water(ctx: &Context) -> bool {
    // not ^water
    !ctx.water()
}
pub fn access_not_within_menu_and_amashilama_and_mode__drone(ctx: &Context) -> bool {
    // NOT WITHIN `Menu` and Amashilama and ^mode != 'drone'
    ((!(match get_region(ctx.position()) {
        RegionId::Menu => true,
        _ => false,
    }) && ctx.has(Item::Amashilama))
        && ctx.mode() != enums::Mode::Drone)
}
pub fn access_not_within_menu_and_can_deploy(ctx: &Context) -> bool {
    // NOT WITHIN `Menu` and $can_deploy
    (!(match get_region(ctx.position()) {
        RegionId::Menu => true,
        _ => false,
    }) && helper__can_deploy!(ctx))
}
pub fn access_not_within_menu_and_can_recall(ctx: &Context) -> bool {
    // NOT WITHIN `Menu` and $can_recall
    (!(match get_region(ctx.position()) {
        RegionId::Menu => true,
        _ => false,
    }) && helper__can_recall!(ctx))
}
pub fn access_not_within_menu_and_flasks__0(ctx: &Context) -> bool {
    // NOT WITHIN `Menu` and ^flasks > 0
    (!(match get_region(ctx.position()) {
        RegionId::Menu => true,
        _ => false,
    }) && ctx.flasks() > 0)
}
pub fn access_not_within_menu_and_mode__drone(ctx: &Context) -> bool {
    // NOT WITHIN `Menu` and ^mode == 'drone'
    (!(match get_region(ctx.position()) {
        RegionId::Menu => true,
        _ => false,
    }) && ctx.mode() == enums::Mode::Drone)
}
pub fn access_offset(ctx: &Context) -> bool {
    // $offset
    helper__offset!(ctx)
}
pub fn access_open(ctx: &Context) -> bool {
    // $open
    helper__open!(ctx)
}
pub fn access_ranged_damage(ctx: &Context) -> bool {
    // Ranged_Damage
    ctx.has(Item::Ranged_Damage)
}
pub fn access_ranged_damage__2(ctx: &Context) -> bool {
    // Ranged_Damage{2}
    ctx.count(Item::Ranged_Damage) >= 2
}
pub fn access_ranged_speed(ctx: &Context) -> bool {
    // Ranged_Speed
    ctx.has(Item::Ranged_Speed)
}
pub fn access_ranged_speed__2(ctx: &Context) -> bool {
    // Ranged_Speed{2}
    ctx.count(Item::Ranged_Speed) >= 2
}
pub fn access_remote_drone(ctx: &Context) -> bool {
    // Remote_Drone
    ctx.has(Item::Remote_Drone)
}
pub fn access_remote_drone_and_dear_ernest_and_liru_and_flask__4(ctx: &Context) -> bool {
    // Remote_Drone and Dear_Ernest and Liru and Flask{4}
    (((ctx.has(Item::Remote_Drone) && ctx.has(Item::Dear_Ernest)) && ctx.has(Item::Liru))
        && ctx.count(Item::Flask) >= 4)
}
pub fn access_station_power(ctx: &Context) -> bool {
    // Station_Power
    ctx.has(Item::Station_Power)
}
pub fn access_switch_36_11(ctx: &Context) -> bool {
    // Switch_36_11
    ctx.has(Item::Switch_36_11)
}
pub fn access_switch_40_12(ctx: &Context) -> bool {
    // Switch_40_12
    ctx.has(Item::Switch_40_12)
}
pub fn access_within_antarctica(ctx: &Context) -> bool {
    // WITHIN `Antarctica`
    (match get_region(ctx.position()) {
        RegionId::Antarctica => true,
        _ => false,
    })
}
pub fn access_within_menu(ctx: &Context) -> bool {
    // WITHIN `Menu`
    (match get_region(ctx.position()) {
        RegionId::Menu => true,
        _ => false,
    })
}
pub fn action_amagi__main_area__carving__key_combo__do(ctx: &mut Context) {
    // ^_combo = true
    ctx.amagi__main_area__ctx__combo = true;
}
pub fn action_deploy_drone__amagi__cave_behind_waterfall__top(ctx: &mut Context) {
    // $deploy_drone(`Amagi > Cave Behind Waterfall > Top`)
    helper__deploy_drone!(ctx, SpotId::Amagi__Cave_Behind_Waterfall__Top);
}
pub fn action_deploy_drone__ebih__waterfall__below_left_switch(ctx: &mut Context) {
    // $deploy_drone(`Ebih > Waterfall > Below Left Switch`)
    helper__deploy_drone!(ctx, SpotId::Ebih__Waterfall__Below_Left_Switch);
}
pub fn action_deploy_drone_and_move__ebih__drone_room__east_4_ebih__drone_room__tree(
    ctx: &mut Context,
) {
    // $deploy_drone_and_move(`Ebih > Drone Room > East 4`, `Ebih > Drone Room > Tree`)
    helper__deploy_drone_and_move!(
        ctx,
        SpotId::Ebih__Drone_Room__East_4,
        SpotId::Ebih__Drone_Room__Tree
    );
}
pub fn action_deploy_drone_and_move__giguna__giguna_northeast__inner_wall_ebih__ebih_west__alcove_entrance(
    ctx: &mut Context,
) {
    // $deploy_drone_and_move(`Giguna > Giguna Northeast > Inner Wall`, `Ebih > Ebih West > Alcove Entrance`)
    helper__deploy_drone_and_move!(
        ctx,
        SpotId::Giguna__Giguna_Northeast__Inner_Wall,
        SpotId::Ebih__Ebih_West__Alcove_Entrance
    );
}
pub fn action_ebih__drone_room__pit_left__activate_lift__do(ctx: &mut Context) {
    // ^_platform_moved = false; ^position = `Ebih > Drone Room > Moving Platform`
    ctx.ebih__drone_room__ctx__platform_moved = false;
    ctx.set_position(SpotId::Ebih__Drone_Room__Moving_Platform);
}
pub fn action_ebih__drone_room__pit_left__activate_lift_but_get_off_early__do(ctx: &mut Context) {
    // ^_platform_moved = false; ^position = `Ebih > Drone Room > West 6`
    ctx.ebih__drone_room__ctx__platform_moved = false;
    ctx.set_position(SpotId::Ebih__Drone_Room__West_6);
}
pub fn action_ebih__drone_room__portal_exit__activate_platform__do(ctx: &mut Context) {
    // ^_platform_moved = true
    ctx.ebih__drone_room__ctx__platform_moved = true;
}
pub fn action_ebih__ebih_east__dispenser__activate_lift__do(ctx: &mut Context) {
    // ^_platform2_moved = false; ^position = `Ebih > Ebih East > Ledge End`
    ctx.ebih__ebih_east__ctx__platform2_moved = false;
    ctx.set_position(SpotId::Ebih__Ebih_East__Ledge_End);
}
pub fn action_ebih__ebih_east__lower_moving_platform__activate_lift__do(ctx: &mut Context) {
    // ^_platform2_moved = true; ^position = `Ebih > Ebih East > Ledge End`
    ctx.ebih__ebih_east__ctx__platform2_moved = true;
    ctx.set_position(SpotId::Ebih__Ebih_East__Ledge_End);
}
pub fn action_ebih__ebih_east__lower_moving_platform__activate_ride__do(ctx: &mut Context) {
    // ^_platform2_moved = true; ^position = `Ebih > Ebih East > Dispenser`
    ctx.ebih__ebih_east__ctx__platform2_moved = true;
    ctx.set_position(SpotId::Ebih__Ebih_East__Dispenser);
}
pub fn action_ebih__ebih_east__moving_platform__activate_ride__do(ctx: &mut Context) {
    // ^_platform1_moved = true; ^position = `Ebih > Ebih East > Middle Platform`
    ctx.ebih__ebih_east__ctx__platform1_moved = true;
    ctx.set_position(SpotId::Ebih__Ebih_East__Middle_Platform);
}
pub fn action_ebih__waterfall__below_left_switch__open_door__do(ctx: &mut Context) {
    // ^_west_door_open = true
    ctx.ebih__waterfall__ctx__west_door_open = true;
}
pub fn action_energy__max_energy(ctx: &mut Context) {
    // ^energy = $max_energy
    ctx.energy = helper__max_energy!(ctx);
}
pub fn action_flasks__1(ctx: &mut Context) {
    // ^flasks += 1
    ctx.flasks += 1;
}
pub fn action_last__position(ctx: &mut Context) {
    // ^last = ^position
    ctx.last = ctx.position();
}
pub fn action_mode__drone_indra__position(ctx: &mut Context) {
    // ^mode = 'drone'; ^indra = ^position
    ctx.mode = enums::Mode::Drone;
    ctx.indra = ctx.position();
}
pub fn action_mode__indra_position__indra(ctx: &mut Context) {
    // ^mode = 'Indra'; ^position = ^indra
    ctx.mode = enums::Mode::Indra;
    ctx.set_position(ctx.indra());
}
pub fn action_reset_old_area__newpos(ctx: &mut Context, newpos: SpotId) {
    // $reset_old_area(^newpos)
    helper__reset_old_area!(ctx, newpos);
}
pub fn action_save(ctx: &mut Context) {
    // $save
    helper__save!(ctx);
}
pub fn action_save__glacier__revival__save_point(ctx: &mut Context) {
    // ^save = `Glacier > Revival > Save Point`
    ctx.save = SpotId::Glacier__Revival__Save_Point;
}

//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::*;
use crate::graph::{self, *};
use crate::graph_enums::*;
use crate::items::Item;
use crate::prices::Currency;
use crate::*;
use analyzer::context::Ctx;
use analyzer::world::{self, World};

pub fn access_default(_ctx: &Context, _world: &graph::World) -> bool {
    true
}

pub fn access___all_urns_all_weapons_other_items_all_notes_all_health_all_flasks(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // [$all_urns, $all_weapons, $other_items, $all_notes, $all_health, $all_flasks]
    helper__all_urns!(ctx, world)
        && helper__all_weapons!(ctx, world)
        && helper__other_items!(ctx, world)
        && helper__all_notes!(ctx, world)
        && helper__all_health!(ctx, world)
        && helper__all_flasks!(ctx, world)
}
pub fn access___escape_objective(ctx: &Context, world: &graph::World) -> bool {
    // [Escape, $objective]
    rule__objective!(ctx, world) && ctx.has(Item::Escape)
}
pub fn access___objective(ctx: &Context, world: &graph::World) -> bool {
    // [$objective]
    rule__objective!(ctx, world)
}
pub fn access___remote_drone(ctx: &Context, world: &graph::World) -> bool {
    // [Remote_Drone]
    ctx.has(Item::Remote_Drone)
}
pub fn access_activate(ctx: &Context, world: &graph::World) -> bool {
    // $activate
    helper__activate!(ctx, world)
}
pub fn access_amagi__main_area__carving__ex__secret_outcropping_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_combo and ($grab or $climb)
    (ctx.amagi__main_area__ctx__combo()
        && (helper__grab!(ctx, world) || helper__climb!(ctx, world)))
}
pub fn access_amagi__main_area__carving__ex__secret_outcropping_2__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_combo and $hook
    (ctx.amagi__main_area__ctx__combo() && helper__hook!(ctx, world))
}
pub fn access_amagi__main_area__carving__key_combo__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_combo
    !ctx.amagi__main_area__ctx__combo()
}
pub fn access_amagi_dragon_eye_passage(ctx: &Context, world: &graph::World) -> bool {
    // Amagi_Dragon_Eye_Passage
    ctx.has(Item::Amagi_Dragon_Eye_Passage)
}
pub fn access_amagi_stronghold_boulder_1(ctx: &Context, world: &graph::World) -> bool {
    // Amagi_Stronghold_Boulder_1
    ctx.has(Item::Amagi_Stronghold_Boulder_1)
}
pub fn access_amagi_stronghold_boulder_1_and_underwater_movement_and___grab_or_climb(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // Amagi_Stronghold_Boulder_1 and Underwater_Movement and ($grab or $climb)
    ((ctx.has(Item::Amagi_Stronghold_Boulder_1) && ctx.has(Item::Underwater_Movement))
        && (helper__grab!(ctx, world) || helper__climb!(ctx, world)))
}
pub fn access_amagi_stronghold_boulder_2(ctx: &Context, world: &graph::World) -> bool {
    // Amagi_Stronghold_Boulder_2
    ctx.has(Item::Amagi_Stronghold_Boulder_2)
}
pub fn access_amagi_stronghold_boulder_2_and_grab(ctx: &Context, world: &graph::World) -> bool {
    // Amagi_Stronghold_Boulder_2 and $grab
    (ctx.has(Item::Amagi_Stronghold_Boulder_2) && helper__grab!(ctx, world))
}
pub fn access_amagi_stronghold_wall_1(ctx: &Context, world: &graph::World) -> bool {
    // Amagi_Stronghold_Wall_1
    ctx.has(Item::Amagi_Stronghold_Wall_1)
}
pub fn access_amagi_stronghold_wall_2(ctx: &Context, world: &graph::World) -> bool {
    // Amagi_Stronghold_Wall_2
    ctx.has(Item::Amagi_Stronghold_Wall_2)
}
pub fn access_amagi_west_lake_surface_wall(ctx: &Context, world: &graph::World) -> bool {
    // Amagi_West_Lake_Surface_Wall
    ctx.has(Item::Amagi_West_Lake_Surface_Wall)
}
pub fn access_annuna__east_bridge__tower_east_ledge__enter_combo__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_combo
    !ctx.annuna__east_bridge__ctx__combo()
}
pub fn access_annuna__east_bridge__tower_east_ledge__ex__tower_secret_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_combo
    ctx.annuna__east_bridge__ctx__combo()
}
pub fn access_annuna__east_bridge__tower_mid_air_west__ex__tower_secret_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_combo
    ctx.annuna__east_bridge__ctx__combo()
}
pub fn access_annuna__east_bridge__tower_secret__enter_combo__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_combo
    !ctx.annuna__east_bridge__ctx__combo()
}
pub fn access_annuna__east_bridge__tower_secret__ex__tower_east_ledge_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_combo
    ctx.annuna__east_bridge__ctx__combo()
}
pub fn access_annuna__east_bridge__tower_secret__ex__tower_mid_air_east_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_combo
    ctx.annuna__east_bridge__ctx__combo()
}
pub fn access_annuna__east_bridge__tower_secret__ex__tower_mid_air_west_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_combo
    ctx.annuna__east_bridge__ctx__combo()
}
pub fn access_annuna__east_bridge__tower_secret__ex__tower_peak_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_combo and $grab
    (ctx.annuna__east_bridge__ctx__combo() && helper__grab!(ctx, world))
}
pub fn access_annuna__east_bridge__tower_secret__ex__tower_peak_2__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_combo and $hook
    (ctx.annuna__east_bridge__ctx__combo() && helper__hook!(ctx, world))
}
pub fn access_annuna__east_bridge__tower_secret__ex__tower_west_ledge_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_combo
    ctx.annuna__east_bridge__ctx__combo()
}
pub fn access_annuna__east_bridge__tower_west_ledge__enter_combo__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_combo
    !ctx.annuna__east_bridge__ctx__combo()
}
pub fn access_annuna__east_bridge__tower_west_ledge__ex__tower_secret_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_combo
    ctx.annuna__east_bridge__ctx__combo()
}
pub fn access_annuna_east_bridge_gate(ctx: &Context, world: &graph::World) -> bool {
    // Annuna_East_Bridge_Gate
    ctx.has(Item::Annuna_East_Bridge_Gate)
}
pub fn access_annuna_mirror_match_switch(ctx: &Context, world: &graph::World) -> bool {
    // Annuna_Mirror_Match_Switch
    ctx.has(Item::Annuna_Mirror_Match_Switch)
}
pub fn access_anuman(ctx: &Context, world: &graph::World) -> bool {
    // Anuman
    ctx.has(Item::Anuman)
}
pub fn access_anuman_and_grab(ctx: &Context, world: &graph::World) -> bool {
    // Anuman and $grab
    (ctx.has(Item::Anuman) && helper__grab!(ctx, world))
}
pub fn access_anunna_vertical_room_gate(ctx: &Context, world: &graph::World) -> bool {
    // Anunna_Vertical_Room_Gate
    ctx.has(Item::Anunna_Vertical_Room_Gate)
}
pub fn access_apocalypse_bomb(ctx: &Context, world: &graph::World) -> bool {
    // Apocalypse_Bomb
    ctx.has(Item::Apocalypse_Bomb)
}
pub fn access_block_clip_and_not_ebih_waterfall_block_left(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $block_clip and not Ebih_Waterfall_Block_Left
    (helper__block_clip!(ctx, world) && !ctx.has(Item::Ebih_Waterfall_Block_Left))
}
pub fn access_block_clip_and_not_ebih_waterfall_block_right(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $block_clip and not Ebih_Waterfall_Block_Right
    (helper__block_clip!(ctx, world) && !ctx.has(Item::Ebih_Waterfall_Block_Right))
}
pub fn access_block_clip_escape_and_not_uhrum_annuna_corridor_block(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $block_clip_escape and not Uhrum_Annuna_Corridor_Block
    (helper__block_clip_escape!(ctx, world) && !ctx.has(Item::Uhrum_Annuna_Corridor_Block))
}
pub fn access_boomerang(ctx: &Context, world: &graph::World) -> bool {
    // $boomerang
    helper__boomerang!(ctx, world)
}
pub fn access_boomerang1(ctx: &Context, world: &graph::World) -> bool {
    // Boomerang
    ctx.has(Item::Boomerang)
}
pub fn access_boomerang2(ctx: &Context, world: &graph::World) -> bool {
    // Boomerang
    ctx.has(Item::Boomerang)
}
pub fn access_boomerang3(ctx: &Context, world: &graph::World) -> bool {
    // Boomerang
    ctx.has(Item::Boomerang)
}
pub fn access_boomerang4(ctx: &Context, world: &graph::World) -> bool {
    // Boomerang
    ctx.has(Item::Boomerang)
}
pub fn access_boomerang5(ctx: &Context, world: &graph::World) -> bool {
    // Boomerang
    ctx.has(Item::Boomerang)
}
pub fn access_bs(ctx: &Context, world: &graph::World) -> bool {
    // $bs
    helper__bs!(ctx, world)
}
pub fn access_can_damage(ctx: &Context, world: &graph::World) -> bool {
    // $can_damage
    helper__can_damage!(ctx, world)
}
pub fn access_can_deploy(ctx: &Context, world: &graph::World) -> bool {
    // $can_deploy
    helper__can_deploy!(ctx, world)
}
pub fn access_can_deploy_and_drone_hover(ctx: &Context, world: &graph::World) -> bool {
    // $can_deploy and Drone_Hover
    (helper__can_deploy!(ctx, world) && ctx.has(Item::Drone_Hover))
}
pub fn access_can_deploy_and_slingshot_hook(ctx: &Context, world: &graph::World) -> bool {
    // $can_deploy and Slingshot_Hook
    (helper__can_deploy!(ctx, world) && ctx.has(Item::Slingshot_Hook))
}
pub fn access_can_deploy_and_slingshot_hook_and_drone_hover(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $can_deploy and Slingshot_Hook and Drone_Hover
    ((helper__can_deploy!(ctx, world) && ctx.has(Item::Slingshot_Hook))
        && ctx.has(Item::Drone_Hover))
}
pub fn access_charge(ctx: &Context, world: &graph::World) -> bool {
    // $charge
    helper__charge!(ctx, world)
}
pub fn access_climb(ctx: &Context, world: &graph::World) -> bool {
    // $climb
    helper__climb!(ctx, world)
}
pub fn access_climb_and_annuna_east_bridge_gate(ctx: &Context, world: &graph::World) -> bool {
    // $climb and Annuna_East_Bridge_Gate
    (helper__climb!(ctx, world) && ctx.has(Item::Annuna_East_Bridge_Gate))
}
pub fn access_climb_and_can_deploy_and_hover_and_slingshot_hook(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $climb and $can_deploy and Hover and Slingshot_Hook
    (((helper__climb!(ctx, world) && helper__can_deploy!(ctx, world)) && ctx.has(Item::Hover))
        && ctx.has(Item::Slingshot_Hook))
}
pub fn access_climb_and_grab(ctx: &Context, world: &graph::World) -> bool {
    // $climb and $grab
    (helper__climb!(ctx, world) && helper__grab!(ctx, world))
}
pub fn access_climb_and_grab_and_anuman(ctx: &Context, world: &graph::World) -> bool {
    // $climb and $grab and Anuman
    ((helper__climb!(ctx, world) && helper__grab!(ctx, world)) && ctx.has(Item::Anuman))
}
pub fn access_climb_or_hook(ctx: &Context, world: &graph::World) -> bool {
    // $climb or $hook
    (helper__climb!(ctx, world) || helper__hook!(ctx, world))
}
pub fn access_defeat_mus_a_m20(ctx: &Context, world: &graph::World) -> bool {
    // Defeat_MUS_A_M20
    ctx.has(Item::Defeat_MUS_A_M20)
}
pub fn access_drone_melee_damage(ctx: &Context, world: &graph::World) -> bool {
    // Drone_Melee_Damage
    ctx.has(Item::Drone_Melee_Damage)
}
pub fn access_drone_melee_damage_2(ctx: &Context, world: &graph::World) -> bool {
    // Drone_Melee_Damage_2
    ctx.has(Item::Drone_Melee_Damage_2)
}
pub fn access_drone_melee_speed(ctx: &Context, world: &graph::World) -> bool {
    // Drone_Melee_Speed
    ctx.has(Item::Drone_Melee_Speed)
}
pub fn access_drone_melee_speed_2(ctx: &Context, world: &graph::World) -> bool {
    // Drone_Melee_Speed_2
    ctx.has(Item::Drone_Melee_Speed_2)
}
pub fn access_ebih__base_camp__left_platform__move_left_platform__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $activate and not ^_left_platform_moved
    (helper__activate!(ctx, world) && !ctx.ebih__base_camp__ctx__left_platform_moved())
}
pub fn access_ebih__base_camp__left_platform_moved__reset_left_platform__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $activate and ^_left_platform_moved
    (helper__activate!(ctx, world) && ctx.ebih__base_camp__ctx__left_platform_moved())
}
pub fn access_ebih__base_camp__top_platform__ex__left_platform_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $hover and not ^_left_platform_moved
    (helper__hover!(ctx, world) && !ctx.ebih__base_camp__ctx__left_platform_moved())
}
pub fn access_ebih__base_camp__top_platform__ex__left_platform_moved_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_left_platform_moved
    ctx.ebih__base_camp__ctx__left_platform_moved()
}
pub fn access_ebih__base_camp__west_11__ex__left_platform_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $platform and $hook and not ^_left_platform_moved
    ((helper__platform!(ctx, world) && helper__hook!(ctx, world))
        && !ctx.ebih__base_camp__ctx__left_platform_moved())
}
pub fn access_ebih__base_camp__west_11__ex__left_platform_2__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $hover and not ^_left_platform_moved
    (helper__hover!(ctx, world) && !ctx.ebih__base_camp__ctx__left_platform_moved())
}
pub fn access_ebih__drone_room__pit_left__activate_lift__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // Infect and ^_platform_moved
    (ctx.has(Item::Infect) && ctx.ebih__drone_room__ctx__platform_moved())
}
pub fn access_ebih__drone_room__pit_left__activate_lift_but_get_off_early__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // Infect and ^_platform_moved
    (ctx.has(Item::Infect) && ctx.ebih__drone_room__ctx__platform_moved())
}
pub fn access_ebih__drone_room__portal_exit__activate_platform__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // Infect and not ^_platform_moved
    (ctx.has(Item::Infect) && !ctx.ebih__drone_room__ctx__platform_moved())
}
pub fn access_ebih__drone_room__portal_exit__ex__moving_platform_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // Infect and not ^_platform_moved
    (ctx.has(Item::Infect) && !ctx.ebih__drone_room__ctx__platform_moved())
}
pub fn access_ebih__drone_room__portal_exit__ex__moving_platform_2__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $hook and not ^_platform_moved
    (helper__hook!(ctx, world) && !ctx.ebih__drone_room__ctx__platform_moved())
}
pub fn access_ebih__ebih_east__dispenser__activate_lift__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // Infect and ^_platform2_moved and ($grab or $hook)
    ((ctx.has(Item::Infect) && ctx.ebih__ebih_east__ctx__platform2_moved())
        && (helper__grab!(ctx, world) || helper__hook!(ctx, world)))
}
pub fn access_ebih__ebih_east__dispenser__ex__lower_moving_platform_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $grab and not ^_platform2_moved
    (helper__grab!(ctx, world) && !ctx.ebih__ebih_east__ctx__platform2_moved())
}
pub fn access_ebih__ebih_east__dispenser__ex__lower_moving_platform_2__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $hook and not ^_platform2_moved
    (helper__hook!(ctx, world) && !ctx.ebih__ebih_east__ctx__platform2_moved())
}
pub fn access_ebih__ebih_east__lower_moving_platform__activate_lift__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // Infect and $grab and not ^_platform2_moved
    ((ctx.has(Item::Infect) && helper__grab!(ctx, world))
        && !ctx.ebih__ebih_east__ctx__platform2_moved())
}
pub fn access_ebih__ebih_east__lower_moving_platform__activate_ride__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // Infect and not ^_platform2_moved
    (ctx.has(Item::Infect) && !ctx.ebih__ebih_east__ctx__platform2_moved())
}
pub fn access_ebih__ebih_east__moving_platform__activate_ride__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // Infect and $grab and not ^_platform1_moved
    ((ctx.has(Item::Infect) && helper__grab!(ctx, world))
        && !ctx.ebih__ebih_east__ctx__platform1_moved())
}
pub fn access_ebih__ebih_west__above_door__ex__below_door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_open
    ctx.ebih__ebih_west__ctx__door_open()
}
pub fn access_ebih__ebih_west__above_door__ex__refill_station_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_door_open or $grab
    (!ctx.ebih__ebih_west__ctx__door_open() || helper__grab!(ctx, world))
}
pub fn access_ebih__ebih_west__above_door__ex__small_gap_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_door_open
    !ctx.ebih__ebih_west__ctx__door_open()
}
pub fn access_ebih__ebih_west__below_door__ex__above_door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $grab and ^_door_open
    (helper__grab!(ctx, world) && ctx.ebih__ebih_west__ctx__door_open())
}
pub fn access_ebih__ebih_west__below_door__ex__refill_station_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $hook and ^_door_open
    (helper__hook!(ctx, world) && ctx.ebih__ebih_west__ctx__door_open())
}
pub fn access_ebih__grid_25_10_12__door__ex__door_left_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_open
    ctx.ebih__grid_25_10_12__ctx__door_open()
}
pub fn access_ebih__grid_25_10_12__door__ex__east_11_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_open
    ctx.ebih__grid_25_10_12__ctx__door_open()
}
pub fn access_ebih__grid_25_10_12__door_left__ex__door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_open
    ctx.ebih__grid_25_10_12__ctx__door_open()
}
pub fn access_ebih__grid_25_10_12__east_11__ex__door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_open
    ctx.ebih__grid_25_10_12__ctx__door_open()
}
pub fn access_ebih__vertical_interchange__door__ex__door_east_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_open
    ctx.ebih__vertical_interchange__ctx__door_open()
}
pub fn access_ebih__vertical_interchange__door__ex__door_west_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_open
    ctx.ebih__vertical_interchange__ctx__door_open()
}
pub fn access_ebih__vertical_interchange__door_east__ex__door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_open
    ctx.ebih__vertical_interchange__ctx__door_open()
}
pub fn access_ebih__vertical_interchange__door_west__ex__door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_open
    ctx.ebih__vertical_interchange__ctx__door_open()
}
pub fn access_ebih__vertical_interchange__west_13__open_door__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $open and not ^_door_open
    (helper__open!(ctx, world) && !ctx.ebih__vertical_interchange__ctx__door_open())
}
pub fn access_ebih__waterfall__west_door__ex__west_door_left_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_west_door_open
    ctx.ebih__waterfall__ctx__west_door_open()
}
pub fn access_ebih__waterfall__west_door__ex__west_door_right_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_west_door_open
    ctx.ebih__waterfall__ctx__west_door_open()
}
pub fn access_ebih__waterfall__west_door_left__ex__west_door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_west_door_open
    ctx.ebih__waterfall__ctx__west_door_open()
}
pub fn access_ebih__waterfall__west_door_right__ex__west_door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_west_door_open
    ctx.ebih__waterfall__ctx__west_door_open()
}
pub fn access_ebih_alu(ctx: &Context, world: &graph::World) -> bool {
    // Ebih_Alu
    ctx.has(Item::Ebih_Alu)
}
pub fn access_ebih_interchange_block(ctx: &Context, world: &graph::World) -> bool {
    // Ebih_Interchange_Block
    ctx.has(Item::Ebih_Interchange_Block)
}
pub fn access_ebih_interchange_gate(ctx: &Context, world: &graph::World) -> bool {
    // Ebih_Interchange_Gate
    ctx.has(Item::Ebih_Interchange_Gate)
}
pub fn access_ebih_interchange_gate_and_ebih_interchange_block_and_grab(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // Ebih_Interchange_Gate and Ebih_Interchange_Block and $grab
    ((ctx.has(Item::Ebih_Interchange_Gate) && ctx.has(Item::Ebih_Interchange_Block))
        && helper__grab!(ctx, world))
}
pub fn access_ebih_interchange_gate_and_ebih_interchange_block_and_hook(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // Ebih_Interchange_Gate and Ebih_Interchange_Block and $hook
    ((ctx.has(Item::Ebih_Interchange_Gate) && ctx.has(Item::Ebih_Interchange_Block))
        && helper__hook!(ctx, world))
}
pub fn access_ebih_interchange_gate_and_not_ebih_interchange_block_and_grab(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // Ebih_Interchange_Gate and not Ebih_Interchange_Block and $grab
    ((ctx.has(Item::Ebih_Interchange_Gate) && !ctx.has(Item::Ebih_Interchange_Block))
        && helper__grab!(ctx, world))
}
pub fn access_ebih_interchange_gate_and_not_ebih_interchange_block_and_hook(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // Ebih_Interchange_Gate and not Ebih_Interchange_Block and $hook
    ((ctx.has(Item::Ebih_Interchange_Gate) && !ctx.has(Item::Ebih_Interchange_Block))
        && helper__hook!(ctx, world))
}
pub fn access_ebih_wasteland_door(ctx: &Context, world: &graph::World) -> bool {
    // Ebih_Wasteland_Door
    ctx.has(Item::Ebih_Wasteland_Door)
}
pub fn access_ebih_waterfall_wall(ctx: &Context, world: &graph::World) -> bool {
    // Ebih_Waterfall_Wall
    ctx.has(Item::Ebih_Waterfall_Wall)
}
pub fn access_ebih_west_block(ctx: &Context, world: &graph::World) -> bool {
    // Ebih_West_Block
    ctx.has(Item::Ebih_West_Block)
}
pub fn access_ft_breach_and_map__giguna_breach__peak__save(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $ft_breach and ^map__giguna_breach__peak__save
    (helper__ft_breach!(ctx, world) && ctx.map__giguna_breach__peak__save())
}
pub fn access_ft_breach_and_map__giguna_breach__sw_save__save(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $ft_breach and ^map__giguna_breach__sw_save__save
    (helper__ft_breach!(ctx, world) && ctx.map__giguna_breach__sw_save__save())
}
pub fn access_ft_breach_and_map__irikar_breach__basement_save__save(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $ft_breach and ^map__irikar_breach__basement_save__save
    (helper__ft_breach!(ctx, world) && ctx.map__irikar_breach__basement_save__save())
}
pub fn access_ft_breach_and_map__irikar_breach__gauntlet__save(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $ft_breach and ^map__irikar_breach__gauntlet__save
    (helper__ft_breach!(ctx, world) && ctx.map__irikar_breach__gauntlet__save())
}
pub fn access_ft_breach_and_map__irikar_breach__save_room__save(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $ft_breach and ^map__irikar_breach__save_room__save
    (helper__ft_breach!(ctx, world) && ctx.map__irikar_breach__save_room__save())
}
pub fn access_ft_main_and_amashilama(ctx: &Context, world: &graph::World) -> bool {
    // $ft_main and Amashilama
    (helper__ft_main!(ctx, world) && ctx.has(Item::Amashilama))
}
pub fn access_ft_main_and_map__amagi__main_area__save(ctx: &Context, world: &graph::World) -> bool {
    // $ft_main and ^map__amagi__main_area__save
    (helper__ft_main!(ctx, world) && ctx.map__amagi__main_area__save())
}
pub fn access_ft_main_and_map__annuna__center_save__save(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $ft_main and ^map__annuna__center_save__save
    (helper__ft_main!(ctx, world) && ctx.map__annuna__center_save__save())
}
pub fn access_ft_main_and_map__annuna__factory_entrance__save(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $ft_main and ^map__annuna__factory_entrance__save
    (helper__ft_main!(ctx, world) && ctx.map__annuna__factory_entrance__save())
}
pub fn access_ft_main_and_map__annuna__mirror_match__save(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $ft_main and ^map__annuna__mirror_match__save
    (helper__ft_main!(ctx, world) && ctx.map__annuna__mirror_match__save())
}
pub fn access_ft_main_and_map__ebih__base_camp__save(ctx: &Context, world: &graph::World) -> bool {
    // $ft_main and ^map__ebih__base_camp__save
    (helper__ft_main!(ctx, world) && ctx.map__ebih__base_camp__save())
}
pub fn access_ft_main_and_map__ebih__ebih_west__lower_save(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $ft_main and ^map__ebih__ebih_west__lower_save
    (helper__ft_main!(ctx, world) && ctx.map__ebih__ebih_west__lower_save())
}
pub fn access_ft_main_and_map__ebih__ebih_west__mid_save(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $ft_main and ^map__ebih__ebih_west__mid_save
    (helper__ft_main!(ctx, world) && ctx.map__ebih__ebih_west__mid_save())
}
pub fn access_ft_main_and_map__ebih__ebih_west__upper_save(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $ft_main and ^map__ebih__ebih_west__upper_save
    (helper__ft_main!(ctx, world) && ctx.map__ebih__ebih_west__upper_save())
}
pub fn access_ft_main_and_map__giguna__giguna_base__save(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $ft_main and ^map__giguna__giguna_base__save
    (helper__ft_main!(ctx, world) && ctx.map__giguna__giguna_base__save())
}
pub fn access_ft_main_and_map__giguna__giguna_northeast__save(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $ft_main and ^map__giguna__giguna_northeast__save
    (helper__ft_main!(ctx, world) && ctx.map__giguna__giguna_northeast__save())
}
pub fn access_ft_main_and_map__giguna__ruins_west__save(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $ft_main and ^map__giguna__ruins_west__save
    (helper__ft_main!(ctx, world) && ctx.map__giguna__ruins_west__save())
}
pub fn access_ft_main_and_map__irikar__hub__save(ctx: &Context, world: &graph::World) -> bool {
    // $ft_main and ^map__irikar__hub__save
    (helper__ft_main!(ctx, world) && ctx.map__irikar__hub__save())
}
pub fn access_ft_main_and_map__uhrum__annuna_corridor__save(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $ft_main and ^map__uhrum__annuna_corridor__save
    (helper__ft_main!(ctx, world) && ctx.map__uhrum__annuna_corridor__save())
}
pub fn access_ft_main_and_map__uhrum__save_room__save(ctx: &Context, world: &graph::World) -> bool {
    // $ft_main and ^map__uhrum__save_room__save
    (helper__ft_main!(ctx, world) && ctx.map__uhrum__save_room__save())
}
pub fn access_ft_main_and_map__uhrum__west_entrance__save(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $ft_main and ^map__uhrum__west_entrance__save
    (helper__ft_main!(ctx, world) && ctx.map__uhrum__west_entrance__save())
}
pub fn access_giguna__carnelian__door__ex__switch_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_opened
    ctx.giguna__carnelian__ctx__door_opened()
}
pub fn access_giguna__carnelian__door__ex__vault_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_opened
    ctx.giguna__carnelian__ctx__door_opened()
}
pub fn access_giguna__carnelian__lower_susar__caught__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_lower_susar
    !ctx.giguna__carnelian__ctx__lower_susar()
}
pub fn access_giguna__carnelian__lower_susar__ex__rock_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_lower_susar
    ctx.giguna__carnelian__ctx__lower_susar()
}
pub fn access_giguna__carnelian__lower_susar__ex__west_ledge_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_lower_susar and $grab
    (ctx.giguna__carnelian__ctx__lower_susar() && helper__grab!(ctx, world))
}
pub fn access_giguna__carnelian__lower_susar__ex__west_ledge_2__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_lower_susar and $hook
    (ctx.giguna__carnelian__ctx__lower_susar() && helper__hook!(ctx, world))
}
pub fn access_giguna__carnelian__lower_susar__hack__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_lower_susar and $allegiance1
    (!ctx.giguna__carnelian__ctx__lower_susar() && helper__allegiance1!(ctx, world))
}
pub fn access_giguna__carnelian__switch__ex__door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_opened
    ctx.giguna__carnelian__ctx__door_opened()
}
pub fn access_giguna__carnelian__switch__open_door__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $unlock3 and not ^_door_opened
    (helper__unlock3!(ctx, world) && !ctx.giguna__carnelian__ctx__door_opened())
}
pub fn access_giguna__carnelian__upper_susar__caught__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_upper_susar
    !ctx.giguna__carnelian__ctx__upper_susar()
}
pub fn access_giguna__carnelian__upper_susar__ex__east_cliff_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_upper_susar
    ctx.giguna__carnelian__ctx__upper_susar()
}
pub fn access_giguna__carnelian__upper_susar__ex__middle_platforms_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_upper_susar
    ctx.giguna__carnelian__ctx__upper_susar()
}
pub fn access_giguna__carnelian__upper_susar__ex__upper_path_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_upper_susar
    ctx.giguna__carnelian__ctx__upper_susar()
}
pub fn access_giguna__carnelian__upper_susar__hack__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_upper_susar and $allegiance1
    (!ctx.giguna__carnelian__ctx__upper_susar() && helper__allegiance1!(ctx, world))
}
pub fn access_giguna__carnelian__vault__ex__door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_opened
    ctx.giguna__carnelian__ctx__door_opened()
}
pub fn access_giguna__clouds__platform_start__hack_and_get_off_early__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_platform_and_portal and $activate
    (!ctx.giguna__clouds__ctx__platform_and_portal() && helper__activate!(ctx, world))
}
pub fn access_giguna__clouds__platform_start__hack_and_ride_to_portal__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_platform_and_portal and $activate and $attract and Breach_Sight and Remote_Drone
    ((((!ctx.giguna__clouds__ctx__platform_and_portal() && helper__activate!(ctx, world))
        && helper__attract!(ctx, world))
        && ctx.has(Item::Breach_Sight))
        && ctx.has(Item::Remote_Drone))
}
pub fn access_giguna__clouds__platform_start__hack_deploy_ride_to_portal__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_platform_and_portal and $activate and $can_deploy and $attract and Breach_Sight
    ((((!ctx.giguna__clouds__ctx__platform_and_portal() && helper__activate!(ctx, world))
        && helper__can_deploy!(ctx, world))
        && helper__attract!(ctx, world))
        && ctx.has(Item::Breach_Sight))
}
pub fn access_giguna__clouds__platform_stop__ex__flipside_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_platform_and_portal and ^mode == 'drone'
    (ctx.giguna__clouds__ctx__platform_and_portal() && ctx.mode() == enums::Mode::Drone)
}
pub fn access_giguna__east_caverns__arc_ledge__ex__hidden_passage_west_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^mode == 'drone' and Mist_Upgrade and ^_combo_entered
    ((ctx.mode() == enums::Mode::Drone && ctx.has(Item::Mist_Upgrade))
        && ctx.giguna__east_caverns__ctx__combo_entered())
}
pub fn access_giguna__east_caverns__arc_passage__ex__hidden_passage_west_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^mode == 'drone' and ^_combo_entered
    (ctx.mode() == enums::Mode::Drone && ctx.giguna__east_caverns__ctx__combo_entered())
}
pub fn access_giguna__east_caverns__arc_passage__ex__hidden_passage_west_2__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $hook and ^_combo_entered
    (helper__hook!(ctx, world) && ctx.giguna__east_caverns__ctx__combo_entered())
}
pub fn access_giguna__east_caverns__lower_susar__caught__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_lower_susar
    !ctx.giguna__east_caverns__ctx__lower_susar()
}
pub fn access_giguna__east_caverns__lower_susar__ex__east_grass_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_lower_susar
    ctx.giguna__east_caverns__ctx__lower_susar()
}
pub fn access_giguna__east_caverns__lower_susar__ex__under_lower_ledge_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_lower_susar
    ctx.giguna__east_caverns__ctx__lower_susar()
}
pub fn access_giguna__east_caverns__lower_susar__hack__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_lower_susar and $allegiance1
    (!ctx.giguna__east_caverns__ctx__lower_susar() && helper__allegiance1!(ctx, world))
}
pub fn access_giguna__east_caverns__mid_susar__caught__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_mid_susar
    !ctx.giguna__east_caverns__ctx__mid_susar()
}
pub fn access_giguna__east_caverns__mid_susar__ex__middle_ledge_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $grab and ^_mid_susar
    (helper__grab!(ctx, world) && ctx.giguna__east_caverns__ctx__mid_susar())
}
pub fn access_giguna__east_caverns__mid_susar__ex__middle_ledge_2__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $hook and ^_mid_susar
    (helper__hook!(ctx, world) && ctx.giguna__east_caverns__ctx__mid_susar())
}
pub fn access_giguna__east_caverns__mid_susar__ex__middle_rock_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_mid_susar
    ctx.giguna__east_caverns__ctx__mid_susar()
}
pub fn access_giguna__east_caverns__mid_susar__hack__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_mid_susar and $allegiance1
    (!ctx.giguna__east_caverns__ctx__mid_susar() && helper__allegiance1!(ctx, world))
}
pub fn access_giguna__east_caverns__middle_rock__ex__hidden_passage_east_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^mode == 'drone' and ^_combo_entered
    (ctx.mode() == enums::Mode::Drone && ctx.giguna__east_caverns__ctx__combo_entered())
}
pub fn access_giguna__east_caverns__midwest_ledge__ex__hidden_passage_west_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $hover and $hook and ^_combo_entered
    ((helper__hover!(ctx, world) && helper__hook!(ctx, world))
        && ctx.giguna__east_caverns__ctx__combo_entered())
}
pub fn access_giguna__east_caverns__midwest_ledge__ex__hidden_passage_west_2__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^mode == 'drone' and Mist_Upgrade and ^_combo_entered
    ((ctx.mode() == enums::Mode::Drone && ctx.has(Item::Mist_Upgrade))
        && ctx.giguna__east_caverns__ctx__combo_entered())
}
pub fn access_giguna__east_caverns__statues_ledge__ex__hidden_passage_west_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $hover and $hook and ^_combo_entered
    ((helper__hover!(ctx, world) && helper__hook!(ctx, world))
        && ctx.giguna__east_caverns__ctx__combo_entered())
}
pub fn access_giguna__east_caverns__statues_ledge__ex__hidden_passage_west_2__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^mode == 'drone' and Mist_Upgrade and ^_combo_entered
    ((ctx.mode() == enums::Mode::Drone && ctx.has(Item::Mist_Upgrade))
        && ctx.giguna__east_caverns__ctx__combo_entered())
}
pub fn access_giguna__east_caverns__statues_ledge__open_door__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_door_opened and $unlock2 and $range1
    ((!ctx.giguna__east_caverns__ctx__door_opened() && helper__unlock2!(ctx, world))
        && helper__range1!(ctx, world))
}
pub fn access_giguna__east_caverns__switch__ex__door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_opened
    ctx.giguna__east_caverns__ctx__door_opened()
}
pub fn access_giguna__east_caverns__switch__open_door__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_door_opened and $unlock2
    (!ctx.giguna__east_caverns__ctx__door_opened() && helper__unlock2!(ctx, world))
}
pub fn access_giguna__east_caverns__upper_susar__caught__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_upper_susar
    !ctx.giguna__east_caverns__ctx__upper_susar()
}
pub fn access_giguna__east_caverns__upper_susar__ex__middle_ledge_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_upper_susar
    ctx.giguna__east_caverns__ctx__upper_susar()
}
pub fn access_giguna__east_caverns__upper_susar__ex__top_past_susar_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_upper_susar
    ctx.giguna__east_caverns__ctx__upper_susar()
}
pub fn access_giguna__east_caverns__upper_susar__ex__upper_floor_ledge_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_upper_susar
    ctx.giguna__east_caverns__ctx__upper_susar()
}
pub fn access_giguna__east_caverns__upper_susar__ex__upper_platforms_right_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_upper_susar
    ctx.giguna__east_caverns__ctx__upper_susar()
}
pub fn access_giguna__east_caverns__upper_susar_jump_from_east__caught__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_upper_susar
    !ctx.giguna__east_caverns__ctx__upper_susar()
}
pub fn access_giguna__east_caverns__upper_susar_jump_from_east__ex__middle_ledge_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_upper_susar
    ctx.giguna__east_caverns__ctx__upper_susar()
}
pub fn access_giguna__east_caverns__upper_susar_jump_from_east__ex__midwest_ledge_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_upper_susar
    ctx.giguna__east_caverns__ctx__upper_susar()
}
pub fn access_giguna__east_caverns__upper_susar_jump_from_east__hack__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_upper_susar and $allegiance1
    (!ctx.giguna__east_caverns__ctx__upper_susar() && helper__allegiance1!(ctx, world))
}
pub fn access_giguna__east_caverns__upper_susar_mid_jump__ex__top_past_susar_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_upper_susar
    ctx.giguna__east_caverns__ctx__upper_susar()
}
pub fn access_giguna__east_caverns__upper_susar_mid_jump__hack__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_upper_susar and $allegiance1
    (!ctx.giguna__east_caverns__ctx__upper_susar() && helper__allegiance1!(ctx, world))
}
pub fn access_giguna__east_caverns__west_14__enter_combo__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_combo_entered
    !ctx.giguna__east_caverns__ctx__combo_entered()
}
pub fn access_giguna__east_caverns__west_16__ex__door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_opened
    ctx.giguna__east_caverns__ctx__door_opened()
}
pub fn access_giguna__east_caverns__west_16__open_door__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_door_opened and $open and $range2
    ((!ctx.giguna__east_caverns__ctx__door_opened() && helper__open!(ctx, world))
        && helper__range2!(ctx, world))
}
pub fn access_giguna__gateway__door__ex__block_left_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_opened
    ctx.giguna__gateway__ctx__door_opened()
}
pub fn access_giguna__gateway__door__ex__left_platform_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_opened
    ctx.giguna__gateway__ctx__door_opened()
}
pub fn access_giguna__gateway__door__ex__passage_entry_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_opened
    ctx.giguna__gateway__ctx__door_opened()
}
pub fn access_giguna__gateway__passage_entry__ex__door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_opened
    ctx.giguna__gateway__ctx__door_opened()
}
pub fn access_giguna__giguna_base__below_gate__ex__kari_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_open and $grab and $climb
    ((ctx.giguna__giguna_base__ctx__door_open() && helper__grab!(ctx, world))
        && helper__climb!(ctx, world))
}
pub fn access_giguna__giguna_base__below_gate__ex__kari_2__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_open and $hook
    (ctx.giguna__giguna_base__ctx__door_open() && helper__hook!(ctx, world))
}
pub fn access_giguna__giguna_base__below_gate__ex__middle_platform_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_open and $grab and $climb
    ((ctx.giguna__giguna_base__ctx__door_open() && helper__grab!(ctx, world))
        && helper__climb!(ctx, world))
}
pub fn access_giguna__giguna_base__below_gate__ex__middle_platform_2__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_open and $hook
    (ctx.giguna__giguna_base__ctx__door_open() && helper__hook!(ctx, world))
}
pub fn access_giguna__giguna_base__kari__ex__below_gate_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_open
    ctx.giguna__giguna_base__ctx__door_open()
}
pub fn access_giguna__giguna_base__middle_platform__ex__below_gate_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_open
    ctx.giguna__giguna_base__ctx__door_open()
}
pub fn access_giguna__giguna_northeast__right_column__ex__door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_opened
    ctx.giguna__giguna_northeast__ctx__door_opened()
}
pub fn access_giguna__giguna_northeast__right_column__open_door_from_afar__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $unlock3 and Infection_Range_3 and not ^_door_opened
    ((helper__unlock3!(ctx, world) && ctx.has(Item::Infection_Range_3))
        && !ctx.giguna__giguna_northeast__ctx__door_opened())
}
pub fn access_giguna__giguna_northeast__switch__ex__door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_opened and ($grab or $hook)
    (ctx.giguna__giguna_northeast__ctx__door_opened()
        && (helper__grab!(ctx, world) || helper__hook!(ctx, world)))
}
pub fn access_giguna__giguna_northeast__switch__open_door__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $unlock3 and not ^_door_opened
    (helper__unlock3!(ctx, world) && !ctx.giguna__giguna_northeast__ctx__door_opened())
}
pub fn access_giguna__giguna_northeast__vault__ex__door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_opened
    ctx.giguna__giguna_northeast__ctx__door_opened()
}
pub fn access_giguna__giguna_northeast__vault__ex__door_2__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_opened and $hook
    (ctx.giguna__giguna_northeast__ctx__door_opened() && helper__hook!(ctx, world))
}
pub fn access_giguna__ruins_top__east_7__ex__east_door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_doors_open
    ctx.giguna__ruins_top__ctx__doors_open()
}
pub fn access_giguna__ruins_top__east_door__ex__east_7_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_doors_open
    ctx.giguna__ruins_top__ctx__doors_open()
}
pub fn access_giguna__ruins_top__east_door__ex__portal_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_doors_open
    ctx.giguna__ruins_top__ctx__doors_open()
}
pub fn access_giguna__ruins_top__entryway__ex__west_door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_doors_open
    ctx.giguna__ruins_top__ctx__doors_open()
}
pub fn access_giguna__ruins_top__portal__ex__east_door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_doors_open
    ctx.giguna__ruins_top__ctx__doors_open()
}
pub fn access_giguna__ruins_top__west_7__ex__west_door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_doors_open
    ctx.giguna__ruins_top__ctx__doors_open()
}
pub fn access_giguna__ruins_top__west_door__ex__entryway_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_doors_open
    ctx.giguna__ruins_top__ctx__doors_open()
}
pub fn access_giguna__ruins_top__west_door__ex__west_7_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_doors_open
    ctx.giguna__ruins_top__ctx__doors_open()
}
pub fn access_giguna__ruins_west__lower_ledge__destroy_kishib__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_kishib_handled and $shockwave
    (!ctx.giguna__ruins_west__ctx__kishib_handled() && helper__shockwave!(ctx, world))
}
pub fn access_giguna__ruins_west__lower_ledge__ex__upper_ledge_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $grab and ^_kishib_handled
    (helper__grab!(ctx, world) && ctx.giguna__ruins_west__ctx__kishib_handled())
}
pub fn access_giguna__ruins_west__lower_ledge__hack_kishib__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_kishib_handled and $allegiance1
    (!ctx.giguna__ruins_west__ctx__kishib_handled() && helper__allegiance1!(ctx, world))
}
pub fn access_giguna__west_caverns__east_susar__caught__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_east_susar
    !ctx.giguna__west_caverns__ctx__east_susar()
}
pub fn access_giguna__west_caverns__east_susar__ex__east_12_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_east_susar
    ctx.giguna__west_caverns__ctx__east_susar()
}
pub fn access_giguna__west_caverns__east_susar__ex__tunnel_fork_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_east_susar
    ctx.giguna__west_caverns__ctx__east_susar()
}
pub fn access_giguna__west_caverns__east_susar__hack__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_east_susar and $allegiance1
    (!ctx.giguna__west_caverns__ctx__east_susar() && helper__allegiance1!(ctx, world))
}
pub fn access_giguna_boulder(ctx: &Context, world: &graph::World) -> bool {
    // Giguna_Boulder
    ctx.has(Item::Giguna_Boulder)
}
pub fn access_giguna_breach__sw_save__side_door__ex__west_11_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_opened
    ctx.giguna_breach__sw_save__ctx__door_opened()
}
pub fn access_giguna_breach__sw_save__west_11__ex__side_door_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_door_opened
    ctx.giguna_breach__sw_save__ctx__door_opened()
}
pub fn access_giguna_breach__sw_save__west_11__open_door__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_door_opened
    !ctx.giguna_breach__sw_save__ctx__door_opened()
}
pub fn access_giguna_dual_path_switch(ctx: &Context, world: &graph::World) -> bool {
    // Giguna_Dual_Path_Switch
    ctx.has(Item::Giguna_Dual_Path_Switch)
}
pub fn access_giguna_dual_path_switch_and___grab_or_climb(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // Giguna_Dual_Path_Switch and ($grab or $climb)
    (ctx.has(Item::Giguna_Dual_Path_Switch)
        && (helper__grab!(ctx, world) || helper__climb!(ctx, world)))
}
pub fn access_giguna_dual_path_switch_and_climb(ctx: &Context, world: &graph::World) -> bool {
    // Giguna_Dual_Path_Switch and $climb
    (ctx.has(Item::Giguna_Dual_Path_Switch) && helper__climb!(ctx, world))
}
pub fn access_giguna_dual_path_switch_and_hook(ctx: &Context, world: &graph::World) -> bool {
    // Giguna_Dual_Path_Switch and $hook
    (ctx.has(Item::Giguna_Dual_Path_Switch) && helper__hook!(ctx, world))
}
pub fn access_giguna_gateway_block(ctx: &Context, world: &graph::World) -> bool {
    // Giguna_Gateway_Block
    ctx.has(Item::Giguna_Gateway_Block)
}
pub fn access_giguna_gateway_gate(ctx: &Context, world: &graph::World) -> bool {
    // Giguna_Gateway_Gate
    ctx.has(Item::Giguna_Gateway_Gate)
}
pub fn access_giguna_gubi(ctx: &Context, world: &graph::World) -> bool {
    // Giguna_Gubi
    ctx.has(Item::Giguna_Gubi)
}
pub fn access_giguna_northeast_gate(ctx: &Context, world: &graph::World) -> bool {
    // Giguna_Northeast_Gate
    ctx.has(Item::Giguna_Northeast_Gate)
}
pub fn access_grab(ctx: &Context, world: &graph::World) -> bool {
    // $grab
    helper__grab!(ctx, world)
}
pub fn access_grab_and_annuna_east_bridge_gate(ctx: &Context, world: &graph::World) -> bool {
    // $grab and Annuna_East_Bridge_Gate
    (helper__grab!(ctx, world) && ctx.has(Item::Annuna_East_Bridge_Gate))
}
pub fn access_grab_and_anuman(ctx: &Context, world: &graph::World) -> bool {
    // $grab and Anuman
    (helper__grab!(ctx, world) && ctx.has(Item::Anuman))
}
pub fn access_grab_and_can_deploy(ctx: &Context, world: &graph::World) -> bool {
    // $grab and $can_deploy
    (helper__grab!(ctx, world) && helper__can_deploy!(ctx, world))
}
pub fn access_grab_and_climb(ctx: &Context, world: &graph::World) -> bool {
    // $grab and $climb
    (helper__grab!(ctx, world) && helper__climb!(ctx, world))
}
pub fn access_grab_and_giguna_gateway_block(ctx: &Context, world: &graph::World) -> bool {
    // $grab and Giguna_Gateway_Block
    (helper__grab!(ctx, world) && ctx.has(Item::Giguna_Gateway_Block))
}
pub fn access_grab_and_switch_40_12(ctx: &Context, world: &graph::World) -> bool {
    // $grab and Switch_40_12
    (helper__grab!(ctx, world) && ctx.has(Item::Switch_40_12))
}
pub fn access_grab_or_climb(ctx: &Context, world: &graph::World) -> bool {
    // $grab or $climb
    (helper__grab!(ctx, world) || helper__climb!(ctx, world))
}
pub fn access_grab_or_climb_or_hook(ctx: &Context, world: &graph::World) -> bool {
    // $grab or $climb or $hook
    ((helper__grab!(ctx, world) || helper__climb!(ctx, world)) || helper__hook!(ctx, world))
}
pub fn access_grab_or_hook(ctx: &Context, world: &graph::World) -> bool {
    // $grab or $hook
    (helper__grab!(ctx, world) || helper__hook!(ctx, world))
}
pub fn access_grab_or_underwater_movement(ctx: &Context, world: &graph::World) -> bool {
    // $grab or Underwater_Movement
    (helper__grab!(ctx, world) || ctx.has(Item::Underwater_Movement))
}
pub fn access_health_upgrade(ctx: &Context, world: &graph::World) -> bool {
    // Health_Upgrade
    ctx.has(Item::Health_Upgrade)
}
pub fn access_health_upgrade_2(ctx: &Context, world: &graph::World) -> bool {
    // Health_Upgrade_2
    ctx.has(Item::Health_Upgrade_2)
}
pub fn access_health_upgrade_3(ctx: &Context, world: &graph::World) -> bool {
    // Health_Upgrade_3
    ctx.has(Item::Health_Upgrade_3)
}
pub fn access_health_upgrade_4(ctx: &Context, world: &graph::World) -> bool {
    // Health_Upgrade_4
    ctx.has(Item::Health_Upgrade_4)
}
pub fn access_hook(ctx: &Context, world: &graph::World) -> bool {
    // $hook
    helper__hook!(ctx, world)
}
pub fn access_hook_and_annuna_east_bridge_gate(ctx: &Context, world: &graph::World) -> bool {
    // $hook and Annuna_East_Bridge_Gate
    (helper__hook!(ctx, world) && ctx.has(Item::Annuna_East_Bridge_Gate))
}
pub fn access_hook_and_giguna_gateway_block(ctx: &Context, world: &graph::World) -> bool {
    // $hook and Giguna_Gateway_Block
    (helper__hook!(ctx, world) && ctx.has(Item::Giguna_Gateway_Block))
}
pub fn access_hook_and_hover(ctx: &Context, world: &graph::World) -> bool {
    // $hook and $hover
    (helper__hook!(ctx, world) && helper__hover!(ctx, world))
}
pub fn access_hook_and_hover_and_underwater_movement(ctx: &Context, world: &graph::World) -> bool {
    // $hook and $hover and Underwater_Movement
    ((helper__hook!(ctx, world) && helper__hover!(ctx, world))
        && ctx.has(Item::Underwater_Movement))
}
pub fn access_hook_and_not_ebih_waterfall_block_left(ctx: &Context, world: &graph::World) -> bool {
    // $hook and not Ebih_Waterfall_Block_Left
    (helper__hook!(ctx, world) && !ctx.has(Item::Ebih_Waterfall_Block_Left))
}
pub fn access_hook_and_not_ebih_waterfall_block_right(ctx: &Context, world: &graph::World) -> bool {
    // $hook and not Ebih_Waterfall_Block_Right
    (helper__hook!(ctx, world) && !ctx.has(Item::Ebih_Waterfall_Block_Right))
}
pub fn access_hook_and_underwater_movement(ctx: &Context, world: &graph::World) -> bool {
    // $hook and Underwater_Movement
    (helper__hook!(ctx, world) && ctx.has(Item::Underwater_Movement))
}
pub fn access_hook_or_hover(ctx: &Context, world: &graph::World) -> bool {
    // $hook or $hover
    (helper__hook!(ctx, world) || helper__hover!(ctx, world))
}
pub fn access_hover(ctx: &Context, world: &graph::World) -> bool {
    // $hover
    helper__hover!(ctx, world)
}
pub fn access_hover_and_anuman(ctx: &Context, world: &graph::World) -> bool {
    // $hover and Anuman
    (helper__hover!(ctx, world) && ctx.has(Item::Anuman))
}
pub fn access_hover_and_hook(ctx: &Context, world: &graph::World) -> bool {
    // $hover and $hook
    (helper__hover!(ctx, world) && helper__hook!(ctx, world))
}
pub fn access_hover_and_hook_and_mist2(ctx: &Context, world: &graph::World) -> bool {
    // $hover and $hook and $mist2
    ((helper__hover!(ctx, world) && helper__hook!(ctx, world)) && helper__mist2!(ctx, world))
}
pub fn access_hover_and_mist_upgrade(ctx: &Context, world: &graph::World) -> bool {
    // $hover and Mist_Upgrade
    (helper__hover!(ctx, world) && ctx.has(Item::Mist_Upgrade))
}
pub fn access_hover_or_hook(ctx: &Context, world: &graph::World) -> bool {
    // $hover or $hook
    (helper__hover!(ctx, world) || helper__hook!(ctx, world))
}
pub fn access_hover_or_mist2(ctx: &Context, world: &graph::World) -> bool {
    // $hover or $mist2
    (helper__hover!(ctx, world) || helper__mist2!(ctx, world))
}
pub fn access_infect(ctx: &Context, world: &graph::World) -> bool {
    // Infect
    ctx.has(Item::Infect)
}
pub fn access_infect_and_anuman(ctx: &Context, world: &graph::World) -> bool {
    // Infect and Anuman
    (ctx.has(Item::Infect) && ctx.has(Item::Anuman))
}
pub fn access_infect_and_not_anuman(ctx: &Context, world: &graph::World) -> bool {
    // Infect and not Anuman
    (ctx.has(Item::Infect) && !ctx.has(Item::Anuman))
}
pub fn access_infect_l1(ctx: &Context, world: &graph::World) -> bool {
    // Infect_L1
    ctx.has(Item::Infect_L1)
}
pub fn access_infect_l2(ctx: &Context, world: &graph::World) -> bool {
    // Infect_L2
    ctx.has(Item::Infect_L2)
}
pub fn access_infection_range(ctx: &Context, world: &graph::World) -> bool {
    // Infection_Range
    ctx.has(Item::Infection_Range)
}
pub fn access_infection_range_2(ctx: &Context, world: &graph::World) -> bool {
    // Infection_Range_2
    ctx.has(Item::Infection_Range_2)
}
pub fn access_infection_speed(ctx: &Context, world: &graph::World) -> bool {
    // Infection_Speed
    ctx.has(Item::Infection_Speed)
}
pub fn access_infinite_climb_and_annuna_east_bridge_gate(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $infinite_climb and Annuna_East_Bridge_Gate
    (helper__infinite_climb!(ctx, world) && ctx.has(Item::Annuna_East_Bridge_Gate))
}
pub fn access_infinite_climb_and_not_annuna_east_bridge_gate(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $infinite_climb and not Annuna_East_Bridge_Gate
    (helper__infinite_climb!(ctx, world) && !ctx.has(Item::Annuna_East_Bridge_Gate))
}
pub fn access_infinite_climb_and_slingshot_hook(ctx: &Context, world: &graph::World) -> bool {
    // $infinite_climb and Slingshot_Hook
    (helper__infinite_climb!(ctx, world) && ctx.has(Item::Slingshot_Hook))
}
pub fn access_infinite_climb_and_slingshot_hook_and_not_annuna_east_bridge_gate(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // $infinite_climb and Slingshot_Hook and not Annuna_East_Bridge_Gate
    ((helper__infinite_climb!(ctx, world) && ctx.has(Item::Slingshot_Hook))
        && !ctx.has(Item::Annuna_East_Bridge_Gate))
}
pub fn access_irikar__basement_portal__ledge__ex__moving_platform_start_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_platform_moved
    !ctx.irikar__basement_portal__ctx__platform_moved()
}
pub fn access_irikar__basement_portal__middle_platform__ex__moving_platform_end_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^_platform_moved and $hook
    (ctx.irikar__basement_portal__ctx__platform_moved() && helper__hook!(ctx, world))
}
pub fn access_irikar__basement_portal__portal_stand__ex__moving_platform_start_1__req(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not ^_platform_moved
    !ctx.irikar__basement_portal__ctx__platform_moved()
}
pub fn access_irikar_gudam(ctx: &Context, world: &graph::World) -> bool {
    // Irikar_Gudam
    ctx.has(Item::Irikar_Gudam)
}
pub fn access_irikar_royal_storage_wall(ctx: &Context, world: &graph::World) -> bool {
    // Irikar_Royal_Storage_Wall
    ctx.has(Item::Irikar_Royal_Storage_Wall)
}
pub fn access_melee_damage(ctx: &Context, world: &graph::World) -> bool {
    // Melee_Damage
    ctx.has(Item::Melee_Damage)
}
pub fn access_melee_damage_2(ctx: &Context, world: &graph::World) -> bool {
    // Melee_Damage_2
    ctx.has(Item::Melee_Damage_2)
}
pub fn access_melee_speed(ctx: &Context, world: &graph::World) -> bool {
    // Melee_Speed
    ctx.has(Item::Melee_Speed)
}
pub fn access_melee_speed_2(ctx: &Context, world: &graph::World) -> bool {
    // Melee_Speed_2
    ctx.has(Item::Melee_Speed_2)
}
pub fn access_mist2(ctx: &Context, world: &graph::World) -> bool {
    // $mist2
    helper__mist2!(ctx, world)
}
pub fn access_mist_upgrade(ctx: &Context, world: &graph::World) -> bool {
    // Mist_Upgrade
    ctx.has(Item::Mist_Upgrade)
}
pub fn access_mode_eq_drone(ctx: &Context, world: &graph::World) -> bool {
    // ^mode == 'drone'
    ctx.mode() == enums::Mode::Drone
}
pub fn access_mode_eq_drone_and_breach_sight(ctx: &Context, world: &graph::World) -> bool {
    // ^mode == 'drone' and Breach_Sight
    (ctx.mode() == enums::Mode::Drone && ctx.has(Item::Breach_Sight))
}
pub fn access_mode_eq_drone_and_ebih_wasteland_passage_h(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^mode == 'drone' and Ebih_Wasteland_Passage_H
    (ctx.mode() == enums::Mode::Drone && ctx.has(Item::Ebih_Wasteland_Passage_H))
}
pub fn access_mode_eq_drone_and_ebih_waterfall_block_left(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^mode == 'drone' and Ebih_Waterfall_Block_Left
    (ctx.mode() == enums::Mode::Drone && ctx.has(Item::Ebih_Waterfall_Block_Left))
}
pub fn access_mode_eq_drone_and_ebih_waterfall_block_right(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^mode == 'drone' and Ebih_Waterfall_Block_Right
    (ctx.mode() == enums::Mode::Drone && ctx.has(Item::Ebih_Waterfall_Block_Right))
}
pub fn access_mode_eq_drone_and_giguna_dual_path_wall(ctx: &Context, world: &graph::World) -> bool {
    // ^mode == 'drone' and Giguna_Dual_Path_Wall
    (ctx.mode() == enums::Mode::Drone && ctx.has(Item::Giguna_Dual_Path_Wall))
}
pub fn access_mode_eq_drone_and_mist2(ctx: &Context, world: &graph::World) -> bool {
    // ^mode == 'drone' and $mist2
    (ctx.mode() == enums::Mode::Drone && helper__mist2!(ctx, world))
}
pub fn access_mode_eq_drone_and_mist_upgrade(ctx: &Context, world: &graph::World) -> bool {
    // ^mode == 'drone' and Mist_Upgrade
    (ctx.mode() == enums::Mode::Drone && ctx.has(Item::Mist_Upgrade))
}
pub fn access_mode_eq_drone_and_sniper_valley_rock_2(ctx: &Context, world: &graph::World) -> bool {
    // ^mode == 'drone' and Sniper_Valley_Rock_2
    (ctx.mode() == enums::Mode::Drone && ctx.has(Item::Sniper_Valley_Rock_2))
}
pub fn access_mode_ne_drone(ctx: &Context, world: &graph::World) -> bool {
    // ^mode != 'drone'
    ctx.mode() != enums::Mode::Drone
}
pub fn access_more_refills(ctx: &Context, world: &graph::World) -> bool {
    // $more_refills
    helper__more_refills!(ctx, world)
}
pub fn access_nanite_mist(ctx: &Context, world: &graph::World) -> bool {
    // Nanite_Mist
    ctx.has(Item::Nanite_Mist)
}
pub fn access_nanite_mist_and_mist_upgrade(ctx: &Context, world: &graph::World) -> bool {
    // Nanite_Mist and Mist_Upgrade
    (ctx.has(Item::Nanite_Mist) && ctx.has(Item::Mist_Upgrade))
}
pub fn access_nano_points(ctx: &Context, world: &graph::World) -> bool {
    // Nano_Points
    ctx.has(Item::Nano_Points)
}
pub fn access_nano_points_2(ctx: &Context, world: &graph::World) -> bool {
    // Nano_Points_2
    ctx.has(Item::Nano_Points_2)
}
pub fn access_not_amashilama(ctx: &Context, world: &graph::World) -> bool {
    // NOT Amashilama
    !ctx.has(Item::Amashilama)
}
pub fn access_not_ebih_interchange_block(ctx: &Context, world: &graph::World) -> bool {
    // not Ebih_Interchange_Block
    !ctx.has(Item::Ebih_Interchange_Block)
}
pub fn access_not_ebih_waterfall_wall_and_nanite_mist_and_mist_upgrade(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not Ebih_Waterfall_Wall and Nanite_Mist and Mist_Upgrade
    ((!ctx.has(Item::Ebih_Waterfall_Wall) && ctx.has(Item::Nanite_Mist))
        && ctx.has(Item::Mist_Upgrade))
}
pub fn access_not_irikar_royal_storage_wall_and_mist_upgrade(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not Irikar_Royal_Storage_Wall and Mist_Upgrade
    (!ctx.has(Item::Irikar_Royal_Storage_Wall) && ctx.has(Item::Mist_Upgrade))
}
pub fn access_not_irikar_royal_storage_wall_and_shockwave(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // not Irikar_Royal_Storage_Wall and $shockwave
    (!ctx.has(Item::Irikar_Royal_Storage_Wall) && helper__shockwave!(ctx, world))
}
pub fn access_not_separation_or_defeat_indra(ctx: &Context, world: &graph::World) -> bool {
    // NOT Separation or Defeat_Indra
    (!ctx.has(Item::Separation) || ctx.has(Item::Defeat_Indra))
}
pub fn access_not_slingshot_hook(ctx: &Context, world: &graph::World) -> bool {
    // not Slingshot_Hook
    !ctx.has(Item::Slingshot_Hook)
}
pub fn access_not_within_menu_and_anuman_and_mode_ne_drone(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // NOT WITHIN `Menu` and Anuman and ^mode != 'drone'
    ((!(match get_region(ctx.position()) {
        RegionId::Menu => true,
        _ => false,
    }) && ctx.has(Item::Anuman))
        && ctx.mode() != enums::Mode::Drone)
}
pub fn access_not_within_menu_and_can_deploy(ctx: &Context, world: &graph::World) -> bool {
    // NOT WITHIN `Menu` and $can_deploy
    (!(match get_region(ctx.position()) {
        RegionId::Menu => true,
        _ => false,
    }) && helper__can_deploy!(ctx, world))
}
pub fn access_not_within_menu_and_flasks_gt_0(ctx: &Context, world: &graph::World) -> bool {
    // NOT WITHIN `Menu` and ^flasks > 0
    (!(match get_region(ctx.position()) {
        RegionId::Menu => true,
        _ => false,
    }) && Into::<i32>::into(ctx.flasks()) > 0.into())
}
pub fn access_not_within_menu_and_realm_ne_breach_and_anuman_and_mode_eq_drone(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // NOT WITHIN `Menu` and ^realm != 'breach' and Anuman and ^mode == 'drone'
    (((!(match get_region(ctx.position()) {
        RegionId::Menu => true,
        _ => false,
    }) && data::realm(ctx.position()) != enums::Realm::Breach)
        && ctx.has(Item::Anuman))
        && ctx.mode() == enums::Mode::Drone)
}
pub fn access_not_within_menu_and_realm_ne_breach_and_can_recall(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // NOT WITHIN `Menu` and ^realm != 'breach' and $can_recall
    ((!(match get_region(ctx.position()) {
        RegionId::Menu => true,
        _ => false,
    }) && data::realm(ctx.position()) != enums::Realm::Breach)
        && helper__can_recall!(ctx, world))
}
pub fn access_offset(ctx: &Context, world: &graph::World) -> bool {
    // $offset
    helper__offset!(ctx, world)
}
pub fn access_open(ctx: &Context, world: &graph::World) -> bool {
    // $open
    helper__open!(ctx, world)
}
pub fn access_open_and_range1(ctx: &Context, world: &graph::World) -> bool {
    // $open and $range1
    (helper__open!(ctx, world) && helper__range1!(ctx, world))
}
pub fn access_open_and_range2(ctx: &Context, world: &graph::World) -> bool {
    // $open and $range2
    (helper__open!(ctx, world) && helper__range2!(ctx, world))
}
pub fn access_open_and_range3(ctx: &Context, world: &graph::World) -> bool {
    // $open and $range3
    (helper__open!(ctx, world) && helper__range3!(ctx, world))
}
pub fn access_overheat(ctx: &Context, world: &graph::World) -> bool {
    // $overheat
    helper__overheat!(ctx, world)
}
pub fn access_overheat_and_can_damage(ctx: &Context, world: &graph::World) -> bool {
    // $overheat and $can_damage
    (helper__overheat!(ctx, world) && helper__can_damage!(ctx, world))
}
pub fn access_platform_and_hook_and_hover(ctx: &Context, world: &graph::World) -> bool {
    // $platform and $hook and $hover
    ((helper__platform!(ctx, world) && helper__hook!(ctx, world)) && helper__hover!(ctx, world))
}
pub fn access_ranged_damage(ctx: &Context, world: &graph::World) -> bool {
    // Ranged_Damage
    ctx.has(Item::Ranged_Damage)
}
pub fn access_ranged_damage_2(ctx: &Context, world: &graph::World) -> bool {
    // Ranged_Damage_2
    ctx.has(Item::Ranged_Damage_2)
}
pub fn access_ranged_speed(ctx: &Context, world: &graph::World) -> bool {
    // Ranged_Speed
    ctx.has(Item::Ranged_Speed)
}
pub fn access_ranged_speed_2(ctx: &Context, world: &graph::World) -> bool {
    // Ranged_Speed_2
    ctx.has(Item::Ranged_Speed_2)
}
pub fn access_realm_eq_breach(ctx: &Context, world: &graph::World) -> bool {
    // ^realm == 'breach'
    data::realm(ctx.position()) == enums::Realm::Breach
}
pub fn access_realm_eq_breach_and_exit_breach_and___flipside_not_within_default(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // ^realm == 'breach' and Exit_Breach and (^flipside NOT WITHIN $default)
    ((data::realm(ctx.position()) == enums::Realm::Breach && ctx.has(Item::Exit_Breach))
        && (data::flipside(ctx.position()) != Default::default()))
}
pub fn access_realm_eq_main_and_amashilama(ctx: &Context, world: &graph::World) -> bool {
    // ^realm == 'main' and Amashilama
    (data::realm(ctx.position()) == enums::Realm::Main && ctx.has(Item::Amashilama))
}
pub fn access_remote_drone(ctx: &Context, world: &graph::World) -> bool {
    // Remote_Drone
    ctx.has(Item::Remote_Drone)
}
pub fn access_separation(ctx: &Context, world: &graph::World) -> bool {
    // Separation
    ctx.has(Item::Separation)
}
pub fn access_separation_and_not_defeat_indra_and_mist2(
    ctx: &Context,
    world: &graph::World,
) -> bool {
    // Separation and NOT Defeat_Indra and $mist2
    ((ctx.has(Item::Separation) && !ctx.has(Item::Defeat_Indra)) && helper__mist2!(ctx, world))
}
pub fn access_shockwave(ctx: &Context, world: &graph::World) -> bool {
    // $shockwave
    helper__shockwave!(ctx, world)
}
pub fn access_shockwave_and_not_defeat_mus_a_m20(ctx: &Context, world: &graph::World) -> bool {
    // $shockwave and not Defeat_MUS_A_M20
    (helper__shockwave!(ctx, world) && !ctx.has(Item::Defeat_MUS_A_M20))
}
pub fn access_sniper_valley_rock_1(ctx: &Context, world: &graph::World) -> bool {
    // Sniper_Valley_Rock_1
    ctx.has(Item::Sniper_Valley_Rock_1)
}
pub fn access_spin(ctx: &Context, world: &graph::World) -> bool {
    // $spin
    helper__spin!(ctx, world)
}
pub fn access_station_power(ctx: &Context, world: &graph::World) -> bool {
    // Station_Power
    ctx.has(Item::Station_Power)
}
pub fn access_switch_36_11(ctx: &Context, world: &graph::World) -> bool {
    // Switch_36_11
    ctx.has(Item::Switch_36_11)
}
pub fn access_switch_40_12(ctx: &Context, world: &graph::World) -> bool {
    // Switch_40_12
    ctx.has(Item::Switch_40_12)
}
pub fn access_uhrum_annuna_corridor_block(ctx: &Context, world: &graph::World) -> bool {
    // Uhrum_Annuna_Corridor_Block
    ctx.has(Item::Uhrum_Annuna_Corridor_Block)
}
pub fn access_uhrum_waterfall_wall(ctx: &Context, world: &graph::World) -> bool {
    // Uhrum_Waterfall_Wall
    ctx.has(Item::Uhrum_Waterfall_Wall)
}
pub fn access_uhrum_waterfalls_block(ctx: &Context, world: &graph::World) -> bool {
    // Uhrum_Waterfalls_Block
    ctx.has(Item::Uhrum_Waterfalls_Block)
}
pub fn access_uhrum_waterfalls_block_and_grab(ctx: &Context, world: &graph::World) -> bool {
    // Uhrum_Waterfalls_Block and $grab
    (ctx.has(Item::Uhrum_Waterfalls_Block) && helper__grab!(ctx, world))
}
pub fn access_uhrum_waterfalls_block_and_hook(ctx: &Context, world: &graph::World) -> bool {
    // Uhrum_Waterfalls_Block and $hook
    (ctx.has(Item::Uhrum_Waterfalls_Block) && helper__hook!(ctx, world))
}
pub fn access_uhrum_west_entrance_gate(ctx: &Context, world: &graph::World) -> bool {
    // Uhrum_West_Entrance_Gate
    ctx.has(Item::Uhrum_West_Entrance_Gate)
}
pub fn access_uhrum_west_entrance_gate_and_hover(ctx: &Context, world: &graph::World) -> bool {
    // Uhrum_West_Entrance_Gate and $hover
    (ctx.has(Item::Uhrum_West_Entrance_Gate) && helper__hover!(ctx, world))
}
pub fn access_uhrum_west_entrance_lower_wall(ctx: &Context, world: &graph::World) -> bool {
    // Uhrum_West_Entrance_Lower_Wall
    ctx.has(Item::Uhrum_West_Entrance_Lower_Wall)
}
pub fn access_uhrum_west_entrance_upper_wall(ctx: &Context, world: &graph::World) -> bool {
    // Uhrum_West_Entrance_Upper_Wall
    ctx.has(Item::Uhrum_West_Entrance_Upper_Wall)
}
pub fn access_underwater_movement(ctx: &Context, world: &graph::World) -> bool {
    // Underwater_Movement
    ctx.has(Item::Underwater_Movement)
}
pub fn access_underwater_movement_and___grab_or_climb(ctx: &Context, world: &graph::World) -> bool {
    // Underwater_Movement and ($grab or $climb)
    (ctx.has(Item::Underwater_Movement)
        && (helper__grab!(ctx, world) || helper__climb!(ctx, world)))
}
pub fn access_underwater_movement_and_grab(ctx: &Context, world: &graph::World) -> bool {
    // Underwater_Movement and $grab
    (ctx.has(Item::Underwater_Movement) && helper__grab!(ctx, world))
}
pub fn access_underwater_movement_and_hook(ctx: &Context, world: &graph::World) -> bool {
    // Underwater_Movement and $hook
    (ctx.has(Item::Underwater_Movement) && helper__hook!(ctx, world))
}
pub fn access_within_antarctica(ctx: &Context, world: &graph::World) -> bool {
    // WITHIN `Antarctica`
    (match get_region(ctx.position()) {
        RegionId::Antarctica => true,
        _ => false,
    })
}
pub fn access_within_menu(ctx: &Context, world: &graph::World) -> bool {
    // WITHIN `Menu`
    (match get_region(ctx.position()) {
        RegionId::Menu => true,
        _ => false,
    })
}
pub fn action_amagi__main_area__carving__key_combo__do(ctx: &mut Context, world: &graph::World) {
    // ^_combo = true
    ctx.set_amagi__main_area__ctx__combo(true);
}
pub fn action_annuna__east_bridge__tower_east_ledge__enter_combo__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_combo = true
    ctx.set_annuna__east_bridge__ctx__combo(true);
}
pub fn action_annuna__east_bridge__tower_secret__enter_combo__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_combo = true
    ctx.set_annuna__east_bridge__ctx__combo(true);
}
pub fn action_annuna__east_bridge__tower_west_ledge__enter_combo__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_combo = true
    ctx.set_annuna__east_bridge__ctx__combo(true);
}
pub fn action_breach_portal_save_update(ctx: &mut Context, world: &graph::World) {
    // $breach_portal_save_update
    helper__breach_portal_save_update!(ctx, world);
}
pub fn action_clear_breach_save(ctx: &mut Context, world: &graph::World) {
    // $clear_breach_save
    helper__clear_breach_save!(ctx, world);
}
pub fn action_collect__irikar_royal_storage_wall_collect__flask_visit__irikar_gt_hub_gt_royal_storage_in_wall_gt_item(
    ctx: &mut Context,
    world: &graph::World,
) {
    // $collect(Irikar_Royal_Storage_Wall); $collect(Flask); $visit(`Irikar > Hub > Royal Storage in Wall > Item`);
    ctx.collect(Item::Irikar_Royal_Storage_Wall, world);
    ctx.collect(Item::Flask, world);
    ctx.visit(LocationId::Irikar__Hub__Royal_Storage_in_Wall__Item);
}
pub fn action_deploy_drone(ctx: &mut Context, world: &graph::World) {
    // $deploy_drone
    helper__deploy_drone!(ctx, world);
}
pub fn action_deploy_drone_and_move__annuna_gt_east_bridge_gt_center_corridor(
    ctx: &mut Context,
    world: &graph::World,
) {
    // $deploy_drone_and_move(`Annuna > East Bridge > Center Corridor`)
    helper__deploy_drone_and_move!(ctx, world, SpotId::Annuna__East_Bridge__Center_Corridor);
}
pub fn action_deploy_drone_and_move__annuna_gt_east_bridge_gt_tower_base_east(
    ctx: &mut Context,
    world: &graph::World,
) {
    // $deploy_drone_and_move(`Annuna > East Bridge > Tower Base East`)
    helper__deploy_drone_and_move!(ctx, world, SpotId::Annuna__East_Bridge__Tower_Base_East);
}
pub fn action_deploy_drone_and_move__ebih_gt_drone_room_gt_tree(
    ctx: &mut Context,
    world: &graph::World,
) {
    // $deploy_drone_and_move(`Ebih > Drone Room > Tree`)
    helper__deploy_drone_and_move!(ctx, world, SpotId::Ebih__Drone_Room__Tree);
}
pub fn action_deploy_drone_and_move__ebih_gt_ebih_west_gt_alcove_entrance(
    ctx: &mut Context,
    world: &graph::World,
) {
    // $deploy_drone_and_move(`Ebih > Ebih West > Alcove Entrance`)
    helper__deploy_drone_and_move!(ctx, world, SpotId::Ebih__Ebih_West__Alcove_Entrance);
}
pub fn action_deploy_drone_and_move__giguna_gt_giguna_base_gt_kari(
    ctx: &mut Context,
    world: &graph::World,
) {
    // $deploy_drone_and_move(`Giguna > Giguna Base > Kari`)
    helper__deploy_drone_and_move!(ctx, world, SpotId::Giguna__Giguna_Base__Kari);
}
pub fn action_deploy_drone_and_move__giguna_gt_ruins_top_gt_west_7(
    ctx: &mut Context,
    world: &graph::World,
) {
    // $deploy_drone_and_move(`Giguna > Ruins Top > West 7`)
    helper__deploy_drone_and_move!(ctx, world, SpotId::Giguna__Ruins_Top__West_7);
}
pub fn action_deploy_drone_and_move__giguna_gt_wasteland_gt_middle_path(
    ctx: &mut Context,
    world: &graph::World,
) {
    // $deploy_drone_and_move(`Giguna > Wasteland > Middle Path`)
    helper__deploy_drone_and_move!(ctx, world, SpotId::Giguna__Wasteland__Middle_Path);
}
pub fn action_ebih__base_camp__left_platform__move_left_platform__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_left_platform_moved = true
    ctx.set_ebih__base_camp__ctx__left_platform_moved(true);
}
pub fn action_ebih__base_camp__left_platform_moved__reset_left_platform__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_left_platform_moved = false
    ctx.set_ebih__base_camp__ctx__left_platform_moved(false);
}
pub fn action_ebih__drone_room__pit_left__activate_lift__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_platform_moved = false
    ctx.set_ebih__drone_room__ctx__platform_moved(false);
}
pub fn action_ebih__drone_room__pit_left__activate_lift_but_get_off_early__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_platform_moved = false
    ctx.set_ebih__drone_room__ctx__platform_moved(false);
}
pub fn action_ebih__drone_room__portal_exit__activate_platform__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_platform_moved = true
    ctx.set_ebih__drone_room__ctx__platform_moved(true);
}
pub fn action_ebih__ebih_east__dispenser__activate_lift__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_platform2_moved = false
    ctx.set_ebih__ebih_east__ctx__platform2_moved(false);
}
pub fn action_ebih__ebih_east__lower_moving_platform__activate_lift__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_platform2_moved = true
    ctx.set_ebih__ebih_east__ctx__platform2_moved(true);
}
pub fn action_ebih__ebih_east__lower_moving_platform__activate_ride__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_platform2_moved = true
    ctx.set_ebih__ebih_east__ctx__platform2_moved(true);
}
pub fn action_ebih__ebih_east__moving_platform__activate_ride__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_platform1_moved = true
    ctx.set_ebih__ebih_east__ctx__platform1_moved(true);
}
pub fn action_ebih__ebih_west__below_door__open_door__do(ctx: &mut Context, world: &graph::World) {
    // ^_door_open = true; IF (^indra WITHIN `Ebih > Ebih West > Above Door`) { ^indra = `Ebih > Ebih West > Below Door`; }
    ctx.set_ebih__ebih_west__ctx__door_open(true);
    if ctx.indra() == SpotId::Ebih__Ebih_West__Above_Door {
        ctx.set_indra(SpotId::Ebih__Ebih_West__Below_Door);
    }
}
pub fn action_ebih__ebih_west__left_of_switch__open_door__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_door_open = true; IF (^indra WITHIN `Ebih > Ebih West > Above Door`) { ^indra = `Ebih > Ebih West > Below Door`; }
    ctx.set_ebih__ebih_west__ctx__door_open(true);
    if ctx.indra() == SpotId::Ebih__Ebih_West__Above_Door {
        ctx.set_indra(SpotId::Ebih__Ebih_West__Below_Door);
    }
}
pub fn action_ebih__grid_25_10_12__door_left__open_door__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_door_open = true
    ctx.set_ebih__grid_25_10_12__ctx__door_open(true);
}
pub fn action_ebih__grid_25_10_12__east_11__open_door__do(ctx: &mut Context, world: &graph::World) {
    // ^_door_open = true
    ctx.set_ebih__grid_25_10_12__ctx__door_open(true);
}
pub fn action_ebih__vertical_interchange__west_13__open_door__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_door_open = true
    ctx.set_ebih__vertical_interchange__ctx__door_open(true);
}
pub fn action_ebih__waterfall__below_left_switch__open_door__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_west_door_open = true
    ctx.set_ebih__waterfall__ctx__west_door_open(true);
}
pub fn action_ebih__waterfall__west_8__open_door__do(ctx: &mut Context, world: &graph::World) {
    // ^_west_door_open = true
    ctx.set_ebih__waterfall__ctx__west_door_open(true);
}
pub fn action_flasks_incr_1(ctx: &mut Context, world: &graph::World) {
    // ^flasks += 1
    ctx.flasks += 1;
}
pub fn action_flasks_incr_2(ctx: &mut Context, world: &graph::World) {
    // ^flasks += 2
    ctx.flasks += 2;
}
pub fn action_giguna__carnelian__lower_susar__caught__do(ctx: &mut Context, world: &graph::World) {
    // ^_lower_susar = true
    ctx.set_giguna__carnelian__ctx__lower_susar(true);
}
pub fn action_giguna__carnelian__lower_susar__hack__do(ctx: &mut Context, world: &graph::World) {
    // ^_lower_susar = true
    ctx.set_giguna__carnelian__ctx__lower_susar(true);
}
pub fn action_giguna__carnelian__switch__open_door__do(ctx: &mut Context, world: &graph::World) {
    // ^_door_opened = true
    ctx.set_giguna__carnelian__ctx__door_opened(true);
}
pub fn action_giguna__carnelian__upper_susar__caught__do(ctx: &mut Context, world: &graph::World) {
    // ^_upper_susar = true
    ctx.set_giguna__carnelian__ctx__upper_susar(true);
}
pub fn action_giguna__carnelian__upper_susar__hack__do(ctx: &mut Context, world: &graph::World) {
    // ^_upper_susar = true
    ctx.set_giguna__carnelian__ctx__upper_susar(true);
}
pub fn action_giguna__clouds__platform_start__hack_and_get_off_early__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_platform_and_portal = true
    ctx.set_giguna__clouds__ctx__platform_and_portal(true);
}
pub fn action_giguna__clouds__platform_start__hack_and_ride_to_portal__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_platform_and_portal = true; if (^indra WITHIN ^position) { ^indra = `Giguna > Clouds > Platform Stop` }
    ctx.set_giguna__clouds__ctx__platform_and_portal(true);
    if ctx.indra() == ctx.position() {
        ctx.set_indra(SpotId::Giguna__Clouds__Platform_Stop);
    }
}
pub fn action_giguna__clouds__platform_start__hack_deploy_ride_to_portal__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_platform_and_portal = true; $deploy_drone_and_move(`Giguna > Clouds > Platform Stop`)
    ctx.set_giguna__clouds__ctx__platform_and_portal(true);
    helper__deploy_drone_and_move!(ctx, world, SpotId::Giguna__Clouds__Platform_Stop);
}
pub fn action_giguna__east_caverns__lower_susar__caught__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_lower_susar = true
    ctx.set_giguna__east_caverns__ctx__lower_susar(true);
}
pub fn action_giguna__east_caverns__lower_susar__hack__do(ctx: &mut Context, world: &graph::World) {
    // ^_lower_susar = true
    ctx.set_giguna__east_caverns__ctx__lower_susar(true);
}
pub fn action_giguna__east_caverns__mid_susar__caught__do(ctx: &mut Context, world: &graph::World) {
    // ^_mid_susar = true
    ctx.set_giguna__east_caverns__ctx__mid_susar(true);
}
pub fn action_giguna__east_caverns__mid_susar__hack__do(ctx: &mut Context, world: &graph::World) {
    // ^_mid_susar = true
    ctx.set_giguna__east_caverns__ctx__mid_susar(true);
}
pub fn action_giguna__east_caverns__statues_ledge__open_door__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_door_opened = true
    ctx.set_giguna__east_caverns__ctx__door_opened(true);
}
pub fn action_giguna__east_caverns__switch__open_door__do(ctx: &mut Context, world: &graph::World) {
    // ^_door_opened = true
    ctx.set_giguna__east_caverns__ctx__door_opened(true);
}
pub fn action_giguna__east_caverns__upper_susar__caught__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_upper_susar = true
    ctx.set_giguna__east_caverns__ctx__upper_susar(true);
}
pub fn action_giguna__east_caverns__upper_susar_jump_from_east__caught__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_upper_susar = true
    ctx.set_giguna__east_caverns__ctx__upper_susar(true);
}
pub fn action_giguna__east_caverns__upper_susar_jump_from_east__hack__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_upper_susar = true
    ctx.set_giguna__east_caverns__ctx__upper_susar(true);
}
pub fn action_giguna__east_caverns__upper_susar_mid_jump__hack__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_upper_susar = true
    ctx.set_giguna__east_caverns__ctx__upper_susar(true);
}
pub fn action_giguna__east_caverns__west_14__enter_combo__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_combo_entered = true
    ctx.set_giguna__east_caverns__ctx__combo_entered(true);
}
pub fn action_giguna__east_caverns__west_16__open_door__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_door_opened = true
    ctx.set_giguna__east_caverns__ctx__door_opened(true);
}
pub fn action_giguna__gateway__flask_ledge__open_door__do(ctx: &mut Context, world: &graph::World) {
    // ^_door_opened = true
    ctx.set_giguna__gateway__ctx__door_opened(true);
}
pub fn action_giguna__gateway__one_jump__open_door__do(ctx: &mut Context, world: &graph::World) {
    // ^_door_opened = true
    ctx.set_giguna__gateway__ctx__door_opened(true);
}
pub fn action_giguna__giguna_base__switch_distance_1__open_door__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_door_open = true
    ctx.set_giguna__giguna_base__ctx__door_open(true);
}
pub fn action_giguna__giguna_base__switch_distance_2__open_door__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_door_open = true
    ctx.set_giguna__giguna_base__ctx__door_open(true);
}
pub fn action_giguna__giguna_base__switch_distance_3__open_door__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_door_open = true
    ctx.set_giguna__giguna_base__ctx__door_open(true);
}
pub fn action_giguna__giguna_base__switch_distance_4__open_door__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_door_open = true
    ctx.set_giguna__giguna_base__ctx__door_open(true);
}
pub fn action_giguna__giguna_northeast__right_column__open_door_from_afar__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_door_opened = true
    ctx.set_giguna__giguna_northeast__ctx__door_opened(true);
}
pub fn action_giguna__giguna_northeast__switch__open_door__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_door_opened = true
    ctx.set_giguna__giguna_northeast__ctx__door_opened(true);
}
pub fn action_giguna__ruins_top__switch__open_doors__do(ctx: &mut Context, world: &graph::World) {
    // ^_doors_open = true
    ctx.set_giguna__ruins_top__ctx__doors_open(true);
}
pub fn action_giguna__ruins_west__lower_ledge__destroy_kishib__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_kishib_handled = true
    ctx.set_giguna__ruins_west__ctx__kishib_handled(true);
}
pub fn action_giguna__ruins_west__lower_ledge__hack_kishib__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_kishib_handled = true
    ctx.set_giguna__ruins_west__ctx__kishib_handled(true);
}
pub fn action_giguna__west_caverns__east_susar__caught__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_east_susar = true
    ctx.set_giguna__west_caverns__ctx__east_susar(true);
}
pub fn action_giguna__west_caverns__east_susar__hack__do(ctx: &mut Context, world: &graph::World) {
    // ^_east_susar = true
    ctx.set_giguna__west_caverns__ctx__east_susar(true);
}
pub fn action_giguna_breach__sw_save__west_11__open_door__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_door_opened = true
    ctx.set_giguna_breach__sw_save__ctx__door_opened(true);
}
pub fn action_indra_set_default(ctx: &mut Context, world: &graph::World) {
    // ^indra = $default
    ctx.set_indra(Default::default());
}
pub fn action_irikar__basement_portal__moving_platform_start__activate_platform__do(
    ctx: &mut Context,
    world: &graph::World,
) {
    // ^_platform_moved = true
    ctx.set_irikar__basement_portal__ctx__platform_moved(true);
}
pub fn action_last_set_default(ctx: &mut Context, world: &graph::World) {
    // ^last = $default
    ctx.set_last(Default::default());
}
pub fn action_last_set_position(ctx: &mut Context, world: &graph::World) {
    // ^last = ^position
    ctx.set_last(ctx.position());
}
pub fn action_main_portal_save_update(ctx: &mut Context, world: &graph::World) {
    // $main_portal_save_update
    helper__main_portal_save_update!(ctx, world);
}
pub fn action_mode_set_drone(ctx: &mut Context, world: &graph::World) {
    // ^mode = 'drone'
    ctx.set_mode(enums::Mode::Drone);
}
pub fn action_mode_set_drone_indra_set_position(ctx: &mut Context, world: &graph::World) {
    // ^mode = 'drone'; ^indra = ^position
    ctx.set_mode(enums::Mode::Drone);
    ctx.set_indra(ctx.position());
}
pub fn action_mode_set_indra(ctx: &mut Context, world: &graph::World) {
    // ^mode = 'Indra'
    ctx.set_mode(enums::Mode::Indra);
}
pub fn action_refill_energy(ctx: &mut Context, world: &graph::World) {
    // $refill_energy
    helper__refill_energy!(ctx, world);
}
pub fn action_refills_incr_1(ctx: &mut Context, world: &graph::World) {
    // ^refills += 1
    ctx.refills += 1;
}
pub fn action_reset_old_area__newpos(ctx: &mut Context, world: &graph::World, newpos: SpotId) {
    // $reset_old_area(^newpos)
    helper__reset_old_area!(ctx, world, newpos);
}
pub fn action_save(ctx: &mut Context, world: &graph::World) {
    // $save
    helper__save!(ctx, world);
}
pub fn action_save_set_glacier_gt_revival_gt_save_point(ctx: &mut Context, world: &graph::World) {
    // ^save = `Glacier > Revival > Save Point`
    ctx.set_save(SpotId::Glacier__Revival__Save_Point);
}
pub fn action_skip__amagi_gt_west_lake_gt_cavern_refill_station_gt_break_wall_add_item__amagi_dragon_eye_passage(
    ctx: &mut Context,
    world: &graph::World,
) {
    // $skip(`Amagi > West Lake > Cavern Refill Station > Break Wall`); $add_item(Amagi_Dragon_Eye_Passage);
    ctx.skip(LocationId::Amagi__West_Lake__Cavern_Refill_Station__Break_Wall);
    ctx.add_item(Item::Amagi_Dragon_Eye_Passage);
}
pub fn action_skip__amagi_gt_west_lake_gt_stronghold_ceiling_left_gt_knock_down_left_boulder_add_item__amagi_stronghold_wall_1_add_item__amagi_stronghold_boulder_1(
    ctx: &mut Context,
    world: &graph::World,
) {
    // $skip(`Amagi > West Lake > Stronghold Ceiling Left > Knock Down Left Boulder`); $add_item(Amagi_Stronghold_Wall_1); $add_item(Amagi_Stronghold_Boulder_1);
    ctx.skip(LocationId::Amagi__West_Lake__Stronghold_Ceiling_Left__Knock_Down_Left_Boulder);
    ctx.add_item(Item::Amagi_Stronghold_Wall_1);
    ctx.add_item(Item::Amagi_Stronghold_Boulder_1);
}
pub fn action_skip__amagi_gt_west_lake_gt_stronghold_ceiling_right_gt_knock_down_right_boulder_add_item__amagi_stronghold_wall_2_add_item__amagi_stronghold_boulder_2(
    ctx: &mut Context,
    world: &graph::World,
) {
    // $skip(`Amagi > West Lake > Stronghold Ceiling Right > Knock Down Right Boulder`); $add_item(Amagi_Stronghold_Wall_2); $add_item(Amagi_Stronghold_Boulder_2);
    ctx.skip(LocationId::Amagi__West_Lake__Stronghold_Ceiling_Right__Knock_Down_Right_Boulder);
    ctx.add_item(Item::Amagi_Stronghold_Wall_2);
    ctx.add_item(Item::Amagi_Stronghold_Boulder_2);
}
pub fn action_skip__ebih_gt_waterfall_gt_alcove_gt_block_left_skip__ebih_gt_waterfall_gt_alcove_gt_block_right_skip__ebih_gt_waterfall_gt_alcove_left_gt_block_left_skip__ebih_gt_waterfall_gt_alcove_right_gt_block_right_add_item__ebih_waterfall_block_right_add_item__ebih_waterfall_block_left(
    ctx: &mut Context,
    world: &graph::World,
) {
    // $skip(`Ebih > Waterfall > Alcove > Block Left`); $skip(`Ebih > Waterfall > Alcove > Block Right`); $skip(`Ebih > Waterfall > Alcove Left > Block Left`); $skip(`Ebih > Waterfall > Alcove Right > Block Right`); $add_item(Ebih_Waterfall_Block_Right); $add_item(Ebih_Waterfall_Block_Left);
    ctx.skip(LocationId::Ebih__Waterfall__Alcove__Block_Left);
    ctx.skip(LocationId::Ebih__Waterfall__Alcove__Block_Right);
    ctx.skip(LocationId::Ebih__Waterfall__Alcove_Left__Block_Left);
    ctx.skip(LocationId::Ebih__Waterfall__Alcove_Right__Block_Right);
    ctx.add_item(Item::Ebih_Waterfall_Block_Right);
    ctx.add_item(Item::Ebih_Waterfall_Block_Left);
}

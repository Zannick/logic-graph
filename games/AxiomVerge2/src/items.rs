//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

#![allow(non_camel_case_types)]

use std::fmt;

#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd, enum_map::Enum, Default)]
pub enum Item {
    #[default]
    None,
    Amashilama,
    Apocalypse_Bomb,
    Compass,
    Escape,
    Ice_Axe,
    Mist,
    Notes_2053_02_27,
    Placeholder,
    Station_Power,
}
impl fmt::Display for Item {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            Item::None => write!(f, "{}", "None"),
            Item::Amashilama => write!(f, "{}", "Amashilama"),
            Item::Apocalypse_Bomb => write!(f, "{}", "Apocalypse_Bomb"),
            Item::Compass => write!(f, "{}", "Compass"),
            Item::Escape => write!(f, "{}", "Escape"),
            Item::Ice_Axe => write!(f, "{}", "Ice_Axe"),
            Item::Mist => write!(f, "{}", "Mist"),
            Item::Notes_2053_02_27 => write!(f, "{}", "Notes_2053_02_27"),
            Item::Placeholder => write!(f, "{}", "Placeholder"),
            Item::Station_Power => write!(f, "{}", "Station_Power"),
        }
    }
}
impl analyzer::world::Id for Item {}
impl std::str::FromStr for Item {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "Amashilama" => Ok(Item::Amashilama),
            "Apocalypse_Bomb" => Ok(Item::Apocalypse_Bomb),
            "Compass" => Ok(Item::Compass),
            "Escape" => Ok(Item::Escape),
            "Ice_Axe" => Ok(Item::Ice_Axe),
            "Mist" => Ok(Item::Mist),
            "Notes_2053_02_27" => Ok(Item::Notes_2053_02_27),
            "Placeholder" => Ok(Item::Placeholder),
            "Station_Power" => Ok(Item::Station_Power),
            _ => Err(format!("Could not recognize as a Item: {}", s)),
        }
    }
}

pub fn unused_item(id: Item) -> bool {
    match id {
        Item::None => true,
        Item::Compass | Item::Escape => true,
        _ => false,
    }
}

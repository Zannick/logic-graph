//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

#![allow(unused)]
#![allow(non_snake_case)]

use analyzer::context::{Ctx, Wrapper};
use analyzer::world::*;
use analyzer::*;
use libaxiom_verge2::context::{enums, flags, Context, Status};
use libaxiom_verge2::graph::{self, *};
use libaxiom_verge2::items::Item;

fn shared_setup() -> (graph::World, Context) {
    let mut world = graph::World::new();
    world.condense_graph();
    let mut ctx = Context::default();
    ctx.cbits2.insert(flags::ContextBits2::ICE_AXE);
    ctx.cbits1.insert(flags::ContextBits1::AMASHILAMA);
    ctx.cbits1.insert(flags::ContextBits1::BOOMERANG);
    ctx.cbits2.insert(flags::ContextBits2::LEDGE_GRAB);
    ctx.save = SpotId::Ebih__Base_Camp__Save_Point;

    (world, ctx)
}

#[test]
fn can_reach_Ebih__Ebih_East__Corner() {
    let (mut world, mut ctx) = shared_setup();

    expect_any_route!(
        &world,
        ctx,
        SpotId::Ebih__Base_Camp__Save_Point,
        SpotId::Ebih__Ebih_East__Corner
    );
}
#[test]
fn can_obtain_Infect() {
    let (mut world, mut ctx) = shared_setup();

    expect_obtainable!(
        &world,
        ctx,
        SpotId::Ebih__Base_Camp__Save_Point,
        Item::Infect
    );
}
#[test]
fn context_flasks_1_can_obtain_Melee_Damage() {
    let (mut world, mut ctx) = shared_setup();
    ctx.flasks = 1;

    expect_obtainable!(
        &world,
        ctx,
        SpotId::Ebih__Base_Camp__Save_Point,
        Item::Melee_Damage
    );
}
#[test]
fn start_Ebih__Ebih_East__East_Ledge_can_obtain_Remote_Drone() {
    let (mut world, mut ctx) = shared_setup();

    expect_obtainable!(
        &world,
        ctx,
        SpotId::Ebih__Ebih_East__East_Ledge,
        Item::Remote_Drone
    );
}
#[test]
fn start_Ebih__Drone_Room__East_4_context_mode_drone_indra_Ebih__Drone_Room__Tree_can_reach_Ebih__Grid_25_2_6__Pit(
) {
    let (mut world, mut ctx) = shared_setup();
    ctx.mode = enums::Mode::Drone;
    ctx.indra = SpotId::Ebih__Drone_Room__Tree;

    expect_any_route!(
        &world,
        ctx,
        SpotId::Ebih__Drone_Room__East_4,
        SpotId::Ebih__Grid_25_2_6__Pit
    );
}
#[test]
fn start_Ebih__Drone_Room__West_6_with_Infect__Remote_Drone_can_activate_Ebih__Drone_Room__Moving_Platform__Throw_Drone(
) {
    let (mut world, mut ctx) = shared_setup();
    ctx.infect = 1;
    ctx.cbits2.insert(flags::ContextBits2::REMOTE_DRONE);

    expect_action_accessible!(
        &world,
        ctx,
        SpotId::Ebih__Drone_Room__West_6,
        ActionId::Ebih__Drone_Room__Moving_Platform__Throw_Drone
    );
}
#[test]
fn start_Ebih__Ebih_East__Corner_with_Infect_can_activate_Ebih__Ebih_East__Lower_Moving_Platform__Activate_Lift(
) {
    let (mut world, mut ctx) = shared_setup();
    ctx.infect = 1;

    expect_action_accessible!(
        &world,
        ctx,
        SpotId::Ebih__Ebih_East__Corner,
        ActionId::Ebih__Ebih_East__Lower_Moving_Platform__Activate_Lift
    );
}
#[test]
fn start_Ebih__Ebih_East__West_8_with_Infect_can_activate_Ebih__Ebih_East__Moving_Platform__Activate_Ride(
) {
    let (mut world, mut ctx) = shared_setup();
    ctx.infect = 1;

    expect_action_accessible!(
        &world,
        ctx,
        SpotId::Ebih__Ebih_East__West_8,
        ActionId::Ebih__Ebih_East__Moving_Platform__Activate_Ride
    );
}
#[test]
fn start_Ebih__Ebih_East__West_8_with_Infect_eventually_reaches_Ebih__Ebih_East__Middle_Platform() {
    let (mut world, mut ctx) = shared_setup();
    ctx.infect = 1;

    expect_eventually_reaches!(
        &world,
        ctx,
        SpotId::Ebih__Ebih_East__West_8,
        SpotId::Ebih__Ebih_East__Middle_Platform
    );
}
#[test]
fn start_Ebih__Ebih_East__Middle_Platform_can_reach_Ebih__Ebih_East__East_Ledge() {
    let (mut world, mut ctx) = shared_setup();

    expect_any_route!(
        &world,
        ctx,
        SpotId::Ebih__Ebih_East__Middle_Platform,
        SpotId::Ebih__Ebih_East__East_Ledge
    );
}
#[test]
fn start_Ebih__Drone_Room__Portal_with_Infect_requires_context_save_Ebih__Ebih_West__Upper_Save_to_reach_Ebih__Drone_Room__Moving_Platform(
) {
    let (mut world, mut ctx) = shared_setup();
    ctx.infect = 1;

    let mut ctx2 = ctx.clone();
    ctx2.save = SpotId::Ebih__Ebih_West__Upper_Save;

    expect_no_route!(
        &world,
        ctx,
        Context,
        SpotId::Ebih__Drone_Room__Portal,
        SpotId::Ebih__Drone_Room__Moving_Platform
    );
    expect_any_route!(
        &world,
        ctx2,
        SpotId::Ebih__Drone_Room__Portal,
        SpotId::Ebih__Drone_Room__Moving_Platform
    );
}
#[test]
fn start_Glacier__Vertical_Room__Peak_can_access_Glacier__Vertical_Room__Peak__Flask() {
    let (mut world, mut ctx) = shared_setup();

    expect_accessible!(
        &world,
        ctx,
        SpotId::Glacier__Vertical_Room__Peak,
        LocationId::Glacier__Vertical_Room__Peak__Flask
    );
}
#[test]
fn start_Menu__Upgrade_Menu__Physiology_context_last_Ebih__Ebih_East__West_8_visited_Glacier__Vertical_Room__Peak__Flask_can_reach_Ebih__Ebih_East__Corner(
) {
    let (mut world, mut ctx) = shared_setup();
    ctx.last = SpotId::Ebih__Ebih_East__West_8;
    ctx.visit(LocationId::Glacier__Vertical_Room__Peak__Flask);

    expect_any_route!(
        &world,
        ctx,
        SpotId::Menu__Upgrade_Menu__Physiology,
        SpotId::Ebih__Ebih_East__Corner
    );
}
#[test]
fn start_Glacier__Vertical_Room__Peak_with_Flask_context_flasks_1_visited_Glacier__Vertical_Room__Peak__Flask_can_access_Menu__Upgrade_Menu__Physiology__Health_Upgrade_1(
) {
    let (mut world, mut ctx) = shared_setup();
    ctx.flask = 1;
    ctx.flasks = 1;
    ctx.visit(LocationId::Glacier__Vertical_Room__Peak__Flask);

    expect_accessible!(
        &world,
        ctx,
        SpotId::Glacier__Vertical_Room__Peak,
        LocationId::Menu__Upgrade_Menu__Physiology__Health_Upgrade_1
    );
}
#[test]
fn start_Ebih__Ebih_East__Middle_Platform_with_Infect__Remote_Drone_can_access_Ebih__Grid_25_10_12__Hidden_Bush__Behind_Bush(
) {
    let (mut world, mut ctx) = shared_setup();
    ctx.infect = 1;
    ctx.cbits2.insert(flags::ContextBits2::REMOTE_DRONE);

    expect_accessible!(
        &world,
        ctx,
        SpotId::Ebih__Ebih_East__Middle_Platform,
        LocationId::Ebih__Grid_25_10_12__Hidden_Bush__Behind_Bush
    );
}
#[test]
fn PathTest1() {
    let (mut world, mut ctx) = shared_setup();
    ctx.infect = 1;
    ctx.cbits2.insert(flags::ContextBits2::REMOTE_DRONE);
    ctx.cbits1
        .insert(flags::ContextBits1::EBIH__GRID_25_10_12__CTX__DOOR_OPEN);

    expect_this_route!(
        &world,
        ctx,
        SpotId::Ebih__Grid_25_10_12__East_12,
        vec![
            SpotId::Ebih__Grid_25_10_12__Bush,
            SpotId::Ebih__Grid_25_10_12__Mid_Ledge,
            SpotId::Ebih__Grid_25_10_12__Door_Left,
            SpotId::Ebih__Grid_25_10_12__Door,
            SpotId::Ebih__Grid_25_10_12__East_11,
            SpotId::Ebih__Grid_26_10_11__West_11,
            SpotId::Ebih__Grid_26_10_11__Middle_Bottom,
            SpotId::Ebih__Grid_26_10_11__Under_Ledge,
            SpotId::Ebih__Grid_26_10_11__Ledge,
            SpotId::Ebih__Grid_26_10_11__Middle_Platform,
            SpotId::Ebih__Grid_26_10_11__West_10,
            SpotId::Ebih__Grid_25_10_12__East_10,
            SpotId::Ebih__Grid_25_10_12__Hidden_Bush,
        ]
    );
    let verify = |ctx: &Context| {
        let mut vec = Vec::new();
        if ctx.ebih__grid_25_10_12__ctx__door_open() != true {
            vec.push(format!(
                "did not match required context ebih__grid_25_10_12__ctx__door_open=True: {}",
                ctx.ebih__grid_25_10_12__ctx__door_open()
            ));
        }
        if vec.is_empty() {
            Ok(())
        } else {
            Err(vec.join("\n"))
        }
    };
    (verify)(&ctx).unwrap();
}
#[test]
fn start_Ebih__Ebih_West__Upper_Save_with_Remote_Drone_eventually_reaches_Giguna__Giguna_Northeast__Inner_Wall(
) {
    let (mut world, mut ctx) = shared_setup();
    ctx.cbits2.insert(flags::ContextBits2::REMOTE_DRONE);

    expect_eventually_reaches!(
        &world,
        ctx,
        SpotId::Ebih__Ebih_West__Upper_Save,
        SpotId::Giguna__Giguna_Northeast__Inner_Wall
    );
}
#[test]
fn start_Ebih__Waterfall__Ledge_Below_Hole_context_ebih__waterfall__ctx__west_door_open_True_can_reach_Ebih__Ebih_West__Medium_High_Platform(
) {
    let (mut world, mut ctx) = shared_setup();
    ctx.cbits1
        .insert(flags::ContextBits1::EBIH__WATERFALL__CTX__WEST_DOOR_OPEN);

    expect_any_route!(
        &world,
        ctx,
        SpotId::Ebih__Waterfall__Ledge_Below_Hole,
        SpotId::Ebih__Ebih_West__Medium_High_Platform
    );
}
#[test]
fn prev_area() {
    let (mut world, mut ctx) = shared_setup();
    ctx.prev_area = AreaId::Glacier__Vertical_Room;

    expect_this_route!(
        &world,
        ctx,
        SpotId::Glacier__Grid_31_9_12__West_12,
        vec![SpotId::Ebih__Base_Camp__East_12,]
    );
    let verify = |ctx: &Context| {
        let mut vec = Vec::new();
        if ctx.prev_area() != AreaId::Glacier__Grid_31_9_12 {
            vec.push(format!(
                "did not match required context prev_area=Glacier > Grid 31,9-12: {}",
                ctx.prev_area()
            ));
        }
        if vec.is_empty() {
            Ok(())
        } else {
            Err(vec.join("\n"))
        }
    };
    (verify)(&ctx).unwrap();
}
#[test]
fn prev_area_after_pause() {
    let (mut world, mut ctx) = shared_setup();
    ctx.flasks = 1;
    ctx.prev_area = AreaId::Glacier__Vertical_Room;
    ctx.last = SpotId::None;

    expect_this_route!(
        &world,
        ctx,
        SpotId::Glacier__Grid_31_9_12__West_12,
        vec![
            SpotId::Ebih__Base_Camp__East_12,
            SpotId::Menu__Upgrade_Menu__Physiology,
            SpotId::Ebih__Base_Camp__East_12,
        ]
    );
    let verify = |ctx: &Context| {
        let mut vec = Vec::new();
        if ctx.prev_area() != AreaId::Glacier__Grid_31_9_12 {
            vec.push(format!(
                "did not match required context prev_area=Glacier > Grid 31,9-12: {}",
                ctx.prev_area()
            ));
        }
        if ctx.last() != SpotId::None {
            vec.push(format!(
                "did not match required context last=SpotId::None: {}",
                ctx.last()
            ));
        }
        if vec.is_empty() {
            Ok(())
        } else {
            Err(vec.join("\n"))
        }
    };
    (verify)(&ctx).unwrap();
}
#[test]
fn prev_area_after_menu_hop() {
    let (mut world, mut ctx) = shared_setup();
    ctx.infect = 1;
    ctx.flasks = 1;
    ctx.prev_area = AreaId::Glacier__Vertical_Room;
    ctx.last = SpotId::None;

    expect_this_route!(
        &world,
        ctx,
        SpotId::Glacier__Grid_31_9_12__Observation_Tower_L4,
        vec![
            SpotId::Glacier__Grid_31_9_12__West_12,
            SpotId::Ebih__Base_Camp__East_12,
            SpotId::Menu__Upgrade_Menu__Physiology,
            SpotId::Menu__Upgrade_Menu__Infection,
            SpotId::Ebih__Base_Camp__East_12,
        ]
    );
    let verify = |ctx: &Context| {
        let mut vec = Vec::new();
        if ctx.prev_area() != AreaId::Glacier__Grid_31_9_12 {
            vec.push(format!(
                "did not match required context prev_area=Glacier > Grid 31,9-12: {}",
                ctx.prev_area()
            ));
        }
        if ctx.last() != SpotId::None {
            vec.push(format!(
                "did not match required context last=SpotId::None: {}",
                ctx.last()
            ));
        }
        if vec.is_empty() {
            Ok(())
        } else {
            Err(vec.join("\n"))
        }
    };
    (verify)(&ctx).unwrap();
}

//! AUTOGENERATED FOR Axiom Verge 2 - MODIFICATIONS WILL BE LOST

#![allow(unused)]
#![allow(non_snake_case)]

use analyzer::context::Ctx;
use analyzer::world::*;
use analyzer::*;
use libaxiom_verge2::context::{enums, Context, Status};
use libaxiom_verge2::graph::{self, *};
use libaxiom_verge2::items::Item;

fn shared_setup() -> (graph::World, Context) {
    let mut world = graph::World::new();
    let mut ctx = Context::default();
    ctx.ice_axe = true;
    ctx.amashilama = true;
    ctx.save = SpotId::Glacier__Revival__Save_Point;
    ctx.visit(LocationId::Glacier__The_Big_Drop__Water_Surface__Drown);
    ctx.skipped(LocationId::Glacier__Compass_Room__Center__Table);

    (world, ctx)
}

#[test]
fn cannot_obtain_Ledge_Grab() {
    let (mut world, mut ctx) = shared_setup();

    expect_not_obtainable!(
        &world,
        ctx,
        SpotId::Glacier__Vertical_Room_Top__East_9,
        Item::Ledge_Grab
    );
}
#[test]
fn with_Switch_36_11_can_obtain_Ledge_Grab() {
    let (mut world, mut ctx) = shared_setup();
    ctx.switch_36_11 = true;

    expect_obtainable!(
        &world,
        ctx,
        SpotId::Glacier__Vertical_Room_Top__East_9,
        Item::Ledge_Grab
    );
}
#[test]
fn can_reach_Glacier__Revival__Save_Point() {
    let (mut world, mut ctx) = shared_setup();

    expect_any_route!(
        &world,
        ctx,
        SpotId::Glacier__Vertical_Room_Top__East_9,
        SpotId::Glacier__Revival__Save_Point
    );
}
#[test]
fn cannot_reach_Glacier__Vertical_Room_Top__Peak() {
    let (mut world, mut ctx) = shared_setup();

    expect_no_route!(
        &world,
        ctx,
        SpotId::Glacier__Vertical_Room_Top__East_9,
        SpotId::Glacier__Vertical_Room_Top__Peak
    );
}
#[test]
fn with_Boomerang_eventually_gets_Ledge_Grab() {
    let (mut world, mut ctx) = shared_setup();
    ctx.boomerang = true;

    expect_eventually!(
        &world,
        ctx,
        SpotId::Glacier__Vertical_Room_Top__East_9,
        Item::Ledge_Grab
    );
}
#[test]
fn settings_major_glitches_True_eventually_gets_Ledge_Grab() {
    let (mut world, mut ctx) = shared_setup();
    ctx.major_glitches = true;

    expect_eventually!(
        &world,
        ctx,
        SpotId::Glacier__Vertical_Room_Top__East_9,
        Item::Ledge_Grab
    );
}
#[test]
fn eventually_gets_Ledge_Grab() {
    let (mut world, mut ctx) = shared_setup();

    expect_eventually!(
        &world,
        ctx,
        SpotId::Glacier__Vertical_Room_Top__East_9,
        Item::Ledge_Grab
    );
}
#[test]
fn switch_opens_gate() {
    let (mut world, mut ctx) = shared_setup();
    ctx.switch_36_11 = true;

    expect_this_route!(
        &world,
        ctx,
        SpotId::Glacier__Vertical_Room_Top__East_9,
        vec![
            SpotId::Glacier__Vertical_Room_Top__Mid_9,
            SpotId::Glacier__Vertical_Room_Top__Under_Switch,
            SpotId::Glacier__Vertical_Room_Left__Past_Gate,
        ]
    );
}
#[test]
fn get_boomerang() {
    let (mut world, mut ctx) = shared_setup();

    expect_this_route!(
        &world,
        ctx,
        SpotId::Glacier__Revival__Save_Point,
        vec![
            SpotId::Glacier__Revival__West,
            SpotId::Glacier__Grid_39_40_7_9__Upper_East,
            SpotId::Glacier__Grid_39_40_7_9__West,
            SpotId::Glacier__Grid_37_38_9__East,
            SpotId::Glacier__Grid_37_38_9__West,
            SpotId::Glacier__Vertical_Room_Top__East_9,
            SpotId::Glacier__Vertical_Room_Top__Mid_9,
            SpotId::Glacier__Vertical_Room_Top__Mid_11,
            SpotId::Glacier__Vertical_Room_Top__East_13,
            SpotId::Glacier__Boomerang_Antechamber__West_13,
            SpotId::Glacier__Boomerang_Antechamber__East_12,
            SpotId::Glacier__Boomerang_Room__West,
            SpotId::Glacier__Boomerang_Room__Platform,
            SpotId::Glacier__Boomerang_Room__Center_ish,
            SpotId::Glacier__Boomerang_Room__Pedestal,
        ]
    );
}
#[test]
fn start_Glacier__Boomerang_Room__Pedestal_with_Boomerang_can_obtain_Switch_36_11() {
    let (mut world, mut ctx) = shared_setup();
    ctx.boomerang = true;

    expect_obtainable!(
        &world,
        ctx,
        SpotId::Glacier__Boomerang_Room__Pedestal,
        Item::Switch_36_11
    );
}
#[test]
fn start_Glacier__Vertical_Room_Top__Under_Switch_with_Boomerang__Switch_36_11_can_obtain_Ledge_Grab(
) {
    let (mut world, mut ctx) = shared_setup();
    ctx.boomerang = true;
    ctx.switch_36_11 = true;

    expect_obtainable!(
        &world,
        ctx,
        SpotId::Glacier__Vertical_Room_Top__Under_Switch,
        Item::Ledge_Grab
    );
}
#[test]
fn requires_with_Ledge_Grab_to_reach_Glacier__Vertical_Room_Top__Peak() {
    let (mut world, mut ctx) = shared_setup();

    let mut ctx2 = ctx.clone();
    ctx2.ledge_grab = true;

    expect_no_route!(
        &world,
        ctx,
        SpotId::Glacier__Vertical_Room_Top__East_9,
        SpotId::Glacier__Vertical_Room_Top__Peak
    );
    expect_any_route!(
        &world,
        ctx2,
        SpotId::Glacier__Vertical_Room_Top__East_9,
        SpotId::Glacier__Vertical_Room_Top__Peak
    );
}
#[test]
fn eventually_requires_with_Boomerang_to_obtain_Ledge_Grab_iteration_limit_500() {
    let (mut world, mut ctx) = shared_setup();

    let verify = |ctx: &Context| {
        let mut vec = Vec::new();
        if ctx.boomerang != true {
            vec.push(format!(
                "did not collect required items Boomerang: {}",
                ctx.boomerang
            ));
        }
        if vec.is_empty() {
            Ok(())
        } else {
            Err(vec.join("\n"))
        }
    };
    expect_eventually_requires!(
        &world,
        ctx,
        SpotId::Glacier__Vertical_Room_Top__East_9,
        Item::Ledge_Grab,
        verify,
        1000
    );
}

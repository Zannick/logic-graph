name: Axiom Verge 2

context:
  energy:
    max: 450
  flasks:
    max: 100
  refills:
    max: 4
  mode:
    opts: [Indra, drone]
    default: Indra

start:
  position: Antarctica > West > Helipad
  save: Antarctica > West > Helipad
  breach_save: SpotId::None
  # By itself 'None' would be interpreted as a string,
  # which becomes its own independent per-variable enum type.
  indra: SpotId::None
  last: SpotId::None
  # This should be a load effect? prev_area = $get_area(^position) ?
  prev_area: Antarctica > West

data:
  breach: false
  water: false
  flipside: SpotId::None
  portal_default: SpotId::None
  # fallthrough: SpotId::None  # Where Indra will fall to if the room is reset

# TODO: the win condition should be an item Victory,
# whose requirement is $objective corresponding to the current objective.
# otherwise it gets weird, thinking we can beat the final boss and escape and then go get
# the last items? This way simulates requiring the Victory item be last.
objectives:
  Start: "[Remote_Drone]"
  # Greedy search will have a problem with purchases if there are insufficient funds;
  # it will never consider skipping what's available and may be unable to buy something
  # necessary.
  Progress%: >
    [$all_urns, $all_weapons, $other_items, $all_notes, $all_health, $all_flasks]

base_movements:
  - # the slowest movement is in water
    # a grid line = 1 unit. each minimap pixel is about .1 unit
    x: .222  # about 4.5s per grid x-unit underwater if we don't have liru
    fall: 1
    jump: 1  # can vary with jump height, so take a rough estimate of usual
    jump_down: .1
  - data:
      water: false
    x: .285  # about 3.5s per grid x-unit
    jump: .6  # can vary with jump height, so take a rough estimate of usual
    # max jump height is around .2, with Anuman it reaches .3... TODO: real measurement
    # other speeds apply

movements:
  water:
    x: .285
    req: Underwater_Movement
  # TODO: drone slingshot+hover is faster x movement but is pretty circumstantial
  # *and* limited
  # But with just throw + hover, can cover about 2.5 in ~6s / 1 in 2.5s
  # aka ~.4-.416 speed in one direction for around 6s max
  # TODO: anuman "movement" of constantly changing form?

exit_movements:
  throw_hover:
    x: .4
  mist2:
    x: .285
    y: .5
    # roughly .4 at a diagonal...
    # TODO: mist movement costs 30 energy/s
    # and takes ~.6 seconds to exit form (though you might use that to keep moving)
  platform:
    x: .138
    # y: .3  ?  TODO: Re-measure more accurately
    # technically uses xy (ortho) movement but x!=y

time:
  default: 1
  ## Pickups
  urn: 5.5
  flask: 5.5
  # when grabbing the urn/flask with the boomerang over x distance
  # the upgraded boomerang has a longer reach but approximately the same speed as indra
  # so there's little difference
  remote_urn: 6.5
  remote_flask: 6.5
  # when grabbing the urn/flask with the boomerang while falling or otherwise closer
  nearby_urn: 6
  nearby_flask: 6
  # item is freestanding -> can be picked up with no delay
  standing: 0

  ## common actions
  save: 1.3
  shockwave: 3.5  # even when shockwaving flasks and urns? at least 1
  hack: 0.5
  susar: 3.0  # caught by susar
  # need to test slingshot charge time

  ## Transitions
  xshift: 1.35  # sometimes 1.2, sometimes 1.5?
  # When areas use connecting doors
  xdoor: 1.6  # up to 2??
  ydoor: 1.6
  # Some doors are just longer to go through
  # Doors leading inside/outside
  interior: 0.75
  exterior: 0.75
  tent: 0.25
  cave: 0.25
  # Portals
  portal: 3.6
  exit: 3
  # spots are technically the same, but in different areas to partition the area map
  overlap: 0

warps:
  earth_save:
    time: 5  # initial savewarp pre-amashi
    req: WITHIN `Antarctica`
    to: ^save
    loads: true
  indra_save:
    time: 14.5
    req: NOT WITHIN `Menu` and Amashilama and ^mode != 'drone'
    to: ^save
    after: $refill_energy
    loads: true
  drone_save:
    time: 12
    req: NOT WITHIN `Menu` and not ^breach and ^mode == 'drone'
    to: ^save
    after: $refill_energy
    loads: true
  breach_save:
    time: 12
    req: NOT WITHIN `Menu` and ^breach
    to: ^breach_save
    after: $refill_energy
    loads: true
  menu:
    time: 1
    req: NOT WITHIN `Menu` and ^flasks > 0
    to: Menu > Upgrade Menu > Physiology
    before: ^last = ^position
    base_movement: true
  exit_menu:
    time: 0.2
    req: WITHIN `Menu`
    to: ^last
    after: ^last = $default
    base_movement: true
  exit_breach:
    time: 3
    req: ^breach and Exit_Breach and (^flipside NOT WITHIN $default)
    to: ^flipside
    after: $clear_breach_save
    # Instead of making this base movement, anywhere it's strictly required needs a real Exit
    tags: [exit]
  # Fast travel times are slightly different when travelling within an area
  # Fast travels within main are technically doable from the menu, but not from the menu in the breach.
  # also not possible in interiors! D: TODO: Move interiors into their own region.
  fast_travel_ebih_base_camp:
    time: 12
    req: $ft_main and ^map__ebih__base_camp__save
    to: Ebih > Base Camp > Save Point
    after: $refill_energy
  fast_travel_ebih_west_upper:
    time: 12
    req: $ft_main and ^map__ebih__ebih_west__upper_save
    to: Ebih > Ebih West > Upper Save
    after: $refill_energy
  fast_travel_ebih_west_mid:
    time: 12
    req: $ft_main and ^map__ebih__ebih_west__mid_save
    to: Ebih > Ebih West > Mid Save
    after: $refill_energy
  fast_travel_ebih_west_lower:
    time: 12
    req: $ft_main and ^map__ebih__ebih_west__lower_save
    to: Ebih > Ebih West > Lower Save
    after: $refill_energy
  fast_travel_amagi_main_area:
    time: 12
    req: $ft_main and ^map__amagi__main_area__save
    to: Amagi > Main Area > Save Point
    after: $refill_energy
  fast_travel_giguna_base:
    time: 12
    req: $ft_main and ^map__giguna__giguna_base__save
    to: Giguna > Giguna Base > Save Point
    after: $refill_energy
  fast_travel_giguna_northeast:
    time: 12
    req: $ft_main and ^map__giguna__giguna_northeast__save
    to: Giguna > Giguna Northeast > Save Point
    after: $refill_energy
  fast_travel_giguna_ruins_west:
    time: 12
    req: $ft_main and ^map__giguna__ruins_west__save
    to: Giguna > Ruins West > Save Point
    after: $refill_energy
  fast_travel_glacier_revival:
    time: 12
    # Amashilama guarantees travel to this point
    req: $ft_main and Amashilama
    to: Glacier > Revival > Save Point
    after: $refill_energy
  fast_travel_irikar_hub:
    time: 12
    req: $ft_main and ^map__irikar__hub__save
    to: Irikar > Hub > Save Point
    after: $refill_energy
  fast_travel_uhrum_save_room:
    time: 12
    req: $ft_main and ^map__uhrum__save_room__save
    to: Uhrum > Save Room > Save Point
    after: $refill_energy
  fast_travel_uhrum_west_entrance:
    time: 12
    req: $ft_main and ^map__uhrum__west_entrance__save
    to: Uhrum > West Entrance > Save Point
    after: $refill_energy
  fast_travel_giguna_breach_peak:
    time: 12
    req: $ft_breach and ^map__giguna_breach__peak__save
    to: Giguna Breach > Peak > Save Point
    after: $refill_energy
  fast_travel_giguna_breach_sw:
    time: 12
    req: $ft_breach and ^map__giguna_breach__sw_save__save
    to: Giguna Breach > SW Save > Save Point
    after: $refill_energy
  fast_travel_irikar_breach_save_room:
    time: 12
    req: $ft_breach and ^map__irikar_breach__save_room__save
    to: Irikar Breach > Save Room > Save Point
    after: $refill_energy
  fast_travel_irikar_breach_gauntlet:
    time: 12
    req: $ft_breach and ^map__irikar_breach__gauntlet__save
    to: Irikar Breach > Gauntlet > Save Point
    after: $refill_energy
  fast_travel_irikar_breach_basement:
    time: 12
    req: $ft_breach and ^map__irikar_breach__basement_save__save
    to: Irikar Breach > Basement Save > Save Point
    after: $refill_energy

# TODO: under some conditions, fast travel indra can appear standing up
# 7s. I think it's immediately after savewarping though, so not very useful.

actions:
  - name: Recall Drone
    req: NOT WITHIN `Menu` and not ^breach and $can_recall
    do: ^mode = 'Indra'
    to: ^indra
    after: ^indra = $default
    # Can open the menu during this time
    time: 3  # it's slightly less in-area
  - name: Deploy Drone
    req: NOT WITHIN `Menu` and $can_deploy
    do: ^mode = 'drone'; ^indra = ^position
    time: 0.5
  - name: Become Drone
    req: NOT WITHIN `Menu` and Anuman and ^mode != 'drone'
    do: ^mode = 'drone'
    time: 0.1
  - name: Become Indra
    req: NOT WITHIN `Menu` and not ^breach and Anuman and ^mode == 'drone'
    do: ^mode = 'Indra'
    time: 0.1

helpers:
  $melee: Ice_Axe or ^mode == 'drone'
  $boomerang: ^mode != 'drone' and Boomerang
  $can_damage: $melee or Boomerang
  $grab: ^mode != 'drone' and Ledge_Grab
  $climb: ^mode != 'drone' and Wall_Climb
  $hook: ^mode == 'drone' and Slingshot_Hook
  $hover: ^mode == 'drone' and Drone_Hover
  $charge: ^mode == 'drone' and Slingshot_Charge
  $spin: ^mode == 'drone' and Slingshot_Weapon

  $can_deploy: Remote_Drone and ^mode != 'drone' and not Anuman
  $can_recall: ^mode == 'drone' and not Anuman
  $shockwave: ^mode != 'drone' and Shockwave

  $open: Infect
  $activate: Infect
  $platform: Infect
  $overheat: Infect
  $allegiance1: Infect
  $allegiance2: Infect_L1
  $unlock2: Infect_L1
  $unlock3: Infect_L2
  $unlock4: Infect_L3

  $mist2: Nanite_Mist and Mist_Upgrade

  $ft_main: Fast_Travel and NOT WITHIN `Menu` and NOT WITHIN `Interior` and NOT ^breach
  $ft_breach: Fast_Travel and NOT WITHIN `Menu` and ^breach

  # shockwave range: ~.2 in width (.35 height)
  # boomerang range: ~.3 in width?
  # infection ranges (approx)
  # .185, .22, .26, .30
  # drone has one "level" less, at 0 it's ~.15?
  $range1: Infection_Range_2 or (Infection_Range and ^mode != 'drone')
  $range2: Infection_Range_3 or (Infection_Range_2 and ^mode != 'drone')
  $range3: Infection_Range_3 and ^mode != 'drone'

  $more_refills: ^refills < $count(Power_Matrix)

  $max_energy:num: PER Nano_Points { 3 => 450, 2 => 400, 1 => 350, _ => 300 }

  $bs: boomerang_steering and $boomerang
  $offset: major_glitches and $melee
  $block_clip: minor_glitches and ^mode == 'drone'
  $block_clip_escape: minor_glitches and $hook

  # TODO: this is a temporary hack around the attract issue #131
  $attract: Breach_Attractor and (Anuman or ^mode != 'drone' or ^indra WITHIN ^position)

  $all_notes:itemList: >
    [Dear_Ernest, Researchers_Missing, Letter_from_Trace,
     Heretics_Tablet, Terminal_Breakthrough_1, Companies_Layoff, Record_Losses,
     Under_Siege, The_Ideal_Kiengir, Building_of_the_School, Commemorative_Speech,
     Terminal_Breakthrough_2, Dangerous_Ideas, Storm_Bomb]
  $all_flasks:itemList: >
    [Flask{12}, Big_Flask]
  $all_health:itemList: >
    [Health_Node, Health_Fragment{6}]
  $all_weapons:itemList: >
    [Ice_Axe, Bronze_Axe]
  $other_items:itemList: >
    [Compass, Boomerang, Power_Matrix]
  $all_urns:itemList: >
    [Amashilama, Ledge_Grab, Infect, Remote_Drone, Shockwave, Wall_Climb, Slingshot_Hook, Breach_Sight,
     Drone_Hover, Fast_Travel]
  # To be added: 4 Flask, 2 Big_Flask, Double_Axe, Royal_Dagger, Udusan
  # 1 Health_Fragment, The_Student, Heretics_Granddaughter, 

  $save:action: ^save = ^position; $refill_energy
  $refill_energy:action: ^energy = $max_energy
  $deploy_drone:action: >
    ^mode = 'drone'; ^indra = ^position;
  $deploy_drone_and_move:action(indrapos:SpotId): >
    ^mode = 'drone'; ^indra = ^indrapos;

  # entry rules
  # ^position is the old value
  $reset_old_area:action(newpos:SpotId): >
    IF (^position NOT WITHIN ^prev_area
        AND ^position NOT WITHIN `Menu`
        AND ^newpos NOT WITHIN $get_area(^position)) {
            IF (^newpos NOT WITHIN ^prev_area) {
                $reset_area(^prev_area);
            };
            ^prev_area = $get_area(^position);
    }
  # Save is updated when you traverse a portal
  # We could probably rename this to be clearer what it's for
  $portal:action(newsave:SpotId): ^save = ^newsave
  # Breach portals are tied to particular save points in the breach
  # The area with the portal should define the data portal_default to be that point,
  # and the Enter action should include $portal_save_update in the `do` effect
  # (since it needs to happen on the old position).
  # TODO: Is this true of portals leaving the breach? Of portals leaving the breach that aren't attached to save points?
  $main_portal_save_update:action: ^save = ^portal_default
  $breach_portal_save_update:action: ^breach_save = ^portal_default
  $clear_breach_save:action: ^breach_save = $default

collect:
  Amashilama: ^save = `Glacier > Revival > Save Point`
  Flask: ^flasks += 1
  Big_Flask: ^flasks += 2
  Infect: $refill_energy
  Health_Fragment: $refill_energy
  Health_Node: $refill_energy
  Power_Core: ^refills += 1
  Amagi_Stronghold_Wall_And_Boulder_1: >
    $skip(`Amagi > West Lake > Stronghold Ceiling Left > Knock Down Left Boulder`);
    $add_item(Amagi_Stronghold_Wall_1);
    $add_item(Amagi_Stronghold_Boulder_1);
  Amagi_Stronghold_Boulder_And_Wall_2: >
    $skip(`Amagi > West Lake > Stronghold Ceiling Right > Knock Down Right Boulder`);
    $add_item(Amagi_Stronghold_Wall_2);
    $add_item(Amagi_Stronghold_Boulder_2);
  Ebih_Waterfall_Both_Blocks: >
    $skip(`Ebih > Waterfall > Alcove > Block Left`);
    $skip(`Ebih > Waterfall > Alcove > Block Right`);
    $skip(`Ebih > Waterfall > Alcove Left > Block Left`);
    $skip(`Ebih > Waterfall > Alcove Right > Block Right`);
    $add_item(Ebih_Waterfall_Block_Right);
    $add_item(Ebih_Waterfall_Block_Left);
  Defeat_MUS_A_M20:
    $skip(`Amagi > West Lake > Cavern Refill Station > Break Wall`);
    $add_item(Amagi_Dragon_Eye_Passage);

settings:
  boomerang_steering:
    type: bool
  major_glitches:
    type: bool
  minor_glitches:
    type: bool

special:
  # For World.png,
  # a tile is 432x240, and split into 27x15 16x16 squares
  # scaled to 50%, it's 216x120. scaled to 10/24, it's 180x100
  graph_scale: [216, -120]
  graph_exclude_tags: [interior, exterior, portal]
  map_ppi: 72
  map_file: AV2-World-50%.png  # contact me
  map_min_coord: [0, -1]
  map_max_coord: [46, 90]

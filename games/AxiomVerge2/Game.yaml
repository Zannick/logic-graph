name: Axiom Verge 2

start:
  position: Antarctica > West > Helipad
  save: Antarctica > West > Helipad
  mode: Indra
  # By itself 'None' would be interpreted as a string,
  # which becomes its own independent per-variable enum type.
  indra: SpotId::None
  last: SpotId::None
  # This should be a load effect? prev_area = $get_area(^position) ?
  prev_area: Antarctica > West
  energy: 0
  breach: false
  flasks: 0


objectives:
  Start: Amashilama
  # Greedy search will have a problem with purchases if there are insufficient funds;
  # it will never consider skipping what's available and may be unable to buy something
  # necessary.
  Progress%: Infect and Flask{3}

movements:
  default:
    # a grid line = 1 unit. each minimap pixel is about .1 unit
    x: .285  # about 3.5s per grid x-unit
    fall: 1
    jump: .6  # can vary with jump height, so take a rough estimate of usual
    jump_down: .1
    # y: .8  # assumes as moving freely, but should be a fall speed
    # y = fall speed, about 1 level / 1.25s = .8
  # TODO: mist movement costs 30 energy/s
  mist_upgraded:
    req: Mist_Upgrade
    free: .225  # this is an estimate


time:
  default: 1
  urn: 5.5
  flask: 5.5
  # when grabbing the urn/flask with the boomerang
  remote_urn: 6.5
  remote_flask: 6.5
  xshift: 1.35  # sometimes 1.2, sometimes 1.5?
  # Doors leading inside/outside
  interior: 0.75
  exterior: 0.75
  tent: 0.5
  # item is freestanding -> can be picked up with no delay
  standing: 0
  # spots are technically the same, but in different areas to partition the area map
  overlap: 0  

warps:
  earth_save:
    time: 5  # initial savewarp pre-amashi
    req: WITHIN `Antarctica`
    to: ^save
    loads: true
  indra_save:
    time: 14.5
    req: NOT WITHIN `Menu` and Amashilama and ^mode != 'drone'
    to: ^save
    do: ^energy = $max_energy
    loads: true
  drone_save:
    time: 12
    req: NOT WITHIN `Menu` and ^mode == 'drone'
    to: ^save
    do: ^energy = $max_energy
  menu:
    time: 1
    req: NOT WITHIN `Menu` and ^flasks > 0
    to: Menu > Upgrade Menu > Physiology
    do: ^last = ^position
  exit_menu:
    time: 0.2
    req: WITHIN `Menu`
    to: ^last

actions:
  - name: Recall Drone
    req: NOT WITHIN `Menu` and $can_recall
    do: ^mode = 'Indra'; ^position = ^indra
    # Can open the menu during this time
    time: 3
  - name: Deploy Drone
    req: NOT WITHIN `Menu` and $can_deploy
    do: ^mode = 'drone'; ^indra = ^position
    time: 0.5

helpers:
  $melee: Ice_Axe or ^mode == 'drone'
  $can_damage: $melee or Boomerang
  $grab: ^mode != 'drone' and Ledge_Grab
  $climb: ^mode != 'drone' and Wall_Climb
  $hook: ^mode == 'drone' and Slingshot_Hook
  $can_deploy: Remote_Drone and ^mode != 'drone' and not Anuman
  $can_recall: ^mode == 'drone' and not Anuman

  $max_energy:num: PER Nano_Points { 3 => 450, 2 => 400, 1 => 350, _ => 300 }

  $offset: major_glitches and $melee
  $block_clip: minor_glitches and ^mode == 'drone'
  $block_clip_escape: minor_glitches and $hook

  $save:action: ^save = ^position; ^energy = $max_energy
  $reset_old_area:action(newpos:SpotId): >
    IF (^newpos NOT WITHIN ^prev_area
        AND ^position NOT WITHIN ^prev_area
        AND ^newpos NOT WITHIN $get_area(^position)) {
           $reset_area(^prev_area); ^prev_area = $get_area(^position);
    }


collect:
  # Any action that has multiple statements, and one relies on the other
  # (like if this said ^save = ^position after changing position)
  # will not write a correct has_effect
  Amashilama: ^save = `Glacier > Revival > Save Point`
  Flask: ^flasks += 1
  #Big_Flask: ^flasks += 2
  Infect: ^energy = $max_energy
  Health_Node: ^energy = $max_energy

settings:
  boomerang_steering:
    type: bool
  major_glitches:
    type: bool
  minor_glitches:
    type: bool
%% include 'header.rs.jinja'

#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::{Context, data, enums, flags};
use crate::graph::{self, *};
use crate::graph_enums::*;
use crate::items::Item;
use crate::movements;
use crate::prices::Currency;
use crate::rules;
use analyzer::matchertrie::matcher::*;
use analyzer::matchertrie::observe::*;
use analyzer::matchertrie::trie::Node;
use analyzer::solutions::Solution;
use std::sync::{Arc, Mutex};

#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub enum OneObservation {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% set c = ctx|camelize|camelize
%% if t in int_types
    {{ c }}Eq({{ t }}),
    {{ c }}Ge({{ t }}, bool),
    {{ c }}Le({{ t }}, bool),
    {{ c }}Range({{ t }}, {{ t }}, bool),
%% else
    {{ c }}({{ t }}),
%% endif
%% endfor
    // items
%% for item, ct in gl.item_max_counts.items()|sort if item not in bfp.varmap
%% set t = ct|get_int_type_for_max
%% set c = item|camelize
    {{ c }}Eq({{ t }}),
    {{ c }}Ge({{ t }}, bool),
    {{ c }}Le({{ t }}, bool),
    {{ c }}Range({{ t }}, {{ t }}, bool),
%% endfor
    // bitflags
%% for group in bfp.flag_groups
    CBits{{ loop.index }}{ mask: flags::ContextBits{{ loop.index }}, result: flags::ContextBits{{ loop.index }} },
%% endfor
}


#[derive(Debug, Default)]
pub struct FullObservation {
    // context vars: observed or not. Ints get comparisons as well
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% if t in int_types
    {{ ctx }}: IntegerObservation<{{ t }}>,
%% else
    {{ ctx }}: bool,
%% endif
%% endfor
    // items
%% for item, ct in gl.item_max_counts.items()|sort if item not in bfp.varmap
    {{ item|lower }}: IntegerObservation<{{ ct|get_int_type_for_max }}>,
%% endfor
    // bitflags: optionally a mask
%% for group in bfp.flag_groups
    cbits{{ loop.index }}: Option<flags::ContextBits{{ loop.index }}>,
%% endfor
    fields_observed: usize,
}

impl FullObservation {
    pub fn to_vec(&self, ctx: &Context) -> Vec<OneObservation> {
        let mut vec = Vec::with_capacity(self.fields_observed);
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% set c = ctx|camelize|camelize
%% if t in int_types
            match self.{{ ctx }} {
                IntegerObservation::Unknown => (),
                IntegerObservation::Eq(i) => vec.push(OneObservation::{{ c }}Eq(i)),
                IntegerObservation::Ge(i) => vec.push(OneObservation::{{ c }}Ge(i, ctx.{{ ctx }}() >= i)),
                IntegerObservation::Le(i) => vec.push(OneObservation::{{ c }}Le(i, ctx.{{ ctx }}() <= i)),
                IntegerObservation::Range(lo, hi) => vec.push(OneObservation::{{ c }}Range(lo, hi, ctx.{{ ctx }} >= lo && ctx.{{ ctx }} <= hi)),
            }
%% else
            if self.{{ ctx }} {
                vec.push(OneObservation::{{ c }}(ctx.{{ ctx }}));
            }
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
%% set ctx = item|lower
            match self.{{ ctx }} {
                IntegerObservation::Unknown => (),
                IntegerObservation::Eq(i) => vec.push(OneObservation::{{ c }}Eq(i)),
                IntegerObservation::Ge(i) => vec.push(OneObservation::{{ c }}Ge(i, ctx.{{ ctx }} >= i)),
                IntegerObservation::Le(i) => vec.push(OneObservation::{{ c }}Le(i, ctx.{{ ctx }} <= i)),
                IntegerObservation::Range(lo, hi) => vec.push(OneObservation::{{ c }}Range(lo, hi, ctx.{{ ctx }} >= lo && ctx.{{ ctx }} <= hi)),
            }
%% endfor
%% for group in bfp.flag_groups
            if let Some(mask) = self.cbits{{ loop.index }} {
                vec.push(OneObservation::CBits{{ loop.index }}{ mask, result: mask & ctx.cbits{{ loop.index }} });
            }
%% endfor
        vec
    }
}

#[derive(Debug)]
pub enum ObservationMatcher {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% set c = ctx|camelize|camelize
%% if t in int_types
    {{ c }}Lookup(LookupMatcher<Node<Self>, {{ t }}, (Arc<Solution<Context>>, usize)>),
    {{ c }}Ge {
        lo: {{ t }},
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    {{ c }}Le {
        hi: {{ t }},
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    {{ c }}Range {
        lo: {{ t }},
        hi: {{ t }},
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
%% else
    {{ c }}Lookup(LookupMatcher<Node<Self>, {{ t }}, (Arc<Solution<Context>>, usize)>),
%% endif
%% endfor
    // items
%% for item, ct in gl.item_max_counts.items()|sort if item not in bfp.varmap
%% set c = item|camelize
%% set t = ct|get_int_type_for_max
    {{ c }}Lookup(LookupMatcher<Node<Self>, {{ t }}, (Arc<Solution<Context>>, usize)>),
    {{ c }}Ge {
        lo: {{ t }},
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    {{ c }}Le {
        hi: {{ t }},
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    {{ c }}Range {
        lo: {{ t }},
        hi: {{ t }},
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
%% endfor
    // bitflags
%% for group in bfp.flag_groups
    LookupCBits{{ loop.index }} {
        mask: flags::ContextBits{{ loop.index }},
        matcher: LookupMatcher<Node<Self>, flags::ContextBits{{ loop.index }}, (Arc<Solution<Context>>, usize)>,
    },
%% endfor
}

impl Default for ObservationMatcher {
    fn default() -> Self {
        Self::PositionLookup(LookupMatcher::new())
    }
}

impl MatcherDispatch for ObservationMatcher {
    type Node = Node<Self>;
    type Struct = Context;
    type Value = (Arc<Solution<Context>>, usize);
    fn new(obs: &OneObservation) -> (Arc<Mutex<Node<Self>>>, Self) {
        match obs {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% set c = ctx|camelize|camelize
%% if t in int_types
            &OneObservation::{{ c }}Eq(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::{{ c }}Lookup(m))
            }
            &OneObservation::{{ c }}Ge(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Ge { lo, matcher })
            }
            &OneObservation::{{ c }}Le(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Le { hi, matcher })
            }
            &OneObservation::{{ c }}Range(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Range { lo, hi, matcher })
            }
%% else
            &OneObservation::{{ c }}(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::{{ c }}Lookup(m))
            }
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
            &OneObservation::{{ c }}Eq(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::{{ c }}Lookup(m))
            }
            &OneObservation::{{ c }}Ge(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Ge { lo, matcher })
            }
            &OneObservation::{{ c }}Le(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Le { hi, matcher })
            }
            &OneObservation::{{ c }}Range(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Range { lo, hi, matcher })
            }
%% endfor
%% for group in bfp.flag_groups
            &OneObservation::CBits{{ loop.index }}{ mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits{{ loop.index }} { mask, matcher })
            }
%% endfor
        }
    }

    fn lookup(&self, val: &Context) -> (Option<Arc<Mutex<Node<Self>>>>, Option<Self::Value>) {
        match self {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% set c = ctx|camelize|camelize
%% if t in int_types
            Self::{{ c }}Lookup(m) => m.lookup(val.{{ ctx }}),
            Self::{{ c }}Ge { lo, matcher } => matcher.lookup(val.{{ ctx }} >= *lo),
            Self::{{ c }}Le { hi, matcher } => matcher.lookup(val.{{ ctx }} <= *hi),
            Self::{{ c }}Range { lo, hi, matcher } => matcher.lookup(val.{{ ctx }} >= *lo && val.{{ ctx }} <= *hi),
%% else
            Self::{{ c }}Lookup(m) => m.lookup(val.{{ ctx }}),
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
%% set ctx = item|lower
            Self::{{ c }}Lookup(m) => m.lookup(val.{{ ctx }}),
            Self::{{ c }}Ge { lo, matcher } => matcher.lookup(val.{{ ctx }} >= *lo),
            Self::{{ c }}Le { hi, matcher } => matcher.lookup(val.{{ ctx }} <= *hi),
            Self::{{ c }}Range { lo, hi, matcher } => matcher.lookup(val.{{ ctx }} >= *lo && val.{{ ctx }} <= *hi),
%% endfor
%% for group in bfp.flag_groups
            Self::LookupCBits{{ loop.index }} { mask, matcher } => matcher.lookup(val.cbits{{ loop.index }} & *mask),
%% endfor
        }
    }

    fn insert(&mut self, obs: &OneObservation) -> Option<Arc<Mutex<Node<Self>>>> {
        match (self, obs) {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% set c = ctx|camelize|camelize
%% if t in int_types
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}Eq(v)) => Some(m.insert(*v)),
            (Self::{{ c }}Ge { lo, matcher }, OneObservation::{{ c }}Ge(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::{{ c }}Le { hi, matcher }, OneObservation::{{ c }}Le(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::{{ c }}Range { lo, hi, matcher }, OneObservation::{{ c }}Range(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
%% else
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}(v)) => Some(m.insert(*v)),
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}Eq(v)) => Some(m.insert(*v)),
            (Self::{{ c }}Ge { lo, matcher }, OneObservation::{{ c }}Ge(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::{{ c }}Le { hi, matcher }, OneObservation::{{ c }}Le(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::{{ c }}Range { lo, hi, matcher }, OneObservation::{{ c }}Range(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
%% endfor
%% for group in bfp.flag_groups
            (Self::LookupCBits{{ loop.index }} { mask, matcher }, OneObservation::CBits{{ loop.index }} { mask: mask2, result }) if mask == mask2 => Some(matcher.insert(*result)),
%% endfor
            _ => None,
        }
    }

    fn set_value(&mut self, obs: &OneObservation, value: Self::Value) {
        match (self, obs) {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% set c = ctx|camelize|camelize
%% if t in int_types
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}Eq(v)) => m.set_value(*v, value),
            (Self::{{ c }}Ge { lo, matcher }, OneObservation::{{ c }}Ge(lo2, v)) if lo2 == lo => matcher.set_value(*v, value),
            (Self::{{ c }}Le { hi, matcher }, OneObservation::{{ c }}Le(hi2, v)) if hi2 == hi => matcher.set_value(*v, value),
            (Self::{{ c }}Range { lo, hi, matcher }, OneObservation::{{ c }}Range(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.set_value(*v, value),
%% else
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}(v)) => m.set_value(*v, value),
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}Eq(v)) => m.set_value(*v, value),
            (Self::{{ c }}Ge { lo, matcher }, OneObservation::{{ c }}Ge(lo2, v)) if lo2 == lo => matcher.set_value(*v, value),
            (Self::{{ c }}Le { hi, matcher }, OneObservation::{{ c }}Le(hi2, v)) if hi2 == hi => matcher.set_value(*v, value),
            (Self::{{ c }}Range { lo, hi, matcher }, OneObservation::{{ c }}Range(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.set_value(*v, value),
%% endfor
%% for group in bfp.flag_groups
            (Self::LookupCBits{{ loop.index }} { mask, matcher }, OneObservation::CBits{{ loop.index }} { mask: mask2, result }) if mask == mask2 => matcher.set_value(*result, value),
%% endfor
            _ => (),
        }
    }
}

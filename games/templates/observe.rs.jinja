%% include 'header.rs.jinja'

#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::{Context, data, enums, flags};
use crate::graph::{self, *};
use crate::graph_enums::*;
use crate::items::Item;
use crate::movements;
use crate::prices::Currency;
use crate::rules;
use analyzer::matchertrie::*;
use analyzer::observer::*;
use analyzer::solutions::Solution;
use std::sync::{Arc, Mutex};

#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub enum OneObservation {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% set c = ctx|camelize|camelize
%% if t in int_types
    {{ c }}Exact({{ t }}),
    {{ c }}Eq({{ t }}, bool),
    {{ c }}Ge({{ t }}, bool),
    {{ c }}Le({{ t }}, bool),
    {{ c }}Range({{ t }}, {{ t }}, bool),
%% else
    {{ c }}({{ t }}),
%% endif
%% endfor
    // items
%% for item, ct in gl.item_max_counts.items()|sort if item not in bfp.varmap
%% set t = ct|get_int_type_for_max
%% set c = item|camelize
    {{ c }}Exact({{ t }}),
    {{ c }}Eq({{ t }}, bool),
    {{ c }}Ge({{ t }}, bool),
    {{ c }}Le({{ t }}, bool),
    {{ c }}Range({{ t }}, {{ t }}, bool),
%% endfor
    // bitflags
%% for group in bfp.flag_groups
    CBits{{ loop.index }}{ mask: flags::ContextBits{{ loop.index }}, result: flags::ContextBits{{ loop.index }} },
%% endfor
}


#[derive(Debug, Default)]
pub struct FullObservation {
    // context vars: observed or not. Ints get comparisons as well but they are observed-as-true comparisons,
    // or otherwise partitioned as exact
%# TODO: Allow disjoint comparisons so we can generalize into boolean better without the actual observation here.
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% if t in int_types
    {{ ctx }}: IntegerObservation<{{ t }}>,
%% else
    {{ ctx }}: bool,
%% endif
%% endfor
    // items
%% for item, ct in gl.item_max_counts.items()|sort if item not in bfp.varmap
    {{ item|lower }}: IntegerObservation<{{ ct|get_int_type_for_max }}>,
%% endfor
    // bitflags: optionally a mask
%% for group in bfp.flag_groups
    cbits{{ loop.index }}: Option<flags::ContextBits{{ loop.index }}>,
%% endfor
    pub strict: bool,
}

impl Observer for FullObservation {
    type Ctx = Context;
    type Matcher = ObservationMatcher;

    fn from_victory_state(won: &Context, world: &World) -> Self {
        let mut full_obs = Self::default();
        full_obs.position = true;
        match world.rule_victory {
%% for v, info in rules['$victory'].variants.items()
            RuleVictory::{{ v|construct_id|camelize }} => {
                rules::observe_access_{{ info.func_id }}(won, world, &mut full_obs);
            }
%% endfor
        }
        full_obs
    }

    fn observe_visit(&mut self, loc_id: LocationId) {
        match loc_id {
%% for loc in gl.locations()
%% set visit = 'VISITED_' + loc.id
%% set skip = 'SKIPPED_' + loc.id
            LocationId::{{ loc.id }} =>  {
                self.cbits{{ bfp.varmap[visit] }}.insert(flags::ContextBits{{ bfp.varmap[visit] }}::{{ visit|upper }});
                self.cbits{{ bfp.varmap[skip] }}.insert(flags::ContextBits{{ bfp.varmap[skip] }}::{{ skip|upper }});
            }
%% endfor
        }
    }

    fn observe_collect(&mut self, ctx: &Context, item: Item, world: &World) {
        match item {
%% for item, info in collect.items()
            Item::{{ item }} => rules::observe_action_{{ info.action_id }}(ctx, world, self),
%% endfor
            _ => (),
        }
    }

    fn observe_on_entry(&mut self, cur: &Context, dest: SpotId, world: &World) {
%% for pltype in ['Region', 'Area']
%% if context_position_watchers[pltype|lower]
        let {{ pltype|lower }} = get_{{ pltype|lower }}(dest);
        match {{ pltype|lower }} {
%% for r in context_position_watchers[pltype|lower]|sort
%% set place = id_lookup[r]
%% if place.action_id
            {{ pltype }}Id::{{ r }} => {
                if get_{{ pltype|lower }}(cur.position) != {{ pltype|lower }} {
                    rules::observe_action_{{ place.action_id }}(cur, world, dest, self);
                }
            }
%% endif
%% endfor
            _ => (),
        }
%% endif
%% endfor
%% if context_position_watchers['spot']
        if cur.position != dest {
            match dest {
%% for s in context_position_watchers['spot']|sort
%% set spot = id_lookup[s]
%# Reset rules would go here if we want them.
%% if spot.action_id
                SpotId::{{ s }} => {
                    rules::observe_action_{{ spot.action_id }}(cur, world, dest, self);
                }
%% endif
%% endfor
                _ => (),
            }
        }
%% endif
    }

%# We compare all the integer observations since the bounds have to change.-
%# Otherwise we have to understand all the action rules to reverse them.-
    fn update(&mut self, from: &Context, to: &Context) {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% if t in int_types
        if from.{{ ctx }} != to.{{ ctx }} {
            self.{{ ctx }} = self.{{ ctx }}.shift(to.{{ ctx }} - from.{{ ctx }});
        }
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set ctx = item|lower
        if from.{{ ctx }} != to.{{ ctx }} {
            self.{{ ctx }} = self.{{ ctx }}.shift(to.{{ ctx }} - from.{{ ctx }});
        }
%% endfor
    }

    fn to_vec(&self, ctx: &Context) -> Vec<OneObservation> {
        let mut vec = Vec::with_capacity(self.fields_observed());
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% set c = ctx|camelize|camelize
%% if t in int_types
            match self.{{ ctx }} {
                IntegerObservation::Unknown => (),
                IntegerObservation::Exact => vec.push(OneObservation::{{ c }}Exact(ctx.{{ ctx }})),
                IntegerObservation::Eq(i) => vec.push(OneObservation::{{ c }}Eq(i, ctx.{{ ctx }} == i)),
                IntegerObservation::Ge(i) => vec.push(OneObservation::{{ c }}Ge(i, ctx.{{ ctx }} >= i)),
                IntegerObservation::Le(i) => vec.push(OneObservation::{{ c }}Le(i, ctx.{{ ctx }} <= i)),
                IntegerObservation::Range(lo, hi) => vec.push(OneObservation::{{ c }}Range(lo, hi, ctx.{{ ctx }} >= lo && ctx.{{ ctx }} <= hi)),
            }
%% else
            if self.{{ ctx }} {
                vec.push(OneObservation::{{ c }}(ctx.{{ ctx }}));
            }
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
%% set ctx = item|lower
            match self.{{ ctx }} {
                IntegerObservation::Unknown => (),
                IntegerObservation::Exact => vec.push(OneObservation::{{ c }}Exact(ctx.{{ ctx }})),
                IntegerObservation::Eq(i) => vec.push(OneObservation::{{ c }}Eq(i, ctx.{{ ctx }} == i)),
                IntegerObservation::Ge(i) => vec.push(OneObservation::{{ c }}Ge(i, ctx.{{ ctx }} >= i)),
                IntegerObservation::Le(i) => vec.push(OneObservation::{{ c }}Le(i, ctx.{{ ctx }} <= i)),
                IntegerObservation::Range(lo, hi) => vec.push(OneObservation::{{ c }}Range(lo, hi, ctx.{{ ctx }} >= lo && ctx.{{ ctx }} <= hi)),
            }
%% endfor
%% for group in bfp.flag_groups
            if let Some(mask) = self.cbits{{ loop.index }} {
                vec.push(OneObservation::CBits{{ loop.index }}{ mask, result: mask & ctx.cbits{{ loop.index }} });
            }
%% endfor
        vec
    }
}

impl FullObservation {
    fn fields_observed(&self) -> usize {
        let mut fields = 0;
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% if t in int_types
        if self.{{ ctx }} != IntegerObservation::Unknown { fields += 1; }
%% else
        if self.{{ ctx }} { fields += 1; }
%% endif
%% endfor
%% for item, ct in gl.item_max_counts.items()|sort if item not in bfp.varmap
        if self.{{ item|lower }} != IntegerObservation::Unknown { fields += 1; }
%% endfor
%% for group in bfp.flag_groups
        if self.cbits{{ loop.index }}.is_some() { fields += 1; }
%% endfor
        fields
    }

%# This might get used instead of apply.-
%% for ctx, t in context_types.items()
%% if ctx in bfp.varmap
    pub fn observe_{{ ctx }}(&mut self) {
        self.cbits{{ bfp.varmap[ctx] }}.insert(flags::ContextBits{{ bfp.varmap[ctx] }}::{{ ctx|upper }});
    }
%% elif t in int_types
    pub fn observe_{{ ctx }}(&mut self, obs: IntegerObservation<{{ t }}>) {
        if self.strict {
            self.{{ ctx }} = IntegerObservation::Exact;
        } else {
            self.{{ ctx }} = self.{{ ctx }}.combine(obs);
        }
    }
%% else
    pub fn observe_{{ ctx }}(&mut self) {
        self.{{ ctx }} = true;
    }
%% endif
%% endfor
%% for item, ct in gl.item_max_counts.items()|sort
%% set ctx = item|lower
%% if item in bfp.varmap
    pub fn observe_{{ ctx }}(&mut self) {
        self.cbits{{ bfp.varmap[item] }}.insert(flags::ContextBits{{ bfp.varmap[item] }}::{{ item|upper }});
    }
%% else
    pub fn observe_{{ ctx }}(&mut self, obs: IntegerObservation<{{ ct|get_int_type_for_max }}>) {
        if self.strict {
            self.{{ ctx }} = IntegerObservation::Exact;
        } else {
            self.{{ ctx }} = self.{{ ctx }}.combine(obs);
        }
    }
%% endif
%% endfor
}

#[derive(Debug)]
pub enum ObservationMatcher {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% set c = ctx|camelize|camelize
%% if t in int_types
    {{ c }}Lookup(LookupMatcher<Node<Self>, {{ t }}, (Arc<Solution<Context>>, usize)>),
    {{ c }}Eq {
        eq: {{ t }},
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    {{ c }}Ge {
        lo: {{ t }},
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    {{ c }}Le {
        hi: {{ t }},
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    {{ c }}Range {
        lo: {{ t }},
        hi: {{ t }},
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
%% else
    {{ c }}Lookup(LookupMatcher<Node<Self>, {{ t }}, (Arc<Solution<Context>>, usize)>),
%% endif
%% endfor
    // items
%% for item, ct in gl.item_max_counts.items()|sort if item not in bfp.varmap
%% set c = item|camelize
%% set t = ct|get_int_type_for_max
    {{ c }}Lookup(LookupMatcher<Node<Self>, {{ t }}, (Arc<Solution<Context>>, usize)>),
    {{ c }}Eq {
        eq: {{ t }},
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    {{ c }}Ge {
        lo: {{ t }},
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    {{ c }}Le {
        hi: {{ t }},
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
    {{ c }}Range {
        lo: {{ t }},
        hi: {{ t }},
        matcher: BooleanMatcher<Node<Self>, (Arc<Solution<Context>>, usize)>,
    },
%% endfor
    // bitflags
%% for group in bfp.flag_groups
    LookupCBits{{ loop.index }} {
        mask: flags::ContextBits{{ loop.index }},
        matcher: LookupMatcher<Node<Self>, flags::ContextBits{{ loop.index }}, (Arc<Solution<Context>>, usize)>,
    },
%% endfor
}

impl Default for ObservationMatcher {
    fn default() -> Self {
        Self::PositionLookup(LookupMatcher::new())
    }
}

impl MatcherDispatch for ObservationMatcher {
    type Node = Node<Self>;
    type Struct = Context;
    type Value = (Arc<Solution<Context>>, usize);
    fn new(obs: &OneObservation) -> (Arc<Mutex<Node<Self>>>, Self) {
        match obs {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% set c = ctx|camelize|camelize
%% if t in int_types
            &OneObservation::{{ c }}Exact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::{{ c }}Lookup(m))
            }
            &OneObservation::{{ c }}Eq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Eq { eq, matcher })
            }
            &OneObservation::{{ c }}Ge(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Ge { lo, matcher })
            }
            &OneObservation::{{ c }}Le(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Le { hi, matcher })
            }
            &OneObservation::{{ c }}Range(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Range { lo, hi, matcher })
            }
%% else
            &OneObservation::{{ c }}(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::{{ c }}Lookup(m))
            }
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
            &OneObservation::{{ c }}Exact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::{{ c }}Lookup(m))
            }
            &OneObservation::{{ c }}Eq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Eq { eq, matcher })
            }
            &OneObservation::{{ c }}Ge(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Ge { lo, matcher })
            }
            &OneObservation::{{ c }}Le(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Le { hi, matcher })
            }
            &OneObservation::{{ c }}Range(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Range { lo, hi, matcher })
            }
%% endfor
%% for group in bfp.flag_groups
            &OneObservation::CBits{{ loop.index }}{ mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits{{ loop.index }} { mask, matcher })
            }
%% endfor
        }
    }

    fn lookup(&self, val: &Context) -> (Option<Arc<Mutex<Node<Self>>>>, Option<Self::Value>) {
        match self {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% set c = ctx|camelize|camelize
%% if t in int_types
            Self::{{ c }}Lookup(m) => m.lookup(val.{{ ctx }}),
            Self::{{ c }}Eq { eq, matcher } => matcher.lookup(val.{{ ctx }} == *eq),
            Self::{{ c }}Ge { lo, matcher } => matcher.lookup(val.{{ ctx }} >= *lo),
            Self::{{ c }}Le { hi, matcher } => matcher.lookup(val.{{ ctx }} <= *hi),
            Self::{{ c }}Range { lo, hi, matcher } => matcher.lookup(val.{{ ctx }} >= *lo && val.{{ ctx }} <= *hi),
%% else
            Self::{{ c }}Lookup(m) => m.lookup(val.{{ ctx }}),
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
%% set ctx = item|lower
            Self::{{ c }}Lookup(m) => m.lookup(val.{{ ctx }}),
            Self::{{ c }}Eq { eq, matcher } => matcher.lookup(val.{{ ctx }} == *eq),
            Self::{{ c }}Ge { lo, matcher } => matcher.lookup(val.{{ ctx }} >= *lo),
            Self::{{ c }}Le { hi, matcher } => matcher.lookup(val.{{ ctx }} <= *hi),
            Self::{{ c }}Range { lo, hi, matcher } => matcher.lookup(val.{{ ctx }} >= *lo && val.{{ ctx }} <= *hi),
%% endfor
%% for group in bfp.flag_groups
            Self::LookupCBits{{ loop.index }} { mask, matcher } => matcher.lookup(val.cbits{{ loop.index }} & *mask),
%% endfor
        }
    }

    fn insert(&mut self, obs: &OneObservation) -> Option<Arc<Mutex<Node<Self>>>> {
        match (self, obs) {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% set c = ctx|camelize|camelize
%% if t in int_types
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}Exact(v)) => Some(m.insert(*v)),
            (Self::{{ c }}Eq { eq, matcher }, OneObservation::{{ c }}Eq(eq2, v)) if eq2 == eq => Some(matcher.insert(*v)),
            (Self::{{ c }}Ge { lo, matcher }, OneObservation::{{ c }}Ge(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::{{ c }}Le { hi, matcher }, OneObservation::{{ c }}Le(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::{{ c }}Range { lo, hi, matcher }, OneObservation::{{ c }}Range(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
%% else
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}(v)) => Some(m.insert(*v)),
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}Exact(v)) => Some(m.insert(*v)),
            (Self::{{ c }}Eq { eq, matcher }, OneObservation::{{ c }}Eq(eq2, v)) if eq2 == eq => Some(matcher.insert(*v)),
            (Self::{{ c }}Ge { lo, matcher }, OneObservation::{{ c }}Ge(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::{{ c }}Le { hi, matcher }, OneObservation::{{ c }}Le(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::{{ c }}Range { lo, hi, matcher }, OneObservation::{{ c }}Range(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
%% endfor
%% for group in bfp.flag_groups
            (Self::LookupCBits{{ loop.index }} { mask, matcher }, OneObservation::CBits{{ loop.index }} { mask: mask2, result }) if mask == mask2 => Some(matcher.insert(*result)),
%% endfor
            _ => None,
        }
    }

    fn set_value(&mut self, obs: &OneObservation, value: Self::Value) {
        match (self, obs) {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% set c = ctx|camelize|camelize
%% if t in int_types
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}Exact(v)) => m.set_value(*v, value),
            (Self::{{ c }}Eq { eq, matcher }, OneObservation::{{ c }}Eq(eq2, v)) if eq2 == eq => matcher.set_value(*v, value),
            (Self::{{ c }}Ge { lo, matcher }, OneObservation::{{ c }}Ge(lo2, v)) if lo2 == lo => matcher.set_value(*v, value),
            (Self::{{ c }}Le { hi, matcher }, OneObservation::{{ c }}Le(hi2, v)) if hi2 == hi => matcher.set_value(*v, value),
            (Self::{{ c }}Range { lo, hi, matcher }, OneObservation::{{ c }}Range(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.set_value(*v, value),
%% else
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}(v)) => m.set_value(*v, value),
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}Exact(v)) => m.set_value(*v, value),
            (Self::{{ c }}Eq { eq, matcher }, OneObservation::{{ c }}Eq(eq2, v)) if eq2 == eq => matcher.set_value(*v, value),
            (Self::{{ c }}Ge { lo, matcher }, OneObservation::{{ c }}Ge(lo2, v)) if lo2 == lo => matcher.set_value(*v, value),
            (Self::{{ c }}Le { hi, matcher }, OneObservation::{{ c }}Le(hi2, v)) if hi2 == hi => matcher.set_value(*v, value),
            (Self::{{ c }}Range { lo, hi, matcher }, OneObservation::{{ c }}Range(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.set_value(*v, value),
%% endfor
%% for group in bfp.flag_groups
            (Self::LookupCBits{{ loop.index }} { mask, matcher }, OneObservation::CBits{{ loop.index }} { mask: mask2, result }) if mask == mask2 => matcher.set_value(*result, value),
%% endfor
            _ => (),
        }
    }

    fn nodes(&self) -> Vec<Arc<Mutex<Node<Self>>>> {
        match self {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% set c = ctx|camelize|camelize
%% if t in int_types
            Self::{{ c }}Lookup(m) => m.nodes(),
            Self::{{ c }}Eq { matcher, .. } => matcher.nodes(),
            Self::{{ c }}Ge { matcher, .. } => matcher.nodes(),
            Self::{{ c }}Le { matcher, .. } => matcher.nodes(),
            Self::{{ c }}Range { matcher, .. } => matcher.nodes(),
%% else
            Self::{{ c }}Lookup(m) => m.nodes(),
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
%% set ctx = item|lower
            Self::{{ c }}Lookup(m) => m.nodes(),
            Self::{{ c }}Eq { matcher, .. } => matcher.nodes(),
            Self::{{ c }}Ge { matcher, .. } => matcher.nodes(),
            Self::{{ c }}Le { matcher, .. } => matcher.nodes(),
            Self::{{ c }}Range { matcher, .. } => matcher.nodes(),
%% endfor
%% for group in bfp.flag_groups
            Self::LookupCBits{{ loop.index }} { matcher, .. } => matcher.nodes(),
%% endfor
        }
    }

    fn num_values(&self) -> usize {
        match self {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
%% set c = ctx|camelize|camelize
%% if t in int_types
            Self::{{ c }}Lookup(m) => m.num_values(),
            Self::{{ c }}Eq { matcher, .. } => matcher.num_values(),
            Self::{{ c }}Ge { matcher, .. } => matcher.num_values(),
            Self::{{ c }}Le { matcher, .. } => matcher.num_values(),
            Self::{{ c }}Range { matcher, .. } => matcher.num_values(),
%% else
            Self::{{ c }}Lookup(m) => m.num_values(),
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
%% set ctx = item|lower
            Self::{{ c }}Lookup(m) => m.num_values(),
            Self::{{ c }}Eq { matcher, .. } => matcher.num_values(),
            Self::{{ c }}Ge { matcher, .. } => matcher.num_values(),
            Self::{{ c }}Le { matcher, .. } => matcher.num_values(),
            Self::{{ c }}Range { matcher, .. } => matcher.num_values(),
%% endfor
%% for group in bfp.flag_groups
            Self::LookupCBits{{ loop.index }} { matcher, .. } => matcher.num_values(),
%% endfor
        }
    }
}

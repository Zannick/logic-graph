%% include 'header.rs.jinja'

#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::{Context, data, enums, flags};
use crate::graph::{self, *};
use crate::items::Item;
use crate::movements;
use crate::prices::Currency;
use crate::rules;
use analyzer::matchertrie::*;
use analyzer::observer::*;
use analyzer::solutions::{Solution, SolutionSuffix};
use std::hash::Hash;
use std::sync::{Arc, Mutex};

#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub enum OneObservation {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap and ctx not in unused_map_tiles
%% set c = ctx|camelize|camelize
%% if t in int_types
    {{ c }}Exact({{ t }}),
    {{ c }}Eq({{ t }}, bool),
    {{ c }}Ge({{ t }}, bool),
    {{ c }}Le({{ t }}, bool),
    {{ c }}Range({{ t }}, {{ t }}, bool),
%% else
    {{ c }}({{ t }}),
%% endif
%% endfor
    // items
%% for item, ct in gl.item_max_counts.items()|sort if item not in bfp.varmap
%% set t = ct|get_int_type_for_max
%% set c = item|camelize
    {{ c }}Exact({{ t }}),
    {{ c }}Eq({{ t }}, bool),
    {{ c }}Ge({{ t }}, bool),
    {{ c }}Le({{ t }}, bool),
    {{ c }}Range({{ t }}, {{ t }}, bool),
%% endfor
    // bitflags
%% for group in bfp.flag_groups
    CBits{{ loop.index }}{ mask: flags::ContextBits{{ loop.index }}, result: flags::ContextBits{{ loop.index }} },
%% endfor
}

impl OneObservation {
    pub fn matches(&self, ctx: &Context) -> bool {
        match *self {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap and ctx not in unused_map_tiles
%% set c = ctx|camelize|camelize
%% if t in int_types
            OneObservation::{{ c }}Exact(v) => ctx.{{ ctx }} == v,
            OneObservation::{{ c }}Eq(v, res) => (ctx.{{ ctx }} == v) == res,
            OneObservation::{{ c }}Ge(v, res) => (ctx.{{ ctx }} >= v) == res,
            OneObservation::{{ c }}Le(v, res) => (ctx.{{ ctx }} <= v) == res,
            OneObservation::{{ c }}Range(lo, hi, res) => (ctx.{{ ctx }} >= lo && ctx.{{ ctx }} <= hi) == res,
%% else
            OneObservation::{{ c }}(v) => ctx.{{ ctx }} == v,
%% endif
%% endfor
%% for item, ct in gl.item_max_counts.items()|sort if item not in bfp.varmap
%% set t = ct|get_int_type_for_max
%% set c = item|camelize
%% set ctx = item|lower
            OneObservation::{{ c }}Exact(v) => ctx.{{ ctx }} == v,
            OneObservation::{{ c }}Eq(v, res) => (ctx.{{ ctx }} == v) == res,
            OneObservation::{{ c }}Ge(v, res) => (ctx.{{ ctx }} >= v) == res,
            OneObservation::{{ c }}Le(v, res) => (ctx.{{ ctx }} <= v) == res,
            OneObservation::{{ c }}Range(lo, hi, res) => (ctx.{{ ctx }} >= lo && ctx.{{ ctx }} <= hi) == res,
%% endfor
%% for group in bfp.flag_groups
            OneObservation::CBits{{ loop.index }}{ mask, result } => (ctx.cbits{{ loop.index }} & mask) == result,
%% endfor
        }
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq)]
enum ObservationType {
    Visit(LocationId),
%% for ctx, t in context_types.items() if ctx not in unused_map_tiles and ctx not in special.ignore_observations
%% set c = ctx|camelize|camelize
%% if ctx not in bfp.varmap and t in int_types
    Observe{{ c }}(IntegerObservation<{{ t }}>),
    Shift{{ c }}({{ t }}),
%% else
    Observe{{ c }},
%% endif
    Clear{{ c }},
%% endfor
%% for item, ct in gl.item_max_counts.items()|sort
%% set c = item|camelize
%% if item in bfp.varmap
    Observe{{ c }},
%% else
%% set t = ct|get_int_type_for_max
    Observe{{ c }}(IntegerObservation<{{ t }}>),
    Shift{{ c }}({{ t }}),
%% endif
    Clear{{ c }},
%% endfor

%% for c1, c2 in swap_pairs
    Swap{{ c1|camelize|camelize }}And{{ c2|camelize|camelize }},
%% endfor
}


#[derive(Debug, Default)]
pub struct FullObservation {
    // context vars: observed or not. Ints get comparisons as well but they are observed-as-true comparisons,
    // or otherwise partitioned as exact
%# TODO: Allow disjoint comparisons so we can generalize into boolean better without the actual observation here.
%% for ctx, t in context_types.items() if ctx not in bfp.varmap and ctx not in unused_map_tiles
%% if t in int_types
    {{ ctx }}: IntegerObservation<{{ t }}>,
%% else
    {{ ctx }}: bool,
%% endif
%% endfor
    // items
%% for item, ct in gl.item_max_counts.items()|sort if item not in bfp.varmap
    {{ item|lower }}: IntegerObservation<{{ ct|get_int_type_for_max }}>,
%% endfor
    // bitflags: optionally a mask
%% for group in bfp.flag_groups
    cbits{{ loop.index }}: flags::ContextBits{{ loop.index }},
%% endfor
    stack: Vec<ObservationType>,
    pub strict: bool,
}

impl Observer for FullObservation {
    type Ctx = Context;

    fn from_victory_state(won: &Context, world: &World) -> Self {
        let mut full_obs = Self::default();
        full_obs.position = true;
        match world.rule_victory {
%% for v, info in rules['$victory'].variants.items()
            RuleVictory::{{ v|construct_id|camelize }} => {
                rules::observe_access_{{ info.func_id }}(won, world, &mut full_obs);
            }
%% endfor
        }
        full_obs
    }

    fn observe_position(&mut self) {
        self.stack.push(ObservationType::ObservePosition);
    }

    fn observe_visited(&mut self, loc_id: LocationId) {
        self.stack.push(ObservationType::Visit(loc_id));
    }

    fn observe_item(&mut self, item: Item) {
        match item {
%% for item in gl.item_max_counts|sort
%% set ctx = item|lower
            Item::{{ item }} => self.{% if item not in bfp.varmap %}observe_shift_{{ ctx }}(1){% else %}clear_{{ ctx }}(){% endif %},
%% endfor
            _ => (),
        }
    }

    fn apply_observations(&mut self) {
        while let Some(obs) = self.stack.pop() {
            match obs {
                ObservationType::Visit(loc_id) => self.apply_visit(loc_id),
%% for ctx, t in context_types.items() if ctx not in unused_map_tiles and ctx not in special.ignore_observations
%% set c = ctx|camelize|camelize
%% if ctx not in bfp.varmap and t in int_types
                ObservationType::Observe{{ c }}(iobs) => self.apply_observe_{{ ctx }}(iobs),
                ObservationType::Shift{{ c }}(diff) => self.apply_shift_{{ ctx }}(diff),
%% else
                ObservationType::Observe{{ c }} => self.apply_observe_{{ ctx }}(),
%% endif
                ObservationType::Clear{{ c }} => self.apply_clear_{{ ctx }}(),
%% endfor
%% for item, ct in gl.item_max_counts.items()|sort
%% set c = item|camelize
%% set ctx = item|lower
%% if item in bfp.varmap
                ObservationType::Observe{{ c }} => self.apply_observe_{{ ctx }}(),
%% else
                ObservationType::Observe{{ c }}(iobs) => self.apply_observe_{{ ctx }}(iobs),
                ObservationType::Shift{{ c }}(iobs) => self.apply_shift_{{ ctx }}(iobs),
%% endif
                ObservationType::Clear{{ c }} => self.apply_clear_{{ ctx }}(),
%% endfor

%% for c1, c2 in swap_pairs
                ObservationType::Swap{{ c1|camelize|camelize }}And{{ c2|camelize|camelize }} => self.apply_swap_{{ c1 }}__{{ c2 }}(),
%% endfor
            }
        }
    }

    fn to_vec(&self, ctx: &Context) -> Vec<OneObservation> {
        let mut vec = Vec::with_capacity(self.fields_observed());
%% for ctx, t in context_types.items() if ctx not in bfp.varmap and ctx not in unused_map_tiles
%% set c = ctx|camelize|camelize
%% if t in int_types
        match self.{{ ctx }} {
            IntegerObservation::Unknown => (),
            IntegerObservation::Exact => vec.push(OneObservation::{{ c }}Exact(ctx.{{ ctx }})),
            IntegerObservation::Eq(i) => vec.push(OneObservation::{{ c }}Eq(i, ctx.{{ ctx }} == i)),
            IntegerObservation::Ge(i) => vec.push(OneObservation::{{ c }}Ge(i, ctx.{{ ctx }} >= i)),
            IntegerObservation::Le(i) => vec.push(OneObservation::{{ c }}Le(i, ctx.{{ ctx }} <= i)),
            IntegerObservation::Range(lo, hi) => vec.push(OneObservation::{{ c }}Range(lo, hi, ctx.{{ ctx }} >= lo && ctx.{{ ctx }} <= hi)),
        }
%% else
        if self.{{ ctx }} {
            vec.push(OneObservation::{{ c }}(ctx.{{ ctx }}));
        }
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
%% set ctx = item|lower
        match self.{{ ctx }} {
            IntegerObservation::Unknown => (),
            IntegerObservation::Exact => vec.push(OneObservation::{{ c }}Exact(ctx.{{ ctx }})),
            IntegerObservation::Eq(i) => vec.push(OneObservation::{{ c }}Eq(i, ctx.{{ ctx }} == i)),
            IntegerObservation::Ge(i) => vec.push(OneObservation::{{ c }}Ge(i, ctx.{{ ctx }} >= i)),
            IntegerObservation::Le(i) => vec.push(OneObservation::{{ c }}Le(i, ctx.{{ ctx }} <= i)),
            IntegerObservation::Range(lo, hi) => vec.push(OneObservation::{{ c }}Range(lo, hi, ctx.{{ ctx }} >= lo && ctx.{{ ctx }} <= hi)),
        }
%% endfor
%% for group in bfp.flag_groups
        if !self.cbits{{ loop.index }}.is_empty() {
            vec.push(OneObservation::CBits{{ loop.index }}{ mask: self.cbits{{ loop.index }}, result: self.cbits{{ loop.index }} & ctx.cbits{{ loop.index }} });
        }
%% endfor
        vec
    }
}

impl FullObservation {
    fn fields_observed(&self) -> usize {
        let mut fields = 0;
%% for ctx, t in context_types.items() if ctx not in bfp.varmap and ctx not in unused_map_tiles
%% if t in int_types
        if self.{{ ctx }} != IntegerObservation::Unknown { fields += 1; }
%% else
        if self.{{ ctx }} { fields += 1; }
%% endif
%% endfor
%% for item, ct in gl.item_max_counts.items()|sort if item not in bfp.varmap
        if self.{{ item|lower }} != IntegerObservation::Unknown { fields += 1; }
%% endfor
%% for group in bfp.flag_groups
        if !self.cbits{{ loop.index }}.is_empty() { fields += 1; }
%% endfor
        fields
    }

    pub fn observe_has_item(&mut self, item: Item) {
        match item {
%% for item, ct in gl.item_max_counts.items()|sort
%% set ctx = item|lower
%% if item in bfp.varmap
            Item::{{ item }} => self.observe_{{ ctx }}(),
%% else
%% set t = ct|get_int_type_for_max
            Item::{{ item }} => self.observe_{{ ctx }}(IntegerObservation::Ge(1)),
%% endif
%% endfor
            _ => (),
        }
    }

%% for ctx, t in context_types.items() if ctx not in unused_map_tiles
%% set c = ctx|camelize|camelize
%% if ctx in special.ignore_observations
    pub fn observe_{{ ctx }}(&self) {}
    pub fn clear_{{ ctx }}(&self) {}
%% elif ctx not in bfp.varmap and t in int_types
    pub fn observe_{{ ctx }}(&mut self, obs: IntegerObservation<{{ t }}>) {
        self.stack.push(ObservationType::Observe{{ c }}(if self.strict { IntegerObservation::Exact } else { obs }));
    }
    pub fn observe_shift_{{ ctx }}(&mut self, diff: {{ t }}) {
        self.stack.push(ObservationType::Shift{{ c }}(diff));{# Callers record the correct diff #}
    }
%% else
    pub fn observe_{{ ctx }}(&mut self) {
        self.stack.push(ObservationType::Observe{{ c }});
    }
%% endif
%% if ctx not in special.ignore_observations
    pub fn clear_{{ ctx }}(&mut self) {
        self.stack.push(ObservationType::Clear{{ c }});
    }
%% endif
%% endfor
%% for item, ct in gl.item_max_counts.items()|sort
%% set c = item|camelize
%% set ctx = item|lower
%% if item in bfp.varmap
    pub fn observe_{{ ctx }}(&mut self) {
        self.stack.push(ObservationType::Observe{{ c }});
    }
%% else
%% set t = ct|get_int_type_for_max
    pub fn observe_{{ ctx }}(&mut self, obs: IntegerObservation<{{ t }}>) {
        self.stack.push(ObservationType::Observe{{ c }}(if self.strict { IntegerObservation::Exact } else { obs }));
    }
    pub fn observe_shift_{{ ctx }}(&mut self, diff: {{ t }}) {
        self.stack.push(ObservationType::Shift{{ c }}(diff));{# Callers record the correct diff #}
    }
%% endif
    pub fn clear_{{ ctx }}(&mut self) {
        self.stack.push(ObservationType::Clear{{ c }});
    }
%% endfor

%% for c1, c2 in swap_pairs
    pub fn swap_{{ c1 }}__{{ c2 }}(&mut self) {
        self.stack.push(ObservationType::Swap{{ c1|camelize|camelize }}And{{ c2|camelize|camelize }});
    }
%% endfor

    fn apply_visit(&mut self, loc_id: LocationId) {
        match loc_id {
%% for loc in gl.locations()
%% set visit = 'VISITED_' + loc.canon_id
            LocationId::{{ loc.id }} => {
                self.cbits{{ bfp.varmap[visit] }}.insert(flags::ContextBits{{ bfp.varmap[visit] }}::{{ visit|upper }});
%% for tile in loc.tiles
%% if tile in used_map_tiles
                self.cbits{{ bfp.varmap[tile] }}.insert(flags::ContextBits{{ bfp.varmap[tile] }}::{{ tile|upper }});
%% endif
%% endfor
            }
%% endfor
        }
    }

%% for ctx, t in context_types.items() if ctx not in unused_map_tiles and ctx not in special.ignore_observations
%% set c = ctx|camelize|camelize
%% if ctx in bfp.varmap
    fn apply_observe_{{ ctx }}(&mut self) {
        self.cbits{{ bfp.varmap[ctx] }}.insert(flags::ContextBits{{ bfp.varmap[ctx] }}::{{ ctx|upper }});
    }
    fn apply_clear_{{ ctx }}(&mut self) {
        self.cbits{{ bfp.varmap[ctx] }}.remove(flags::ContextBits{{ bfp.varmap[ctx] }}::{{ ctx|upper }});
    }
%% elif t in int_types
    fn apply_observe_{{ ctx }}(&mut self, obs: IntegerObservation<{{ t }}>) {
        self.{{ ctx }} = self.{{ ctx }}.combine(obs);
    }
    fn apply_shift_{{ ctx }}(&mut self, diff: {{ t }}) {
        self.{{ ctx }} = self.{{ ctx }}.shift(-diff);{# We reverse the difference only here #}
    }
    fn apply_clear_{{ ctx }}(&mut self) {
        self.{{ ctx }} = IntegerObservation::Unknown;
    }
%% else
    fn apply_observe_{{ ctx }}(&mut self) {
        self.{{ ctx }} = true;
    }
    fn apply_clear_{{ ctx }}(&mut self) {
        self.{{ ctx }} = false;
    }
%% endif
%% endfor
%% for item, ct in gl.item_max_counts.items()|sort
%% set ctx = item|lower
%% if item in bfp.varmap
    fn apply_observe_{{ ctx }}(&mut self) {
        self.cbits{{ bfp.varmap[item] }}.insert(flags::ContextBits{{ bfp.varmap[item] }}::{{ item|upper }});
    }
    fn apply_clear_{{ ctx }}(&mut self) {
        self.cbits{{ bfp.varmap[item] }}.remove(flags::ContextBits{{ bfp.varmap[item] }}::{{ item|upper }});
    }
%% else
%% set t = ct|get_int_type_for_max
    fn apply_observe_{{ ctx }}(&mut self, obs: IntegerObservation<{{ t }}>) {
        self.{{ ctx }} = self.{{ ctx }}.combine(obs);
    }
    fn apply_shift_{{ ctx }}(&mut self, diff: {{ t }}) {
        self.{{ ctx }} = self.{{ ctx }}.shift(-diff);{# We reverse the difference only here #}
    }
    fn apply_clear_{{ ctx }}(&mut self) {
        self.{{ ctx }} = IntegerObservation::Unknown;
    }
%% endif
%% endfor

%% for c1, c2 in swap_pairs
    fn apply_swap_{{ c1 }}__{{ c2 }}(&mut self) {
%% if c1 in bfp.varmap or c2 in bfp.varmap
        let c1 = self.{% if c1 in bfp.varmap %}cbits{{ bfp.varmap[c1] }}.contains(flags::ContextBits{{ bfp.varmap[c1] }}::{{ c1|upper }}){% else %}{{ c1 }}{% endif %};
        let c2 = self.{% if c2 in bfp.varmap %}cbits{{ bfp.varmap[c2] }}.contains(flags::ContextBits{{ bfp.varmap[c2] }}::{{ c2|upper }}){% else %}{{ c2 }}{% endif %};
%% if c1 in bfp.varmap
        self.cbits{{ bfp.varmap[c1] }}.set(flags::ContextBits{{ bfp.varmap[c1] }}::{{ c1|upper }}, c2);
%% else
        self.{{ c1 }} = c2;
%% endif
%% if c2 in bfp.varmap
        self.cbits{{ bfp.varmap[c2] }}.set(flags::ContextBits{{ bfp.varmap[c2] }}::{{ c2|upper }}, c1);
%% else
        self.{{ c2 }} = c1;
%% endif
%% else
        std::mem::swap(&mut self.{{ c1 }}, &mut self.{{ c2 }});
%% endif
    }
%% endfor
}

#[derive(Debug)]
pub enum ObservationMatcher<Value: Clone + Eq + Hash, VS: MatcherStorage<Value>> {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap and ctx not in unused_map_tiles
%% set c = ctx|camelize|camelize
%% if t in int_types
    {{ c }}Lookup(LookupMatcher<Node<Self, Value>, {{ t }}, Value, VS>),
    {{ c }}Eq {
        eq: {{ t }},
        matcher: BooleanMatcher<Node<Self, Value>, Value, VS>,
    },
    {{ c }}Ge {
        lo: {{ t }},
        matcher: BooleanMatcher<Node<Self, Value>, Value, VS>,
    },
    {{ c }}Le {
        hi: {{ t }},
        matcher: BooleanMatcher<Node<Self, Value>, Value, VS>,
    },
    {{ c }}Range {
        lo: {{ t }},
        hi: {{ t }},
        matcher: BooleanMatcher<Node<Self, Value>, Value, VS>,
    },
%% else
    {{ c }}Lookup(LookupMatcher<Node<Self, Value>, {{ t }}, Value, VS>),
%% endif
%% endfor
    // items
%% for item, ct in gl.item_max_counts.items()|sort if item not in bfp.varmap
%% set c = item|camelize
%% set t = ct|get_int_type_for_max
    {{ c }}Lookup(LookupMatcher<Node<Self, Value>, {{ t }}, Value, VS>),
    {{ c }}Eq {
        eq: {{ t }},
        matcher: BooleanMatcher<Node<Self, Value>, Value, VS>,
    },
    {{ c }}Ge {
        lo: {{ t }},
        matcher: BooleanMatcher<Node<Self, Value>, Value, VS>,
    },
    {{ c }}Le {
        hi: {{ t }},
        matcher: BooleanMatcher<Node<Self, Value>, Value, VS>,
    },
    {{ c }}Range {
        lo: {{ t }},
        hi: {{ t }},
        matcher: BooleanMatcher<Node<Self, Value>, Value, VS>,
    },
%% endfor
    // bitflags
%% for group in bfp.flag_groups
    LookupCBits{{ loop.index }} {
        mask: flags::ContextBits{{ loop.index }},
        matcher: LookupMatcher<Node<Self, Value>, flags::ContextBits{{ loop.index }}, Value, VS>,
    },
%% endfor
}

impl<Value: Clone + Eq + Hash, VS: MatcherStorage<Value>> Default for ObservationMatcher<Value, VS> {
    fn default() -> Self {
        Self::PositionLookup(LookupMatcher::new())
    }
}

impl<Value: Clone + Eq + Hash, VS: MatcherStorage<Value>> MatcherDispatch<Value> for ObservationMatcher<Value, VS> {
    type Node = Node<Self, Value>;
    type Struct = Context;
    fn new(obs: &OneObservation) -> (Arc<Mutex<Node<Self, Value>>>, Self) {
        match obs {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap and ctx not in unused_map_tiles
%% set c = ctx|camelize|camelize
%% if t in int_types
            &OneObservation::{{ c }}Exact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::{{ c }}Lookup(m))
            }
            &OneObservation::{{ c }}Eq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Eq { eq, matcher })
            }
            &OneObservation::{{ c }}Ge(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Ge { lo, matcher })
            }
            &OneObservation::{{ c }}Le(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Le { hi, matcher })
            }
            &OneObservation::{{ c }}Range(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Range { lo, hi, matcher })
            }
%% else
            &OneObservation::{{ c }}(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::{{ c }}Lookup(m))
            }
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
            &OneObservation::{{ c }}Exact(v) => {
                let (node, m) = LookupMatcher::new_with(v);
                (node, ObservationMatcher::{{ c }}Lookup(m))
            }
            &OneObservation::{{ c }}Eq(eq, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Eq { eq, matcher })
            }
            &OneObservation::{{ c }}Ge(lo, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Ge { lo, matcher })
            }
            &OneObservation::{{ c }}Le(hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Le { hi, matcher })
            }
            &OneObservation::{{ c }}Range(lo, hi, res) => {
                let (node, matcher) = BooleanMatcher::new_with(res);
                (node, ObservationMatcher::{{ c }}Range { lo, hi, matcher })
            }
%% endfor
%% for group in bfp.flag_groups
            &OneObservation::CBits{{ loop.index }}{ mask, result } => {
                let (node, matcher) = LookupMatcher::new_with(result);
                (node, ObservationMatcher::LookupCBits{{ loop.index }} { mask, matcher })
            }
%% endfor
        }
    }

    fn clear(&mut self) {
        match self {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap and ctx not in unused_map_tiles
%% set c = ctx|camelize|camelize
%% if t in int_types
            Self::{{ c }}Lookup(m) => m.clear(),
            Self::{{ c }}Eq { matcher, .. } => matcher.clear(),
            Self::{{ c }}Ge { matcher, .. } => matcher.clear(),
            Self::{{ c }}Le { matcher, .. } => matcher.clear(),
            Self::{{ c }}Range { matcher, .. } => matcher.clear(),
%% else
            Self::{{ c }}Lookup(m) => m.clear(),
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
%% set ctx = item|lower
            Self::{{ c }}Lookup(m) => m.clear(),
            Self::{{ c }}Eq { matcher, .. } => matcher.clear(),
            Self::{{ c }}Ge { matcher, .. } => matcher.clear(),
            Self::{{ c }}Le { matcher, .. } => matcher.clear(),
            Self::{{ c }}Range { matcher, .. } => matcher.clear(),
%% endfor
%% for group in bfp.flag_groups
            Self::LookupCBits{{ loop.index }} { matcher, .. } => matcher.clear(),
%% endfor
        }
    }

    fn lookup(&self, val: &Context) -> (Option<Arc<Mutex<Node<Self, Value>>>>, Vec<Value>) {
        match self {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap and ctx not in unused_map_tiles
%% set c = ctx|camelize|camelize
%% if t in int_types
            Self::{{ c }}Lookup(m) => m.lookup(val.{{ ctx }}),
            Self::{{ c }}Eq { eq, matcher } => matcher.lookup(val.{{ ctx }} == *eq),
            Self::{{ c }}Ge { lo, matcher } => matcher.lookup(val.{{ ctx }} >= *lo),
            Self::{{ c }}Le { hi, matcher } => matcher.lookup(val.{{ ctx }} <= *hi),
            Self::{{ c }}Range { lo, hi, matcher } => matcher.lookup(val.{{ ctx }} >= *lo && val.{{ ctx }} <= *hi),
%% else
            Self::{{ c }}Lookup(m) => m.lookup(val.{{ ctx }}),
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
%% set ctx = item|lower
            Self::{{ c }}Lookup(m) => m.lookup(val.{{ ctx }}),
            Self::{{ c }}Eq { eq, matcher } => matcher.lookup(val.{{ ctx }} == *eq),
            Self::{{ c }}Ge { lo, matcher } => matcher.lookup(val.{{ ctx }} >= *lo),
            Self::{{ c }}Le { hi, matcher } => matcher.lookup(val.{{ ctx }} <= *hi),
            Self::{{ c }}Range { lo, hi, matcher } => matcher.lookup(val.{{ ctx }} >= *lo && val.{{ ctx }} <= *hi),
%% endfor
%% for group in bfp.flag_groups
            Self::LookupCBits{{ loop.index }} { mask, matcher } => matcher.lookup(val.cbits{{ loop.index }} & *mask),
%% endfor
        }
    }

    fn insert(&mut self, obs: &OneObservation) -> Option<Arc<Mutex<Node<Self, Value>>>> {
        match (self, obs) {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap and ctx not in unused_map_tiles
%% set c = ctx|camelize|camelize
%% if t in int_types
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}Exact(v)) => Some(m.insert(*v)),
            (Self::{{ c }}Eq { eq, matcher }, OneObservation::{{ c }}Eq(eq2, v)) if eq2 == eq => Some(matcher.insert(*v)),
            (Self::{{ c }}Ge { lo, matcher }, OneObservation::{{ c }}Ge(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::{{ c }}Le { hi, matcher }, OneObservation::{{ c }}Le(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::{{ c }}Range { lo, hi, matcher }, OneObservation::{{ c }}Range(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
%% else
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}(v)) => Some(m.insert(*v)),
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}Exact(v)) => Some(m.insert(*v)),
            (Self::{{ c }}Eq { eq, matcher }, OneObservation::{{ c }}Eq(eq2, v)) if eq2 == eq => Some(matcher.insert(*v)),
            (Self::{{ c }}Ge { lo, matcher }, OneObservation::{{ c }}Ge(lo2, v)) if lo2 == lo => Some(matcher.insert(*v)),
            (Self::{{ c }}Le { hi, matcher }, OneObservation::{{ c }}Le(hi2, v)) if hi2 == hi => Some(matcher.insert(*v)),
            (Self::{{ c }}Range { lo, hi, matcher }, OneObservation::{{ c }}Range(lo2, hi2, v)) if lo2 == lo && hi2 == hi => Some(matcher.insert(*v)),
%% endfor
%% for group in bfp.flag_groups
            (Self::LookupCBits{{ loop.index }} { mask, matcher }, OneObservation::CBits{{ loop.index }} { mask: mask2, result }) if mask == mask2 => Some(matcher.insert(*result)),
%% endfor
            _ => None,
        }
    }

    fn add_value(&mut self, obs: &OneObservation, value: Value) {
        match (self, obs) {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap and ctx not in unused_map_tiles
%% set c = ctx|camelize|camelize
%% if t in int_types
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}Exact(v)) => m.add_value(*v, value),
            (Self::{{ c }}Eq { eq, matcher }, OneObservation::{{ c }}Eq(eq2, v)) if eq2 == eq => matcher.add_value(*v, value),
            (Self::{{ c }}Ge { lo, matcher }, OneObservation::{{ c }}Ge(lo2, v)) if lo2 == lo => matcher.add_value(*v, value),
            (Self::{{ c }}Le { hi, matcher }, OneObservation::{{ c }}Le(hi2, v)) if hi2 == hi => matcher.add_value(*v, value),
            (Self::{{ c }}Range { lo, hi, matcher }, OneObservation::{{ c }}Range(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value(*v, value),
%% else
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}(v)) => m.add_value(*v, value),
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}Exact(v)) => m.add_value(*v, value),
            (Self::{{ c }}Eq { eq, matcher }, OneObservation::{{ c }}Eq(eq2, v)) if eq2 == eq => matcher.add_value(*v, value),
            (Self::{{ c }}Ge { lo, matcher }, OneObservation::{{ c }}Ge(lo2, v)) if lo2 == lo => matcher.add_value(*v, value),
            (Self::{{ c }}Le { hi, matcher }, OneObservation::{{ c }}Le(hi2, v)) if hi2 == hi => matcher.add_value(*v, value),
            (Self::{{ c }}Range { lo, hi, matcher }, OneObservation::{{ c }}Range(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value(*v, value),
%% endfor
%% for group in bfp.flag_groups
            (Self::LookupCBits{{ loop.index }} { mask, matcher }, OneObservation::CBits{{ loop.index }} { mask: mask2, result }) if mask == mask2 => matcher.add_value(*result, value),
%% endfor
            _ => (),
        }
    }
    fn add_value_if_all(&mut self, obs: &OneObservation, value: Value, test: impl FnMut(&Value) -> bool) {
        match (self, obs) {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap and ctx not in unused_map_tiles
%% set c = ctx|camelize|camelize
%% if t in int_types
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}Exact(v)) => m.add_value_if_all(*v, value, test),
            (Self::{{ c }}Eq { eq, matcher }, OneObservation::{{ c }}Eq(eq2, v)) if eq2 == eq => matcher.add_value_if_all(*v, value, test),
            (Self::{{ c }}Ge { lo, matcher }, OneObservation::{{ c }}Ge(lo2, v)) if lo2 == lo => matcher.add_value_if_all(*v, value, test),
            (Self::{{ c }}Le { hi, matcher }, OneObservation::{{ c }}Le(hi2, v)) if hi2 == hi => matcher.add_value_if_all(*v, value, test),
            (Self::{{ c }}Range { lo, hi, matcher }, OneObservation::{{ c }}Range(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value_if_all(*v, value, test),
%% else
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}(v)) => m.add_value_if_all(*v, value, test),
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
            (Self::{{ c }}Lookup(m), OneObservation::{{ c }}Exact(v)) => m.add_value_if_all(*v, value, test),
            (Self::{{ c }}Eq { eq, matcher }, OneObservation::{{ c }}Eq(eq2, v)) if eq2 == eq => matcher.add_value_if_all(*v, value, test),
            (Self::{{ c }}Ge { lo, matcher }, OneObservation::{{ c }}Ge(lo2, v)) if lo2 == lo => matcher.add_value_if_all(*v, value, test),
            (Self::{{ c }}Le { hi, matcher }, OneObservation::{{ c }}Le(hi2, v)) if hi2 == hi => matcher.add_value_if_all(*v, value, test),
            (Self::{{ c }}Range { lo, hi, matcher }, OneObservation::{{ c }}Range(lo2, hi2, v)) if lo2 == lo && hi2 == hi => matcher.add_value_if_all(*v, value, test),
%% endfor
%% for group in bfp.flag_groups
            (Self::LookupCBits{{ loop.index }} { mask, matcher }, OneObservation::CBits{{ loop.index }} { mask: mask2, result }) if mask == mask2 => matcher.add_value_if_all(*result, value, test),
%% endfor
            _ => (),
        }
    }

    fn nodes(&self) -> Vec<Arc<Mutex<Node<Self, Value>>>> {
        match self {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap and ctx not in unused_map_tiles
%% set c = ctx|camelize|camelize
%% if t in int_types
            Self::{{ c }}Lookup(m) => m.nodes(),
            Self::{{ c }}Eq { matcher, .. } => matcher.nodes(),
            Self::{{ c }}Ge { matcher, .. } => matcher.nodes(),
            Self::{{ c }}Le { matcher, .. } => matcher.nodes(),
            Self::{{ c }}Range { matcher, .. } => matcher.nodes(),
%% else
            Self::{{ c }}Lookup(m) => m.nodes(),
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
%% set ctx = item|lower
            Self::{{ c }}Lookup(m) => m.nodes(),
            Self::{{ c }}Eq { matcher, .. } => matcher.nodes(),
            Self::{{ c }}Ge { matcher, .. } => matcher.nodes(),
            Self::{{ c }}Le { matcher, .. } => matcher.nodes(),
            Self::{{ c }}Range { matcher, .. } => matcher.nodes(),
%% endfor
%% for group in bfp.flag_groups
            Self::LookupCBits{{ loop.index }} { matcher, .. } => matcher.nodes(),
%% endfor
        }
    }

    fn num_values(&self) -> usize {
        match self {
%% for ctx, t in context_types.items() if ctx not in bfp.varmap and ctx not in unused_map_tiles
%% set c = ctx|camelize|camelize
%% if t in int_types
            Self::{{ c }}Lookup(m) => m.num_values(),
            Self::{{ c }}Eq { matcher, .. } => matcher.num_values(),
            Self::{{ c }}Ge { matcher, .. } => matcher.num_values(),
            Self::{{ c }}Le { matcher, .. } => matcher.num_values(),
            Self::{{ c }}Range { matcher, .. } => matcher.num_values(),
%% else
            Self::{{ c }}Lookup(m) => m.num_values(),
%% endif
%% endfor
%% for item in gl.item_max_counts|sort if item not in bfp.varmap
%% set c = item|camelize
%% set ctx = item|lower
            Self::{{ c }}Lookup(m) => m.num_values(),
            Self::{{ c }}Eq { matcher, .. } => matcher.num_values(),
            Self::{{ c }}Ge { matcher, .. } => matcher.num_values(),
            Self::{{ c }}Le { matcher, .. } => matcher.num_values(),
            Self::{{ c }}Range { matcher, .. } => matcher.num_values(),
%% endfor
%% for group in bfp.flag_groups
            Self::LookupCBits{{ loop.index }} { matcher, .. } => matcher.num_values(),
%% endfor
        }
    }
}

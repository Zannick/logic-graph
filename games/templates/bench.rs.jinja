%% include 'header.rs.jinja'

#![allow(unused)]

use analyzer::access::*;
use analyzer::cli::read_from_file;
use analyzer::context::*;
use analyzer::estimates::ContextScorer;
use analyzer::greedy::*;
use analyzer::route::route_from_string;
use analyzer::world::*;
use criterion::{black_box, criterion_group, criterion_main, Criterion};
use enum_map::EnumMap;
use lib{{ package }}::context::Context;
use lib{{ package }}::graph;
use lib{{ package }}::graph_enums::RuleVictory;
use lib{{ package }}::items::Item;
use std::path::PathBuf;

pub fn criterion_benchmark(c: &mut Criterion) {
    let mut world = graph::World::new();
%% if 'bench' in rules['$victory'].variants
    world.rule_victory = RuleVictory::Bench;
%% endif
    analyzer::world::World::condense_graph(&mut world);
    let mut ctx = Context::default();
    world.skip_unused_items(&mut ctx);
    c.bench_function("can_win_from_scratch", |b| b.iter(|| can_win(&world, &ctx, u32::MAX)));

    let ctx = ContextWrapper::new(Context::default());
    c.bench_function("greedy search", |b| b.iter(|| greedy_search(&world, &ctx, u32::MAX, 2)));

    let mut dir = PathBuf::from(file!());
    dir.pop();
    dir.pop();
    dir.push("routes");
    let mut routes = Vec::new();
    for entry in std::fs::read_dir(dir).unwrap() {
        let path = entry.unwrap().path();
        let ext = path.extension().map(|s| s.to_str()).flatten();
        if matches!(ext, Some("txt")) {
            routes.push(read_from_file(&path));
        }   
    }

    if !routes.is_empty() {
        let shortest_paths = ContextScorer::shortest_paths_tree_only(&world, ctx.get());
        c.bench_function("load routes", |b| {
            b.iter(|| for rstr in &routes {
                route_from_string(&world, ctx.get(), rstr, &shortest_paths).unwrap();
            })
        });
    }
    
    c.bench_function("minimal playthrough", |b| {
        b.iter(|| minimal_greedy_playthrough(&world, &ctx, u32::MAX))
    });
}

criterion_group! {
    name = benches;
    config = Criterion::default().sample_size(250);
    targets = criterion_benchmark
}
criterion_main!(benches);


%% include 'header.rs.jinja'

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::*;
use crate::graph::*;
use crate::items::Item;
use crate::observe::*;
use crate::prices::Currency;
use crate::*;
use analyzer::context::Ctx;
use analyzer::matchertrie::IntegerObservation;
use analyzer::world::World as _;
use rustc_hash::FxHashMap;

pub fn access_default(_ctx: &Context, _world: &World) -> bool { true }

%% for id, info in access_funcs.items()|sort
pub fn access_{{ id }}(ctx: &Context, world: &World) -> bool {
    // {{ (info.boolExpr or info.itemList).text|string|trim }}
    {{ (info.boolExpr or info.itemList)|prToRust(info) }}
}
%% endfor

%% for id, info in action_funcs.items()|sort
pub fn action_{{ id }}(ctx: &mut Context, world: &World{% for k, t in (info.args or {}).items() %}, {{ k }}: {{ t }}{% endfor %}) {
    // {{ info.actions.text.strip() }}
    {{ info.actions|prToRust(info, id) }}
}
%% endfor

%% for id, info in access_funcs.items()|sort
pub fn explain_{{ id }}(ctx: &Context, world: &World, edict: &mut FxHashMap<&'static str, String>) -> (bool, Vec<&'static str>) {
    // {{ (info.boolExpr or info.itemList).text|string|trim }}
    {{ (info.boolExpr or info.itemList)|prToRustExplain(info) }}
}
%% endfor

%% for id, info in access_funcs.items()|sort
pub fn observe_access_{{ id }}(ctx: &Context, world: &World, full_obs: &mut FullObservation) -> bool {
    // {{ (info.boolExpr or info.itemList).text|string|trim }}
    {{ (info.boolExpr or info.itemList)|prToRustObserve(info) }}
}
%% endfor

%% for id, info in action_funcs.items()|sort
pub fn observe_action_{{ id }}(ctx: &Context, world: &World{% for k, t in (info.args or {}).items() %}, {{ k }}: {{ t }}{% endfor %}, full_obs: &mut FullObservation) {
    // {{ info.actions.text.strip() }}
%% set body = info.actions|prToRustObserve(info, id)|trim(' \n;')
%% if body
    let old_strict = full_obs.strict;
    full_obs.strict = true;
    {{ body }};
    full_obs.strict = old_strict;
%% endif
}
%% endfor

%% for id, info in num_funcs.items()|sort
pub fn num_{{ id }}(ctx: &Context, world: &World) -> {{ info.ret or 'u32' }} {
    // {{ info.num.text.strip() }}
    {{ info.num|prToRust(info) }}
}
%% endfor

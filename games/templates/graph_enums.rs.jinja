%% include 'header.rs.jinja'

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use std::fmt;

%% from 'enum.rs.jinja' import enum
{{ enum('RegionId', regions, id=True) }}
{{ enum('AreaId', gl.areas()|list, id=True) }}
{{ enum('LocationId', gl.locations()|list, id=True) }}
{{ enum('ExitId', gl.exits()|list, id=True) }}
{{ enum('ActionId', gl.actions()|list, id=True) }}
{{ enum('CanonId', canon_places, True, id=True) }}
{{ enum('WarpId', warps.values()|list, id=True) }}
{{ enum('Objective', objectives, default_value=default_objective) }}

%% for r in regions
{{ enum(r.id + 'SpotId', r.areas|map(attribute='spot_ids')|chain_from_iterable|sort, id=True) }}
%% endfor

#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd, Default, serde::Serialize, serde::Deserialize)]
pub enum SpotId {
    #[default] None,
%% for r in regions
    {{ r.id }}({{ r.id }}SpotId),
%% endfor
}

impl fmt::Display for SpotId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            SpotId::None => write!(f, "{}", "None"),
%% for r in regions
            SpotId::{{ r.id }}(s) => s.fmt(f),
%% endfor
        }
    }
}

impl analyzer::world::Id for SpotId {}

impl std::str::FromStr for SpotId {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
%% for r in regions
%% for area in r.areas
%% for spot in area.spots
            "{{ spot.fullname }}" => Ok(SpotId::{{ r.id }}({{ r.id }}SpotId::{{ spot.id }})),
%% endfor
%% endfor
%% endfor
            _ => Err(format!("Could not recognize as a SpotId: {}", s)),
        }
    }
}

trait GetArea {
    fn get_area(&self) -> AreaId;
}
%% for r in regions
impl GetArea for {{ r.id }}SpotId {
    fn get_area(&self) -> AreaId {
        match *self {
%% for a in r.areas
            {{ r.id }}SpotId::{{ a.spot_ids|join(' | ' + r.id + 'SpotId::') }} => AreaId::{{ a.id }},
%% endfor
        }
    }
}
%% endfor

pub fn get_region(spot: SpotId) -> RegionId {
    match spot {
        SpotId::None => panic!("Spot not valid"),
%% for r in regions
        SpotId::{{ r.id }}(_) => RegionId::{{ r.id }},
%% endfor
    }
}
pub fn get_area(spot: SpotId) -> AreaId {
    match spot {
        SpotId::None => panic!("Spot not valid"),
%% for r in regions
        SpotId::{{ r.id }}(s) => s.get_area(),
%% endfor
    }
}
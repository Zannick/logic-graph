%% include 'header.rs.jinja'

use analyzer::access::*;
use analyzer::world::World;
use analyzer::algo::Search;
use lib{{ package }}::*;
use std::env;
use std::time::Instant;

fn main() -> Result<(), std::io::Error> {
    let args: Vec<String> = env::args().collect();
    let (mut world, context, routes) =
        settings::load_settings(if args.len() > 1 { Some(&args[1]) } else { None });
    let start = Instant::now();
    world.condense_graph();
    println!("Condensing took {:?}", start.elapsed());
    assert!(can_win_just_items(&world, &context),
            "Available items not enough to complete objective {}",
            world.objective);
    assert!(can_win_just_locations(&world, &context),
            "Unable to complete objective {} with only location checks",
            world.objective);
    let search = Search::new(&world, context, routes).unwrap();
    search.search()
}

%% include 'header.rs.jinja'

#![allow(non_camel_case_types)]

use serde::{Serialize, Deserialize};
use std::fmt;

#[derive(Debug, PartialEq, Eq, Copy, Clone, Default, Hash, Ord, PartialOrd, Serialize, Deserialize)]
pub enum Currency {
    #[default] Free,
%% for ptype, type in price_types.items()
    {{ ptype|camelize }}({{ type }}),
%% endfor
}

impl analyzer::world::Id for Currency {}

impl fmt::Display for Currency {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Self::Free => write!(f, "Free"),
%% for ptype in price_types
            Self::{{ ptype|camelize }}(i) => write!(f, "{}:{}", "{{ ptype|camelize }}", i),
%% endfor
        }
    }
}

impl std::str::FromStr for Currency {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        if s == "Free" {
            return Ok(Currency::Free);
        } else if let Some(t) = s.strip_suffix(")") {
            if let Some((price, val)) = t.split_once("(") {
                match price {
%% for ptype, type in price_types.items()
                    "{{ ptype|camelize }}" => return Ok(Currency::{{ ptype|camelize }}(
                        {{ type }}::from_str(val).map_err(|e| format!("{}", e))?)),
%% endfor
                    _ => (),
                }
            }
        }
        Err(format!("Could not recognize as a Currency: {}", s))
    }
}
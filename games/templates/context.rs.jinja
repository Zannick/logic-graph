%% include 'header.rs.jinja'

#![allow(non_snake_case)]
#![allow(unused)]

use crate::graph::{self, *};
use crate::items::Item;
use crate::movements;
use crate::prices::Currency;
use crate::rules;
use analyzer::context;
use analyzer::world::World;
use enum_map::EnumMap;

pub mod enums {
use std::fmt;
%% from 'enum.rs.jinja' import enum
%% for etype, evars in context_str_values.items()
{{ enum(etype|camelize, evars|map('camelize')|list|sort, default=True, default_value=context_values[etype]|trim_type_prefix|camelize) }}
%% endfor
}

pub mod flags {
use bitflags::bitflags;

%% for size, vars, defaults in bfp.flag_groups
bitflags!{
    #[derive(Copy, Clone, Debug, {% if not defaults %}Default, {% endif %}PartialEq, Eq, Hash)]
    pub struct ContextBits{{ loop.index }} : u{{ size }} {
%% for v in vars
        const {{ v|upper }} = 1 << {{ loop.index0 }};
%% endfor
    }
}
%% if defaults
impl Default for ContextBits{{ loop.index }} {
    fn default() -> ContextBits{{ loop.index }} {
        ContextBits{{ loop.index }}::{{ defaults|map('upper')|join(' | ContextBits' + (loop.index|string) + '::') }}
    }
}
%% endif
%% endfor
}

#[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash)]
pub enum Status {
    #[default] None,
    Visited,
    Skipped,
}

#[derive(Clone, Debug, Eq, PartialEq, Hash)]
pub struct Context {
%# Splitting into separate Cow structs performs worse :(
    // context vars
%% for ctx, t in context_types.items() if ctx not in bfp.varmap
    pub {{ ctx }}: {{ t }},
%% endfor
    // settings
%% for s, info in settings.items() if s not in bfp.varmap
    pub {{ s }}: {{ info.rust_type }},
%% endfor
    // items
%% for item, ct in gl.item_max_counts().items()|sort if item not in bfp.varmap
    pub {{ item|lower }}: {{ ct|get_int_type_for_max }},
%% endfor
    // bitflags
%% for group in bfp.flag_groups
    pub cbits{{ loop.index }}: flags::ContextBits{{ loop.index }},
%% endfor
    // other
%# I was not able to move this to analyzer due to the need to call enum derive for proper setup:
%# EnumArray<Status>::Array not implementing Clone for some reason otherwise
    pub status: EnumMap<LocationId, Status>,
    visits: i32,
    skips: i32,
}

impl Default for Context {
    fn default() -> Context {
        Context {
%% for k, v in context_values.items() if k not in bfp.varmap
            {{ k }}: {{ v|str_to_rusttype(context_types[k]) }},
%% endfor
            // settings
%% for s, info in settings.items() if s not in bfp.varmap
            {{ s }}: Default::default(),
%% endfor
            // items
%% for item, ct in gl.item_max_counts().items()|sort if item not in bfp.varmap
            {{ item|lower }}: Default::default(),
%% endfor
            // bitflags
%% for group in bfp.flag_groups
            cbits{{ loop.index }}: Default::default(),
%% endfor
            // other
            status: Default::default(),
            visits: Default::default(),
            skips: Default::default(),
        }
    }
}

impl context::Ctx for Context {
    type World = graph::World;
    type ItemId = Item;
    type AreaId = AreaId;
    type RegionId = RegionId;
    const NUM_ITEMS: i32 = {{ gl.item_max_counts()|count }};

%# we might not need has/count, if we reference the parameter directly in rules
    fn has(&self, item: Item) -> bool {
        match item {
%% for item, ct in gl.item_max_counts().items()|sort
%% if item in bfp.varmap
            Item::{{ item }} => self.cbits{{ bfp.varmap[item] }}.contains(flags::ContextBits{{ bfp.varmap[item] }}::{{ item|upper }}),
%% else
            Item::{{ item }} => self.{{ item|lower }}{% if ct > 1 %} >= 1{% endif %},
%% endif
%% endfor
            _ => false,
        }
    }
    fn count(&self, item: Item) -> i16 {
        match item {
%% for item, ct in gl.item_max_counts().items()|sort
%% if item in bfp.varmap
            Item::{{ item }} => self.cbits{{ bfp.varmap[item] }}.contains(flags::ContextBits{{ bfp.varmap[item] }}::{{ item|upper }}).into(),
%% else
            Item::{{ item }} => self.{{ item|lower }}.into(),
%% endif
%% endfor
            _ => 0,
        }
    }
    fn collect(&mut self, item: Item) {
        match item {
%% for item, ct in gl.item_max_counts().items()|sort
            Item::{{ item }} => {
%% if item in bfp.varmap
                self.cbits{{ bfp.varmap[item] }}.insert(flags::ContextBits{{ bfp.varmap[item] }}::{{ item|upper }});
%% else
                self.{{ item|lower }}{% if ct > 1 %} += 1{% else %} = true{% endif %};
%% endif
%% if item in collect
                rules::action_{{ collect[item].action_id }}(self);
%% endif
            },
%% endfor
%% for item, info in collect.items()
%% if item not in gl.item_max_counts()
            Item::{{ item }} => rules::action_{{ info.action_id }}(self),
%% endif
%% endfor
            _ => (),
        }
    }
%# Uncollect just straight-up doesn't work in this model

    fn position(&self) -> SpotId {
        self.position
    }
    fn set_position(&mut self, pos: SpotId) {
%% for pltype in ['Region', 'Area']
%% if context_position_watchers[pltype|lower]
        let {{ pltype|lower }} = get_{{ pltype|lower }}(pos);
        match {{ pltype|lower }} {
%% for r in context_position_watchers[pltype|lower]|sort
            {{ pltype }}Id::{{ r }} => {
                if get_{{ pltype|lower }}(self.position) != {{ pltype|lower }} {
%% for c, val in context_trigger_rules.enter[pltype|lower].get(r, {}).items()
%% if c in bfp.varmap
                    self.cbits{{ bfp.varmap[c] }}.{% if val and val != 'false' %}insert{% else %}remove{% endif %}(flags::ContextBits{{ bfp.varmap[c] }}::{{ c|upper }});
%% else
                    self.{{ c }} = {{ val }};
%% endif
%% endfor
%% for other_region in context_resetters[pltype|lower].get(r, ())
%% for c, val in context_trigger_rules.reset[pltype|lower][other_region].items()
%% if c in bfp.varmap
                    self.cbits{{ bfp.varmap[c] }}.{% if val and val != 'false' %}insert{% else %}remove{% endif %}(flags::ContextBits{{ bfp.varmap[c] }}::{{ c|upper }});
%% else
                    self.{{ c }} = {{ val }};
%% endif
%% endfor
%% endfor
%% if id_lookup[r].action_id
                    rules::action_{{ id_lookup[r].action_id }}(self, pos);
%% endif
                }
            },
%% endfor
            _ => (),
        }
%% endif
%% endfor
        self.position = pos;
    }

    fn reload_game(&mut self) {
        self.reset_all();
%% for pltype in ['Region', 'Area']
%% for ctxs in context_trigger_rules.load[pltype|lower].values()
%% for c, val in ctxs.items()
%% if c in bfp.varmap
        self.cbits{{ bfp.varmap[c] }}.{% if val and val != 'false' %}insert{% else %}remove{% endif %}(flags::ContextBits{{ bfp.varmap[c] }}::{{ c|upper }});
%% else
        self.{{ c }} = {{ val }};
%% endif
%% endfor
%% endfor
%% endfor
    }

    fn reset_all(&mut self) {
%% for pltype in ['Region', 'Area']
%% for ctxs in context_trigger_rules.reset[pltype|lower].values()
%% for c, val in ctxs.items()
%% if c in bfp.varmap
        self.cbits{{ bfp.varmap[c] }}.{% if val and val != 'false' %}insert{% else %}remove{% endif %}(flags::ContextBits{{ bfp.varmap[c] }}::{{ c|upper }});
%% else
        self.{{ c }} = {{ val }};
%% endif
%% endfor
%% endfor
%% endfor
    }

%% for pltype in ['Region', 'Area']
    fn reset_{{ pltype|lower }}(&mut self, {{ pltype|lower }}_id: {{ pltype }}Id) {
%% if context_trigger_rules.reset[pltype|lower]
        match {{ pltype|lower }}_id {
%% for r, ctxs in context_trigger_rules.reset[pltype|lower].items()
            {{ pltype }}Id::{{ r }} => {
%% for c, val in ctxs.items()
%% if c in bfp.varmap
                self.cbits{{ bfp.varmap[c] }}.{% if val and val != 'false' %}insert{% else %}remove{% endif %}(flags::ContextBits{{ bfp.varmap[c] }}::{{ c|upper }});
%% else
                self.{{ c }} = {{ val }};
%% endif
%% endfor
            }
%% endfor
            _ => (),
        }
%% endif
    }
%% endfor

    fn can_afford(&self, cost: &Currency) -> bool {
        match cost {
            Currency::Free => true,
%% for ptype in price_types
            Currency::{{ ptype|capitalize }}(c) => self.{{ ptype }} >= *c,
%% endfor
        }
    }
    fn spend(&mut self, cost: &Currency) {
        match cost {
            Currency::Free => (),
%% for ptype in price_types
            Currency::{{ ptype|capitalize }}(c) => self.{{ ptype }} -= *c,
%% endfor
        }
    }

    fn visit(&mut self, loc_id: LocationId) {
        self.status[loc_id] = Status::Visited;
        self.visits += 1;
    }
    fn skip(&mut self, loc_id: LocationId) {
        self.status[loc_id] = Status::Skipped;
        self.skips += 1;
    }
    fn reset(&mut self, loc_id: LocationId) {
        match self.status[loc_id] {
            Status::Visited => self.visits -= 1,
            Status::Skipped => self.skips -= 1,
            _ => (),
        }
        self.status[loc_id] = Status::None;
    }
    
    fn todo(&self, loc_id: LocationId) -> bool { self.status[loc_id] == Status::None }
    fn visited(&self, loc_id: LocationId) -> bool { self.status[loc_id] == Status::Visited }
    fn skipped(&self, loc_id: LocationId) -> bool { self.status[loc_id] == Status::Skipped }

%% for ptype in ['Spot', 'Area', 'Region']
    fn all_{{ ptype|lower }}_checks(&self, id: {{ ptype }}Id) -> bool {
        let r = {{ ptype|lower }}_locations(id);
        for status in self.status.as_slice()[r.start..r.end].iter() {
            if status == &Status::None { return false; }
        }
        true
    }
%% endfor

    fn local_travel_time(&self, dest: SpotId) -> i32 {
        movements::local_travel_time(self, self.position, dest)
    }

    fn count_visits(&self) -> i32 {
        self.visits
    }
    fn count_skips(&self) -> i32 {
        self.skips
    }
    fn progress(&self) -> i32 {
        if self.visits <= 0 {
            0
        } else {
            self.visits * 100 / (Self::World::NUM_LOCATIONS - self.skips)
        }
    }
}

impl Context {
    // settings
%% for s, info in settings.items()
    pub fn {{ s }}(&self) -> {{ info.rust_type }} {
%% if s in bfp.varmap
        self.cbits{{ bfp.varmap[s] }}.contains(flags::ContextBits{{ bfp.varmap[s] }}::{{ s|upper }})
%% else
        self.{{ s }}
%% endif
    }
    pub fn set_{{ s }}(&mut self, val: {{ info.rust_type }}) {
%% if s in bfp.varmap
        self.cbits{{ bfp.varmap[s] }}.set(flags::ContextBits{{ bfp.varmap[s] }}::{{ s|upper }}, val);
%% else
        self.{{ s }} = val;
%% endif
    }
%% endfor

    // context
%% for ctx, t in context_types.items()
    pub fn {{ ctx }}(&self) -> {{ t }} {
%#- Spots have priority over areas which have priority over regions
        match self.position {
%% for spot, override in context_here_overrides[ctx]['spot'].items()
            SpotId::{{ spot }} => {{ override }},
%% endfor
            _ => match get_area(self.position) {
%% for area, override in context_here_overrides[ctx]['area'].items()
                AreaId::{{ area }} => {{ override }},
%% endfor
                _ => match get_region(self.position) {
%% for region, override in context_here_overrides[ctx]['region'].items()
                    RegionId::{{ region }} => {{ override }},
%% endfor
%% if ctx in bfp.varmap
                    _ => self.cbits{{ bfp.varmap[ctx] }}.contains(flags::ContextBits{{ bfp.varmap[ctx] }}::{{ ctx|upper }})
%% else
                    _ => self.{{ ctx }}
%% endif
                }
            }
        }
    }
%% if ctx != 'position'
    pub fn set_{{ ctx }}(&mut self, val: {{ t }}) {
%% if ctx in bfp.varmap
        self.cbits{{ bfp.varmap[ctx] }}.set(flags::ContextBits{{ bfp.varmap[ctx] }}::{{ ctx|upper }}, val);
%% else
        self.{{ ctx }} = val;
%% endif
    }
%% endif
%% endfor

    // test helper for items
    pub fn add_item(&mut self, item: Item) {
        match item {
%% for item, ct in gl.item_max_counts().items()|sort
            Item::{{ item }} => {
%% if item in bfp.varmap
                self.cbits{{ bfp.varmap[item] }}.insert(flags::ContextBits{{ bfp.varmap[item] }}::{{ item|upper }});
%% else
                self.{{ item|lower }}{% if ct > 1 %} += 1{% else %} = true{% endif %};
%% endif
            },
%% endfor
            _ => ()
        }
    }
}


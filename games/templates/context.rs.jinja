%% include 'header.rs.jinja'

#![allow(non_snake_case)]
#![allow(unused)]

use crate::graph::*;
use crate::items::Item;
use crate::movements;
use crate::observe::*;
use crate::prices::Currency;
use crate::rules;
use analyzer::context;
use analyzer::matchertrie::IntegerObservation;
use analyzer::world::{Exit as _, World as _};
use enum_map::EnumMap;
use serde::{Deserialize, Serialize};
use serde_repr::{Deserialize_repr, Serialize_repr};
use std::str::FromStr;
use yaml_rust::Yaml;

pub mod enums {
use std::fmt;
%% from 'enum.rs.jinja' import enum
%% for etype, evars in context_str_values.items()
%% if etype in data_values
{{ enum(etype|camelize, evars|map('camelize')|list|sort, default=True, default_value=data_defaults[etype]|trim_type_prefix|camelize, allow_lower=True) }}
%% else
{{ enum(etype|camelize, evars|map('camelize')|list|sort, default=True, default_value=context_values[etype]|trim_type_prefix|camelize, allow_lower=True) }}
%% endif
%% endfor
}

#[derive(Debug, Copy, Clone, Eq, PartialEq)]
pub enum Expectation {
%% for ctx, t in context_types.items() if ctx not in unused_map_tiles
    {{ ctx|camelize|camelize }}({{ t }}),
%% endfor
    // items
%% for item, ct in gl.item_max_counts.items()|sort
    {{ item|camelize }}({{ ct|get_int_type_for_max }}),
%% endfor
}

pub mod data {
#[allow(unused_imports)]
use crate::context::enums;
use crate::graph::*;
%% for c, overrides in data_values.items()
pub fn {{ c }}(spot_id: SpotId) -> {{ data_types[c] }} {
    match spot_id {
%% for sp, val in overrides.items()|sort
        {{ sp|target_id_from_id }} => {{ val|str_to_rusttype(data_types[c]) }},
%% endfor
        _ => {{ data_defaults[c]|str_to_rusttype(data_types[c]) }}
    }
}
%% endfor
}

pub mod flags {
use bitflags::bitflags;
use serde::{self, Serialize, Deserialize};

%% for size, vars, defaults in bfp.flag_groups
bitflags!{
    #[derive(Copy, Clone, Debug, {% if not defaults %}Default, {% endif %}PartialEq, Eq, Hash, Serialize, Deserialize)]
    pub struct ContextBits{{ loop.index }}: u{{ size }} {
%% set outer = loop
%% for v in vars
        const {{ v|upper }} = {{ (2 ** loop.index0) | hex }};
%% endfor
%% if outer.index >= bfp.visit_groups.start_group and outer.index <= bfp.visit_groups.end_group
%% set min_index = bfp.visit_groups.start_index if outer.index == bfp.visit_groups.start_group else 0
%% set max_index = bfp.visit_groups.end_index + 1 if outer.index == bfp.visit_groups.end_group else size
        const ALL_VISIT_FLAGS = {{ (2 ** max_index - 2 ** min_index) | hex }};
%% endif
    }
}
%% if defaults
impl Default for ContextBits{{ loop.index }} {
    fn default() -> ContextBits{{ loop.index }} {
        ContextBits{{ loop.index }}::{{ defaults|map('upper')|join(' | ContextBits' + (loop.index|string) + '::') }}
    }
}
%% endif
%% endfor
}


#[derive(Clone, Debug, Eq, PartialEq, Hash, Serialize, Deserialize)]
pub struct Context {
%#- Splitting into separate Cow structs performs worse :(
    // context vars
%% for ctx, t in context_types.items() if ctx not in bfp.varmap and ctx not in unused_map_tiles
    pub {{ ctx }}: {{ t }},
%% endfor
    // items
%% for item, ct in gl.item_max_counts.items()|sort if item not in bfp.varmap
    pub {{ item|lower }}: {{ ct|get_int_type_for_max }},
%% endfor
    // bitflags
%% for group in bfp.flag_groups
    pub cbits{{ loop.index }}: flags::ContextBits{{ loop.index }},
%% endfor
}

impl Default for Context {
    fn default() -> Context {
        Context {
%% for k, v in context_values.items() if k not in bfp.varmap and k not in unused_map_tiles
            {{ k }}: {{ v|str_to_rusttype(context_types[k]) }},
%% endfor
            // items
%% for item, ct in gl.item_max_counts.items()|sort if item not in bfp.varmap
            {{ item|lower }}: Default::default(),
%% endfor
            // bitflags
%% for group in bfp.flag_groups
            cbits{{ loop.index }}: Default::default(),
%% endfor
        }
    }
}

impl analyzer::matchertrie::Observable for Context {
    type PropertyObservation = OneObservation;

    fn root_observation(&self) -> OneObservation {
        OneObservation::Position(self.position)
    }
    fn matches(&self, obs: &OneObservation) -> bool {
        obs.matches(self)
    }
    fn matches_all(&self, observations: &[OneObservation]) -> bool {
        observations.into_iter().all(|obs| obs.matches(self))
    }
}

impl context::Ctx for Context {
    type World = World;
    type ItemId = Item;
    type AreaId = AreaId;
    type RegionId = RegionId;
    type MovementState = movements::MovementState;
    type Observer = FullObservation;
    type Expectation = Expectation;
    const NUM_ITEMS: u32 = {{ gl.item_max_counts|count }};

%# we might not need has/count, if we reference the parameter directly in rules
    fn has(&self, item: Item) -> bool {
        match item {
%% for item, ct in gl.item_max_counts.items()|sort
%% if item in bfp.varmap
            Item::{{ item }} => self.cbits{{ bfp.varmap[item] }}.contains(flags::ContextBits{{ bfp.varmap[item] }}::{{ item|upper }}),
%% else
            Item::{{ item }} => self.{{ item|lower }}{% if ct > 1 %} >= 1{% endif %},
%% endif
%% endfor
            _ => false,
        }
    }
    fn count(&self, item: Item) -> i16 {
        match item {
%% for item, ct in gl.item_max_counts.items()|sort
%% if item in bfp.varmap
            Item::{{ item }} => self.cbits{{ bfp.varmap[item] }}.contains(flags::ContextBits{{ bfp.varmap[item] }}::{{ item|upper }}).into(),
%% else
            Item::{{ item }} => self.{{ item|lower }}.into(),
%% endif
%% endfor
            _ => 0,
        }
    }

%% macro _collect(observe=False)
fn {% if observe %}observe_{% endif %}collect(&mut self, item: Item, world: &World{% if observe %}, full_obs: &mut FullObservation{% endif %}) {
        match item {
%% for item, ct in gl.item_max_counts.items()|sort
%% set ctx = item|lower
            Item::{{ item }} => {
%% if item in bfp.varmap
                self.cbits{{ bfp.varmap[item] }}.insert(flags::ContextBits{{ bfp.varmap[item] }}::{{ item|upper }});
%% if observe
                full_obs.clear_{{ ctx }}();
%% endif
%% else
                self.{{ ctx }}{% if ct > 1 %} += 1{% else %} = true{% endif %};
%% if observe
                full_obs.observe_shift_{{ ctx }}(1);
%% endif
%% endif
%% if item in collect
                rules::{% if observe %}observe_{% endif %}action_{{ collect[item].action_id }}(self, world{% if observe %}, full_obs{% endif %});
%% endif
            }
%% endfor
%% for item, info in collect.items()
%% if item not in gl.item_max_counts
            Item::{{ item }} => rules::{% if observe %}observe_{% endif %}action_{{ collect[item].action_id }}(self, world{% if observe %}, full_obs{% endif %}),
%% endif
%% endfor
            _ => (),
        }
    }
%% endmacro
    {{ _collect() }}
    {{ _collect(True) }}

%#- Uncollect just straight-up doesn't work in this model
%% macro _add_item(observe=False)
fn {% if observe %}observe_{% endif %}add_item(&mut self, item: Item{% if observe %}, full_obs: &mut FullObservation{% endif %}) {
        match item {
%% for item, ct in gl.item_max_counts.items()|sort
%% set ctx = item|lower
            Item::{{ item }} => {
%% if item in bfp.varmap
                self.cbits{{ bfp.varmap[item] }}.insert(flags::ContextBits{{ bfp.varmap[item] }}::{{ item|upper }});
%% if observe
                full_obs.clear_{{ ctx }}();
%% endif
%% else
                self.{{ ctx }}{% if ct > 1 %} += 1{% else %} = true{% endif %};
%% if observe
                full_obs.observe_shift_{{ ctx }}(1);
%% endif
%% endif
            }
%% endfor
            _ => (),
        }
    }
%% endmacro
    // test helper for items
    {{ _add_item() }}
    {{ _add_item(True) }}

    // test helper for context vars
    fn parse_set_context(&mut self, ckey: &str, cval: &Yaml) -> Result<(), String> {
        match (ckey, cval) {
%% for ctx, t in context_types.items() if ctx not in unused_map_tiles
%% if t in int_types
            ("{{ ctx }}", Yaml::Integer(i)) => self.set_{{ ctx }}({{ t }}::try_from(*i).map_err(|e| format!("{}", e))?),
%% elif t == "bool"
            ("{{ ctx }}", Yaml::Boolean(b)) => self.set_{{ ctx }}(*b),
%% elif ctx == "position"
            ("position", Yaml::String(s)) => self.set_position_raw({{ t }}::from_str(s).map_err(|e| format!("{}", e))?),
%% else
            ("{{ ctx }}", Yaml::String(s)) => self.set_{{ ctx }}({{ t }}::from_str(s).map_err(|e| format!("{}", e))?),
%% endif
            ("{{ ctx }}", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
%% endfor
            _ => { return Err(format!("Unrecognized context key: {:?}", ckey)); }
        }
        Ok(())
    }

    fn parse_expect_context(ckey: &str, cval: &Yaml) -> Result<Expectation, String> {
        Ok(match (ckey, cval) {
%% for ctx, t in context_types.items() if ctx not in unused_map_tiles
%% if t in int_types
            ("{{ ctx }}", Yaml::Integer(i)) => Expectation::{{ ctx|camelize|camelize }}({{ t }}::try_from(*i).map_err(|e| format!("{}", e))?),
%% elif t == "bool"
            ("{{ ctx }}", Yaml::Boolean(b)) => Expectation::{{ ctx|camelize|camelize }}(*b),
%% else
            ("{{ ctx }}", Yaml::String(s)) => Expectation::{{ ctx|camelize|camelize }}({{ t }}::from_str(s).map_err(|e| format!("{}", e))?),
%% endif
            ("{{ ctx }}", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
%% endfor
%% for item, ct in gl.item_max_counts.items()|sort
%% if ct == 1
            ("{{ item }}", Yaml::Boolean(b)) => Expectation::{{ item|camelize }}(*b),
            ("{{ item }}", Yaml::Integer(i)) => Expectation::{{ item|camelize }}(*i > 0),
%% else
            ("{{ item }}", Yaml::Integer(i)) => Expectation::{{ item|camelize }}({{ ct|get_int_type_for_max }}::try_from(*i).map_err(|e| format!("{}", e))?),
%% endif
            ("{{ item }}", _) => { return Err(format!("Key {:?} has value of disallowed type: {:?}", ckey, cval)); },
%% endfor
            _ => { return Err(format!("Unrecognized/disallowed expect context key: {:?}", ckey)); }
        })
    }

    fn assert_expectations(&self, exps: &Vec<Expectation>) -> Result<(), String> {
        let mut errs = Vec::new();
        for exp in exps {
            match exp {
%% for ctx in context_types if ctx not in unused_map_tiles
                Expectation::{{ ctx|camelize|camelize }}(e) => {
                    let v = self.{{ ctx }}();
                    if v != *e {
                        errs.push(format!("Expected {} = {}, got: {}", "{{ ctx }}", e, v));
                    }
                }
%% endfor
%% for item, ct in gl.item_max_counts.items()|sort
            Expectation::{{ item|camelize }}(e) => {
                let v = self.{% if ct == 1 %}has{% else %}count{% endif %}(Item::{{ item }});
                if v != {% if ct == 1 %}*e{% else %}<{{ ct|get_int_type_for_max }} as Into<i16>>::into(*e){% endif %} {
                    errs.push(format!("Expected {} = {}, got: {}", "{{ item }}", e, v));
                }
            }
%% endfor
            }
        }
        if errs.is_empty() {
            Ok(())
        } else {
            Err(errs.join("\n"))
        }
    }

%% macro _take_exit(observe=False)
fn {% if observe %}observe_{% endif %}take_exit(&mut self, exit: &Exit, world: &World{% if observe %}, full_obs: &mut FullObservation{% endif %}) {
        self.{% if observe %}observe_{% endif %}set_position(exit.dest(), world{% if observe %}, full_obs{% endif %});
        match exit.id() {
%% for ex in gl.exits()|sort(attribute='id')
%% if ex.tiles
            ExitId::{{ ex.id }} => {
%% for tile in ex.tiles
%% if tile in used_map_tiles
                self.cbits{{ bfp.varmap[tile] }}.insert(flags::ContextBits{{ bfp.varmap[tile] }}::{{ tile|upper }});
%% if observe
                full_obs.clear_{{ tile }}();
%% endif
%% endif
%% endfor
            }
%% endif
%% endfor
            _ => (),
        }
    }
%% endmacro
    {{ _take_exit() }}
    {{ _take_exit(True) }}

    fn position(&self) -> SpotId {
        self.position
    }
    fn set_position_raw(&mut self, pos: SpotId) {
        self.position = pos;
    }
%% macro _set_position(observe=False)
fn {% if observe %}observe_{% endif %}set_position(&mut self, pos: SpotId, world: &World{% if observe %}, full_obs: &mut FullObservation{% endif %}) {
%% for pltype in ['Region', 'Area']
%% if context_position_watchers[pltype|lower]
        let {{ pltype|lower }} = get_{{ pltype|lower }}(pos);
        match {{ pltype|lower }} {
%% for r in context_position_watchers[pltype|lower]|sort
%% set place = id_lookup[r]
            {{ pltype }}Id::{{ r }} => {
                if get_{{ pltype|lower }}(self.position) != {{ pltype|lower }} {
%% for c, val in context_trigger_rules.enter[pltype|lower].get(r, {}).items()
%% if c in bfp.varmap
                    self.cbits{{ bfp.varmap[c] }}.{% if val and val != 'false' %}insert{% else %}remove{% endif %}(flags::ContextBits{{ bfp.varmap[c] }}::{{ c|upper }});
%% else
                    self.{{ c }} = {{ val }};
%% endif
%% if observe
                    full_obs.clear_{{ c }}();
%% endif
%% endfor
%% for other_region in context_resetters[pltype|lower].get(r, ())
%% for c, val in context_trigger_rules.reset[pltype|lower][other_region].items()
%% if c in bfp.varmap
                    self.cbits{{ bfp.varmap[c] }}.{% if val and val != 'false' %}insert{% else %}remove{% endif %}(flags::ContextBits{{ bfp.varmap[c] }}::{{ c|upper }});
%% else
                    self.{{ c }} = {{ val }};
%% endif
%% if observe
                    full_obs.clear_{{ c }}();
%% endif
%% endfor
%% endfor
%% if place.action_id
                    rules::{% if observe %}observe_{% endif %}action_{{ place.action_id }}(self, world, pos{% if observe %}, full_obs{% endif %});
%% endif
%% for tile in place._tiles
%% if tile in used_map_tiles
                    self.cbits{{ bfp.varmap[tile] }}.insert(flags::ContextBits{{ bfp.varmap[tile] }}::{{ tile|upper }});
%% if observe
                    full_obs.clear_{{ tile }}();
%% endif
%% endif
%% endfor
                }
            }
%% endfor
            _ => (),
        }
%% endif
%% endfor
%% if context_position_watchers['spot']
        if self.position != pos {
            match pos {
%% for s in context_position_watchers['spot']|sort
%% set spot = id_lookup[s]
                SpotId::{{ s }} => {
%% for tile in spot._tiles
%% if tile in used_map_tiles
                    self.cbits{{ bfp.varmap[tile] }}.insert(flags::ContextBits{{ bfp.varmap[tile] }}::{{ tile|upper }});
%% if observe
                    full_obs.clear_{{ tile }}();
%% endif
%% endif
%% endfor
%% for c, val in context_trigger_rules.enter['spot'].get(s, {}).items()
%% if c in bfp.varmap
                    self.cbits{{ bfp.varmap[c] }}.{% if val and val != 'false' %}insert{% else %}remove{% endif %}(flags::ContextBits{{ bfp.varmap[c] }}::{{ c|upper }});
%% else
                    self.{{ c }} = {{ val }};
%% endif
%% if observe
                    full_obs.clear_{{ c }}();
%% endif
%% endfor
%# Reset rules would go here if we want them.
%% if spot.action_id
                    rules::{% if observe %}observe_{% endif %}action_{{ spot.action_id }}(self, world, pos{% if observe %}, full_obs{% endif %});
%% endif
                }
%% endfor
                _ => (),
            }
        }
%% endif
        self.position = pos;
    }
%% endmacro
    {{ _set_position() }}
    {{ _set_position(True) }}

%% macro _reload(observe=False)
fn {% if observe %}observe_{% endif %}reload_game(&mut self, world: &World{% if observe %}, full_obs: &mut FullObservation{% endif %}) {
        self.{% if observe %}observe_{% endif %}reset_all(world{% if observe %}, full_obs{% endif %});
%% for c, val in context_trigger_rules.load.global.items()
%% if c in bfp.varmap
        self.cbits{{ bfp.varmap[c] }}.{% if val and val != 'false' %}insert{% else %}remove{% endif %}(flags::ContextBits{{ bfp.varmap[c] }}::{{ c|upper }});
%% else
        self.{{ c }} = {{ val }};
%% endif
%% if observe
        full_obs.clear_{{ c }}();
%% endif
%% endfor
%% for pltype in ['Region', 'Area']
%% for ctxs in context_trigger_rules.load[pltype|lower].values()
%% for c, val in ctxs.items()
%% if c in bfp.varmap
        self.cbits{{ bfp.varmap[c] }}.{% if val and val != 'false' %}insert{% else %}remove{% endif %}(flags::ContextBits{{ bfp.varmap[c] }}::{{ c|upper }});
%% else
        self.{{ c }} = {{ val }};
%% endif
%% if observe
        full_obs.clear_{{ c }}();
%% endif
%% endfor
%% endfor
%% endfor
    }
%% endmacro
    {{ _reload() }}
    {{ _reload(True) }}

%% macro _reset_all(observe=False)
fn {% if observe %}observe_{% endif %}reset_all(&mut self, world: &World{% if observe %}, full_obs: &mut FullObservation{% endif %}) {
%% for pltype in ['Region', 'Area']
%% for ctxs in context_trigger_rules.reset[pltype|lower].values()
%% for c, val in ctxs.items()
%% if c in bfp.varmap
        self.cbits{{ bfp.varmap[c] }}.{% if val and val != 'false' %}insert{% else %}remove{% endif %}(flags::ContextBits{{ bfp.varmap[c] }}::{{ c|upper }});
%% else
        self.{{ c }} = {{ val }};
%% endif
%% if observe
        full_obs.clear_{{ c }}();
%% endif
%% endfor
%% endfor
%% endfor
    }
%% endmacro
    {{ _reset_all() }}
    {{ _reset_all(True) }}

%% macro _reset_places(observe=False)
%% for pltype in ['Region', 'Area']
fn {% if observe %}observe_{% endif %}reset_{{ pltype|lower }}(&mut self, {{ pltype|lower }}_id: {{ pltype }}Id, world: &World{% if observe %}, full_obs: &mut FullObservation{% endif %}) {
%% if context_trigger_rules.reset[pltype|lower]
        match {{ pltype|lower }}_id {
%% for r, ctxs in context_trigger_rules.reset[pltype|lower].items()
            {{ pltype }}Id::{{ r }} => {
%% for c, val in ctxs.items()
%% if c in bfp.varmap
                self.cbits{{ bfp.varmap[c] }}.{% if val and val != 'false' %}insert{% else %}remove{% endif %}(flags::ContextBits{{ bfp.varmap[c] }}::{{ c|upper }});
%% else
                self.{{ c }} = {{ val }};
%% endif
%% if observe
                full_obs.clear_{{ c }}();
%% endif
%% endfor
            }
%% endfor
            _ => (),
        }
%% endif
    }
%% endfor
%% endmacro
    {{ _reset_places() }}
    {{ _reset_places(True) }}

    fn can_afford(&self, cost: &Currency) -> bool {
        match cost {
            Currency::Free => true,
%% for ptype in price_types
            Currency::{{ ptype|capitalize }}(c) => self.{{ ptype }} >= *c,
%% endfor
        }
    }
    fn amount_could_afford(&self, cost: &Currency) -> i16 {
        match cost {
            Currency::Free => 1,
%% for ptype in price_types
            Currency::{{ ptype|capitalize }}(_) => self.{{ ptype }} as i16,
%% endfor
        }
    }
    fn observe_afford(&self, cost: &Currency, full_obs: &mut FullObservation) {
        match cost {
            Currency::Free => (),
%% for ptype in price_types
            Currency::{{ ptype|capitalize }}(c) => full_obs.observe_{{ ptype }}(IntegerObservation::Ge(*c)),
%% endfor
        }
    }

    fn spend(&mut self, cost: &Currency) {
        match cost {
            Currency::Free => (),
%% for ptype in price_types
            Currency::{{ ptype|capitalize }}(c) => self.{{ ptype }} -= *c,
%% endfor
        }
    }
    fn observe_spend(&mut self, cost: &Currency, full_obs: &mut FullObservation) {
        match cost {
            Currency::Free => (),
%% for ptype in price_types
            Currency::{{ ptype|capitalize }}(c) => {
                self.{{ ptype }} -= *c;
                full_obs.observe_shift_{{ ptype }}(-*c);
            }
%% endfor
        }
    }

%% macro _visit(observe=False)
    fn {% if observe %}observe_{% endif %}visit(&mut self, loc_id: LocationId{% if observe %}, full_obs: &mut FullObservation{% endif %}) {
%#-     full_obs.clear_visited(loc_id);  // not useful unless we want to ignore observing visits before we access
        match loc_id {
%% for loc in gl.locations()
%% set visit = 'VISITED_' + loc.canon_id
            LocationId::{{ loc.id }} => {
                self.cbits{{ bfp.varmap[visit] }}.insert(flags::ContextBits{{ bfp.varmap[visit] }}::{{ visit|upper }});
%% for tile in loc.tiles
%% if tile in used_map_tiles
                self.cbits{{ bfp.varmap[tile] }}.insert(flags::ContextBits{{ bfp.varmap[tile] }}::{{ tile|upper }});
%% if observe
                full_obs.clear_{{ tile }}();
%% endif
%% endif
%% endfor
            }
%% endfor
        }
    }
%% endmacro
    {{ _visit() }}
    {{ _visit(True) }}

    fn reset(&mut self, loc_id: LocationId) {
        match loc_id {
%% for canon_id, loc_ids in gl.canon_places.items()
%% set visit = 'VISITED_' + canon_id
            LocationId::{{ loc_ids|join(' | LocationId::') }} => {
                self.cbits{{ bfp.varmap[visit] }}.remove(flags::ContextBits{{ bfp.varmap[visit] }}::{{ visit|upper }});
            }
%% endfor
        }
    }

    fn visited(&self, loc_id: LocationId) -> bool {
        match loc_id {
%% for canon_id, loc_ids in gl.canon_places.items()
%% set visit = 'VISITED_' + canon_id
            LocationId::{{ loc_ids|join(' | LocationId::') }} => {
                self.cbits{{ bfp.varmap[visit] }}.contains(flags::ContextBits{{ bfp.varmap[visit] }}::{{ visit|upper }})
            }
%% endfor
        }
    }

%% for ptype in ['Spot', 'Area', 'Region']
    fn all_{{ ptype|lower }}_checks(&self, id: {{ ptype }}Id) -> bool {
        false
    }
%% endfor

    fn get_movement_state(&self, world: &World) -> movements::MovementState {
        movements::get_movement_state(self, world)
    }

    fn observe_movement_state(&self, world: &World, full_obs: &mut FullObservation) -> movements::MovementState {
        movements::observe_movement_state(self, world, full_obs)
    }

    fn local_travel_time(&self, movement_state: movements::MovementState, dest: SpotId) -> u32 {
        movements::local_travel_time(movement_state, self.position, dest)
    }

    fn count_visits(&self) -> usize {
%% for group in range(bfp.visit_groups.start_group, bfp.visit_groups.end_group + 1)
        {% if not loop.first %}    + {% endif %}self.cbits{{ group }}.intersection(flags::ContextBits{{ group }}::ALL_VISIT_FLAGS).bits().count_ones() as usize
%% endfor
    }
    fn progress(&self) -> u32 {
        let visits = self.count_visits();
        if visits <= 0 {
            0
        } else {
            (visits * 100 / Self::World::NUM_CANON_LOCATIONS).try_into().unwrap()
        }
    }

    fn diff(&self, old: &Context) -> String {
        let mut list: Vec<String> = Vec::new();

%% for ctx, t in context_types.items() if ctx not in bfp.varmap and ctx not in unused_map_tiles
        if old.{{ ctx }} != self.{{ ctx }} {
            list.push(format!("{{ ctx }}: {:?} → {:?}", old.{{ ctx }}, self.{{ ctx }}));
        }
%% endfor
%% for item, ct in gl.item_max_counts.items()|sort if item not in bfp.varmap
        if old.{{ item|lower }} != self.{{ item|lower }} {
%% if ct == 1
            list.push(format!("{}{{ item }}", if self.{{ item|lower }} { "+" } else { "-" }));
%% else
            list.push(format!("{{ item }}: {:+}", self.{{ item|lower }} - old.{{ item|lower }}));
%% endif
        }
%% endfor
    // bitflags
%% for _, vars, _ in bfp.flag_groups
%% set ci = loop.index
%% for v in vars
        let n = self.cbits{{ ci }}.contains(flags::ContextBits{{ ci }}::{{ v|upper }});
        let p = old.cbits{{ ci }}.contains(flags::ContextBits{{ ci }}::{{ v|upper }});
        if n != p {
            list.push(format!("{}{{ v|upper }}", if n { "+" } else { "-" }));
        }
%% endfor
%% endfor

        if list.is_empty() {
            String::from("NONE")
        } else {
            list.join("\n")
        }
    }
}

impl Context {
%% for ctx, t in context_types.items() if ctx not in unused_map_tiles
    pub fn {{ ctx }}(&self) -> {{ t }} {
%% if ctx in bfp.varmap
        self.cbits{{ bfp.varmap[ctx] }}.contains(flags::ContextBits{{ bfp.varmap[ctx] }}::{{ ctx|upper }})
%% else
        self.{{ ctx }}
%% endif
    }
%% if ctx != 'position'
    pub fn set_{{ ctx }}(&mut self, val: {{ t }}) {
%% if ctx in bfp.varmap
        self.cbits{{ bfp.varmap[ctx] }}.set(flags::ContextBits{{ bfp.varmap[ctx] }}::{{ ctx|upper }}, val);
%% else
        self.{{ ctx }} = val;
%% endif
    }
%% endif
%% endfor
}


%% include 'header.rs.jinja'

#![allow(non_snake_case)]

use crate::graph::*;
use crate::items::Item;
use crate::prices::Currency;
use analyzer::context;
use enum_map::EnumMap;

#[derive(Copy, Clone, Debug, Default, PartialEq, Eq)]
enum Status {
    #[default] None,
    Visited,
    Skipped,
}

#[derive(Clone, Debug)]
pub struct Context {
%% for ctx, t in context_types.items()
    pub {{ ctx }}: {{ t }},
%% endfor
%% for item, ct in gl.item_max_counts().items()|sort
    pub {{ item|lower }}: {{ ct|get_item_type_for_max }},
%% endfor
    history: Box<Vec<History>>,
    status: EnumMap<LocationId, Status>,
}

impl context::Ctx for Context {
    type ItemId = Item;
    type LocationId = LocationId;
    type SpotId = SpotId;
    type Currency = Currency;

%# we might not need has/count, if we reference the parameter directly in rules
    fn has(&self, item: &Item) -> bool {
        match item {
%% for item, ct in gl.item_max_counts().items()|sort
            Item::{{ item }} => self.{{ item|lower }}{% if ct > 1 %} >= 1{% endif %},
%% endfor
            _ => false,
        }
    }
    fn count(&self, item: &Item) -> i16 {
        match item {
%% for item, ct in gl.item_max_counts().items()|sort
            Item::{{ item }} => self.{{ item|lower }}.into(),
%% endfor
            _ => 0,
        }
    }
    fn collect(&mut self, item: &Item) {
        match item {
%% for item, ct in gl.item_max_counts().items()|sort
            Item::{{ item }} => {
                self.{{ item|lower }}{% if ct > 1 %} += 1{% else %} = true{% endif %};
%# there's special code for collect for specific items that may go here
            },
%% endfor
            _ => (),
        }
    }
%# Uncollect just straight-up doesn't work in this model

    fn position(&self) -> &SpotId {
        &self.position
    }
    fn set_position(&mut self, pos: &SpotId) {
        self.position = *pos;
    }

    fn can_afford(&self, cost: &Currency) -> bool {
        match cost {
            Currency::Free => true,
%% for ptype in price_types
            Currency::{{ ptype|capitalize }}(c) => self.{{ ptype }} >= *c,
%% endfor
        }
    }
    fn spend(&mut self, cost: &Currency) {
        match cost {
            Currency::Free => (),
%% for ptype in price_types
            Currency::{{ ptype|capitalize }}(c) => self.{{ ptype }} -= *c,
%% endfor
        }
    }

    fn visit(&mut self, loc_id: &LocationId) { self.status[*loc_id] = Status::Visited; }
    fn skip(&mut self, loc_id: &LocationId) { self.status[*loc_id] = Status::Skipped; }
    fn elapse(&mut self, t: i32) { self.elapsed += t; }
}

%% include 'header.rs.jinja'

#![allow(non_camel_case_types)]

use crate::context::Context;
use crate::items::Item;
use crate::prices::Currency;
use analyzer::context::Ctx;
use analyzer::world;
use enum_map::EnumMap;
use std::fmt;

%% from 'enum.rs.jinja' import enum
{{ enum('RegionId', regions) }}
{{ enum('AreaId', gl.areas()|list) }}
{{ enum('SpotId', gl.spots()|list) }}
{{ enum('LocationId', gl.locations()|list) }}
{{ enum('ExitId', gl.exits()|list) }}
{{ enum('ActionId', gl.actions()|list) }}
{{ enum('CanonId', canon_places, True) }}

#[derive(Debug, PartialEq, Eq, Copy, Clone)]
pub enum History {
    Warp(SpotId),
    Get(LocationId),
    Move(ExitId),
    Activate(ActionId),
}

%# All of this is going in unchanged--perhaps it should be a library type
%# with generics? But that kind of mostly negates the use of traits with
%# associated types...
#[derive(Copy, Clone)]
struct Location {
    id: LocationId,
    item: Item,
    canonical: CanonId,
    time: i8,
    price: Currency,

    access_rule: fn(&Context) -> bool,
}

impl world::Accessible for Location {
    type Context = Context;
    fn can_access(&self, ctx: &Context) -> bool {
        ctx.can_afford(&self.price) && (self.access_rule)(ctx)
    }
}

impl world::Location for Location {
    type LocId = LocationId;
    type CanonId = CanonId;

    fn id(&self) -> &LocationId { &self.id }
    fn item(&self) -> &Item { &self.item }

    fn canon_id(&self) -> &CanonId { &self.canonical }

}

#[derive(Copy, Clone)]
struct Exit {
    id: ExitId,
    time: i8,
    dest: SpotId,
    price: Currency,

    loc_id: LocationId,
    item: Item,
    canonical: CanonId,
    item_time: i8,

    access_rule: fn(&Context) -> bool,
}

impl world::Accessible for Exit {
    type Context = Context;
    fn can_access(&self, ctx: &Context) -> bool {
        ctx.can_afford(&self.price) && (self.access_rule)(ctx)
    }
}

impl world::Exit for Exit {
    type ExitId = ExitId;
    type SpotId = SpotId;

    fn id(&self) -> &ExitId { &self.id }
    fn dest(&self) -> &SpotId { &self.dest }
    fn connect(&mut self, dest: &SpotId) { self.dest = *dest; }
}

impl world::Location for Exit {
    type LocId = LocationId;
    type CanonId = CanonId;

    fn id(&self) -> &LocationId { &self.loc_id }
    fn item(&self) -> &Item { &self.item }

    fn canon_id(&self) -> &CanonId { &self.canonical }
}

#[derive(Copy, Clone)]
struct Action {
    id: ActionId,
    access_rule: fn(&Context) -> bool,
    activate: fn(&mut Context),
    time: i8,
}

impl world::Accessible for Action {
    type Context = Context;
    fn can_access(&self, ctx: &Context) -> bool { (self.access_rule)(ctx) }
}
impl world::Action for Action {
    type ActionId = ActionId;
    fn id(&self) -> &ActionId { &self.id }
}

#[derive(Copy, Clone)]
struct Spot<'a> {
    id: SpotId,
    // we can hold slices here to the real things held in World
    locations: &'a [Location],
    exits: &'a [Exit],
    actions: &'a [Action],
}

impl<'a> world::Spot for Spot<'a> {
    type SpotId = SpotId;
    type Location = Location;
    type Exit = Exit;
    type Action = Action;

    fn id(&self) -> &SpotId {
        &self.id
    }
    fn locations(&self) -> &'a [Location] {
        &self.locations
    }
    fn exits(&self) -> &'a [Exit] {
        &self.exits
    }
    fn actions(&self) -> &'a [Action] {
        &self.actions
    }
}

#[derive(Clone)]
struct World<'a> {
    // These are arrays that group the items together by their parent.
    // Using EnumMap for this ONLY WORKS if the keys are properly ordered to group
    // nearby things together.
    // For entrance rando, we would need to have a layer of indirection:
    // list_index: EnumMap<EnumType, usize>,
    // list: EnumArray<ObjType>,
    locations: EnumMap<LocationId, Location>,
    exits: EnumMap<ExitId, Exit>,
    actions: EnumMap<ActionId, Action>,
    spots: EnumMap<SpotId, Spot<'a>>,
}

impl<'a> world::World for World<'a> {
    type Location = Location;
    type Exit = Exit;
    type Action = Action;
    type Spot = Spot<'a>;

    fn get_location(&self, loc_id: &LocationId) -> &Location { &self.locations[*loc_id] }
    fn get_exit(&self, ex_id: &ExitId) -> &Exit { &self.exits[*ex_id] }
    fn get_action(&self, act_id: &ActionId) -> &Action { &self.actions[*act_id] }
    fn get_spot(&self, sp_id: &SpotId) -> &Spot<'a> { &self.spots[*sp_id] }
}


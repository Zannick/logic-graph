%% include 'header.rs.jinja'

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::*;
use crate::items::*;
use crate::movements;
use crate::prices::Currency;
use crate::rules;
use analyzer::condense::{condense_graph, CondensedEdge};
use analyzer::context::Ctx;
use analyzer::world;
use enum_map::{enum_map, Enum, EnumMap};
use std::fmt;
use std::ops::Range;
use std::option::Option;

%% from 'enum.rs.jinja' import enum
{{ enum('RegionId', regions, id=True) }}
{{ enum('AreaId', gl.areas()|list, id=True) }}
{{ enum('SpotId', gl.spots()|list, True, id=True) }}
{{ enum('LocationId', gl.locations()|list, id=True) }}
{{ enum('ExitId', gl.exits()|list, id=True) }}
{{ enum('ActionId', gl.actions()|list, id=True) }}
{{ enum('CanonId', canon_places, True, id=True) }}
{{ enum('WarpId', warps.values()|list, id=True) }}
{{ enum('Objective', objectives, default_value=default_objective) }}

pub fn get_area(spot: SpotId) -> AreaId {
    match spot {
        SpotId::None => panic!("Spot not valid"),
%% for a in gl.areas()
        SpotId::{{ a.spots|map(attribute='id')|join(' | SpotId::') }} => AreaId::{{ a.id }},
%% endfor
    }
}
pub fn get_region(spot: SpotId) -> RegionId {
    match spot {
        SpotId::None => panic!("Spot not valid"),
%% for r in regions
%% for a in r.areas
        SpotId::{{ a.spots|map(attribute='id')|join(' | SpotId::') }} => RegionId::{{ r.id }},
%% endfor
%% endfor
    }
}

%# All of this is going in unchanged--perhaps it should be a library type
%# with generics? But that kind of mostly negates the use of traits with
%# associated types... Maybe a macro...
#[derive(Copy, Clone, Debug)]
pub struct Location {
    id: LocationId,
    item: Item,
    canonical: CanonId,
    time: u32,
    exit_id: Option<ExitId>,
    price: Currency,
}

impl world::Accessible for Location {
    type Context = Context;
    type Currency = Currency;

    fn can_access(&self, ctx: &Context) -> bool {
        ctx.can_afford(&self.price) && match self.id {
%% for loc in gl.locations()|sort(attribute='id')
            LocationId::{{ loc.id }} => {% if loc.access_id %}rules::access_{{ loc.access_id }}(&ctx)
                {%- else %}true{% endif %},
%% endfor
        }
    }
    fn time(&self) -> u32 { self.time }
    fn price(&self) -> &Currency { &self.price }
}

impl world::Location for Location {
    type LocId = LocationId;
    type CanonId = CanonId;
    type ExitId = ExitId;

    fn id(&self) -> LocationId { self.id }
    fn item(&self) -> Item { self.item }
    fn canon_id(&self) -> CanonId { self.canonical }
    fn exit_id(&self) -> &Option<ExitId> { &self.exit_id }
}

#[derive(Copy, Clone, Debug)]
pub struct Exit {
    id: ExitId,
    time: u32,
    dest: SpotId,
    price: Currency,
    loc_id: Option<LocationId>,
}

impl world::Accessible for Exit {
    type Context = Context;
    type Currency = Currency;
    fn can_access(&self, ctx: &Context) -> bool {
        ctx.can_afford(&self.price) && match self.id {
%% for ex in gl.exits()|sort(attribute='id')
            ExitId::{{ ex.id }} => {% if ex.access_id %}rules::access_{{ ex.access_id }}(&ctx)
                {%- else %}true{% endif %},
%% endfor
        }
    }
    fn time(&self) -> u32 { self.time }
    fn price(&self) -> &Currency { &self.price }
}

impl world::Exit for Exit {
    type ExitId = ExitId;
    type SpotId = SpotId;
    type LocId = LocationId;

    fn id(&self) -> ExitId { self.id }
    fn dest(&self) -> SpotId { self.dest }
    fn connect(&mut self, dest: SpotId) { self.dest = dest; }
    fn loc_id(&self) -> &Option<LocationId> { &self.loc_id }

    fn always(id: ExitId) -> bool {
        match id {
%% for ex in gl.exits()|sort(attribute='id')
%% if not ex.price and not ex.item_price and not ex.access_id
            ExitId::{{ ex.id }} => true,
%% endif
%% endfor
            _ => false,
        }
    }
}

#[derive(Copy, Clone, Debug)]
pub struct Action {
    id: ActionId,
    time: u32,
    price: Currency,
}

impl world::Accessible for Action {
    type Context = Context;
    type Currency = Currency;
    fn can_access(&self, ctx: &Context) -> bool {
        ctx.can_afford(&self.price) && match self.id {
%% for act in gl.actions()|sort(attribute='id')
            ActionId::{{ act.id }} => {% if act.access_id %}rules::access_{{ act.access_id }}(&ctx)
                {%- else %}true{% endif %},
%% endfor
        }
    }
    fn time(&self) -> u32 { self.time }
    fn price(&self) -> &Currency { &self.price }
}
impl world::Action for Action {
    type ActionId = ActionId;
    type SpotId = SpotId;
    fn id(&self) -> ActionId { self.id }
    fn perform(&self, ctx: &mut Context) {
        match self.id {
%% for act in gl.actions()
            ActionId::{{ act.id }} => rules::action_{{ act.action_id }}(ctx),
%% endfor
        };
        let dest = self.dest(ctx);
        if dest != SpotId::None {
            ctx.set_position(dest);
        }
    }
    fn dest(&self, ctx: &Context) -> SpotId {
        match self.id {
%% for act in gl.actions()
%% if act.to
            ActionId::{{ act.id }} => {% if act.to.startswith('^') -%}
            {% if act.to[1:] in data_defaults %}data::{{ act.to[1:] }}(ctx.position()){% endif -%}
            ctx.{{ act.to[1:]|translate_ctx(act) }}()
            {%- else -%}
            SpotId::{{ act.to|construct_id }}
            {%- endif -%},
%% endif
%% endfor
            _ => SpotId::None,
        }
    }
}

#[derive(Copy, Clone, Debug)]
pub struct Warp {
    id: WarpId,
    dest: SpotId,
    time: u32,
    price: Currency,
}
impl world::Accessible for Warp {
    type Context = Context;
    type Currency = Currency;

    fn can_access(&self, ctx: &Context) -> bool {
        ctx.can_afford(&self.price) && match self.id {
%% for w in warps.values()|sort(attribute='id')
            WarpId::{{ w.id }} => {% if w.access_id %}rules::access_{{ w.access_id }}(&ctx)
                {%- else %}true{% endif %},
%% endfor
        }
    }
    fn time(&self) -> u32 { self.time }
    fn price(&self) -> &Currency { &self.price }
}
impl world::Warp for Warp {
    type WarpId = WarpId;
    type SpotId = SpotId;

    fn id(&self) -> WarpId { self.id }
    fn dest(&self, ctx: &Context) -> SpotId {
        if self.dest == SpotId::None {
            match self.id {
%% for w in warps.values()|sort(attribute='id')
                WarpId::{{ w.id }} => {{ w.target_id }},
%% endfor
            }
        } else { self.dest }
    }
    fn connect(&mut self, dest: SpotId) { self.dest = dest; }
    fn prewarp(&self, ctx: &mut Context) {
        match self.id {
%% for w in warps.values()|sort(attribute='id')
%% if 'before_id' in w:
            WarpId::{{ w.id }} => rules::action_{{ w.before_id }}(ctx),
%% endif
%% endfor
            _ => (),
        }
    }
    fn postwarp(&self, ctx: &mut Context) {
        match self.id {
%% for w in warps.values()|sort(attribute='id')
%% if 'after_id' in w:
            WarpId::{{ w.id }} => rules::action_{{ w.after_id }}(ctx),
%% endif
%% endfor
            _ => (),
        }
    }
    fn should_reload(&self) -> bool {
        match self.id {
%% for w in warps.values()|sort(attribute='id')
            WarpId::{{ w.id }} => {{ 'true' if w.loads else 'false' }},
%% endfor
        }
    }
}

#[derive(Clone, Debug, Default)]
pub struct Spot {
    pub id: SpotId,
    pub locations: Range<usize>,
    pub exits: Range<usize>,
    pub actions: Range<usize>,
    // spots don't reference their area, so we index these by spot
    pub area_spots: Range<usize>,
}

#[derive(Clone, Debug)]
pub struct World {
    pub objective: Objective,
    // These are arrays that group the items together by their parent.
    // Using EnumMap for this ONLY WORKS if the keys are properly ordered to group
    // nearby things together.
    // For entrance rando, we would need to have a layer of indirection:
    // list_index: EnumMap<EnumType, usize>,
    // list: EnumArray<ObjType>,
    locations: EnumMap<LocationId, Location>,
    exits: EnumMap<ExitId, Exit>,
    actions: EnumMap<ActionId, Action>,
    warps: EnumMap<WarpId, Warp>,
    raw_spots: [SpotId; {{ gl.spots()|list|length + 1 }}], %# +1 as long as we have a default
    // Index ranges for slices into the above arrays
    spots: EnumMap<SpotId, Spot>,
    global_actions: Range<usize>,
    min_warp_time: u32,
    // Condensed edges
    condensed: Option<EnumMap<SpotId, Vec<CondensedEdge<Context, SpotId, ExitId>>>>,
}

impl world::World for World {
    type Location = Location;
    type Exit = Exit;
    type Action = Action;
    type Warp = Warp;
    const NUM_LOCATIONS: u32 = {{ gl.locations()|list|count }};

%% for point in ['Location', 'Exit', 'Action']
    fn get_{{ point|lower }}(&self, id: {{ point }}Id)
         -> &{{ point }} { &self.{{ point|lower }}s[id] }
    fn get_spot_{{ point|lower }}s(&self, spot_id: SpotId) -> &[{{ point }}] {
        let r = &self.spots[spot_id].{{ point | lower }}s;
        &self.{{ point|lower }}s.as_slice()[r.start..r.end]
    }
%% endfor
    fn get_global_actions(&self) -> &[Action] {
        &self.actions.as_slice()[self.global_actions.start..self.global_actions.end]
    }
    fn get_warp(&self, id: WarpId) -> &Warp { &self.warps[id] }

    fn get_canon_locations(&self, loc_id: LocationId) -> Vec<LocationId> {
        let loc = self.get_location(loc_id);
        match world::Location::canon_id(loc) {
            CanonId::None => vec![],
%% for c, locs in canon_places.items()
            CanonId::{{ c|construct_id }} =>
                vec![LocationId::{{ locs|map(attribute='id')|join(', LocationId::') }}],
%% endfor
        }
    }

    // Hardcoded locations. To support a randomizer, this would be better as a cache.
    fn get_item_locations(&self, item: Item) -> Vec<LocationId> {
        match item {
%% for item, locs in item_locations.items()
            Item::{{ item }} => vec![LocationId::{{ locs|join(', LocationId::') }}],
%% endfor
            _ => Vec::new(),
        }
    }

    fn same_region(sp1: SpotId, sp2: SpotId) -> bool {
        get_region(sp1) == get_region(sp2)
    }
    fn same_area(sp1: SpotId, sp2: SpotId) -> bool {
        get_area(sp1) == get_area(sp2)
    }
    fn get_area_spots(&self, spot_id: SpotId) -> &[SpotId] {
        let r = &self.spots[spot_id].area_spots;
        &self.raw_spots[r.start..r.end]
    }
    fn get_warps(&self) -> &[Warp] { &self.warps.as_slice() }

    fn get_all_locations(&self) -> &[Location] { &self.locations.as_slice() }

    fn get_location_spot(&self, loc_id: LocationId) -> SpotId {
        match loc_id {
%% for spot in gl.spots()
%% if spot.locations
            LocationId::{{ spot.locations|map(attribute='id')|sort|join(' | LocationId::') }} => SpotId::{{ spot.id }},
%% endif
%% if spot.hybrid
            LocationId::{{ spot.hybrid|map(attribute='id')|sort|join(' | LocationId::') }} => SpotId::{{ spot.id }},
%% endif
%% endfor
        }
    }

    fn get_action_spot(&self, act_id: ActionId) -> SpotId {
        match act_id {
%% for spot in gl.spots()
%% if spot.actions
            ActionId::{{ spot.actions|map(attribute='id')|sort|join(' | ActionId::') }} => SpotId::{{ spot.id }},
%% endif
%% endfor
            _ => SpotId::None,
        }
    }

    fn get_all_spots(&self) -> &[SpotId] {
        self.raw_spots.as_slice()
    }

    fn skip_unused_items(&self, ctx: &mut Context) {
        for (id, loc) in &self.locations {
            if unused_item(world::Location::item(loc)) || self.unused_by_objective(world::Location::item(loc)) {
                ctx.skip(id);
            }
        }
    }

    fn won(&self, ctx: &Context) -> bool {
        match self.objective {
%% for o, info in objectives.items()
            Objective::{{ o|construct_id }} => rules::access_{{ info.access_id }}(ctx),
%% endfor
        }
    }

    fn items_needed(&self, ctx: &Context) -> Vec<(Item, i16)> {
        let mut vec = Vec::new();
        match self.objective {
%% for o, items in objective_items.items()
            Objective::{{ o|construct_id }} => {
%% for item, ct in items.items()|sort
%% if ct == 1
                if !ctx.has(Item::{{ item }}) {
                    vec.push((Item::{{ item }}, 1));
                }
%% else
                if ctx.count(Item::{{ item }}) < {{ ct }} {
                    vec.push((Item::{{ item }}, {{ ct }} - ctx.count(Item::{{ item }})));
                }
%% endif
%% endfor
            },
%% endfor
        };
        vec
    }

    fn objective_items(&self) -> Vec<(Item, i16)> {
        match self.objective {
%% for o, items in objective_items.items()
            Objective::{{ o|construct_id }} => vec![
%% for item, ct in items.items()|sort
%% if ct == 1
                    (Item::{{ item }}, 1),
%% else
                    (Item::{{ item }}, {{ ct }}),
%% endif
%% endfor
            ],
%% endfor
        }
    }

    fn base_edges(&self) -> Vec<(SpotId, SpotId, u32)> {
        movements::base_edges()
    }

    fn base_distance(&self, s1: SpotId, s2: SpotId) -> u32 {
        movements::base_distance(s1, s2)
    }

    fn are_spots_connected(&self, sp1: SpotId, sp2: SpotId) -> bool {
        movements::are_spots_connected(sp1, sp2)
    }

    fn best_movements(sp1: SpotId, sp2: SpotId) -> (Option<u32>, Vec<(movements::MovementState, u32)>) {
        movements::best_movements(sp1, sp2)
    }

    fn min_warp_time(&self) -> u32 {
        self.min_warp_time
    }

    fn spot_of_interest(&self, sp: SpotId) -> bool {
        match sp {
            SpotId::{{ gl.interesting_spots()|map(attribute='id')|sort|join(' | SpotId::') }} => true,
            _ => false,
        }
    }

    fn condense_graph(&mut self) {
        let mut emap = EnumMap::default();
        emap.extend(condense_graph(self));
        self.condensed = Some(emap);
    }

    fn get_condensed_edges_from(&self, spot_id: SpotId) -> &[CondensedEdge<Context, SpotId, ExitId>] {
        &self.condensed.as_ref().expect("Graph must be condensed first!")[spot_id]
    }
}

impl World {
    pub fn new() -> World {
        World {
            objective: Objective::default(),
            locations: build_locations(),
            exits: build_exits(),
            actions: build_actions(),
            warps: build_warps(),
            raw_spots: [SpotId::None, SpotId::{{ gl.spots()|map(attribute='id')|sort|join(', SpotId::') }}],
            spots: build_spots(),
            global_actions: Range {
                {% if global_actions -%}
                start: ActionId::{{ global_actions|map(attribute='id')|min }}.into_usize(),
                end: ActionId::{{ global_actions|map(attribute='id')|max }}.into_usize() + 1,
                {%- else %}start: 0, end: 0,{% endif %}
            },
            min_warp_time: {% if warps.values()|selectattr('base_movement', 'false')|first -%}
                {%- if global_actions|selectattr('to')|first -%}
                std::cmp::min({{ (warps.values()|selectattr('base_movement', 'false')|map(attribute='time')|min * 1000)|int }},
                    {{ (global_actions|selectattr('to')|map(attribute='time')|min * 1000)|int }})
                {%- else -%}
                    {{ (warps.values()|selectattr('base_movement', 'false')|map(attribute='time')|min * 1000)|int }}
                {%- endif -%}
                {%- elif global_actions|selectattr('to')|first -%}
                    {{ (global_actions|selectattr('to')|map(attribute='time')|min * 1000)|int }}
                {% else %}0{% endif %},
            condensed: None,
        }
    }

    fn unused_by_objective(&self, item: Item) -> bool {
        match self.objective {
%% for o, items in unused_by_objective.items()
%% if items
            Objective::{{ o|construct_id }} => matches!(item, Item::{{ items|sort|join(' | Item::') }}),
%% endif
%% endfor
            _ => false,
        }
    }
}

%% macro price(price, costs)
price: Currency::{% if price and price > 0 -%}
    {{ (costs or default_price_type)|camelize }}({{ price }})
    {%- else %}Free{% endif %},
%%- endmacro

pub fn build_locations() -> EnumMap<LocationId, Location> {
    enum_map! {
%% for loc in gl.locations()
        LocationId::{{ loc.id }} => Location {
            id: LocationId::{{ loc.id }},
            canonical: CanonId::{{ (loc.canon or 'None')|construct_id }},
            item: Item::{{ loc.item or 'None' }},
            {{ price(loc.price, loc.costs) }}
            time: {% if loc.to is defined %}{{ (loc.item_time * 1000)|int }}{% else %}{{ (loc.time * 1000)|int }}{% endif %},
            exit_id: {% if loc.to is defined %}Some(ExitId::{{ loc.id }}){% else %}None{% endif %},
        },
%% endfor
    }
}

pub fn build_exits() -> EnumMap<ExitId, Exit> {
    enum_map! {
%% for ex in gl.exits()
        ExitId::{{ ex.id }} => Exit {
            id: ExitId::{{ ex.id }},
            time: {{ (ex.time * 1000)|int }},
            dest: SpotId::{{ ex|get_exit_target }},
            {% if ex.item %}{{ price(ex.exit_price, ex.exit_costs) }}{% else %}{{ price(ex.price, ex.costs) }}{% endif %}
            loc_id: {% if ex.item is defined %}Some(LocationId::{{ ex.id }}){% else %}None{% endif %},
        },
%% endfor
    }
}

pub fn build_actions() -> EnumMap<ActionId, Action> {
    enum_map! {
%% for a in gl.actions()
        ActionId::{{ a.id }} => Action {
            id: ActionId::{{ a.id }},
            time: {{ (a.time * 1000)|int }},
            price: Currency::{% if a.price and a.price > 0 -%}
                {{ (a.costs or default_price_type)|camelize }}({{ a.price }})
                {%- else %}Free{% endif %},
        },
%% endfor
    }
}

pub fn build_spots() -> EnumMap<SpotId, Spot> {
    enum_map! {
        SpotId::None => Spot::default(),
%% for area in gl.areas()
%% for sp in area.spots
        SpotId::{{ sp.id }} => Spot {
            id: SpotId::{{ sp.id }},
            locations: Range {
                {% if sp.loc_ids -%}
                start: LocationId::{{ sp.loc_ids|min }}.into_usize(),
                end: LocationId::{{ sp.loc_ids|max }}.into_usize() + 1,
                {%- else %}start: 0, end: 0,{% endif %}
            },
            exits: Range {
                {% if sp.exit_ids -%}
                start: ExitId::{{ sp.exit_ids|min }}.into_usize(),
                end: ExitId::{{ sp.exit_ids|max }}.into_usize() + 1,
                {%- else %}start: 0, end: 0,{% endif %}
            },
            actions: Range {
                {% if sp.action_ids -%}
                start: ActionId::{{ sp.action_ids|min }}.into_usize(),
                end: ActionId::{{ sp.action_ids|max }}.into_usize() + 1,
                {%- else %}start: 0, end: 0,{% endif %}
            },
            area_spots: Range {
                start: SpotId::{{ area.spots|map(attribute='id')|min }}.into_usize(),
                end: SpotId::{{ area.spots|map(attribute='id')|max }}.into_usize() + 1,
            },
        },
%% endfor
%% endfor
    }
}

pub fn build_warps() -> EnumMap<WarpId, Warp> {
    enum_map! {
%% for w in warps.values()|sort(attribute='id')
        WarpId::{{ w.id }} => Warp {
            id: WarpId::{{ w.id }},
            dest: {% if w.target_id.startswith('ctx') %}SpotId::None{% else %}{{ w.target_id }}{% endif %},
            time: {{ (w.time * 1000)|int }},
            price: Currency::{% if w.price and w.price > 0 -%}
                {{ (w.costs or default_price_type)|camelize }}({{ w.price }})
                {%- else %}Free{% endif %},
        },
%% endfor
    }
}

pub fn spot_locations(id: SpotId) -> Range<usize> {
    match id {
        SpotId::None => Range { start: 0, end: 0, },
%% for sp in gl.spots()
        SpotId::{{ sp.id }} => Range {
            {% if sp.loc_ids -%}
            start: LocationId::{{ sp.loc_ids|min }}.into_usize(),
            end: LocationId::{{ sp.loc_ids|max }}.into_usize() + 1,
            {%- else %}start: 0, end: 0,{% endif %}
        },
%% endfor
    }
}

pub fn area_locations(id: AreaId) -> Range<usize> {
    match id {
%% for a in gl.areas()
        AreaId::{{ a.id }} => Range {
            {% if a.loc_ids -%}
            start: LocationId::{{ a.loc_ids|min }}.into_usize(),
            end: LocationId::{{ a.loc_ids|max }}.into_usize(),
            {%- else %}start: 0, end: 0,{% endif %}
        },
%% endfor
    }
}

pub fn region_locations(id: RegionId) -> Range<usize> {
    match id {
%% for r in gl.regions
        RegionId::{{ r.id }} => Range {
            {% if r.loc_ids -%}
            start: LocationId::{{ r.loc_ids|min }}.into_usize(),
            end: LocationId::{{ r.loc_ids|max }}.into_usize(),
            {%- else %}start: 0, end: 0,{% endif %}
        },
%% endfor
    }
}

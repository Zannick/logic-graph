%% include "header.rs.jinja"

#![allow(unused)]
#![allow(non_snake_case)]

use analyzer::context::Ctx;
use analyzer::world::*;
use analyzer::*;
use lib{{ package }}::context::{Context, Status};
use lib{{ package }}::graph::{self, *};
use lib{{ package }}::items::Item;

%% macro setup(setup, ctx='ctx')
%% for item in setup.with
    {{ ctx }}.{{ item.split('{', 1)[0]|lower }} =
    {%- if '{' in item %} {{ item[item.index('{') + 1:-1] }}{% elif gl.item_max_counts()[item] > 1 %} 1{% else %} true{% endif %};
%% endfor
%% if setup.context
%% for key, val in setup.context.items()
    {{ ctx }}.{{ key }} = {{ val|str_to_rusttype(context_types[key]) }};
%% endfor
%% endif
%% if setup.settings
%% for key, val in setup.settings.items()
    {{ ctx }}.{{ key }} = {{ val|str_to_rusttype(settings[key].rust_type) }};
%% endfor
%% endif
%% for loc in setup.visited
    {{ ctx }}.visit(LocationId::{{ loc|construct_id }});
%% endfor
%% for loc in setup.skipped
    {{ ctx }}.skipped(LocationId::{{ loc|construct_id }});
%% endfor
%% endmacro

%% macro verify_func(setup)
|ctx: &Context| {
    let mut vec = Vec::new();
%% for item in setup.with
    if ctx.{{ item.split('{', 1)[0]|lower }} !=
    {%- if '{' in item %} {{ item[item.index('{') + 1:-1] }}{% elif gl.item_max_counts()[item] > 1 %} 1{% else %} true{% endif %} {
        vec.push(format!("did not collect required items {{ item }}: {}", ctx.{{ item.split('{', 1)[0]|lower }}));
    }
%% endfor
%% if setup.context
%% for key, val in setup.context.items()
    if ctx.{{ key }} != {{ val|str_to_rusttype(context_types[key]) }} {
        vec.push(format!("did not match required context {{ key }}={{ val }}: {}", ctx.{{ key }}));
    }
%% endfor
%% endif
%% if setup.settings
%% for key, val in setup.settings.items()
    if ctx.{{ key }} != {{ val|str_to_rusttype(settings[key].rust_type) }} {
        vec.push(format!("did not match required setting {{ key }}={{ val }}: {}", ctx.{{ key }}));
    }
%% endfor
%% endif
%% for loc in setup.visited
    if ctx.status[LocationId::{{ loc|construct_id }}] != Status::Visited {
        vec.push(format!("required location {{ loc }} not visited: {:?}", ctx.status[LocationId::{{ loc|construct_id }}]));
    }
%% endfor
%% for loc in setup.skipped
    if ctx.status[LocationId::{{ loc|construct_id }}] != Status::Skipped {
        vec.push(format!("required location {{ loc }} not skipped: {:?}", ctx.status[LocationId::{{ loc|construct_id }}]));
    }
%% endfor
    if vec.is_empty() {
        Ok(())
    } else {
        Err(vec.join("\n"))
    }
}
%% endmacro

%% macro start(test_case, shared)
SpotId::{{ (test_case.start or shared.start)|construct_id }}
%% endmacro

fn shared_setup() -> (graph::World, Context) {
    let mut world = graph::World::new();
    let mut ctx = Context::new();
%% if test_file.all
{{ setup(test_file.all) }}
%% endif

    (world, ctx)
}

%% for test_case in test_file.tests
#[test]
fn {{ test_case|construct_test_name }}() {
    let (mut world, mut ctx) = shared_setup();
    {{ setup(test_case) }}

%% if test_case.can_obtain
    expect_obtainable!(&world, ctx, {{ start(test_case, test_file.all) }}, Item::{{ test_case.can_obtain }});
%% elif test_case.cannot_obtain
    expect_not_obtainable!(&world, ctx, {{ start(test_case, test_file.all) }}, Item::{{ test_case.cannot_obtain }});
%% elif test_case.can_reach
    expect_any_route!(&world, ctx, {{ start(test_case, test_file.all) }}, SpotId::{{ test_case.can_reach|construct_id }});
%% elif test_case.cannot_reach
    expect_no_route!(&world, ctx, {{ start(test_case, test_file.all) }}, SpotId::{{ test_case.cannot_reach|construct_id }});
%% elif test_case.path
    expect_this_route!(&world, ctx, {{ start(test_case, test_file.all) }}, vec![
%% for spot in test_case.path
        SpotId::{{ spot|construct_id }},
%% endfor
    ]);
%% elif test_case.eventually_gets
    expect_eventually!(&world, ctx, {{ start(test_case, test_file.all) }}, Item::{{ test_case.eventually_gets }});
%% elif test_case.requires
    let mut ctx2 = ctx.clone();
    {{ setup(test_case.requires, ctx='ctx2') }}
    {% if test_case.requires.to_obtain -%}
    expect_not_obtainable!(&world, ctx, {{ start(test_case, test_file.all) }}, Item::{{ test_case.requires.to_obtain }});
    expect_obtainable!(&world, ctx2, {{ start(test_case, test_file.all) }}, Item::{{ test_case.requires.to_obtain }});
    {%- elif test_case.requires.to_reach -%}
    expect_no_route!(&world, ctx, {{ start(test_case, test_file.all) }}, SpotId::{{ test_case.requires.to_reach|construct_id }});
    expect_any_route!(&world, ctx2, {{ start(test_case, test_file.all) }}, SpotId::{{ test_case.requires.to_reach|construct_id }});
    {%- endif %}
%% elif test_case.eventually_requires
    let verify = {{ verify_func(test_case.eventually_requires) }};
    expect_eventually_requires!(&world, ctx, {{ start(test_case, test_file.all) }}, Item::{{ test_case.eventually_requires.to_obtain }}, verify);
%% endif
}
%% endfor

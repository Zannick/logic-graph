%% macro enum(name, values, default=False, id=False, default_value=None)
#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash, Ord, PartialOrd{% if id %}, enum_map::Enum{% endif %}{% if default or default_value %}, Default{% endif %})]
pub enum {{ name }} {
%% if default or default_value
    #[default] {{ default_value }},
%% endif
%% for v in values|sort(attribute='id')
    {% if (v.id or v|construct_id) != default_value %}{{ v.id or v|construct_id }},{% endif -%}
%% endfor
}
impl fmt::Display for {{ name }} {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
%% if default
            {{ name }}::None => write!(f, "{}", "None"),
%% endif
%% for v in values|sort(attribute='id')
            {{ name }}::{{ v.id or v|construct_id }} => write!(f, "{}", "{{ v.fullname or v.name or v }}"),
%% endfor
        }
    }
}
%% if id
impl analyzer::world::Id for {{ name }} {}
%% endif
impl std::str::FromStr for {{ name }} {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
%% for v in values|sort(attribute='id')
            "{{ v.fullname or v.name or v }}" => Ok({{ name }}::{{ v.id or v|construct_id }}),
%% endfor
            _ => Err(format!("Could not recognize as a {{ name }}: {}", s)),
        }
    }
}
%% endmacro


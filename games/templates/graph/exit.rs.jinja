%% include 'header.rs.jinja'
%% from 'macros.jinja' import price, penalties

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::*;
use crate::graph::{World, enums::*};
use crate::observe::FullObservation;
use crate::prices::Currency;
use crate::rules;
use analyzer::context::Ctx;
use analyzer::world;
use enum_map::{Enum, EnumMap};
use rustc_hash::FxHashMap;
use std::option::Option;

#[derive(Copy, Clone, Debug)]
pub struct Exit {
    id: ExitId,
    time: u32,
    dest: SpotId,
    price: Currency,
    price_per_sec: Currency,
}

impl world::Accessible for Exit {
    type Context = Context;
    type Currency = Currency;
    fn can_access(&self, ctx: &Context, world: &World) -> bool {
        ctx.can_afford(&self.price) && match self.id {
%% for ex in gl.exits()|sort(attribute='id')
            ExitId::{{ ex.id }} => {% if ex.access_id %}rules::access_{{ ex.access_id }}(ctx, world)
                {%- else %}true{% endif %},
%% endfor
        }
    }
    fn observe_access(&self, ctx: &Context, world: &World, full_obs: &mut FullObservation) -> bool {
        ctx.observe_afford(&self.price, full_obs);
        match self.id {
%% for ex in gl.exits()|selectattr('access_id')|sort(attribute='id')
            ExitId::{{ ex.id }} => rules::observe_access_{{ ex.access_id }}(ctx, world, full_obs),
%% endfor
            _ => true,
        }
    }
    fn base_time(&self) -> u32 { self.time }
    fn time(&self, ctx: &Context, world: &World) -> u32 {
        self.time
            + match self.id {
%% for ex in gl.exits()|selectattr('penalties', 'interesting_penalties')|sort(attribute='id')
                ExitId::{{ ex.id }} => {
                    {{ penalties(ex.penalties) }}
                }
%% endfor
            _ => 0,
        }
    }
    fn base_price(&self) -> &Currency { &self.price }
    fn price_per_sec(&self) -> &Currency { &self.price_per_sec }
    fn price(&self, ctx: &Context, world: &World) -> Currency {
        if self.price_per_sec == Currency::Free {
            self.price
        } else {
            match self.id {
%% for ex in gl.exits()|selectattr('movement')|selectattr('penalties', 'interesting_penalties')|sort(attribute='id')
%% for pen in ex.penalties|selectattr('movement')
%% set mv = gl.exit_movements[pen.movement]
%% if mv
                ExitId::{{ ex.id }}{% if pen.access_id %} if rules::access_{{ pen.access_id }}(ctx, world){% endif %} => {
                    {{ price(mv.base_price, mv.costs or default_price_type) }} + ({{ price(mv.price_per_sec, mv.costs or default_price_type) }} * (self.time(ctx, world) as f32 / 1000.0))
                }
%% endif
%% endfor
%% endfor
                _ => self.price + (self.price_per_sec * (self.time(ctx, world) as f32 / 1000.0))
            }
        }
    }
    
    fn explain_rule(&self, ctx: &Self::Context, world: &World, edict: &mut FxHashMap<&'static str, String>) -> (bool, Vec<&'static str>) {
        match self.id {
%% for ex in gl.exits()|sort(attribute='id')
%% if ex.access_id
            ExitId::{{ ex.id }} => rules::explain_{{ ex.access_id }}(ctx, world, edict),
%% endif
%% endfor
            _ => (true, vec![])
        }
    }
}

impl world::Exit for Exit {
    type ExitId = ExitId;
    type SpotId = SpotId;

    fn id(&self) -> ExitId { self.id }
    fn dest(&self) -> SpotId { self.dest }
    fn connect(&mut self, dest: SpotId) { self.dest = dest; }

    fn always(id: ExitId) -> bool {
        match id {
%% for ex in gl.exits()|sort(attribute='id')
%% if not ex.price and not ex.item_price and not ex.access_id
            ExitId::{{ ex.id }} => true,
%% endif
%% endfor
            _ => false,
        }
    }
    fn has_penalties(id: ExitId) -> bool {
        match id {
%% for ex in gl.exits()|sort(attribute='id')
%% if ex.penalties
            ExitId::{{ ex.id }} => true,
%% endif
%% endfor
            _ => false,

        }
    }
}

static EXIT_DEFS: [Exit; {{ num_exits }}] = [
%% for ex in gl.exits()|sort(attribute='id', case_sensitive=True)
    Exit {
        id: ExitId::{{ ex.id }},
        time: {{ (ex.time * 1000)|round|int }},
        dest: SpotId::{{ ex|get_exit_target }},
%% if ex.movement and ex.movement is in gl.exit_movements and gl.exit_movements[ex.movement].price_per_sec
%% set mv = gl.exit_movements[ex.movement]
        price: {{ price((ex.price or 0) + (mv.base_price or 0), mv.costs or default_price_type) }},
        price_per_sec: {{ price(mv.price_per_sec, mv.costs or default_price_type) }},
%% else
        price: {{ price(ex.price, ex.costs or default_price_type) }},
        price_per_sec: Currency::Free,
%% endif
    },
%% endfor
];

pub(super) fn build_exits(exits: &mut EnumMap<ExitId, Exit>) {
    for (k, exit) in EXIT_DEFS.iter().enumerate() {
        assert!(k == exit.id.into_usize(),
                "Order of exit ids does not match: {} defined as {} but expected to be {}",
                exit.id, exit.id.into_usize(), k);
        exits[exit.id] = *exit;
    }
}

pub fn get_exit_spot(exit_id: ExitId) -> SpotId {
    match exit_id {
%% for spot in gl.spots()
%% if spot.exit_ids
        ExitId::{{ spot.exit_ids|join(' | ExitId:: ') }} => SpotId::{{ spot.id }},
%% endif
%% endfor
        _ => SpotId::None,
    }
}

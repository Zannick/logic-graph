%% include 'header.rs.jinja'
%% from 'macros.jinja' import price, penalties

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::*;
use crate::graph::{World, enums::*};
use crate::items::*;
use crate::observe::FullObservation;
use crate::prices::Currency;
use crate::rules;
use analyzer::context::Ctx;
use analyzer::world;
use analyzer::world::World as _;
use enum_map::{Enum, EnumMap};
use rustc_hash::FxHashMap;
use std::option::Option;

%#- All of this is going in unchanged--perhaps it should be a library type
%#- with generics? But that kind of mostly negates the use of traits with
%# associated types... Maybe a macro...
#[derive(Copy, Clone, Debug)]
pub struct Location {
    id: LocationId,
    item: Item,
    canonical: CanonId,
    time: u32,
    dest: SpotId,
    price: Currency,
    price_per_sec: Currency,
    skippable: bool,
}

impl world::Accessible for Location {
    type Context = Context;
    type Currency = Currency;

    fn can_access(&self, ctx: &Context, world: &World) -> bool {
        ctx.can_afford(&self.price) && match self.id {
%% for loc in gl.locations()|sort(attribute='id')
            LocationId::{{ loc.id }} => {% if loc.access_id %}rules::access_{{ loc.access_id }}(ctx, world)
                {%- else %}true{% endif %},
%% endfor
        }
    }
    fn observe_access(&self, ctx: &Context, world: &World, full_obs: &mut FullObservation) -> bool {
        ctx.observe_afford(&self.price, full_obs);
        match self.id {
%% for loc in gl.locations()|selectattr('access_id')|sort(attribute='id')
            LocationId::{{ loc.id }} => rules::observe_access_{{ loc.access_id }}(ctx, world, full_obs),
%% endfor
            _ => true,
        }
    }
    fn base_time(&self) -> u32 { self.time }
    fn time(&self, ctx: &Context, world: &World) -> u32 {
        self.time
            + match self.id {
%% for loc in gl.locations()|selectattr('penalties')|sort(attribute='id')
                LocationId::{{ loc.id }} => {
                    {{ penalties(loc.penalties) }}
                }
%% endfor
            _ => 0,
        }
    }
    fn base_price(&self) -> &Currency { &self.price }
    fn price(&self, ctx: &Context, world: &World) -> Currency {
        if self.price_per_sec == Currency::Free {
            self.price
        } else {
            match self.id {
%% for loc in gl.locations()|selectattr('movement')|selectattr('penalties')|sort(attribute='id')
%% for pen in loc.penalties|selectattr('movement')
%% set mv = gl.exit_movements[pen.movement]
%% if mv
                LocationId::{{ loc.id }}{% if pen.access_id %} if rules::access_{{ pen.access_id }}(ctx, world){% endif %} => {
                    {{ price(mv.base_price, mv.costs or default_price_type) }} + ({{ price(mv.price_per_sec, mv.costs or default_price_type) }} * (self.time(ctx, world) as f32 / 1000.0))
                }
%% endif
%% endfor
%% endfor
                _ => self.price + (self.price_per_sec * (self.time(ctx, world) as f32 / 1000.0))
            }
        }
    }

    fn explain_rule(&self, ctx: &Self::Context, world: &World, edict: &mut FxHashMap<&'static str, String>) -> (bool, Vec<&'static str>) {
        match self.id {
%% for loc in gl.locations()|sort(attribute='id')
%% if loc.access_id
            LocationId::{{ loc.id }} => rules::explain_{{ loc.access_id }}(ctx, world, edict),
%% endif
%% endfor
            _ => (true, vec![])
        }
    }
}

impl world::Location for Location {
    type LocId = LocationId;
    type CanonId = CanonId;
    type SpotId = SpotId;

    fn id(&self) -> LocationId { self.id }
    fn item(&self) -> Item { self.item }
    fn canon_id(&self) -> CanonId { self.canonical }
    fn skippable(&self) -> bool { self.skippable }
    fn dest(&self) -> SpotId { self.dest }
}

impl Location {
    pub fn set_skippable(&mut self, skippable: bool) {
        self.skippable = skippable;
    }
}

static LOC_DEFS: [Location; {{ num_locations }}] = [
%% for loc in gl.locations()|sort(attribute='id', case_sensitive=True)
    Location {
        id: LocationId::{{ loc.id }},
        canonical: CanonId::{% if loc.canon %}{{ loc.canon|construct_id }}{% else %}Loc_{{ loc.id }}{% endif %},
        item: Item::{{ loc.item or 'None' }},
%% if loc.movement and loc.movement is in gl.exit_movements and gl.exit_movements[loc.movement].price_per_sec
%% set mv = gl.exit_movements[loc.movement]
        price: {{ price((loc.price or 0) + (mv.base_price or 0), mv.costs or default_price_type) }},
        price_per_sec: {{ price(mv.price_per_sec, mv.costs or default_price_type) }},
%% else
        price: {{ price(loc.price, loc.costs or default_price_type) }},
        price_per_sec: Currency::Free,
%% endif
        time: {{ (loc.time * 1000)|int }},
        dest: SpotId::{% if loc.to is defined %}{{ loc|get_exit_target }}{% else %}None{% endif %},
        skippable: false,
    },
%% endfor
];

pub(super) fn build_locations(locations: &mut EnumMap<LocationId, Location>) {
    for (k, loc) in LOC_DEFS.iter().enumerate() {
        assert!(k == loc.id.into_usize(),
                "Order of location ids does not match: {} defined as {} but expected to be {}",
                loc.id, loc.id.into_usize(), k);
        locations[loc.id] = *loc;
    }
}

pub fn get_location_spot(loc_id: LocationId) -> SpotId {
    match loc_id {
%% for spot in gl.spots()
%% if spot.locations
        LocationId::{{ spot.locations|map(attribute='id')|sort|join(' | LocationId::') }} => SpotId::{{ spot.id }},
%% endif
%% if spot.hybrid
        LocationId::{{ spot.hybrid|map(attribute='id')|sort|join(' | LocationId::') }} => SpotId::{{ spot.id }},
%% endif
%% endfor
    }
}
%% include 'header.rs.jinja'
%% from 'macros.jinja' import price

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::*;
use crate::graph::{World, enums::*};
use crate::items::*;
use crate::observe::FullObservation;
use crate::prices::Currency;
use crate::rules;
use analyzer::context::Ctx;
use analyzer::world;
use enum_map::EnumMap;
use rustc_hash::FxHashMap;
use std::option::Option;

%# All of this is going in unchanged--perhaps it should be a library type
%# with generics? But that kind of mostly negates the use of traits with
%# associated types... Maybe a macro...
#[derive(Copy, Clone, Debug)]
pub struct Location {
    id: LocationId,
    item: Item,
    canonical: CanonId,
    time: u32,
    exit_id: Option<ExitId>,
    price: Currency,
    skippable: bool,
}

impl world::Accessible for Location {
    type Context = Context;
    type Currency = Currency;

    fn can_access(&self, ctx: &Context, world: &World) -> bool {
        ctx.can_afford(&self.price) && match self.id {
%% for loc in gl.locations()|sort(attribute='id')
            LocationId::{{ loc.id }} => {% if loc.access_id %}rules::access_{{ loc.access_id }}(ctx, world)
                {%- else %}true{% endif %},
%% endfor
        }
    }
    fn observe_access(&self, ctx: &Context, world: &World, full_obs: &mut FullObservation) -> bool {
        ctx.observe_afford(&self.price, full_obs);
        match self.id {
%% for loc in gl.locations()|selectattr('access_id')|sort(attribute='id')
            LocationId::{{ loc.id }} => rules::observe_access_{{ loc.access_id }}(ctx, world, full_obs),
%% endfor
            _ => true,
        }
    }
    fn base_time(&self) -> u32 { self.time }
    fn time(&self, ctx: &Context, world: &World) -> u32 {
        self.time
            + match self.id {
%% for loc in gl.locations()|sort(attribute='id')
%% if loc.penalties
                LocationId::{{ loc.id }} => {
%% for pen in loc.penalties
                    {% if not loop.first -%} } else {% endif %}if rules::access_{{ pen.access_id }}(ctx, world) {
                        {{ (pen.add * 1000)|int }}
%% endfor
                    } else {
                        0
                    }
                }
%% endif
%% endfor
            _ => 0,
        }
    }
    fn price(&self) -> &Currency { &self.price }

    fn explain_rule(&self, ctx: &Self::Context, world: &World, edict: &mut FxHashMap<&'static str, String>) -> (bool, Vec<&'static str>) {
        match self.id {
%% for loc in gl.locations()|sort(attribute='id')
%% if loc.access_id
            LocationId::{{ loc.id }} => rules::explain_{{ loc.access_id }}(ctx, world, edict),
%% endif
%% endfor
            _ => (true, vec![])
        }
    }
}

impl world::Location for Location {
    type LocId = LocationId;
    type CanonId = CanonId;
    type ExitId = ExitId;

    fn id(&self) -> LocationId { self.id }
    fn item(&self) -> Item { self.item }
    fn canon_id(&self) -> CanonId { self.canonical }
    fn exit_id(&self) -> &Option<ExitId> { &self.exit_id }
    fn skippable(&self) -> bool { self.skippable }
}

impl Location {
    pub fn set_skippable(&mut self, skippable: bool) {
        self.skippable = skippable;
    }
}

pub(crate) fn build_locations(locations: &mut EnumMap<LocationId, Location>) {
%% for loc in gl.locations()
    locations[LocationId::{{ loc.id }}] = Location {
        id: LocationId::{{ loc.id }},
        canonical: CanonId::{% if loc.canon %}{{ loc.canon|construct_id }}{% else %}Loc_{{ loc.id }}{% endif %},
        item: Item::{{ loc.item or 'None' }},
        {% if loc.to is defined %}{{ price(loc.item_price, loc.item_costs or default_price_type) }}{% else %}{{ price(loc.price, loc.costs or default_price_type) }}{% endif %}
        time: {% if loc.to is defined %}{{ (loc.item_time * 1000)|int }}{% else %}{{ (loc.time * 1000)|int }}{% endif %},
        exit_id: {% if loc.to is defined %}Some(ExitId::{{ loc.id }}){% else %}None{% endif %},
        skippable: false,
    };
%% endfor
}
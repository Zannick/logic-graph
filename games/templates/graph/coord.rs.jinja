%% include 'header.rs.jinja'

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::graph::enums::*;
use enum_map::Enum;

static COORDS: [(f32, f32); {{ (sorted_spots|count) + 1 }}] = [
    (f32::NAN, f32::NAN),
%% for sp in sorted_spots
%% if sp.coord
    ({{ sp.coord[0]|float }}, {{ sp.coord[1]|float }}),
%% else
    (f32::NAN, f32::NAN),
%% endif
%% endfor
];

pub fn coordinate(spot: SpotId) -> Result<(f32, f32), String> {
    let coord = COORDS[spot.into_usize()];
    if coord.0.is_nan() {
        Err(format!("Spot has no coordinate: {}", spot))
    } else {
        Ok(coord)
    }
}

pub fn distance(a: (f32, f32), b: (f32, f32)) -> f32 {
    ((a.0 - b.0).powi(2) + (a.1 - b.1).powi(2)).sqrt()
}

pub fn spot_distance(a: SpotId, b: SpotId) -> f32 {
    distance(coordinate(a).unwrap(), coordinate(b).unwrap())
}

pub fn spot_distance_or_inf(a: SpotId, b: SpotId) -> f32 {
    match (coordinate(a), coordinate(b)) {
        (Ok(c1), Ok(c2)) => distance(c1, c2),
        _ => f32::INFINITY,
    }
}

pub fn diagonal_speed(a: (f32, f32), b: (f32, f32), x_speed: f32, y_speed: f32) -> f32 {
    let dx = a.0 - b.0;
    let dy = a.1 - b.1;
    let tx = dx / x_speed;
    let ty = dy / y_speed;
    (tx.powi(2) + ty.powi(2)).sqrt()
}

pub fn diagonal_speed_spots(a: SpotId, b: SpotId, x_speed: f32, y_speed: f32) -> f32 {
    diagonal_speed(coordinate(a).unwrap(), coordinate(b).unwrap(), x_speed, y_speed)
}

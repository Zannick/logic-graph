%% include 'header.rs.jinja'

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::*;
use crate::graph::{action::*, coord::*, enums::*, exit::*, location::*, spot::*, warp::*};
use crate::items::*;
use crate::movements;
use analyzer::condense::{condense_graph, CondensedEdge};
use analyzer::context::Ctx;
use analyzer::world;
use analyzer::world::Location as _;
use enum_map::{enum_map, Enum, EnumMap};
use lazy_static::lazy_static;
use rustc_hash::{FxHashMap, FxHashSet};
use std::ops::Range;
use std::option::Option;

pub fn get_area(spot: SpotId) -> AreaId {
    match spot {
        SpotId::None => panic!("Spot not valid"),
%% for a in gl.areas()
        SpotId::{{ a.spots|map(attribute='id')|join(' | SpotId::') }} => AreaId::{{ a.id }},
%% endfor
    }
}
pub fn get_region(spot: SpotId) -> RegionId {
    match spot {
        SpotId::None => panic!("Spot not valid"),
%% for r in regions
%% for a in r.areas
        SpotId::{{ a.spots|map(attribute='id')|join(' | SpotId::') }} => RegionId::{{ r.id }},
%% endfor
%% endfor
    }
}

static RAW_SPOTS: [SpotId; {{ gl.spots()|list|length + 1 }}] = [ %# +1 as long as we have a default
    SpotId::None,
%% for spot_id in gl.spots()|map(attribute='id')|sort
    SpotId::{{ spot_id }},
%% endfor
];

lazy_static! {
    // Using get_area, we can get the nearby spots by indexing into the spot lists
    static ref RAW_AREA_SPOT_RANGES: EnumMap<AreaId, Range<usize>> = enum_map! {
    %% for r in regions
    %% for area in r.areas|sort(attribute='id')
        AreaId::{{ area.id }} => Range {
            start: SpotId::{{ area.spots|map(attribute='id')|min }}.into_usize(),
            end: SpotId::{{ area.spots|map(attribute='id')|max }}.into_usize() + 1,
        },
    %% endfor
    %% endfor
    };
}

#[derive(Clone, Debug)]
pub struct World {
%% for rule in rules
    pub rule_{{ rule|construct_id }}: Rule{{ rule[1:]|camelize }},
%% endfor
    // settings
%% for s, info in settings.items()
    pub {{ s }}: {{ info.rust_type }},
%% endfor
    // These are arrays that group the items together by their parent.
    // Using EnumMap for this ONLY WORKS if the keys are properly ordered to group
    // nearby things together.
    // For entrance rando, we would need to have a layer of indirection:
    // list_index: EnumMap<EnumType, usize>,
    // list: EnumArray<ObjType>,
    locations: EnumMap<LocationId, Location>,
    exits: EnumMap<ExitId, Exit>,
    actions: EnumMap<ActionId, Action>,
    warps: EnumMap<WarpId, Warp>,
    // Index ranges for slices into the above arrays
    spots: EnumMap<SpotId, Spot>,
    global_actions: Range<usize>,
    min_warp_time: u32,
    // Condensed edges
    condensed: Option<EnumMap<SpotId, Vec<CondensedEdge<Context, SpotId, ExitId>>>>,
}

impl world::World for World {
    type Location = Location;
    type Exit = Exit;
    type Action = Action;
    type Warp = Warp;
    const NUM_CANON_LOCATIONS: usize = {{ gl.canon_places|count }};

    fn new() -> Box<Self> {
        let mut world: Box<Self> = bytemuck::zeroed_box();

%% for rule in rules
        world.rule_{{ rule|construct_id }} = Rule{{ rule[1:]|camelize }}::default();
%% endfor
%% for s, info in settings.items()
        world.{{ s }} = {% if info.default %}{{ info.default|str_to_rusttype(info.type) }}{% else %}Default::default(){% endif %};
%% endfor

        world.global_actions = Range {
            {% if global_actions -%}
            start: ActionId::{{ global_actions|map(attribute='id')|min }}.into_usize(),
            end: ActionId::{{ global_actions|map(attribute='id')|max }}.into_usize() + 1,
            {%- else %}start: 0, end: 0,{% endif %}
        };
        world.min_warp_time = {% if warps.values()|selectattr('base_movement', 'false')|first -%}
            {%- if global_actions|selectattr('to')|first -%}
            std::cmp::min({{ (warps.values()|selectattr('base_movement', 'false')|map(attribute='time')|min * 1000)|int }},
                {{ (global_actions|selectattr('to')|map(attribute='time')|min * 1000)|int }})
            {%- else -%}
                {{ (warps.values()|selectattr('base_movement', 'false')|map(attribute='time')|min * 1000)|int }}
            {%- endif -%}
            {%- elif global_actions|selectattr('to')|first -%}
                {{ (global_actions|selectattr('to')|map(attribute='time')|min * 1000)|int }}
            {%- else %}0{% endif %};

        build_locations(&mut world.locations);
        build_exits(&mut world.exits);
        build_actions(&mut world.actions);
        build_warps(&mut world.warps);
        build_spots(&mut world.spots);
        world
    }

    fn ruleset(&self) -> String {
        format!(
            "[{% for rule in rules %}{% if not loop.first %}, {% endif %}{{ rule }}: {}{% endfor %}]",
%% for rule in rules
            self.rule_{{ rule|construct_id }},
%% endfor
        )
    }

%% for point in ['Location', 'Exit', 'Action']
    fn get_{{ point|lower }}(&self, id: {{ point }}Id)
         -> &{{ point }} { &self.{{ point|lower }}s[id] }
    fn get_spot_{{ point|lower }}s(&self, spot_id: SpotId) -> &[{{ point }}] {
        let r = &self.spots[spot_id].{{ point | lower }}s;
        &self.{{ point|lower }}s.as_slice()[r.start..r.end]
    }
%% endfor
    fn get_global_actions(&self) -> &[Action] {
        &self.actions.as_slice()[self.global_actions.start..self.global_actions.end]
    }
    fn get_warp(&self, id: WarpId) -> &Warp { &self.warps[id] }

    // Hardcoded locations. To support a randomizer, this would be better as a cache.
    fn get_item_locations(&self, item: Item) -> Vec<LocationId> {
        match item {
%% for item, locs in item_locations.items()
            Item::{{ item }} => vec![LocationId::{{ locs|join(', LocationId::') }}],
%% endfor
            _ => Vec::new(),
        }
    }

    fn same_region(sp1: SpotId, sp2: SpotId) -> bool {
        get_region(sp1) == get_region(sp2)
    }
    fn same_area(sp1: SpotId, sp2: SpotId) -> bool {
        get_area(sp1) == get_area(sp2)
    }
    fn get_area_spots(&self, spot_id: SpotId) -> &[SpotId] {
        if spot_id == SpotId::None {
            &RAW_SPOTS[0..0]
        } else {
            let area_id = get_area(spot_id);
            let r = &RAW_AREA_SPOT_RANGES[area_id];
            &RAW_SPOTS[r.start..r.end]
        }
    }
    fn get_warps(&self) -> &[Warp] { &self.warps.as_slice() }

    fn get_all_locations(&self) -> &[Location] { &self.locations.as_slice() }

    fn get_location_spot(&self, loc_id: LocationId) -> SpotId {
        match loc_id {
%% for spot in gl.spots()
%% if spot.locations
            LocationId::{{ spot.locations|map(attribute='id')|sort|join(' | LocationId::') }} => SpotId::{{ spot.id }},
%% endif
%% if spot.hybrid
            LocationId::{{ spot.hybrid|map(attribute='id')|sort|join(' | LocationId::') }} => SpotId::{{ spot.id }},
%% endif
%% endfor
        }
    }

    fn get_action_spot(&self, act_id: ActionId) -> SpotId {
        match act_id {
%% for spot in gl.spots()
%% if spot.actions
            ActionId::{{ spot.actions|map(attribute='id')|sort|join(' | ActionId::') }} => SpotId::{{ spot.id }},
%% endif
%% endfor
            _ => SpotId::None,
        }
    }

    fn get_exit_spot(&self, exit_id: ExitId) -> SpotId {
        match exit_id {
%% for spot in gl.spots()
%% if spot.exit_ids
            ExitId::{{ spot.exit_ids|join(' | ExitId:: ') }} => SpotId::{{ spot.id }},
%% endif
%% if spot.hybrid
            ExitId::{{ spot.hybrid|map(attribute='id')|sort|join(' | ExitId::') }} => SpotId::{{ spot.id }},
%% endif
%% endfor
            _ => SpotId::None,
        }
    }

    fn get_all_spots(&self) -> &[SpotId] {
        RAW_SPOTS.as_slice()
    }

    fn won(&self, ctx: &Context) -> bool {
        crate::rule__victory!(ctx, self)
    }

    fn items_needed(&self, ctx: &Context) -> Vec<(Item, i16)> {
        let mut map = FxHashMap::default();

        match self.rule_victory {
%% for v, refs in victory_rule_refs.items()
            RuleVictory::{{ v|construct_id|camelize }} => {
%% for item, ct in rule_items['$victory'][v].items()|sort
%% if ct == 1
                if !ctx.has(Item::{{ item }}) {
                    map.insert(Item::{{ item }}, 1);
                }
%% else
                if ctx.count(Item::{{ item }}) < {{ ct }} {
                    map.insert(Item::{{ item }}, {{ ct }} - ctx.count(Item::{{ item }}));
                }
%% endif
%% endfor
%% for ref in refs
                match self.rule_{{ ref|construct_id }} {
%% for vref, items in rule_items[ref].items()
                    Rule{{ ref[1:]|camelize }}::{{ vref|construct_id|camelize }} => {
%% for item, ct in items.items()|sort
%% if ct == 1
                        if !ctx.has(Item::{{ item }}) {
                            if !map.contains_key(&Item::{{ item }}) {
                                map.insert(Item::{{ item }}, 1);
                            }
                        }
%% else
                        if ctx.count(Item::{{ item }}) < {{ ct }} {
                            if let Some(val) = map.get_mut(&Item::{{ item }}) {
                                *val = std::cmp::max(*val, {{ ct }} - ctx.count(Item::{{ item }}));
                            } else {
                                map.insert(Item::{{ item }}, {{ ct }} - ctx.count(Item::{{ item }}));
                            }
                        }
%% endif
%% endfor
                    }
%% endfor
                }
%% endfor
            }
%% endfor
        }

        map.drain().collect()
    }

    fn required_items(&self) -> Vec<(Item, i16)> {
        let mut map = FxHashMap::default();

        match self.rule_victory {
%% for v, refs in victory_rule_refs.items()
            RuleVictory::{{ v|construct_id|camelize }} => {
%% for item, ct in rule_items['$victory'][v].items()|sort
%% if ct == 1
                map.insert(Item::{{ item }}, 1);
%% else
                map.insert(Item::{{ item }}, {{ ct }});
%% endif
%% endfor
%% for ref in refs
                match self.rule_{{ ref|construct_id }} {
%% for vref, items in rule_items[ref].items()
                    Rule{{ ref[1:]|camelize }}::{{ vref|construct_id|camelize }} => {
%% for item, ct in items.items()|sort
%% if ct == 1
                        if !map.contains_key(&Item::{{ item }}) {
                            map.insert(Item::{{ item }}, 1);
                        }
%% else
                        if let Some(val) = map.get_mut(&Item::{{ item }}) {
                            *val = std::cmp::max(*val, {{ ct }});
                        } else {
                            map.insert(Item::{{ item }}, {{ ct }});
                        }
%% endif
%% endfor
                    }
%% endfor
                }
%% endfor
            }
%% endfor
        }

        map.drain().collect()
    }

    fn unused_items(&self) -> Vec<Item> {
        let mut vec = Vec::from_iter(self.get_unused_items());
        vec.sort();
        vec
    }

    fn remaining_items(&self, ctx: &Context) -> Vec<(Item, i16)> {
        let mut map = FxHashMap::default();
        let mut canons_seen = FxHashSet::default();
        for loc in self.locations.values() {
            let cid = loc.canon_id();
            if ctx.todo(loc) && !canons_seen.contains(&cid) {
                canons_seen.insert(cid);
                let item = loc.item();
                if let Some(val) = map.get_mut(&item) {
                    *val = *val + 1;
                } else {
                    map.insert(item, 1);
                }
            }
        }
        map.drain().collect()
    }


    fn should_draw_edge(&self, exit_id: ExitId) -> bool {
        match exit_id {
%% for r in regions|reject('exclude_by_tag')|sort(attribute='id')
%% for a in r.areas|reject('exclude_by_tag')|sort(attribute='id')
%% for s in a.spots
%% for e in s.exits|reject('exclude_by_tag')|sort(attribute='id')
            ExitId::{{ e.id }} => true,
%% endfor
%% for h in s.hybrid|reject('exclude_by_tag')|sort(attribute='id')
            ExitId::{{ h.id }} => true,
%% endfor
%% endfor
%% endfor
%% endfor
            _ => false,
        }
    }

    fn should_draw_spot(&self, spot_id: SpotId) -> bool {
        match spot_id {
%% for r in regions|reject('exclude_by_tag')|sort(attribute='id')
%% for a in r.areas|reject('exclude_by_tag')|sort(attribute='id')
%% for s in a.spots
            SpotId::{{ s.id }} => true,
%% endfor
%% endfor
%% endfor
            _ => false,
        }
    }

    fn base_edges(&self) -> Vec<(SpotId, SpotId, u32)> {
        movements::base_edges()
    }

    fn are_spots_connected(&self, sp1: SpotId, sp2: SpotId) -> bool {
        movements::are_spots_connected(sp1, sp2)
    }

    fn free_movement(sp1: SpotId, sp2: SpotId) -> Option<u32> {
        movements::free_movement(sp1, sp2)
    }

    fn best_movements(sp1: SpotId, sp2: SpotId) -> (Option<u32>, Vec<(movements::MovementState, u32)>) {
        movements::best_movements(sp1, sp2)
    }

    fn min_warp_time(&self) -> u32 {
        self.min_warp_time
    }

    fn spot_distance(a: SpotId, b: SpotId) -> f32 {
        spot_distance_or_inf(a, b)
    }

    fn spot_of_interest(&self, sp: SpotId) -> bool {
        match sp {
            SpotId::{{ gl.interesting_spots()|map(attribute='id')|sort|join(' | SpotId::') }} => true,
            _ => false,
        }
    }

    fn condense_graph(&mut self) {
        let mut emap = EnumMap::default();
        emap.extend(condense_graph(self));
        self.condensed = Some(emap);
    }

    fn get_condensed_edges_from(&self, spot_id: SpotId) -> &[CondensedEdge<Context, SpotId, ExitId>] {
        &self.condensed.as_ref().expect("Graph must be condensed first!")[spot_id]
    }
}

unsafe impl bytemuck::Zeroable for World {}

impl World {
    pub fn update_skippable_locations(&mut self) {
        let unused_items = self.get_unused_items();
        for loc in self.locations.values_mut() {
            let item = loc.item();
            let skippable = unused_item(item) || unused_items.contains(&item);
            loc.set_skippable(skippable);
        }
    }

    fn unused_by_rules(&self, item: Item) -> bool {
        match self.rule_victory {
%% for v, refs in victory_rule_refs.items()
            RuleVictory::{{ v|construct_id|camelize }} => {
%% for ref in refs
                {% if not loop.first %}&& {% endif %}match self.rule_{{ ref|construct_id }} {
%% for vref, items in unused_by_rule[ref].items()
                    Rule{{ ref[1:]|camelize }}::{{ vref|construct_id|camelize }} => {
                        matches!(item, Item::{{ (items.intersection(unused_by_rule['$victory'][v]))|sort|join(' | Item::') }})
                    }
%% endfor
                }
%% else
                matches!(item, Item::{{ unused_by_rule['$victory'][v]|sort|join(' | Item::') }})
%% endfor
            }
%% endfor
        }
    }

    fn get_unused_items(&self) -> FxHashSet<Item> {
        match self.rule_victory {
%% for v, refs in victory_rule_refs.items()
            RuleVictory::{{ v|construct_id|camelize }} => {
%% for ref in refs
                {% if loop.first %}let mut set = {% else %}set.intersection(&{% endif %}match self.rule_{{ ref|construct_id }} {
%% for vref, items in unused_by_rule[ref].items()
                    Rule{{ ref[1:]|camelize }}::{{ vref|construct_id|camelize }} => {
                        let mut iset = FxHashSet::default();
%% for item in items.intersection(unused_by_rule['$victory'][v])|sort
                        iset.insert(Item::{{ item }});
%% endfor
                        iset
                    }
%% endfor
                }{% if not loop.first %}){% endif %};
                set
%% else
                let mut set = FxHashSet::default();
%% for item in unused_by_rule['$victory'][v]|sort
                set.insert(Item::{{ item }});
%% endfor
                set
%% endfor
            }
%% endfor
        }
    }
}

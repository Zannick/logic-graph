%% include 'header.rs.jinja'

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]

use crate::context::Context;
use crate::graph::*;
use crate::observe::FullObservation;
use crate::rules;
use analyzer::context::Ctx;
use bitflags::bitflags;
use enum_map::Enum;
use phf::{phf_map, phf_ordered_map};

#[derive(Debug, PartialEq, Eq, Copy, Clone, Default)]
enum Movement {
    #[default] Default,
%% for m in non_default_movements
    {{ m|camelize }},
%% endfor
}

fn has_movement(ctx: &Context, world: &World, m: Movement) -> bool {
    match m {
        Movement::Default => true,
%% for m in non_default_movements
        Movement::{{ m|camelize }} => rules::access_{{ movements[m].access_id }}(ctx, world),
%% endfor
    }
}

bitflags!{
    #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash)]
    pub struct MovementState: u8 {
%% for mtype in non_default_movements
        const {{ mtype|upper }} = {{ (2 ** loop.index0) | hex }};
%% endfor
    }
}

pub fn get_movement_state(ctx: &Context, world: &World) -> MovementState {
    let mut m = MovementState::default();
%% for mtype in non_default_movements
    if rules::access_{{ movements[mtype].access_id }}(ctx, world) {
        m.insert(MovementState::{{ mtype|upper }});
    }
%% endfor
    m
}

pub fn observe_movement_state(ctx: &Context, world: &World, full_obs: &mut FullObservation) -> MovementState {
    let mut m = MovementState::default();
%% for mtype in non_default_movements
    if rules::observe_access_{{ movements[mtype].access_id }}(ctx, world, full_obs) {
        m.insert(MovementState::{{ mtype|upper }});
    }
%% endfor
    m
}

type TravelTimeFromSpotMap = phf::Map<u64, u32>;
type TravelTimeMap = phf::Map<u64, &'static TravelTimeFromSpotMap>;

%% for k, table in movement_tables.items()|sort
%% set mname = k|movement_set_name
%% for src, dtable in table.items()|sort
static TIMES_{{ mname }}__{{ src|upper }}: TravelTimeFromSpotMap = phf_map!{
%% for dest, times in dtable.items()
    {{ dest|spot_id_index }}u64 /* SpotId::{{ dest }} */ => {{ ((times|sum)*1000)|int }},{% if times|count > 1 %} // {{ times|map('round', 6)|list }}{% endif %}
%% endfor
};
%% endfor

static MVMT_{{ mname }}: TravelTimeMap = phf_map!{
%% for src in table
    {{ src|spot_id_index }}u64 /* SpotId::{{ src }} */ => &TIMES_{{ mname }}__{{ src|upper }},
%% endfor
};

%% endfor

static MOVEMENT_TABLE: phf::Map<u8, &TravelTimeMap> = phf_map!{
%% for k in movement_tables|sort
    {{ k|bool_list_to_bitflags }}u8 => &MVMT_{{ k|movement_set_name }},
%% endfor
};

pub fn local_travel_time(movement_state: MovementState, src: SpotId, dest: SpotId) -> u32 {
    MOVEMENT_TABLE.get(&movement_state.bits())
        .and_then(|table| table.get(&(src.into_usize() as u64)))
        .and_then(|table| table.get(&(dest.into_usize() as u64)))
        .copied().unwrap_or(u32::MAX)
}

pub fn are_spots_connected(src: SpotId, dest: SpotId) -> bool {
    match (src, dest) {
%% for s in gl.spots()
%% for t in (s.local or ())
%% if s != t
        (SpotId::{{ s.id }}, SpotId::{{ t.to|get_spot_reference(s) }}) => true,
%% endif
%% endfor
%% endfor
        _ => false,
    }
}

static BASE_EDGES: [(SpotId, SpotId, u32); {{ base_distances.values()|map('count')|sum }}] = [
%% for s, table in base_distances.items()|sort
%% for t, time in table.items()|sort
    (SpotId::{{ s }}, SpotId::{{ t }}, {{ (time * 1000)|int }}),
%% endfor
%% endfor
];

pub fn base_edges() -> Vec<(SpotId, SpotId, u32)> {
    BASE_EDGES.to_vec()
}

type ImprovementsTable = phf::OrderedMap<u8, u32>;
type BestMovementsFromSpotTable = phf::Map<u64, (Option<u32>, Option<&'static ImprovementsTable>)>;
type BestMovementsTable = phf::Map<u64, &'static BestMovementsFromSpotTable>;

%% for src, stable in movements_rev_lookup.items()|sort
%% for dest, (time, mvmts) in stable.items()|sort
%%- if mvmts
static IMPR__{{ src|upper }}___{{ dest|upper }}: ImprovementsTable = phf_ordered_map! {
%% for m, mt in mvmts
    {{ m|bool_list_to_bitflags }}u8 => {{ (mt*1000)|int }},
%% endfor
};

%% endif
%% endfor
%% endfor

%% for src, stable in movements_rev_lookup.items()|sort
static BEST__{{ src|upper }}: BestMovementsFromSpotTable = phf_map! {
%% for dest, (time, mvmts) in stable.items()|sort
    {{ dest|spot_id_index }}u64 /* SpotId::{{ dest }} */ => (
        {%- if time < 0 %}None{% else %}Some({{ (time*1000)|int }}){% endif %},
        {%- if mvmts %} Some(&IMPR__{{ src|upper }}___{{ dest|upper }}){% else %} None{% endif -%}
    ),
%% endfor
};
%% endfor

static BEST_MOVEMENTS: BestMovementsTable = phf_map! {
%% for src in movements_rev_lookup|sort
    {{ src|spot_id_index }}u64 /* SpotId::{{ src }} */ => &BEST__{{ src|upper }},
%% endfor
};

pub fn free_movement(sp1: SpotId, sp2: SpotId) -> Option<u32> {
    BEST_MOVEMENTS.get(&(sp1.into_usize() as u64))
        .and_then(|table| table.get(&(sp2.into_usize() as u64)))
        .and_then(|res| res.0)
}

pub fn best_movements(sp1: SpotId, sp2: SpotId) -> (Option<u32>, Vec<(MovementState, u32)>) {
    match BEST_MOVEMENTS.get(&(sp1.into_usize() as u64)).and_then(|table| table.get(&(sp2.into_usize() as u64))) {
        None => (None, Vec::new()),
        Some(res) => (
            res.0,
            res.1.map_or_else(
                Default::default,
                |table| table.entries().map(|(a, b)| (MovementState::from_bits_retain(*a), *b)).collect()
            )
        )
    }
}
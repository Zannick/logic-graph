import argparse
from collections import namedtuple
from functools import cache, cached_property
import itertools
import logging
import os
import re
import yaml
# TODO: pyspellchecker to check for issues with item names

base_dir = os.path.dirname(os.path.realpath(__file__))
logging.basicConfig(level=logging.INFO, format='{relativeCreated:09.2f} {levelname}: {message}', style='{')

from grammar import parseRule, parseAction, StringVisitor

MAIN_FILENAME = 'Game.yaml'
GAME_FIELDS = {'name', 'objectives', 'movements', 'warps', 'checks', 'start', 'load',
               'helpers', 'collect'}
# To be validated later
REGION_FIELDS = {'name', 'short', 'here'}
AREA_FIELDS = {'name', 'enter', 'exits', 'spots'}
SPOT_FIELDS = {'name', 'coord', 'actions', 'locations', 'exits', 'hybrid'}

# To be replaced with standard functions instead of helpers
BUILTINS = {
    '$max' : 'cmp::max',
    '$min' : 'cmp::max',
    '$all_checks' : 'undef::all_checks',
}

def load_regions_from_file(file):
    try:
        with open(file) as f:
            return list(yaml.safe_load_all(f))
    except Exception as e:
        raise Exception(f'Error reading from {file}') from e
    # TODO: validate fields


def load_game_yaml(game_dir):
    yfiles = [file for file in os.listdir(game_dir) if file.endswith('.yaml')]
    game_file = os.path.join(game_dir, MAIN_FILENAME)
    if MAIN_FILENAME not in yfiles:
        raise Exception(f'Game not found: expecting {game_file}')
    yfiles.remove(MAIN_FILENAME)
    with open(os.path.join(game_dir, MAIN_FILENAME)) as f:
        game = yaml.safe_load(f)
    unexp = game.keys() - GAME_FIELDS
    if unexp:
        raise Exception(f'Unexpected top-level fields in {game_file}: {", ".join(sorted(unexp))}')
    game['regions'] = list(itertools.chain.from_iterable(
        load_regions_from_file(os.path.join(game_dir, file))
        for file in sorted(yfiles)))
    return game


def _parseExpression(logic, name, category, sep=':'):
    rule = 'boolExpr'
    if ':' in name:
        rule, name = name.split(':', 1)
    return parseRule(rule, logic, name=f'{category}{sep}{name}')


disallowed_chars = re.compile(r'[^A-Za-z_0-9]')
def construct_id(*args):
    return '__'.join(disallowed_chars.sub('', a.replace(' ', '_')) for a in args)


class GameLogic(object):

    def __init__(self, game):
        self.game = game
        self.game_dir = os.path.join(base_dir, 'games', game)
        self.header = f'//! AUTOGENERATED FOR {self.game} - DO NOT MODIFY\n//!\n'

        self._info = gameinfo = load_game_yaml(self.game_dir)
        self.helpers = {name: _parseExpression(logic, name, 'helpers')
                        for name, logic in gameinfo['helpers'].items()}
        self.allowed_funcs = self.helpers.keys() | BUILTINS.keys()
        self.objectives = {name: _parseExpression(logic, name, 'objectives')
                           for name, logic in gameinfo['objectives'].items()}
        self.collect = {name: parseAction(logic, name, 'collect')
                        for name, logic in gameinfo['collect'].items()}

        # these are {name: {...}} dicts
        self.movements = gameinfo['movements']
        for name, info in self.movements.items():
            if 'req' in info:
                info['pr'] = _parseExpression(info['req'], name, 'movements')

        self.warps = gameinfo['warps']
        for name, info in self.warps.items():
            if 'req' in info:
                info['pr'] = _parseExpression(info['req'], name, 'warps')

        # these are dicts {name: blah, req: blah} (at whatever level)
        self.regions = gameinfo['regions']
        for region in self.regions:
            rname = region.get('short', region['name'])
            region['id'] = construct_id(rname)
            for area in region['areas']:
                aname = area['name']
                area['region'] = rname
                area['id'] = construct_id(rname, aname)

                for e in area.get('exits', ()):
                    e['area'] = aname
                    e['region'] = rname
                    e['id'] = construct_id(rname, aname, 'ex', e['to'])
                    if 'req' in e:
                        e['pr'] = _parseExpression(
                                e['req'], e['to'], f'{rname} > {aname}', ' ==> ')

                for spot in area['spots']:
                    sname = spot['name']
                    spot['area'] = aname
                    spot['region'] = rname
                    spot['id'] = construct_id(rname, aname, sname)
                    fullname = f'{rname} > {aname} > {sname}'
                    for loc in spot.get('locations', ()):
                        loc['spot'] = sname
                        loc['area'] = aname
                        loc['region'] = rname
                        loc['id'] = construct_id(rname, aname, sname, loc['name'])
                        if 'req' in loc:
                            loc['pr'] = _parseExpression(
                                    loc['req'], loc['name'], fullname, ' ')
                    for eh in spot.get('exits', []) + spot.get('hybrid', []):
                        eh['spot'] = sname
                        eh['area'] = aname
                        eh['region'] = rname
                        eh['id'] = construct_id(rname, aname, sname, 'ex', eh['to'])
                        if 'req' in eh:
                            eh['pr'] = _parseExpression(
                                    eh['req'], eh['to'], fullname, ' ==> ')

                    for act in spot.get('actions', ()):
                        act['spot'] = sname
                        act['area'] = aname
                        act['region'] = rname
                        act['id'] = construct_id(rname, aname, sname, act['name'])
                        if 'req' in act:
                            act['pr'] = _parseExpression(
                                    act['req'], act['name'] + ' req', fullname, ' ')
                        act['act'] = parseAction(
                                act['do'], name=f'{fullname} {act["name"]}:do')


    def areas(self):
        return itertools.chain(r['areas'] for r in self.regions)


    def all_points(self):
        for region in self.regions:
            for area in region['areas']:
                yield from area.get('exits', ())
                for spot in area['spots']:
                    yield from spot.get('locations', ())
                    yield from spot.get('exits', ())
                    yield from spot.get('hybrid', ())
                    yield from spot.get('actions', ())


    def all_parse_results(self):
        yield from self.helpers.values()
        yield from self.objectives.values()
        yield from self.collect.values()
        yield from (info['pr'] for info in self.movements.values() if 'pr' in info)
        yield from (info['pr'] for info in self.warps.values() if 'pr' in info)
        for pt in self.all_points():
            if 'pr' in pt:
                yield pt['pr']
            if 'act' in pt:
                yield pt['act']


    @cached_property
    def errors(self):
        e = [pr.errors for pr in self.all_parse_results()]
        # Check vanilla items
        for pt in self.all_points():
            if 'item' in pt and pt['item'] is None:
                e.append(f'{pt["id"]} specified with empty item')
            elif 'item' in pt and pt['item'] != construct_id(pt['item']):
                e.append(f'Invalid item name {item!r} at {pt["id"]}; '
                         f'did you mean {construct_id(pt["item"])!r}?')
        # Check used functions
        for func in BUILTINS.keys() & self.helpers.keys():
            e.append(f'Cannot use reserved name {func!r} as helper')
        for pr in self.all_parse_results():
            for t in pr.parser.getTokenStream().tokens:
                if pr.parser.symbolicNames[t.type] == 'FUNC' and t.text not in self.allowed_funcs:
                    e.append(f'{pr.name}: Unrecognized function {t.text}')


    @cached_property
    def vanilla_items(self):
        return {pt['item'] for pt in self.all_points()
                if 'item' in pt}


    @cached_property
    def rule_items(self):
        return {t.text
                for pr in self.all_parse_results()
                for t in pr.parser.getTokenStream().tokens
                if pr.parser.symbolicNames[t.type] == 'ITEM'}


    def emit_helpers(self):
        with open(os.path.join(self.game_dir, 'src', 'helpers.rs'), 'w') as f:
            f.write(self.header)
            f.write(f'//! Macro definitions for helpers.\n')
            for name, pr in self.helpers.items():
                args = []
                if '(' in name:
                    name, args = name.split('(', 1)
                    args = args[:-1].split(',')
                id = construct_id('helper', name)
                f.write(f'\n/// {name}\n'
                        f'/// {pr.text}\n'
                        f'#[macro_export]\n'
                        f'macro_rules! {id} {{\n'
                        f'    ({", ". join("$" + a + ":expr" for a in args)}) => {{{{\n'
                        f'        println!("{{}}", "{StringVisitor().visit(pr.tree)}");\n')
                for a in args:
                    f.write(f'        println!("{a} := {{}}", ${a});\n')
                f.write(f'    }}}}\n'
                        f'}}\n')


    def emit_items(self):
        with open(os.path.join(self.game_dir, 'src', 'items.rs'), 'w') as f:
            f.write(self.header)
            f.write('//! Collectibles.\n\n'
                    '#![allow(dead_code)]\n'
                    '#![allow(non_camel_case_types)]\n\n'
                    '#[derive(Debug)]\n'
                    'pub enum Items {\n')
            for item in sorted(self.vanilla_items | self.rule_items):
                f.write(f'    {item},\n')
            f.write('}\n')


if __name__ == '__main__':
    cmd = argparse.ArgumentParser()
    cmd.add_argument('game', help='Which game to build the graph for')
    args = cmd.parse_args()

    # Things we need to do:
    # load the game's yaml files

    gl = GameLogic(args.game)
    if gl.errors:
        print('\n'.join(gl.errors))
    gl.emit_helpers()
    gl.emit_items()

    # Error checking:
    # - Check for unsupported info, bad indents, etc
    # - Parse all rules
    # - Check functions called
    # determine the list of all items in the game
    # build context type
    # build graph

# Generated from c:/Users/bswolf/Documents/GitHub/logic-graph/grammar/Rules.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,42,863,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        3,0,71,8,0,1,0,1,0,1,0,1,0,1,0,3,0,78,8,0,1,0,1,0,1,0,1,0,1,0,1,
        0,5,0,86,8,0,10,0,12,0,89,9,0,1,1,1,1,1,1,5,1,94,8,1,10,1,12,1,97,
        9,1,1,1,3,1,100,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,110,8,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,5,2,133,8,2,10,2,12,2,136,9,2,1,2,1,2,1,2,1,
        2,1,2,3,2,143,8,2,1,2,1,2,1,2,1,2,3,2,149,8,2,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,163,8,3,1,4,3,4,166,8,4,1,4,1,
        4,1,4,1,4,1,4,5,4,173,8,4,10,4,12,4,176,9,4,1,4,1,4,3,4,180,8,4,
        1,4,1,4,1,4,1,4,1,4,1,4,3,4,188,8,4,1,4,1,4,1,4,1,4,1,4,3,4,195,
        8,4,1,4,1,4,1,4,1,4,1,4,3,4,202,8,4,1,4,1,4,1,4,1,4,1,4,3,4,209,
        8,4,1,4,1,4,1,4,1,4,1,4,5,4,216,8,4,10,4,12,4,219,9,4,1,4,1,4,3,
        4,223,8,4,1,4,1,4,1,4,1,4,1,4,5,4,230,8,4,10,4,12,4,233,9,4,1,4,
        1,4,1,4,3,4,238,8,4,1,4,1,4,1,4,3,4,243,8,4,3,4,245,8,4,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,263,
        8,5,10,5,12,5,266,9,5,1,5,1,5,1,5,1,5,1,5,3,5,273,8,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,3,5,283,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,301,8,6,10,6,12,6,304,9,6,
        1,6,1,6,1,6,1,6,1,6,3,6,311,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,329,8,7,10,7,12,7,332,9,7,1,
        7,1,7,1,7,1,7,1,7,3,7,339,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,4,
        8,349,8,8,11,8,12,8,350,1,8,1,8,1,8,1,8,3,8,357,8,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,4,8,369,8,8,11,8,12,8,370,1,8,1,8,1,
        8,1,8,1,8,4,8,378,8,8,11,8,12,8,379,3,8,382,8,8,1,8,1,8,1,8,1,8,
        3,8,388,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,398,8,8,10,8,12,
        8,401,9,8,1,8,1,8,1,8,1,8,4,8,407,8,8,11,8,12,8,408,1,8,1,8,1,8,
        1,8,3,8,415,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,4,8,425,8,8,11,8,
        12,8,426,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,4,8,437,8,8,11,8,12,8,438,
        1,8,1,8,3,8,443,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,4,9,453,8,9,
        11,9,12,9,454,1,9,1,9,1,9,1,9,3,9,461,8,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,4,9,473,8,9,11,9,12,9,474,1,9,1,9,1,9,1,9,1,9,
        4,9,482,8,9,11,9,12,9,483,3,9,486,8,9,1,9,1,9,1,9,1,9,3,9,492,8,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,4,9,504,8,9,11,9,12,9,
        505,1,9,1,9,1,9,1,9,1,9,4,9,513,8,9,11,9,12,9,514,3,9,517,8,9,1,
        9,1,9,1,9,1,9,3,9,523,8,9,1,9,1,9,3,9,527,8,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,4,10,537,8,10,11,10,12,10,538,1,10,1,10,1,10,
        1,10,3,10,545,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,4,10,557,8,10,11,10,12,10,558,1,10,1,10,1,10,1,10,1,10,4,10,
        566,8,10,11,10,12,10,567,3,10,570,8,10,1,10,1,10,1,10,1,10,3,10,
        576,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,10,
        588,8,10,11,10,12,10,589,1,10,1,10,1,10,1,10,1,10,4,10,597,8,10,
        11,10,12,10,598,3,10,601,8,10,1,10,1,10,1,10,1,10,3,10,607,8,10,
        1,10,1,10,3,10,611,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,3,11,637,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,3,12,647,8,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,3,14,661,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,3,14,671,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,
        681,8,14,3,14,683,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,5,15,694,8,15,10,15,12,15,697,9,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,5,15,706,8,15,10,15,12,15,709,9,15,1,15,1,15,1,15,1,15,1,
        15,3,15,716,8,15,3,15,718,8,15,1,16,1,16,1,16,1,16,1,17,1,17,3,17,
        726,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,737,8,
        18,1,19,1,19,3,19,741,8,19,1,20,1,20,1,20,1,20,3,20,747,8,20,1,20,
        3,20,750,8,20,1,21,1,21,1,21,3,21,755,8,21,1,21,1,21,1,21,3,21,760,
        8,21,5,21,762,8,21,10,21,12,21,765,9,21,1,21,1,21,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,3,22,778,8,22,1,22,3,22,781,8,22,1,
        22,1,22,1,22,3,22,786,8,22,1,23,1,23,1,23,1,23,3,23,792,8,23,1,24,
        3,24,795,8,24,1,24,1,24,1,24,3,24,800,8,24,1,24,1,24,1,24,1,24,1,
        24,5,24,807,8,24,10,24,12,24,810,9,24,1,24,3,24,813,8,24,1,25,1,
        25,3,25,817,8,25,1,25,1,25,1,25,1,25,1,25,3,25,824,8,25,1,25,1,25,
        1,25,1,25,1,25,3,25,831,8,25,1,25,1,25,1,25,1,25,1,25,5,25,838,8,
        25,10,25,12,25,841,9,25,1,25,1,25,1,25,1,25,3,25,847,8,25,1,25,1,
        25,1,25,3,25,852,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,861,
        8,26,1,26,0,1,0,27,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,0,3,2,0,32,33,36,36,2,0,32,32,37,37,
        2,0,33,33,39,39,986,0,77,1,0,0,0,2,90,1,0,0,0,4,148,1,0,0,0,6,162,
        1,0,0,0,8,244,1,0,0,0,10,282,1,0,0,0,12,284,1,0,0,0,14,312,1,0,0,
        0,16,442,1,0,0,0,18,526,1,0,0,0,20,610,1,0,0,0,22,636,1,0,0,0,24,
        646,1,0,0,0,26,648,1,0,0,0,28,682,1,0,0,0,30,717,1,0,0,0,32,719,
        1,0,0,0,34,725,1,0,0,0,36,736,1,0,0,0,38,740,1,0,0,0,40,749,1,0,
        0,0,42,751,1,0,0,0,44,785,1,0,0,0,46,791,1,0,0,0,48,812,1,0,0,0,
        50,851,1,0,0,0,52,860,1,0,0,0,54,55,6,0,-1,0,55,56,5,1,0,0,56,57,
        3,0,0,0,57,58,5,2,0,0,58,78,1,0,0,0,59,78,3,8,4,0,60,78,3,6,3,0,
        61,78,3,16,8,0,62,78,3,10,5,0,63,78,3,28,14,0,64,78,3,22,11,0,65,
        78,3,24,12,0,66,78,3,26,13,0,67,78,3,42,21,0,68,78,3,44,22,0,69,
        71,5,23,0,0,70,69,1,0,0,0,70,71,1,0,0,0,71,72,1,0,0,0,72,78,3,40,
        20,0,73,78,3,48,24,0,74,78,3,50,25,0,75,78,5,24,0,0,76,78,5,25,0,
        0,77,54,1,0,0,0,77,59,1,0,0,0,77,60,1,0,0,0,77,61,1,0,0,0,77,62,
        1,0,0,0,77,63,1,0,0,0,77,64,1,0,0,0,77,65,1,0,0,0,77,66,1,0,0,0,
        77,67,1,0,0,0,77,68,1,0,0,0,77,70,1,0,0,0,77,73,1,0,0,0,77,74,1,
        0,0,0,77,75,1,0,0,0,77,76,1,0,0,0,78,87,1,0,0,0,79,80,10,17,0,0,
        80,81,5,21,0,0,81,86,3,0,0,18,82,83,10,16,0,0,83,84,5,22,0,0,84,
        86,3,0,0,17,85,79,1,0,0,0,85,82,1,0,0,0,86,89,1,0,0,0,87,85,1,0,
        0,0,87,88,1,0,0,0,88,1,1,0,0,0,89,87,1,0,0,0,90,95,3,4,2,0,91,92,
        5,3,0,0,92,94,3,4,2,0,93,91,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,
        95,96,1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,98,100,5,3,0,0,99,98,1,
        0,0,0,99,100,1,0,0,0,100,3,1,0,0,0,101,102,5,34,0,0,102,109,5,4,
        0,0,103,110,5,24,0,0,104,110,5,25,0,0,105,110,5,36,0,0,106,110,3,
        52,26,0,107,110,3,46,23,0,108,110,3,34,17,0,109,103,1,0,0,0,109,
        104,1,0,0,0,109,105,1,0,0,0,109,106,1,0,0,0,109,107,1,0,0,0,109,
        108,1,0,0,0,110,149,1,0,0,0,111,112,5,34,0,0,112,113,5,41,0,0,113,
        114,5,4,0,0,114,149,3,34,17,0,115,149,3,8,4,0,116,117,5,26,0,0,117,
        118,5,1,0,0,118,119,3,0,0,0,119,120,5,2,0,0,120,121,5,5,0,0,121,
        122,3,2,1,0,122,134,5,6,0,0,123,124,5,27,0,0,124,125,5,26,0,0,125,
        126,5,1,0,0,126,127,3,0,0,0,127,128,5,2,0,0,128,129,5,5,0,0,129,
        130,3,2,1,0,130,131,5,6,0,0,131,133,1,0,0,0,132,123,1,0,0,0,133,
        136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,142,1,0,0,0,136,
        134,1,0,0,0,137,138,5,27,0,0,138,139,5,5,0,0,139,140,3,2,1,0,140,
        141,5,6,0,0,141,143,1,0,0,0,142,137,1,0,0,0,142,143,1,0,0,0,143,
        149,1,0,0,0,144,145,5,31,0,0,145,146,5,34,0,0,146,147,5,7,0,0,147,
        149,5,34,0,0,148,101,1,0,0,0,148,111,1,0,0,0,148,115,1,0,0,0,148,
        116,1,0,0,0,148,144,1,0,0,0,149,5,1,0,0,0,150,151,5,35,0,0,151,152,
        5,1,0,0,152,153,5,37,0,0,153,154,5,7,0,0,154,155,3,0,0,0,155,156,
        5,2,0,0,156,163,1,0,0,0,157,158,5,35,0,0,158,159,5,1,0,0,159,160,
        3,0,0,0,160,161,5,2,0,0,161,163,1,0,0,0,162,150,1,0,0,0,162,157,
        1,0,0,0,163,7,1,0,0,0,164,166,5,23,0,0,165,164,1,0,0,0,165,166,1,
        0,0,0,166,167,1,0,0,0,167,168,5,35,0,0,168,169,5,1,0,0,169,174,5,
        32,0,0,170,171,5,7,0,0,171,173,5,32,0,0,172,170,1,0,0,0,173,176,
        1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,177,1,0,0,0,176,174,
        1,0,0,0,177,245,5,2,0,0,178,180,5,23,0,0,179,178,1,0,0,0,179,180,
        1,0,0,0,180,181,1,0,0,0,181,182,5,35,0,0,182,183,5,1,0,0,183,184,
        3,40,20,0,184,185,5,2,0,0,185,245,1,0,0,0,186,188,5,23,0,0,187,186,
        1,0,0,0,187,188,1,0,0,0,188,189,1,0,0,0,189,190,5,35,0,0,190,191,
        5,1,0,0,191,192,5,37,0,0,192,245,5,2,0,0,193,195,5,23,0,0,194,193,
        1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,197,5,35,0,0,197,198,
        5,1,0,0,198,199,5,39,0,0,199,245,5,2,0,0,200,202,5,23,0,0,201,200,
        1,0,0,0,201,202,1,0,0,0,202,203,1,0,0,0,203,204,5,35,0,0,204,205,
        5,1,0,0,205,206,5,40,0,0,206,245,5,2,0,0,207,209,5,23,0,0,208,207,
        1,0,0,0,208,209,1,0,0,0,209,210,1,0,0,0,210,211,5,35,0,0,211,212,
        5,1,0,0,212,217,5,36,0,0,213,214,5,7,0,0,214,216,5,36,0,0,215,213,
        1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,220,
        1,0,0,0,219,217,1,0,0,0,220,245,5,2,0,0,221,223,5,23,0,0,222,221,
        1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,225,5,35,0,0,225,226,
        5,1,0,0,226,231,3,52,26,0,227,228,5,7,0,0,228,230,3,52,26,0,229,
        227,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,
        234,1,0,0,0,233,231,1,0,0,0,234,235,5,2,0,0,235,245,1,0,0,0,236,
        238,5,23,0,0,237,236,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,
        242,5,35,0,0,240,241,5,1,0,0,241,243,5,2,0,0,242,240,1,0,0,0,242,
        243,1,0,0,0,243,245,1,0,0,0,244,165,1,0,0,0,244,179,1,0,0,0,244,
        187,1,0,0,0,244,194,1,0,0,0,244,201,1,0,0,0,244,208,1,0,0,0,244,
        222,1,0,0,0,244,237,1,0,0,0,245,9,1,0,0,0,246,247,5,26,0,0,247,248,
        5,1,0,0,248,249,3,0,0,0,249,250,5,2,0,0,250,251,5,5,0,0,251,252,
        3,0,0,0,252,264,5,6,0,0,253,254,5,27,0,0,254,255,5,26,0,0,255,256,
        5,1,0,0,256,257,3,0,0,0,257,258,5,2,0,0,258,259,5,5,0,0,259,260,
        3,0,0,0,260,261,5,6,0,0,261,263,1,0,0,0,262,253,1,0,0,0,263,266,
        1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,272,1,0,0,0,266,264,
        1,0,0,0,267,268,5,27,0,0,268,269,5,5,0,0,269,270,3,0,0,0,270,271,
        5,6,0,0,271,273,1,0,0,0,272,267,1,0,0,0,272,273,1,0,0,0,273,283,
        1,0,0,0,274,275,5,1,0,0,275,276,3,0,0,0,276,277,5,26,0,0,277,278,
        3,0,0,0,278,279,5,27,0,0,279,280,3,0,0,0,280,281,5,2,0,0,281,283,
        1,0,0,0,282,246,1,0,0,0,282,274,1,0,0,0,283,11,1,0,0,0,284,285,5,
        26,0,0,285,286,5,1,0,0,286,287,3,0,0,0,287,288,5,2,0,0,288,289,5,
        5,0,0,289,290,3,34,17,0,290,302,5,6,0,0,291,292,5,27,0,0,292,293,
        5,26,0,0,293,294,5,1,0,0,294,295,3,0,0,0,295,296,5,2,0,0,296,297,
        5,5,0,0,297,298,3,34,17,0,298,299,5,6,0,0,299,301,1,0,0,0,300,291,
        1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,310,
        1,0,0,0,304,302,1,0,0,0,305,306,5,27,0,0,306,307,5,5,0,0,307,308,
        3,34,17,0,308,309,5,6,0,0,309,311,1,0,0,0,310,305,1,0,0,0,310,311,
        1,0,0,0,311,13,1,0,0,0,312,313,5,26,0,0,313,314,5,1,0,0,314,315,
        3,0,0,0,315,316,5,2,0,0,316,317,5,5,0,0,317,318,3,46,23,0,318,330,
        5,6,0,0,319,320,5,27,0,0,320,321,5,26,0,0,321,322,5,1,0,0,322,323,
        3,0,0,0,323,324,5,2,0,0,324,325,5,5,0,0,325,326,3,46,23,0,326,327,
        5,6,0,0,327,329,1,0,0,0,328,319,1,0,0,0,329,332,1,0,0,0,330,328,
        1,0,0,0,330,331,1,0,0,0,331,338,1,0,0,0,332,330,1,0,0,0,333,334,
        5,27,0,0,334,335,5,5,0,0,335,336,3,46,23,0,336,337,5,6,0,0,337,339,
        1,0,0,0,338,333,1,0,0,0,338,339,1,0,0,0,339,15,1,0,0,0,340,341,5,
        29,0,0,341,342,5,32,0,0,342,348,5,5,0,0,343,344,5,39,0,0,344,345,
        5,8,0,0,345,346,3,0,0,0,346,347,5,7,0,0,347,349,1,0,0,0,348,343,
        1,0,0,0,349,350,1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,352,
        1,0,0,0,352,353,5,9,0,0,353,354,5,8,0,0,354,356,3,0,0,0,355,357,
        5,7,0,0,356,355,1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,359,
        5,6,0,0,359,443,1,0,0,0,360,361,5,29,0,0,361,362,5,33,0,0,362,381,
        5,5,0,0,363,364,5,39,0,0,364,365,5,8,0,0,365,366,3,0,0,0,366,367,
        5,7,0,0,367,369,1,0,0,0,368,363,1,0,0,0,369,370,1,0,0,0,370,368,
        1,0,0,0,370,371,1,0,0,0,371,382,1,0,0,0,372,373,5,37,0,0,373,374,
        5,8,0,0,374,375,3,0,0,0,375,376,5,7,0,0,376,378,1,0,0,0,377,372,
        1,0,0,0,378,379,1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,382,
        1,0,0,0,381,368,1,0,0,0,381,377,1,0,0,0,382,383,1,0,0,0,383,384,
        5,9,0,0,384,385,5,8,0,0,385,387,3,0,0,0,386,388,5,7,0,0,387,386,
        1,0,0,0,387,388,1,0,0,0,388,389,1,0,0,0,389,390,5,6,0,0,390,443,
        1,0,0,0,391,392,5,29,0,0,392,393,3,52,26,0,393,406,5,5,0,0,394,399,
        5,32,0,0,395,396,5,10,0,0,396,398,5,32,0,0,397,395,1,0,0,0,398,401,
        1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,402,1,0,0,0,401,399,
        1,0,0,0,402,403,5,8,0,0,403,404,3,0,0,0,404,405,5,7,0,0,405,407,
        1,0,0,0,406,394,1,0,0,0,407,408,1,0,0,0,408,406,1,0,0,0,408,409,
        1,0,0,0,409,410,1,0,0,0,410,411,5,9,0,0,411,412,5,8,0,0,412,414,
        3,0,0,0,413,415,5,7,0,0,414,413,1,0,0,0,414,415,1,0,0,0,415,416,
        1,0,0,0,416,417,5,6,0,0,417,443,1,0,0,0,418,419,3,52,26,0,419,420,
        5,28,0,0,420,421,5,11,0,0,421,424,5,32,0,0,422,423,5,7,0,0,423,425,
        5,32,0,0,424,422,1,0,0,0,425,426,1,0,0,0,426,424,1,0,0,0,426,427,
        1,0,0,0,427,428,1,0,0,0,428,429,5,12,0,0,429,443,1,0,0,0,430,431,
        3,52,26,0,431,432,5,28,0,0,432,433,5,11,0,0,433,436,5,37,0,0,434,
        435,5,7,0,0,435,437,5,37,0,0,436,434,1,0,0,0,437,438,1,0,0,0,438,
        436,1,0,0,0,438,439,1,0,0,0,439,440,1,0,0,0,440,441,5,12,0,0,441,
        443,1,0,0,0,442,340,1,0,0,0,442,360,1,0,0,0,442,391,1,0,0,0,442,
        418,1,0,0,0,442,430,1,0,0,0,443,17,1,0,0,0,444,445,5,29,0,0,445,
        446,5,32,0,0,446,452,5,5,0,0,447,448,5,39,0,0,448,449,5,8,0,0,449,
        450,3,34,17,0,450,451,5,7,0,0,451,453,1,0,0,0,452,447,1,0,0,0,453,
        454,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,
        457,5,9,0,0,457,458,5,8,0,0,458,460,3,34,17,0,459,461,5,7,0,0,460,
        459,1,0,0,0,460,461,1,0,0,0,461,462,1,0,0,0,462,463,5,6,0,0,463,
        527,1,0,0,0,464,465,5,29,0,0,465,466,3,52,26,0,466,485,5,5,0,0,467,
        468,5,39,0,0,468,469,5,8,0,0,469,470,3,34,17,0,470,471,5,7,0,0,471,
        473,1,0,0,0,472,467,1,0,0,0,473,474,1,0,0,0,474,472,1,0,0,0,474,
        475,1,0,0,0,475,486,1,0,0,0,476,477,5,37,0,0,477,478,5,8,0,0,478,
        479,3,34,17,0,479,480,5,7,0,0,480,482,1,0,0,0,481,476,1,0,0,0,482,
        483,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,
        472,1,0,0,0,485,481,1,0,0,0,486,487,1,0,0,0,487,488,5,9,0,0,488,
        489,5,8,0,0,489,491,3,34,17,0,490,492,5,7,0,0,491,490,1,0,0,0,491,
        492,1,0,0,0,492,493,1,0,0,0,493,494,5,6,0,0,494,527,1,0,0,0,495,
        496,5,29,0,0,496,497,5,33,0,0,497,516,5,5,0,0,498,499,5,39,0,0,499,
        500,5,8,0,0,500,501,3,34,17,0,501,502,5,7,0,0,502,504,1,0,0,0,503,
        498,1,0,0,0,504,505,1,0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,
        517,1,0,0,0,507,508,5,37,0,0,508,509,5,8,0,0,509,510,3,34,17,0,510,
        511,5,7,0,0,511,513,1,0,0,0,512,507,1,0,0,0,513,514,1,0,0,0,514,
        512,1,0,0,0,514,515,1,0,0,0,515,517,1,0,0,0,516,503,1,0,0,0,516,
        512,1,0,0,0,517,518,1,0,0,0,518,519,5,9,0,0,519,520,5,8,0,0,520,
        522,3,34,17,0,521,523,5,7,0,0,522,521,1,0,0,0,522,523,1,0,0,0,523,
        524,1,0,0,0,524,525,5,6,0,0,525,527,1,0,0,0,526,444,1,0,0,0,526,
        464,1,0,0,0,526,495,1,0,0,0,527,19,1,0,0,0,528,529,5,29,0,0,529,
        530,5,32,0,0,530,536,5,5,0,0,531,532,5,39,0,0,532,533,5,8,0,0,533,
        534,3,46,23,0,534,535,5,7,0,0,535,537,1,0,0,0,536,531,1,0,0,0,537,
        538,1,0,0,0,538,536,1,0,0,0,538,539,1,0,0,0,539,540,1,0,0,0,540,
        541,5,9,0,0,541,542,5,8,0,0,542,544,3,46,23,0,543,545,5,7,0,0,544,
        543,1,0,0,0,544,545,1,0,0,0,545,546,1,0,0,0,546,547,5,6,0,0,547,
        611,1,0,0,0,548,549,5,29,0,0,549,550,3,52,26,0,550,569,5,5,0,0,551,
        552,5,39,0,0,552,553,5,8,0,0,553,554,3,46,23,0,554,555,5,7,0,0,555,
        557,1,0,0,0,556,551,1,0,0,0,557,558,1,0,0,0,558,556,1,0,0,0,558,
        559,1,0,0,0,559,570,1,0,0,0,560,561,5,37,0,0,561,562,5,8,0,0,562,
        563,3,46,23,0,563,564,5,7,0,0,564,566,1,0,0,0,565,560,1,0,0,0,566,
        567,1,0,0,0,567,565,1,0,0,0,567,568,1,0,0,0,568,570,1,0,0,0,569,
        556,1,0,0,0,569,565,1,0,0,0,570,571,1,0,0,0,571,572,5,9,0,0,572,
        573,5,8,0,0,573,575,3,46,23,0,574,576,5,7,0,0,575,574,1,0,0,0,575,
        576,1,0,0,0,576,577,1,0,0,0,577,578,5,6,0,0,578,611,1,0,0,0,579,
        580,5,29,0,0,580,581,5,33,0,0,581,600,5,5,0,0,582,583,5,39,0,0,583,
        584,5,8,0,0,584,585,3,46,23,0,585,586,5,7,0,0,586,588,1,0,0,0,587,
        582,1,0,0,0,588,589,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,
        601,1,0,0,0,591,592,5,37,0,0,592,593,5,8,0,0,593,594,3,46,23,0,594,
        595,5,7,0,0,595,597,1,0,0,0,596,591,1,0,0,0,597,598,1,0,0,0,598,
        596,1,0,0,0,598,599,1,0,0,0,599,601,1,0,0,0,600,587,1,0,0,0,600,
        596,1,0,0,0,601,602,1,0,0,0,602,603,5,9,0,0,603,604,5,8,0,0,604,
        606,3,46,23,0,605,607,5,7,0,0,606,605,1,0,0,0,606,607,1,0,0,0,607,
        608,1,0,0,0,608,609,5,6,0,0,609,611,1,0,0,0,610,528,1,0,0,0,610,
        548,1,0,0,0,610,579,1,0,0,0,611,21,1,0,0,0,612,613,3,40,20,0,613,
        614,5,13,0,0,614,615,3,34,17,0,615,637,1,0,0,0,616,617,3,40,20,0,
        617,618,5,14,0,0,618,619,3,34,17,0,619,637,1,0,0,0,620,621,3,40,
        20,0,621,622,5,15,0,0,622,623,3,34,17,0,623,637,1,0,0,0,624,625,
        3,40,20,0,625,626,5,16,0,0,626,627,3,34,17,0,627,637,1,0,0,0,628,
        629,3,40,20,0,629,630,5,17,0,0,630,631,3,34,17,0,631,637,1,0,0,0,
        632,633,3,40,20,0,633,634,5,18,0,0,634,635,3,34,17,0,635,637,1,0,
        0,0,636,612,1,0,0,0,636,616,1,0,0,0,636,620,1,0,0,0,636,624,1,0,
        0,0,636,628,1,0,0,0,636,632,1,0,0,0,637,23,1,0,0,0,638,639,3,40,
        20,0,639,640,5,13,0,0,640,641,5,37,0,0,641,647,1,0,0,0,642,643,3,
        40,20,0,643,644,5,14,0,0,644,645,5,37,0,0,645,647,1,0,0,0,646,638,
        1,0,0,0,646,642,1,0,0,0,647,25,1,0,0,0,648,649,3,40,20,0,649,650,
        5,19,0,0,650,651,3,34,17,0,651,27,1,0,0,0,652,653,3,52,26,0,653,
        654,5,13,0,0,654,655,7,0,0,0,655,661,1,0,0,0,656,657,3,52,26,0,657,
        658,5,14,0,0,658,659,7,0,0,0,659,661,1,0,0,0,660,652,1,0,0,0,660,
        656,1,0,0,0,661,683,1,0,0,0,662,663,3,52,26,0,663,664,5,13,0,0,664,
        665,3,52,26,0,665,671,1,0,0,0,666,667,3,52,26,0,667,668,5,14,0,0,
        668,669,3,52,26,0,669,671,1,0,0,0,670,662,1,0,0,0,670,666,1,0,0,
        0,671,683,1,0,0,0,672,673,3,52,26,0,673,674,5,13,0,0,674,675,3,8,
        4,0,675,681,1,0,0,0,676,677,3,52,26,0,677,678,5,14,0,0,678,679,3,
        8,4,0,679,681,1,0,0,0,680,672,1,0,0,0,680,676,1,0,0,0,681,683,1,
        0,0,0,682,660,1,0,0,0,682,670,1,0,0,0,682,680,1,0,0,0,683,29,1,0,
        0,0,684,685,5,35,0,0,685,686,5,1,0,0,686,687,5,32,0,0,687,718,5,
        2,0,0,688,689,5,35,0,0,689,690,5,1,0,0,690,695,3,38,19,0,691,692,
        5,7,0,0,692,694,3,38,19,0,693,691,1,0,0,0,694,697,1,0,0,0,695,693,
        1,0,0,0,695,696,1,0,0,0,696,698,1,0,0,0,697,695,1,0,0,0,698,699,
        5,2,0,0,699,718,1,0,0,0,700,701,5,35,0,0,701,702,5,1,0,0,702,707,
        3,34,17,0,703,704,5,7,0,0,704,706,3,34,17,0,705,703,1,0,0,0,706,
        709,1,0,0,0,707,705,1,0,0,0,707,708,1,0,0,0,708,710,1,0,0,0,709,
        707,1,0,0,0,710,711,5,2,0,0,711,718,1,0,0,0,712,715,5,35,0,0,713,
        714,5,1,0,0,714,716,5,2,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,
        718,1,0,0,0,717,684,1,0,0,0,717,688,1,0,0,0,717,700,1,0,0,0,717,
        712,1,0,0,0,718,31,1,0,0,0,719,720,3,36,18,0,720,721,5,41,0,0,721,
        722,3,34,17,0,722,33,1,0,0,0,723,726,3,36,18,0,724,726,3,32,16,0,
        725,723,1,0,0,0,725,724,1,0,0,0,726,35,1,0,0,0,727,737,5,39,0,0,
        728,737,5,40,0,0,729,737,5,38,0,0,730,737,5,33,0,0,731,737,3,52,
        26,0,732,737,3,40,20,0,733,737,3,18,9,0,734,737,3,30,15,0,735,737,
        3,12,6,0,736,727,1,0,0,0,736,728,1,0,0,0,736,729,1,0,0,0,736,730,
        1,0,0,0,736,731,1,0,0,0,736,732,1,0,0,0,736,733,1,0,0,0,736,734,
        1,0,0,0,736,735,1,0,0,0,737,37,1,0,0,0,738,741,5,36,0,0,739,741,
        3,52,26,0,740,738,1,0,0,0,740,739,1,0,0,0,741,39,1,0,0,0,742,746,
        5,33,0,0,743,744,5,11,0,0,744,745,7,1,0,0,745,747,5,12,0,0,746,743,
        1,0,0,0,746,747,1,0,0,0,747,750,1,0,0,0,748,750,3,52,26,0,749,742,
        1,0,0,0,749,748,1,0,0,0,750,41,1,0,0,0,751,754,5,11,0,0,752,755,
        5,35,0,0,753,755,3,44,22,0,754,752,1,0,0,0,754,753,1,0,0,0,755,763,
        1,0,0,0,756,759,5,7,0,0,757,760,5,35,0,0,758,760,3,44,22,0,759,757,
        1,0,0,0,759,758,1,0,0,0,760,762,1,0,0,0,761,756,1,0,0,0,762,765,
        1,0,0,0,763,761,1,0,0,0,763,764,1,0,0,0,764,766,1,0,0,0,765,763,
        1,0,0,0,766,767,5,12,0,0,767,43,1,0,0,0,768,769,5,32,0,0,769,770,
        5,5,0,0,770,771,7,2,0,0,771,778,5,6,0,0,772,773,5,1,0,0,773,774,
        5,32,0,0,774,775,5,7,0,0,775,776,7,2,0,0,776,778,5,2,0,0,777,768,
        1,0,0,0,777,772,1,0,0,0,778,786,1,0,0,0,779,781,5,23,0,0,780,779,
        1,0,0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,786,5,32,0,0,783,786,
        5,37,0,0,784,786,3,52,26,0,785,777,1,0,0,0,785,780,1,0,0,0,785,783,
        1,0,0,0,785,784,1,0,0,0,786,45,1,0,0,0,787,792,5,37,0,0,788,792,
        3,40,20,0,789,792,3,14,7,0,790,792,3,20,10,0,791,787,1,0,0,0,791,
        788,1,0,0,0,791,789,1,0,0,0,791,790,1,0,0,0,792,47,1,0,0,0,793,795,
        5,23,0,0,794,793,1,0,0,0,794,795,1,0,0,0,795,796,1,0,0,0,796,797,
        5,30,0,0,797,813,5,36,0,0,798,800,5,23,0,0,799,798,1,0,0,0,799,800,
        1,0,0,0,800,801,1,0,0,0,801,802,5,30,0,0,802,803,5,1,0,0,803,808,
        5,36,0,0,804,805,5,7,0,0,805,807,5,36,0,0,806,804,1,0,0,0,807,810,
        1,0,0,0,808,806,1,0,0,0,808,809,1,0,0,0,809,811,1,0,0,0,810,808,
        1,0,0,0,811,813,5,2,0,0,812,794,1,0,0,0,812,799,1,0,0,0,813,49,1,
        0,0,0,814,816,3,52,26,0,815,817,5,23,0,0,816,815,1,0,0,0,816,817,
        1,0,0,0,817,818,1,0,0,0,818,819,5,30,0,0,819,820,3,52,26,0,820,852,
        1,0,0,0,821,823,3,52,26,0,822,824,5,23,0,0,823,822,1,0,0,0,823,824,
        1,0,0,0,824,825,1,0,0,0,825,826,5,30,0,0,826,827,5,36,0,0,827,852,
        1,0,0,0,828,830,3,52,26,0,829,831,5,23,0,0,830,829,1,0,0,0,830,831,
        1,0,0,0,831,832,1,0,0,0,832,833,5,30,0,0,833,834,5,1,0,0,834,839,
        5,36,0,0,835,836,5,7,0,0,836,838,5,36,0,0,837,835,1,0,0,0,838,841,
        1,0,0,0,839,837,1,0,0,0,839,840,1,0,0,0,840,842,1,0,0,0,841,839,
        1,0,0,0,842,843,5,2,0,0,843,852,1,0,0,0,844,846,3,52,26,0,845,847,
        5,23,0,0,846,845,1,0,0,0,846,847,1,0,0,0,847,848,1,0,0,0,848,849,
        5,30,0,0,849,850,3,8,4,0,850,852,1,0,0,0,851,814,1,0,0,0,851,821,
        1,0,0,0,851,828,1,0,0,0,851,844,1,0,0,0,852,51,1,0,0,0,853,861,5,
        34,0,0,854,855,5,20,0,0,855,856,5,34,0,0,856,861,5,34,0,0,857,858,
        5,20,0,0,858,859,5,36,0,0,859,861,5,34,0,0,860,853,1,0,0,0,860,854,
        1,0,0,0,860,857,1,0,0,0,861,53,1,0,0,0,98,70,77,85,87,95,99,109,
        134,142,148,162,165,174,179,187,194,201,208,217,222,231,237,242,
        244,264,272,282,302,310,330,338,350,356,370,379,381,387,399,408,
        414,426,438,442,454,460,474,483,485,491,505,514,516,522,526,538,
        544,558,567,569,575,589,598,600,606,610,636,646,660,670,680,682,
        695,707,715,717,725,736,740,746,749,754,759,763,777,780,785,791,
        794,799,808,812,816,823,830,839,846,851,860
    ]

class RulesParser ( Parser ):

    grammarFileName = "Rules.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'('", "')'", "';'", "'='", "'{'", "'}'", 
                     "','", "'=>'", "'_'", "'|'", "'['", "']'", "'=='", 
                     "'!='", "'>='", "'<='", "'<'", "'>'", "'&'", "'@'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "AND", "OR", "NOT", "TRUE", "FALSE", 
                      "IF", "ELSE", "IN", "PER", "WITHIN", "SWAP", "ITEM", 
                      "SETTING", "REF", "FUNC", "PLACE", "LIT", "CONST", 
                      "INT", "FLOAT", "BINOP", "WS" ]

    RULE_boolExpr = 0
    RULE_actions = 1
    RULE_action = 2
    RULE_meta = 3
    RULE_invoke = 4
    RULE_cond = 5
    RULE_condNum = 6
    RULE_condStr = 7
    RULE_switchBool = 8
    RULE_switchNum = 9
    RULE_switchStr = 10
    RULE_cmp = 11
    RULE_cmpStr = 12
    RULE_flagMatch = 13
    RULE_refEq = 14
    RULE_funcNum = 15
    RULE_mathNum = 16
    RULE_num = 17
    RULE_baseNum = 18
    RULE_place = 19
    RULE_value = 20
    RULE_itemList = 21
    RULE_item = 22
    RULE_str = 23
    RULE_somewhere = 24
    RULE_refSomewhere = 25
    RULE_ref = 26

    ruleNames =  [ "boolExpr", "actions", "action", "meta", "invoke", "cond", 
                   "condNum", "condStr", "switchBool", "switchNum", "switchStr", 
                   "cmp", "cmpStr", "flagMatch", "refEq", "funcNum", "mathNum", 
                   "num", "baseNum", "place", "value", "itemList", "item", 
                   "str", "somewhere", "refSomewhere", "ref" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    AND=21
    OR=22
    NOT=23
    TRUE=24
    FALSE=25
    IF=26
    ELSE=27
    IN=28
    PER=29
    WITHIN=30
    SWAP=31
    ITEM=32
    SETTING=33
    REF=34
    FUNC=35
    PLACE=36
    LIT=37
    CONST=38
    INT=39
    FLOAT=40
    BINOP=41
    WS=42

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class BoolExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)


        def invoke(self):
            return self.getTypedRuleContext(RulesParser.InvokeContext,0)


        def meta(self):
            return self.getTypedRuleContext(RulesParser.MetaContext,0)


        def switchBool(self):
            return self.getTypedRuleContext(RulesParser.SwitchBoolContext,0)


        def cond(self):
            return self.getTypedRuleContext(RulesParser.CondContext,0)


        def refEq(self):
            return self.getTypedRuleContext(RulesParser.RefEqContext,0)


        def cmp(self):
            return self.getTypedRuleContext(RulesParser.CmpContext,0)


        def cmpStr(self):
            return self.getTypedRuleContext(RulesParser.CmpStrContext,0)


        def flagMatch(self):
            return self.getTypedRuleContext(RulesParser.FlagMatchContext,0)


        def itemList(self):
            return self.getTypedRuleContext(RulesParser.ItemListContext,0)


        def item(self):
            return self.getTypedRuleContext(RulesParser.ItemContext,0)


        def value(self):
            return self.getTypedRuleContext(RulesParser.ValueContext,0)


        def NOT(self):
            return self.getToken(RulesParser.NOT, 0)

        def somewhere(self):
            return self.getTypedRuleContext(RulesParser.SomewhereContext,0)


        def refSomewhere(self):
            return self.getTypedRuleContext(RulesParser.RefSomewhereContext,0)


        def TRUE(self):
            return self.getToken(RulesParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RulesParser.FALSE, 0)

        def AND(self):
            return self.getToken(RulesParser.AND, 0)

        def OR(self):
            return self.getToken(RulesParser.OR, 0)

        def getRuleIndex(self):
            return RulesParser.RULE_boolExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolExpr" ):
                return visitor.visitBoolExpr(self)
            else:
                return visitor.visitChildren(self)



    def boolExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RulesParser.BoolExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 0
        self.enterRecursionRule(localctx, 0, self.RULE_boolExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 77
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 55
                self.match(RulesParser.T__0)
                self.state = 56
                self.boolExpr(0)
                self.state = 57
                self.match(RulesParser.T__1)
                pass

            elif la_ == 2:
                self.state = 59
                self.invoke()
                pass

            elif la_ == 3:
                self.state = 60
                self.meta()
                pass

            elif la_ == 4:
                self.state = 61
                self.switchBool()
                pass

            elif la_ == 5:
                self.state = 62
                self.cond()
                pass

            elif la_ == 6:
                self.state = 63
                self.refEq()
                pass

            elif la_ == 7:
                self.state = 64
                self.cmp()
                pass

            elif la_ == 8:
                self.state = 65
                self.cmpStr()
                pass

            elif la_ == 9:
                self.state = 66
                self.flagMatch()
                pass

            elif la_ == 10:
                self.state = 67
                self.itemList()
                pass

            elif la_ == 11:
                self.state = 68
                self.item()
                pass

            elif la_ == 12:
                self.state = 70
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 69
                    self.match(RulesParser.NOT)


                self.state = 72
                self.value()
                pass

            elif la_ == 13:
                self.state = 73
                self.somewhere()
                pass

            elif la_ == 14:
                self.state = 74
                self.refSomewhere()
                pass

            elif la_ == 15:
                self.state = 75
                self.match(RulesParser.TRUE)
                pass

            elif la_ == 16:
                self.state = 76
                self.match(RulesParser.FALSE)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 87
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 85
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        localctx = RulesParser.BoolExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_boolExpr)
                        self.state = 79
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 80
                        self.match(RulesParser.AND)
                        self.state = 81
                        self.boolExpr(18)
                        pass

                    elif la_ == 2:
                        localctx = RulesParser.BoolExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_boolExpr)
                        self.state = 82
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 83
                        self.match(RulesParser.OR)
                        self.state = 84
                        self.boolExpr(17)
                        pass

             
                self.state = 89
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ActionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.ActionContext)
            else:
                return self.getTypedRuleContext(RulesParser.ActionContext,i)


        def getRuleIndex(self):
            return RulesParser.RULE_actions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActions" ):
                return visitor.visitActions(self)
            else:
                return visitor.visitChildren(self)




    def actions(self):

        localctx = RulesParser.ActionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_actions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 90
            self.action()
            self.state = 95
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 91
                    self.match(RulesParser.T__2)
                    self.state = 92
                    self.action() 
                self.state = 97
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 99
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 98
                self.match(RulesParser.T__2)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_action

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterContext(ActionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ActionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REF(self):
            return self.getToken(RulesParser.REF, 0)
        def BINOP(self):
            return self.getToken(RulesParser.BINOP, 0)
        def num(self):
            return self.getTypedRuleContext(RulesParser.NumContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter" ):
                return visitor.visitAlter(self)
            else:
                return visitor.visitChildren(self)


    class CondActionContext(ActionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ActionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.IF)
            else:
                return self.getToken(RulesParser.IF, i)
        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)

        def actions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.ActionsContext)
            else:
                return self.getTypedRuleContext(RulesParser.ActionsContext,i)

        def ELSE(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.ELSE)
            else:
                return self.getToken(RulesParser.ELSE, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondAction" ):
                return visitor.visitCondAction(self)
            else:
                return visitor.visitChildren(self)


    class SetContext(ActionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ActionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REF(self):
            return self.getToken(RulesParser.REF, 0)
        def TRUE(self):
            return self.getToken(RulesParser.TRUE, 0)
        def FALSE(self):
            return self.getToken(RulesParser.FALSE, 0)
        def PLACE(self):
            return self.getToken(RulesParser.PLACE, 0)
        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def str_(self):
            return self.getTypedRuleContext(RulesParser.StrContext,0)

        def num(self):
            return self.getTypedRuleContext(RulesParser.NumContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet" ):
                return visitor.visitSet(self)
            else:
                return visitor.visitChildren(self)


    class SwapContext(ActionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ActionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SWAP(self):
            return self.getToken(RulesParser.SWAP, 0)
        def REF(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.REF)
            else:
                return self.getToken(RulesParser.REF, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwap" ):
                return visitor.visitSwap(self)
            else:
                return visitor.visitChildren(self)


    class ActionHelperContext(ActionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ActionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def invoke(self):
            return self.getTypedRuleContext(RulesParser.InvokeContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActionHelper" ):
                return visitor.visitActionHelper(self)
            else:
                return visitor.visitChildren(self)



    def action(self):

        localctx = RulesParser.ActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_action)
        self._la = 0 # Token type
        try:
            self.state = 148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                localctx = RulesParser.SetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 101
                self.match(RulesParser.REF)
                self.state = 102
                self.match(RulesParser.T__3)
                self.state = 109
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 103
                    self.match(RulesParser.TRUE)
                    pass

                elif la_ == 2:
                    self.state = 104
                    self.match(RulesParser.FALSE)
                    pass

                elif la_ == 3:
                    self.state = 105
                    self.match(RulesParser.PLACE)
                    pass

                elif la_ == 4:
                    self.state = 106
                    self.ref()
                    pass

                elif la_ == 5:
                    self.state = 107
                    self.str_()
                    pass

                elif la_ == 6:
                    self.state = 108
                    self.num()
                    pass


                pass

            elif la_ == 2:
                localctx = RulesParser.AlterContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 111
                self.match(RulesParser.REF)
                self.state = 112
                self.match(RulesParser.BINOP)
                self.state = 113
                self.match(RulesParser.T__3)
                self.state = 114
                self.num()
                pass

            elif la_ == 3:
                localctx = RulesParser.ActionHelperContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 115
                self.invoke()
                pass

            elif la_ == 4:
                localctx = RulesParser.CondActionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 116
                self.match(RulesParser.IF)
                self.state = 117
                self.match(RulesParser.T__0)
                self.state = 118
                self.boolExpr(0)
                self.state = 119
                self.match(RulesParser.T__1)
                self.state = 120
                self.match(RulesParser.T__4)
                self.state = 121
                self.actions()
                self.state = 122
                self.match(RulesParser.T__5)
                self.state = 134
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 123
                        self.match(RulesParser.ELSE)
                        self.state = 124
                        self.match(RulesParser.IF)
                        self.state = 125
                        self.match(RulesParser.T__0)
                        self.state = 126
                        self.boolExpr(0)
                        self.state = 127
                        self.match(RulesParser.T__1)
                        self.state = 128
                        self.match(RulesParser.T__4)
                        self.state = 129
                        self.actions()
                        self.state = 130
                        self.match(RulesParser.T__5) 
                    self.state = 136
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 137
                    self.match(RulesParser.ELSE)
                    self.state = 138
                    self.match(RulesParser.T__4)
                    self.state = 139
                    self.actions()
                    self.state = 140
                    self.match(RulesParser.T__5)


                pass

            elif la_ == 5:
                localctx = RulesParser.SwapContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 144
                self.match(RulesParser.SWAP)
                self.state = 145
                self.match(RulesParser.REF)
                self.state = 146
                self.match(RulesParser.T__6)
                self.state = 147
                self.match(RulesParser.REF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(RulesParser.FUNC, 0)

        def LIT(self):
            return self.getToken(RulesParser.LIT, 0)

        def boolExpr(self):
            return self.getTypedRuleContext(RulesParser.BoolExprContext,0)


        def getRuleIndex(self):
            return RulesParser.RULE_meta

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeta" ):
                return visitor.visitMeta(self)
            else:
                return visitor.visitChildren(self)




    def meta(self):

        localctx = RulesParser.MetaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_meta)
        try:
            self.state = 162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 150
                self.match(RulesParser.FUNC)
                self.state = 151
                self.match(RulesParser.T__0)
                self.state = 152
                self.match(RulesParser.LIT)
                self.state = 153
                self.match(RulesParser.T__6)
                self.state = 154
                self.boolExpr(0)
                self.state = 155
                self.match(RulesParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 157
                self.match(RulesParser.FUNC)
                self.state = 158
                self.match(RulesParser.T__0)
                self.state = 159
                self.boolExpr(0)
                self.state = 160
                self.match(RulesParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvokeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(RulesParser.FUNC, 0)

        def ITEM(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.ITEM)
            else:
                return self.getToken(RulesParser.ITEM, i)

        def NOT(self):
            return self.getToken(RulesParser.NOT, 0)

        def value(self):
            return self.getTypedRuleContext(RulesParser.ValueContext,0)


        def LIT(self):
            return self.getToken(RulesParser.LIT, 0)

        def INT(self):
            return self.getToken(RulesParser.INT, 0)

        def FLOAT(self):
            return self.getToken(RulesParser.FLOAT, 0)

        def PLACE(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.PLACE)
            else:
                return self.getToken(RulesParser.PLACE, i)

        def ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.RefContext)
            else:
                return self.getTypedRuleContext(RulesParser.RefContext,i)


        def getRuleIndex(self):
            return RulesParser.RULE_invoke

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvoke" ):
                return visitor.visitInvoke(self)
            else:
                return visitor.visitChildren(self)




    def invoke(self):

        localctx = RulesParser.InvokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_invoke)
        self._la = 0 # Token type
        try:
            self.state = 244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 164
                    self.match(RulesParser.NOT)


                self.state = 167
                self.match(RulesParser.FUNC)
                self.state = 168
                self.match(RulesParser.T__0)
                self.state = 169
                self.match(RulesParser.ITEM)
                self.state = 174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 170
                    self.match(RulesParser.T__6)
                    self.state = 171
                    self.match(RulesParser.ITEM)
                    self.state = 176
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 177
                self.match(RulesParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 178
                    self.match(RulesParser.NOT)


                self.state = 181
                self.match(RulesParser.FUNC)
                self.state = 182
                self.match(RulesParser.T__0)
                self.state = 183
                self.value()
                self.state = 184
                self.match(RulesParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 186
                    self.match(RulesParser.NOT)


                self.state = 189
                self.match(RulesParser.FUNC)
                self.state = 190
                self.match(RulesParser.T__0)
                self.state = 191
                self.match(RulesParser.LIT)
                self.state = 192
                self.match(RulesParser.T__1)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 193
                    self.match(RulesParser.NOT)


                self.state = 196
                self.match(RulesParser.FUNC)
                self.state = 197
                self.match(RulesParser.T__0)
                self.state = 198
                self.match(RulesParser.INT)
                self.state = 199
                self.match(RulesParser.T__1)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 200
                    self.match(RulesParser.NOT)


                self.state = 203
                self.match(RulesParser.FUNC)
                self.state = 204
                self.match(RulesParser.T__0)
                self.state = 205
                self.match(RulesParser.FLOAT)
                self.state = 206
                self.match(RulesParser.T__1)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 207
                    self.match(RulesParser.NOT)


                self.state = 210
                self.match(RulesParser.FUNC)
                self.state = 211
                self.match(RulesParser.T__0)
                self.state = 212
                self.match(RulesParser.PLACE)
                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 213
                    self.match(RulesParser.T__6)
                    self.state = 214
                    self.match(RulesParser.PLACE)
                    self.state = 219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 220
                self.match(RulesParser.T__1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 221
                    self.match(RulesParser.NOT)


                self.state = 224
                self.match(RulesParser.FUNC)
                self.state = 225
                self.match(RulesParser.T__0)
                self.state = 226
                self.ref()
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 227
                    self.match(RulesParser.T__6)
                    self.state = 228
                    self.ref()
                    self.state = 233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 234
                self.match(RulesParser.T__1)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 236
                    self.match(RulesParser.NOT)


                self.state = 239
                self.match(RulesParser.FUNC)
                self.state = 242
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 240
                    self.match(RulesParser.T__0)
                    self.state = 241
                    self.match(RulesParser.T__1)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_cond

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IfThenElseContext(CondContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.CondContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.IF)
            else:
                return self.getToken(RulesParser.IF, i)
        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)

        def ELSE(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.ELSE)
            else:
                return self.getToken(RulesParser.ELSE, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfThenElse" ):
                return visitor.visitIfThenElse(self)
            else:
                return visitor.visitChildren(self)


    class PyTernaryContext(CondContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.CondContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)

        def IF(self):
            return self.getToken(RulesParser.IF, 0)
        def ELSE(self):
            return self.getToken(RulesParser.ELSE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyTernary" ):
                return visitor.visitPyTernary(self)
            else:
                return visitor.visitChildren(self)



    def cond(self):

        localctx = RulesParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_cond)
        try:
            self.state = 282
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                localctx = RulesParser.IfThenElseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 246
                self.match(RulesParser.IF)
                self.state = 247
                self.match(RulesParser.T__0)
                self.state = 248
                self.boolExpr(0)
                self.state = 249
                self.match(RulesParser.T__1)
                self.state = 250
                self.match(RulesParser.T__4)
                self.state = 251
                self.boolExpr(0)
                self.state = 252
                self.match(RulesParser.T__5)
                self.state = 264
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 253
                        self.match(RulesParser.ELSE)
                        self.state = 254
                        self.match(RulesParser.IF)
                        self.state = 255
                        self.match(RulesParser.T__0)
                        self.state = 256
                        self.boolExpr(0)
                        self.state = 257
                        self.match(RulesParser.T__1)
                        self.state = 258
                        self.match(RulesParser.T__4)
                        self.state = 259
                        self.boolExpr(0)
                        self.state = 260
                        self.match(RulesParser.T__5) 
                    self.state = 266
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

                self.state = 272
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 267
                    self.match(RulesParser.ELSE)
                    self.state = 268
                    self.match(RulesParser.T__4)
                    self.state = 269
                    self.boolExpr(0)
                    self.state = 270
                    self.match(RulesParser.T__5)


                pass
            elif token in [1]:
                localctx = RulesParser.PyTernaryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 274
                self.match(RulesParser.T__0)
                self.state = 275
                self.boolExpr(0)
                self.state = 276
                self.match(RulesParser.IF)
                self.state = 277
                self.boolExpr(0)
                self.state = 278
                self.match(RulesParser.ELSE)
                self.state = 279
                self.boolExpr(0)
                self.state = 280
                self.match(RulesParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.IF)
            else:
                return self.getToken(RulesParser.IF, i)

        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)


        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.NumContext)
            else:
                return self.getTypedRuleContext(RulesParser.NumContext,i)


        def ELSE(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.ELSE)
            else:
                return self.getToken(RulesParser.ELSE, i)

        def getRuleIndex(self):
            return RulesParser.RULE_condNum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondNum" ):
                return visitor.visitCondNum(self)
            else:
                return visitor.visitChildren(self)




    def condNum(self):

        localctx = RulesParser.CondNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_condNum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.match(RulesParser.IF)
            self.state = 285
            self.match(RulesParser.T__0)
            self.state = 286
            self.boolExpr(0)
            self.state = 287
            self.match(RulesParser.T__1)
            self.state = 288
            self.match(RulesParser.T__4)
            self.state = 289
            self.num()
            self.state = 290
            self.match(RulesParser.T__5)
            self.state = 302
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 291
                    self.match(RulesParser.ELSE)
                    self.state = 292
                    self.match(RulesParser.IF)
                    self.state = 293
                    self.match(RulesParser.T__0)
                    self.state = 294
                    self.boolExpr(0)
                    self.state = 295
                    self.match(RulesParser.T__1)
                    self.state = 296
                    self.match(RulesParser.T__4)
                    self.state = 297
                    self.num()
                    self.state = 298
                    self.match(RulesParser.T__5) 
                self.state = 304
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

            self.state = 310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 305
                self.match(RulesParser.ELSE)
                self.state = 306
                self.match(RulesParser.T__4)
                self.state = 307
                self.num()
                self.state = 308
                self.match(RulesParser.T__5)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.IF)
            else:
                return self.getToken(RulesParser.IF, i)

        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)


        def str_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.StrContext)
            else:
                return self.getTypedRuleContext(RulesParser.StrContext,i)


        def ELSE(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.ELSE)
            else:
                return self.getToken(RulesParser.ELSE, i)

        def getRuleIndex(self):
            return RulesParser.RULE_condStr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondStr" ):
                return visitor.visitCondStr(self)
            else:
                return visitor.visitChildren(self)




    def condStr(self):

        localctx = RulesParser.CondStrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_condStr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(RulesParser.IF)
            self.state = 313
            self.match(RulesParser.T__0)
            self.state = 314
            self.boolExpr(0)
            self.state = 315
            self.match(RulesParser.T__1)
            self.state = 316
            self.match(RulesParser.T__4)
            self.state = 317
            self.str_()
            self.state = 318
            self.match(RulesParser.T__5)
            self.state = 330
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 319
                    self.match(RulesParser.ELSE)
                    self.state = 320
                    self.match(RulesParser.IF)
                    self.state = 321
                    self.match(RulesParser.T__0)
                    self.state = 322
                    self.boolExpr(0)
                    self.state = 323
                    self.match(RulesParser.T__1)
                    self.state = 324
                    self.match(RulesParser.T__4)
                    self.state = 325
                    self.str_()
                    self.state = 326
                    self.match(RulesParser.T__5) 
                self.state = 332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 333
                self.match(RulesParser.ELSE)
                self.state = 334
                self.match(RulesParser.T__4)
                self.state = 335
                self.str_()
                self.state = 336
                self.match(RulesParser.T__5)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_switchBool

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PerItemBoolContext(SwitchBoolContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchBoolContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def ITEM(self):
            return self.getToken(RulesParser.ITEM, 0)
        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.INT)
            else:
                return self.getToken(RulesParser.INT, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerItemBool" ):
                return visitor.visitPerItemBool(self)
            else:
                return visitor.visitChildren(self)


    class RefStrInListContext(SwitchBoolContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchBoolContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def IN(self):
            return self.getToken(RulesParser.IN, 0)
        def LIT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.LIT)
            else:
                return self.getToken(RulesParser.LIT, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefStrInList" ):
                return visitor.visitRefStrInList(self)
            else:
                return visitor.visitChildren(self)


    class RefInListContext(SwitchBoolContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchBoolContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def IN(self):
            return self.getToken(RulesParser.IN, 0)
        def ITEM(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.ITEM)
            else:
                return self.getToken(RulesParser.ITEM, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefInList" ):
                return visitor.visitRefInList(self)
            else:
                return visitor.visitChildren(self)


    class PerSettingBoolContext(SwitchBoolContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchBoolContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def SETTING(self):
            return self.getToken(RulesParser.SETTING, 0)
        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.INT)
            else:
                return self.getToken(RulesParser.INT, i)
        def LIT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.LIT)
            else:
                return self.getToken(RulesParser.LIT, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerSettingBool" ):
                return visitor.visitPerSettingBool(self)
            else:
                return visitor.visitChildren(self)


    class MatchRefBoolContext(SwitchBoolContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchBoolContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)

        def ITEM(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.ITEM)
            else:
                return self.getToken(RulesParser.ITEM, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchRefBool" ):
                return visitor.visitMatchRefBool(self)
            else:
                return visitor.visitChildren(self)



    def switchBool(self):

        localctx = RulesParser.SwitchBoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_switchBool)
        self._la = 0 # Token type
        try:
            self.state = 442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                localctx = RulesParser.PerItemBoolContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 340
                self.match(RulesParser.PER)
                self.state = 341
                self.match(RulesParser.ITEM)
                self.state = 342
                self.match(RulesParser.T__4)
                self.state = 348 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 343
                    self.match(RulesParser.INT)
                    self.state = 344
                    self.match(RulesParser.T__7)
                    self.state = 345
                    self.boolExpr(0)
                    self.state = 346
                    self.match(RulesParser.T__6)
                    self.state = 350 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==39):
                        break

                self.state = 352
                self.match(RulesParser.T__8)
                self.state = 353
                self.match(RulesParser.T__7)
                self.state = 354
                self.boolExpr(0)
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 355
                    self.match(RulesParser.T__6)


                self.state = 358
                self.match(RulesParser.T__5)
                pass

            elif la_ == 2:
                localctx = RulesParser.PerSettingBoolContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 360
                self.match(RulesParser.PER)
                self.state = 361
                self.match(RulesParser.SETTING)
                self.state = 362
                self.match(RulesParser.T__4)
                self.state = 381
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [39]:
                    self.state = 368 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 363
                        self.match(RulesParser.INT)
                        self.state = 364
                        self.match(RulesParser.T__7)
                        self.state = 365
                        self.boolExpr(0)
                        self.state = 366
                        self.match(RulesParser.T__6)
                        self.state = 370 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==39):
                            break

                    pass
                elif token in [37]:
                    self.state = 377 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 372
                        self.match(RulesParser.LIT)
                        self.state = 373
                        self.match(RulesParser.T__7)
                        self.state = 374
                        self.boolExpr(0)
                        self.state = 375
                        self.match(RulesParser.T__6)
                        self.state = 379 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==37):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 383
                self.match(RulesParser.T__8)
                self.state = 384
                self.match(RulesParser.T__7)
                self.state = 385
                self.boolExpr(0)
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 386
                    self.match(RulesParser.T__6)


                self.state = 389
                self.match(RulesParser.T__5)
                pass

            elif la_ == 3:
                localctx = RulesParser.MatchRefBoolContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 391
                self.match(RulesParser.PER)
                self.state = 392
                self.ref()
                self.state = 393
                self.match(RulesParser.T__4)
                self.state = 406 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 394
                    self.match(RulesParser.ITEM)
                    self.state = 399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==10:
                        self.state = 395
                        self.match(RulesParser.T__9)
                        self.state = 396
                        self.match(RulesParser.ITEM)
                        self.state = 401
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 402
                    self.match(RulesParser.T__7)
                    self.state = 403
                    self.boolExpr(0)
                    self.state = 404
                    self.match(RulesParser.T__6)
                    self.state = 408 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==32):
                        break

                self.state = 410
                self.match(RulesParser.T__8)
                self.state = 411
                self.match(RulesParser.T__7)
                self.state = 412
                self.boolExpr(0)
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 413
                    self.match(RulesParser.T__6)


                self.state = 416
                self.match(RulesParser.T__5)
                pass

            elif la_ == 4:
                localctx = RulesParser.RefInListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 418
                self.ref()
                self.state = 419
                self.match(RulesParser.IN)
                self.state = 420
                self.match(RulesParser.T__10)
                self.state = 421
                self.match(RulesParser.ITEM)
                self.state = 424 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 422
                    self.match(RulesParser.T__6)
                    self.state = 423
                    self.match(RulesParser.ITEM)
                    self.state = 426 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==7):
                        break

                self.state = 428
                self.match(RulesParser.T__11)
                pass

            elif la_ == 5:
                localctx = RulesParser.RefStrInListContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 430
                self.ref()
                self.state = 431
                self.match(RulesParser.IN)
                self.state = 432
                self.match(RulesParser.T__10)
                self.state = 433
                self.match(RulesParser.LIT)
                self.state = 436 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 434
                    self.match(RulesParser.T__6)
                    self.state = 435
                    self.match(RulesParser.LIT)
                    self.state = 438 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==7):
                        break

                self.state = 440
                self.match(RulesParser.T__11)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_switchNum

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PerRefIntContext(SwitchNumContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchNumContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.NumContext)
            else:
                return self.getTypedRuleContext(RulesParser.NumContext,i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.INT)
            else:
                return self.getToken(RulesParser.INT, i)
        def LIT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.LIT)
            else:
                return self.getToken(RulesParser.LIT, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerRefInt" ):
                return visitor.visitPerRefInt(self)
            else:
                return visitor.visitChildren(self)


    class PerSettingIntContext(SwitchNumContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchNumContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def SETTING(self):
            return self.getToken(RulesParser.SETTING, 0)
        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.NumContext)
            else:
                return self.getTypedRuleContext(RulesParser.NumContext,i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.INT)
            else:
                return self.getToken(RulesParser.INT, i)
        def LIT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.LIT)
            else:
                return self.getToken(RulesParser.LIT, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerSettingInt" ):
                return visitor.visitPerSettingInt(self)
            else:
                return visitor.visitChildren(self)


    class PerItemIntContext(SwitchNumContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchNumContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def ITEM(self):
            return self.getToken(RulesParser.ITEM, 0)
        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.NumContext)
            else:
                return self.getTypedRuleContext(RulesParser.NumContext,i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.INT)
            else:
                return self.getToken(RulesParser.INT, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerItemInt" ):
                return visitor.visitPerItemInt(self)
            else:
                return visitor.visitChildren(self)



    def switchNum(self):

        localctx = RulesParser.SwitchNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_switchNum)
        self._la = 0 # Token type
        try:
            self.state = 526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                localctx = RulesParser.PerItemIntContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 444
                self.match(RulesParser.PER)
                self.state = 445
                self.match(RulesParser.ITEM)
                self.state = 446
                self.match(RulesParser.T__4)
                self.state = 452 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 447
                    self.match(RulesParser.INT)
                    self.state = 448
                    self.match(RulesParser.T__7)
                    self.state = 449
                    self.num()
                    self.state = 450
                    self.match(RulesParser.T__6)
                    self.state = 454 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==39):
                        break

                self.state = 456
                self.match(RulesParser.T__8)
                self.state = 457
                self.match(RulesParser.T__7)
                self.state = 458
                self.num()
                self.state = 460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 459
                    self.match(RulesParser.T__6)


                self.state = 462
                self.match(RulesParser.T__5)
                pass

            elif la_ == 2:
                localctx = RulesParser.PerRefIntContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 464
                self.match(RulesParser.PER)
                self.state = 465
                self.ref()
                self.state = 466
                self.match(RulesParser.T__4)
                self.state = 485
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [39]:
                    self.state = 472 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 467
                        self.match(RulesParser.INT)
                        self.state = 468
                        self.match(RulesParser.T__7)
                        self.state = 469
                        self.num()
                        self.state = 470
                        self.match(RulesParser.T__6)
                        self.state = 474 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==39):
                            break

                    pass
                elif token in [37]:
                    self.state = 481 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 476
                        self.match(RulesParser.LIT)
                        self.state = 477
                        self.match(RulesParser.T__7)
                        self.state = 478
                        self.num()
                        self.state = 479
                        self.match(RulesParser.T__6)
                        self.state = 483 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==37):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 487
                self.match(RulesParser.T__8)
                self.state = 488
                self.match(RulesParser.T__7)
                self.state = 489
                self.num()
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 490
                    self.match(RulesParser.T__6)


                self.state = 493
                self.match(RulesParser.T__5)
                pass

            elif la_ == 3:
                localctx = RulesParser.PerSettingIntContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 495
                self.match(RulesParser.PER)
                self.state = 496
                self.match(RulesParser.SETTING)
                self.state = 497
                self.match(RulesParser.T__4)
                self.state = 516
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [39]:
                    self.state = 503 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 498
                        self.match(RulesParser.INT)
                        self.state = 499
                        self.match(RulesParser.T__7)
                        self.state = 500
                        self.num()
                        self.state = 501
                        self.match(RulesParser.T__6)
                        self.state = 505 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==39):
                            break

                    pass
                elif token in [37]:
                    self.state = 512 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 507
                        self.match(RulesParser.LIT)
                        self.state = 508
                        self.match(RulesParser.T__7)
                        self.state = 509
                        self.num()
                        self.state = 510
                        self.match(RulesParser.T__6)
                        self.state = 514 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==37):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 518
                self.match(RulesParser.T__8)
                self.state = 519
                self.match(RulesParser.T__7)
                self.state = 520
                self.num()
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 521
                    self.match(RulesParser.T__6)


                self.state = 524
                self.match(RulesParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_switchStr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PerItemStrContext(SwitchStrContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchStrContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def ITEM(self):
            return self.getToken(RulesParser.ITEM, 0)
        def str_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.StrContext)
            else:
                return self.getTypedRuleContext(RulesParser.StrContext,i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.INT)
            else:
                return self.getToken(RulesParser.INT, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerItemStr" ):
                return visitor.visitPerItemStr(self)
            else:
                return visitor.visitChildren(self)


    class PerRefStrContext(SwitchStrContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchStrContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def str_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.StrContext)
            else:
                return self.getTypedRuleContext(RulesParser.StrContext,i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.INT)
            else:
                return self.getToken(RulesParser.INT, i)
        def LIT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.LIT)
            else:
                return self.getToken(RulesParser.LIT, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerRefStr" ):
                return visitor.visitPerRefStr(self)
            else:
                return visitor.visitChildren(self)


    class PerSettingStrContext(SwitchStrContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchStrContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def SETTING(self):
            return self.getToken(RulesParser.SETTING, 0)
        def str_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.StrContext)
            else:
                return self.getTypedRuleContext(RulesParser.StrContext,i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.INT)
            else:
                return self.getToken(RulesParser.INT, i)
        def LIT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.LIT)
            else:
                return self.getToken(RulesParser.LIT, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerSettingStr" ):
                return visitor.visitPerSettingStr(self)
            else:
                return visitor.visitChildren(self)



    def switchStr(self):

        localctx = RulesParser.SwitchStrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_switchStr)
        self._la = 0 # Token type
        try:
            self.state = 610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                localctx = RulesParser.PerItemStrContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 528
                self.match(RulesParser.PER)
                self.state = 529
                self.match(RulesParser.ITEM)
                self.state = 530
                self.match(RulesParser.T__4)
                self.state = 536 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 531
                    self.match(RulesParser.INT)
                    self.state = 532
                    self.match(RulesParser.T__7)
                    self.state = 533
                    self.str_()
                    self.state = 534
                    self.match(RulesParser.T__6)
                    self.state = 538 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==39):
                        break

                self.state = 540
                self.match(RulesParser.T__8)
                self.state = 541
                self.match(RulesParser.T__7)
                self.state = 542
                self.str_()
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 543
                    self.match(RulesParser.T__6)


                self.state = 546
                self.match(RulesParser.T__5)
                pass

            elif la_ == 2:
                localctx = RulesParser.PerRefStrContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 548
                self.match(RulesParser.PER)
                self.state = 549
                self.ref()
                self.state = 550
                self.match(RulesParser.T__4)
                self.state = 569
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [39]:
                    self.state = 556 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 551
                        self.match(RulesParser.INT)
                        self.state = 552
                        self.match(RulesParser.T__7)
                        self.state = 553
                        self.str_()
                        self.state = 554
                        self.match(RulesParser.T__6)
                        self.state = 558 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==39):
                            break

                    pass
                elif token in [37]:
                    self.state = 565 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 560
                        self.match(RulesParser.LIT)
                        self.state = 561
                        self.match(RulesParser.T__7)
                        self.state = 562
                        self.str_()
                        self.state = 563
                        self.match(RulesParser.T__6)
                        self.state = 567 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==37):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 571
                self.match(RulesParser.T__8)
                self.state = 572
                self.match(RulesParser.T__7)
                self.state = 573
                self.str_()
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 574
                    self.match(RulesParser.T__6)


                self.state = 577
                self.match(RulesParser.T__5)
                pass

            elif la_ == 3:
                localctx = RulesParser.PerSettingStrContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 579
                self.match(RulesParser.PER)
                self.state = 580
                self.match(RulesParser.SETTING)
                self.state = 581
                self.match(RulesParser.T__4)
                self.state = 600
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [39]:
                    self.state = 587 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 582
                        self.match(RulesParser.INT)
                        self.state = 583
                        self.match(RulesParser.T__7)
                        self.state = 584
                        self.str_()
                        self.state = 585
                        self.match(RulesParser.T__6)
                        self.state = 589 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==39):
                            break

                    pass
                elif token in [37]:
                    self.state = 596 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 591
                        self.match(RulesParser.LIT)
                        self.state = 592
                        self.match(RulesParser.T__7)
                        self.state = 593
                        self.str_()
                        self.state = 594
                        self.match(RulesParser.T__6)
                        self.state = 598 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==37):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 602
                self.match(RulesParser.T__8)
                self.state = 603
                self.match(RulesParser.T__7)
                self.state = 604
                self.str_()
                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 605
                    self.match(RulesParser.T__6)


                self.state = 608
                self.match(RulesParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(RulesParser.ValueContext,0)


        def num(self):
            return self.getTypedRuleContext(RulesParser.NumContext,0)


        def getRuleIndex(self):
            return RulesParser.RULE_cmp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmp" ):
                return visitor.visitCmp(self)
            else:
                return visitor.visitChildren(self)




    def cmp(self):

        localctx = RulesParser.CmpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_cmp)
        try:
            self.state = 636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 612
                self.value()
                self.state = 613
                self.match(RulesParser.T__12)
                self.state = 614
                self.num()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 616
                self.value()
                self.state = 617
                self.match(RulesParser.T__13)
                self.state = 618
                self.num()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 620
                self.value()
                self.state = 621
                self.match(RulesParser.T__14)
                self.state = 622
                self.num()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 624
                self.value()
                self.state = 625
                self.match(RulesParser.T__15)
                self.state = 626
                self.num()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 628
                self.value()
                self.state = 629
                self.match(RulesParser.T__16)
                self.state = 630
                self.num()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 632
                self.value()
                self.state = 633
                self.match(RulesParser.T__17)
                self.state = 634
                self.num()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmpStrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(RulesParser.ValueContext,0)


        def LIT(self):
            return self.getToken(RulesParser.LIT, 0)

        def getRuleIndex(self):
            return RulesParser.RULE_cmpStr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmpStr" ):
                return visitor.visitCmpStr(self)
            else:
                return visitor.visitChildren(self)




    def cmpStr(self):

        localctx = RulesParser.CmpStrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_cmpStr)
        try:
            self.state = 646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 638
                self.value()
                self.state = 639
                self.match(RulesParser.T__12)
                self.state = 640
                self.match(RulesParser.LIT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 642
                self.value()
                self.state = 643
                self.match(RulesParser.T__13)
                self.state = 644
                self.match(RulesParser.LIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlagMatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(RulesParser.ValueContext,0)


        def num(self):
            return self.getTypedRuleContext(RulesParser.NumContext,0)


        def getRuleIndex(self):
            return RulesParser.RULE_flagMatch

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlagMatch" ):
                return visitor.visitFlagMatch(self)
            else:
                return visitor.visitChildren(self)




    def flagMatch(self):

        localctx = RulesParser.FlagMatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_flagMatch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.value()
            self.state = 649
            self.match(RulesParser.T__18)
            self.state = 650
            self.num()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefEqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_refEq

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RefEqInvokeContext(RefEqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.RefEqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def invoke(self):
            return self.getTypedRuleContext(RulesParser.InvokeContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefEqInvoke" ):
                return visitor.visitRefEqInvoke(self)
            else:
                return visitor.visitChildren(self)


    class RefEqRefContext(RefEqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.RefEqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.RefContext)
            else:
                return self.getTypedRuleContext(RulesParser.RefContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefEqRef" ):
                return visitor.visitRefEqRef(self)
            else:
                return visitor.visitChildren(self)


    class RefEqSimpleContext(RefEqContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.RefEqContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def ITEM(self):
            return self.getToken(RulesParser.ITEM, 0)
        def SETTING(self):
            return self.getToken(RulesParser.SETTING, 0)
        def PLACE(self):
            return self.getToken(RulesParser.PLACE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefEqSimple" ):
                return visitor.visitRefEqSimple(self)
            else:
                return visitor.visitChildren(self)



    def refEq(self):

        localctx = RulesParser.RefEqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_refEq)
        self._la = 0 # Token type
        try:
            self.state = 682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                localctx = RulesParser.RefEqSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 660
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 652
                    self.ref()
                    self.state = 653
                    self.match(RulesParser.T__12)
                    self.state = 654
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 81604378624) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass

                elif la_ == 2:
                    self.state = 656
                    self.ref()
                    self.state = 657
                    self.match(RulesParser.T__13)
                    self.state = 658
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 81604378624) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                localctx = RulesParser.RefEqRefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 670
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 662
                    self.ref()
                    self.state = 663
                    self.match(RulesParser.T__12)
                    self.state = 664
                    self.ref()
                    pass

                elif la_ == 2:
                    self.state = 666
                    self.ref()
                    self.state = 667
                    self.match(RulesParser.T__13)
                    self.state = 668
                    self.ref()
                    pass


                pass

            elif la_ == 3:
                localctx = RulesParser.RefEqInvokeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 672
                    self.ref()
                    self.state = 673
                    self.match(RulesParser.T__12)
                    self.state = 674
                    self.invoke()
                    pass

                elif la_ == 2:
                    self.state = 676
                    self.ref()
                    self.state = 677
                    self.match(RulesParser.T__13)
                    self.state = 678
                    self.invoke()
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(RulesParser.FUNC, 0)

        def ITEM(self):
            return self.getToken(RulesParser.ITEM, 0)

        def place(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.PlaceContext)
            else:
                return self.getTypedRuleContext(RulesParser.PlaceContext,i)


        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.NumContext)
            else:
                return self.getTypedRuleContext(RulesParser.NumContext,i)


        def getRuleIndex(self):
            return RulesParser.RULE_funcNum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncNum" ):
                return visitor.visitFuncNum(self)
            else:
                return visitor.visitChildren(self)




    def funcNum(self):

        localctx = RulesParser.FuncNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_funcNum)
        self._la = 0 # Token type
        try:
            self.state = 717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 684
                self.match(RulesParser.FUNC)
                self.state = 685
                self.match(RulesParser.T__0)
                self.state = 686
                self.match(RulesParser.ITEM)
                self.state = 687
                self.match(RulesParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 688
                self.match(RulesParser.FUNC)
                self.state = 689
                self.match(RulesParser.T__0)
                self.state = 690
                self.place()
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 691
                    self.match(RulesParser.T__6)
                    self.state = 692
                    self.place()
                    self.state = 697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 698
                self.match(RulesParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 700
                self.match(RulesParser.FUNC)
                self.state = 701
                self.match(RulesParser.T__0)
                self.state = 702
                self.num()
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 703
                    self.match(RulesParser.T__6)
                    self.state = 704
                    self.num()
                    self.state = 709
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 710
                self.match(RulesParser.T__1)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 712
                self.match(RulesParser.FUNC)
                self.state = 715
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 713
                    self.match(RulesParser.T__0)
                    self.state = 714
                    self.match(RulesParser.T__1)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseNum(self):
            return self.getTypedRuleContext(RulesParser.BaseNumContext,0)


        def BINOP(self):
            return self.getToken(RulesParser.BINOP, 0)

        def num(self):
            return self.getTypedRuleContext(RulesParser.NumContext,0)


        def getRuleIndex(self):
            return RulesParser.RULE_mathNum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathNum" ):
                return visitor.visitMathNum(self)
            else:
                return visitor.visitChildren(self)




    def mathNum(self):

        localctx = RulesParser.MathNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_mathNum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.baseNum()
            self.state = 720
            self.match(RulesParser.BINOP)
            self.state = 721
            self.num()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseNum(self):
            return self.getTypedRuleContext(RulesParser.BaseNumContext,0)


        def mathNum(self):
            return self.getTypedRuleContext(RulesParser.MathNumContext,0)


        def getRuleIndex(self):
            return RulesParser.RULE_num

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum" ):
                return visitor.visitNum(self)
            else:
                return visitor.visitChildren(self)




    def num(self):

        localctx = RulesParser.NumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_num)
        try:
            self.state = 725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 723
                self.baseNum()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 724
                self.mathNum()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(RulesParser.INT, 0)

        def FLOAT(self):
            return self.getToken(RulesParser.FLOAT, 0)

        def CONST(self):
            return self.getToken(RulesParser.CONST, 0)

        def SETTING(self):
            return self.getToken(RulesParser.SETTING, 0)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)


        def value(self):
            return self.getTypedRuleContext(RulesParser.ValueContext,0)


        def switchNum(self):
            return self.getTypedRuleContext(RulesParser.SwitchNumContext,0)


        def funcNum(self):
            return self.getTypedRuleContext(RulesParser.FuncNumContext,0)


        def condNum(self):
            return self.getTypedRuleContext(RulesParser.CondNumContext,0)


        def getRuleIndex(self):
            return RulesParser.RULE_baseNum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBaseNum" ):
                return visitor.visitBaseNum(self)
            else:
                return visitor.visitChildren(self)




    def baseNum(self):

        localctx = RulesParser.BaseNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_baseNum)
        try:
            self.state = 736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 727
                self.match(RulesParser.INT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 728
                self.match(RulesParser.FLOAT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 729
                self.match(RulesParser.CONST)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 730
                self.match(RulesParser.SETTING)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 731
                self.ref()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 732
                self.value()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 733
                self.switchNum()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 734
                self.funcNum()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 735
                self.condNum()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLACE(self):
            return self.getToken(RulesParser.PLACE, 0)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)


        def getRuleIndex(self):
            return RulesParser.RULE_place

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlace" ):
                return visitor.visitPlace(self)
            else:
                return visitor.visitChildren(self)




    def place(self):

        localctx = RulesParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_place)
        try:
            self.state = 740
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36]:
                self.enterOuterAlt(localctx, 1)
                self.state = 738
                self.match(RulesParser.PLACE)
                pass
            elif token in [20, 34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 739
                self.ref()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_value

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ArgumentContext(ValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)


    class SettingContext(ValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SETTING(self):
            return self.getToken(RulesParser.SETTING, 0)
        def LIT(self):
            return self.getToken(RulesParser.LIT, 0)
        def ITEM(self):
            return self.getToken(RulesParser.ITEM, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetting" ):
                return visitor.visitSetting(self)
            else:
                return visitor.visitChildren(self)



    def value(self):

        localctx = RulesParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_value)
        self._la = 0 # Token type
        try:
            self.state = 749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [33]:
                localctx = RulesParser.SettingContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 742
                self.match(RulesParser.SETTING)
                self.state = 746
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 743
                    self.match(RulesParser.T__10)
                    self.state = 744
                    _la = self._input.LA(1)
                    if not(_la==32 or _la==37):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 745
                    self.match(RulesParser.T__11)


                pass
            elif token in [20, 34]:
                localctx = RulesParser.ArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 748
                self.ref()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.FUNC)
            else:
                return self.getToken(RulesParser.FUNC, i)

        def item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.ItemContext)
            else:
                return self.getTypedRuleContext(RulesParser.ItemContext,i)


        def getRuleIndex(self):
            return RulesParser.RULE_itemList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItemList" ):
                return visitor.visitItemList(self)
            else:
                return visitor.visitChildren(self)




    def itemList(self):

        localctx = RulesParser.ItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_itemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(RulesParser.T__10)
            self.state = 754
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.state = 752
                self.match(RulesParser.FUNC)
                pass
            elif token in [1, 20, 23, 32, 34, 37]:
                self.state = 753
                self.item()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 756
                self.match(RulesParser.T__6)
                self.state = 759
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [35]:
                    self.state = 757
                    self.match(RulesParser.FUNC)
                    pass
                elif token in [1, 20, 23, 32, 34, 37]:
                    self.state = 758
                    self.item()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 766
            self.match(RulesParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_item

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class OneLitItemContext(ItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LIT(self):
            return self.getToken(RulesParser.LIT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneLitItem" ):
                return visitor.visitOneLitItem(self)
            else:
                return visitor.visitChildren(self)


    class OneArgumentContext(ItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneArgument" ):
                return visitor.visitOneArgument(self)
            else:
                return visitor.visitChildren(self)


    class ItemCountContext(ItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ITEM(self):
            return self.getToken(RulesParser.ITEM, 0)
        def INT(self):
            return self.getToken(RulesParser.INT, 0)
        def SETTING(self):
            return self.getToken(RulesParser.SETTING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItemCount" ):
                return visitor.visitItemCount(self)
            else:
                return visitor.visitChildren(self)


    class OneItemContext(ItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ITEM(self):
            return self.getToken(RulesParser.ITEM, 0)
        def NOT(self):
            return self.getToken(RulesParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneItem" ):
                return visitor.visitOneItem(self)
            else:
                return visitor.visitChildren(self)



    def item(self):

        localctx = RulesParser.ItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_item)
        self._la = 0 # Token type
        try:
            self.state = 785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                localctx = RulesParser.ItemCountContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 777
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [32]:
                    self.state = 768
                    self.match(RulesParser.ITEM)
                    self.state = 769
                    self.match(RulesParser.T__4)
                    self.state = 770
                    _la = self._input.LA(1)
                    if not(_la==33 or _la==39):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 771
                    self.match(RulesParser.T__5)
                    pass
                elif token in [1]:
                    self.state = 772
                    self.match(RulesParser.T__0)
                    self.state = 773
                    self.match(RulesParser.ITEM)
                    self.state = 774
                    self.match(RulesParser.T__6)
                    self.state = 775
                    _la = self._input.LA(1)
                    if not(_la==33 or _la==39):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 776
                    self.match(RulesParser.T__1)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = RulesParser.OneItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 779
                    self.match(RulesParser.NOT)


                self.state = 782
                self.match(RulesParser.ITEM)
                pass

            elif la_ == 3:
                localctx = RulesParser.OneLitItemContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 783
                self.match(RulesParser.LIT)
                pass

            elif la_ == 4:
                localctx = RulesParser.OneArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 784
                self.ref()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIT(self):
            return self.getToken(RulesParser.LIT, 0)

        def value(self):
            return self.getTypedRuleContext(RulesParser.ValueContext,0)


        def condStr(self):
            return self.getTypedRuleContext(RulesParser.CondStrContext,0)


        def switchStr(self):
            return self.getTypedRuleContext(RulesParser.SwitchStrContext,0)


        def getRuleIndex(self):
            return RulesParser.RULE_str

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStr" ):
                return visitor.visitStr(self)
            else:
                return visitor.visitChildren(self)




    def str_(self):

        localctx = RulesParser.StrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_str)
        try:
            self.state = 791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 787
                self.match(RulesParser.LIT)
                pass
            elif token in [20, 33, 34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 788
                self.value()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 3)
                self.state = 789
                self.condStr()
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 4)
                self.state = 790
                self.switchStr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SomewhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHIN(self):
            return self.getToken(RulesParser.WITHIN, 0)

        def PLACE(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.PLACE)
            else:
                return self.getToken(RulesParser.PLACE, i)

        def NOT(self):
            return self.getToken(RulesParser.NOT, 0)

        def getRuleIndex(self):
            return RulesParser.RULE_somewhere

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSomewhere" ):
                return visitor.visitSomewhere(self)
            else:
                return visitor.visitChildren(self)




    def somewhere(self):

        localctx = RulesParser.SomewhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_somewhere)
        self._la = 0 # Token type
        try:
            self.state = 812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 793
                    self.match(RulesParser.NOT)


                self.state = 796
                self.match(RulesParser.WITHIN)
                self.state = 797
                self.match(RulesParser.PLACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 798
                    self.match(RulesParser.NOT)


                self.state = 801
                self.match(RulesParser.WITHIN)
                self.state = 802
                self.match(RulesParser.T__0)
                self.state = 803
                self.match(RulesParser.PLACE)
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 804
                    self.match(RulesParser.T__6)
                    self.state = 805
                    self.match(RulesParser.PLACE)
                    self.state = 810
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 811
                self.match(RulesParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefSomewhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_refSomewhere

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RefInPlaceNameContext(RefSomewhereContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.RefSomewhereContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def WITHIN(self):
            return self.getToken(RulesParser.WITHIN, 0)
        def PLACE(self):
            return self.getToken(RulesParser.PLACE, 0)
        def NOT(self):
            return self.getToken(RulesParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefInPlaceName" ):
                return visitor.visitRefInPlaceName(self)
            else:
                return visitor.visitChildren(self)


    class RefInFuncContext(RefSomewhereContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.RefSomewhereContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def WITHIN(self):
            return self.getToken(RulesParser.WITHIN, 0)
        def invoke(self):
            return self.getTypedRuleContext(RulesParser.InvokeContext,0)

        def NOT(self):
            return self.getToken(RulesParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefInFunc" ):
                return visitor.visitRefInFunc(self)
            else:
                return visitor.visitChildren(self)


    class RefInPlaceListContext(RefSomewhereContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.RefSomewhereContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def WITHIN(self):
            return self.getToken(RulesParser.WITHIN, 0)
        def PLACE(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.PLACE)
            else:
                return self.getToken(RulesParser.PLACE, i)
        def NOT(self):
            return self.getToken(RulesParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefInPlaceList" ):
                return visitor.visitRefInPlaceList(self)
            else:
                return visitor.visitChildren(self)


    class RefInPlaceRefContext(RefSomewhereContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.RefSomewhereContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.RefContext)
            else:
                return self.getTypedRuleContext(RulesParser.RefContext,i)

        def WITHIN(self):
            return self.getToken(RulesParser.WITHIN, 0)
        def NOT(self):
            return self.getToken(RulesParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefInPlaceRef" ):
                return visitor.visitRefInPlaceRef(self)
            else:
                return visitor.visitChildren(self)



    def refSomewhere(self):

        localctx = RulesParser.RefSomewhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_refSomewhere)
        self._la = 0 # Token type
        try:
            self.state = 851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                localctx = RulesParser.RefInPlaceRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.ref()
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 815
                    self.match(RulesParser.NOT)


                self.state = 818
                self.match(RulesParser.WITHIN)
                self.state = 819
                self.ref()
                pass

            elif la_ == 2:
                localctx = RulesParser.RefInPlaceNameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 821
                self.ref()
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 822
                    self.match(RulesParser.NOT)


                self.state = 825
                self.match(RulesParser.WITHIN)
                self.state = 826
                self.match(RulesParser.PLACE)
                pass

            elif la_ == 3:
                localctx = RulesParser.RefInPlaceListContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 828
                self.ref()
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 829
                    self.match(RulesParser.NOT)


                self.state = 832
                self.match(RulesParser.WITHIN)
                self.state = 833
                self.match(RulesParser.T__0)
                self.state = 834
                self.match(RulesParser.PLACE)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 835
                    self.match(RulesParser.T__6)
                    self.state = 836
                    self.match(RulesParser.PLACE)
                    self.state = 841
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 842
                self.match(RulesParser.T__1)
                pass

            elif la_ == 4:
                localctx = RulesParser.RefInFuncContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 844
                self.ref()
                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 845
                    self.match(RulesParser.NOT)


                self.state = 848
                self.match(RulesParser.WITHIN)
                self.state = 849
                self.invoke()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.REF)
            else:
                return self.getToken(RulesParser.REF, i)

        def PLACE(self):
            return self.getToken(RulesParser.PLACE, 0)

        def getRuleIndex(self):
            return RulesParser.RULE_ref

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRef" ):
                return visitor.visitRef(self)
            else:
                return visitor.visitChildren(self)




    def ref(self):

        localctx = RulesParser.RefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_ref)
        try:
            self.state = 860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 853
                self.match(RulesParser.REF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                self.match(RulesParser.T__19)
                self.state = 855
                self.match(RulesParser.REF)
                self.state = 856
                self.match(RulesParser.REF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 857
                self.match(RulesParser.T__19)
                self.state = 858
                self.match(RulesParser.PLACE)
                self.state = 859
                self.match(RulesParser.REF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[0] = self.boolExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def boolExpr_sempred(self, localctx:BoolExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 16)
         





# Generated from Rules.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,42,800,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,69,8,0,
        1,0,1,0,1,0,1,0,1,0,3,0,76,8,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,84,8,
        0,10,0,12,0,87,9,0,1,1,1,1,1,1,5,1,92,8,1,10,1,12,1,95,9,1,1,1,3,
        1,98,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,108,8,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,5,2,131,8,2,10,2,12,2,134,9,2,1,2,1,2,1,2,1,2,1,2,3,2,141,
        8,2,1,2,1,2,1,2,1,2,3,2,147,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,3,3,161,8,3,1,4,3,4,164,8,4,1,4,1,4,1,4,1,4,1,4,
        5,4,171,8,4,10,4,12,4,174,9,4,1,4,1,4,3,4,178,8,4,1,4,1,4,1,4,1,
        4,1,4,1,4,3,4,186,8,4,1,4,1,4,1,4,1,4,1,4,3,4,193,8,4,1,4,1,4,1,
        4,1,4,1,4,3,4,200,8,4,1,4,1,4,1,4,1,4,1,4,3,4,207,8,4,1,4,1,4,1,
        4,1,4,1,4,5,4,214,8,4,10,4,12,4,217,9,4,1,4,1,4,3,4,221,8,4,1,4,
        1,4,1,4,1,4,1,4,5,4,228,8,4,10,4,12,4,231,9,4,1,4,1,4,1,4,3,4,236,
        8,4,1,4,1,4,1,4,3,4,241,8,4,3,4,243,8,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,261,8,5,10,5,12,5,264,
        9,5,1,5,1,5,1,5,1,5,1,5,3,5,271,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,3,5,281,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,5,6,299,8,6,10,6,12,6,302,9,6,1,6,1,6,1,6,1,6,1,
        6,3,6,309,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,5,7,327,8,7,10,7,12,7,330,9,7,1,7,1,7,1,7,1,7,1,7,
        3,7,337,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,4,8,347,8,8,11,8,12,
        8,348,1,8,1,8,1,8,1,8,3,8,355,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,4,8,367,8,8,11,8,12,8,368,1,8,1,8,1,8,1,8,1,8,4,8,376,
        8,8,11,8,12,8,377,3,8,380,8,8,1,8,1,8,1,8,1,8,3,8,386,8,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,396,8,8,10,8,12,8,399,9,8,1,8,1,8,
        1,8,1,8,4,8,405,8,8,11,8,12,8,406,1,8,1,8,1,8,1,8,3,8,413,8,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,4,8,423,8,8,11,8,12,8,424,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,4,8,435,8,8,11,8,12,8,436,1,8,1,8,3,8,441,
        8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,4,9,451,8,9,11,9,12,9,452,1,
        9,1,9,1,9,1,9,3,9,459,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,4,9,471,8,9,11,9,12,9,472,1,9,1,9,1,9,1,9,1,9,4,9,480,8,9,11,9,
        12,9,481,3,9,484,8,9,1,9,1,9,1,9,1,9,3,9,490,8,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,4,9,502,8,9,11,9,12,9,503,1,9,1,9,1,9,1,
        9,1,9,4,9,511,8,9,11,9,12,9,512,3,9,515,8,9,1,9,1,9,1,9,1,9,3,9,
        521,8,9,1,9,1,9,3,9,525,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,4,10,535,8,10,11,10,12,10,536,1,10,1,10,1,10,1,10,3,10,543,8,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,10,555,8,
        10,11,10,12,10,556,1,10,1,10,1,10,1,10,1,10,4,10,564,8,10,11,10,
        12,10,565,3,10,568,8,10,1,10,1,10,1,10,1,10,3,10,574,8,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,10,586,8,10,11,10,12,
        10,587,1,10,1,10,1,10,1,10,1,10,4,10,595,8,10,11,10,12,10,596,3,
        10,599,8,10,1,10,1,10,1,10,1,10,3,10,605,8,10,1,10,1,10,3,10,609,
        8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,
        635,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,645,8,12,1,
        13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,5,15,664,8,15,10,15,12,15,667,9,15,1,15,1,15,1,
        15,1,15,1,15,3,15,674,8,15,3,15,676,8,15,1,16,1,16,1,16,1,16,1,17,
        1,17,3,17,684,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,
        694,8,18,1,19,1,19,1,19,1,19,3,19,700,8,19,1,19,3,19,703,8,19,1,
        20,1,20,1,20,3,20,708,8,20,1,20,1,20,1,20,3,20,713,8,20,5,20,715,
        8,20,10,20,12,20,718,9,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,3,21,731,8,21,1,21,3,21,734,8,21,1,21,1,21,1,21,3,
        21,739,8,21,1,22,1,22,1,22,1,22,3,22,745,8,22,1,23,3,23,748,8,23,
        1,23,1,23,1,23,3,23,753,8,23,1,23,1,23,1,23,1,23,1,23,5,23,760,8,
        23,10,23,12,23,763,9,23,1,23,3,23,766,8,23,1,24,1,24,3,24,770,8,
        24,1,24,1,24,1,24,1,24,1,24,3,24,777,8,24,1,24,1,24,1,24,1,24,1,
        24,3,24,784,8,24,1,24,1,24,1,24,3,24,789,8,24,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,3,25,798,8,25,1,25,0,1,0,26,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,0,3,1,0,32,33,
        2,0,32,32,37,37,2,0,33,33,39,39,912,0,75,1,0,0,0,2,88,1,0,0,0,4,
        146,1,0,0,0,6,160,1,0,0,0,8,242,1,0,0,0,10,280,1,0,0,0,12,282,1,
        0,0,0,14,310,1,0,0,0,16,440,1,0,0,0,18,524,1,0,0,0,20,608,1,0,0,
        0,22,634,1,0,0,0,24,644,1,0,0,0,26,646,1,0,0,0,28,650,1,0,0,0,30,
        675,1,0,0,0,32,677,1,0,0,0,34,683,1,0,0,0,36,693,1,0,0,0,38,702,
        1,0,0,0,40,704,1,0,0,0,42,738,1,0,0,0,44,744,1,0,0,0,46,765,1,0,
        0,0,48,788,1,0,0,0,50,797,1,0,0,0,52,53,6,0,-1,0,53,54,5,1,0,0,54,
        55,3,0,0,0,55,56,5,2,0,0,56,76,1,0,0,0,57,76,3,8,4,0,58,76,3,6,3,
        0,59,76,3,16,8,0,60,76,3,10,5,0,61,76,3,22,11,0,62,76,3,24,12,0,
        63,76,3,26,13,0,64,76,3,28,14,0,65,76,3,40,20,0,66,76,3,42,21,0,
        67,69,5,23,0,0,68,67,1,0,0,0,68,69,1,0,0,0,69,70,1,0,0,0,70,76,3,
        38,19,0,71,76,3,46,23,0,72,76,3,48,24,0,73,76,5,24,0,0,74,76,5,25,
        0,0,75,52,1,0,0,0,75,57,1,0,0,0,75,58,1,0,0,0,75,59,1,0,0,0,75,60,
        1,0,0,0,75,61,1,0,0,0,75,62,1,0,0,0,75,63,1,0,0,0,75,64,1,0,0,0,
        75,65,1,0,0,0,75,66,1,0,0,0,75,68,1,0,0,0,75,71,1,0,0,0,75,72,1,
        0,0,0,75,73,1,0,0,0,75,74,1,0,0,0,76,85,1,0,0,0,77,78,10,17,0,0,
        78,79,5,21,0,0,79,84,3,0,0,18,80,81,10,16,0,0,81,82,5,22,0,0,82,
        84,3,0,0,17,83,77,1,0,0,0,83,80,1,0,0,0,84,87,1,0,0,0,85,83,1,0,
        0,0,85,86,1,0,0,0,86,1,1,0,0,0,87,85,1,0,0,0,88,93,3,4,2,0,89,90,
        5,3,0,0,90,92,3,4,2,0,91,89,1,0,0,0,92,95,1,0,0,0,93,91,1,0,0,0,
        93,94,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,96,98,5,3,0,0,97,96,1,
        0,0,0,97,98,1,0,0,0,98,3,1,0,0,0,99,100,5,34,0,0,100,107,5,4,0,0,
        101,108,5,24,0,0,102,108,5,25,0,0,103,108,5,36,0,0,104,108,3,50,
        25,0,105,108,3,44,22,0,106,108,3,34,17,0,107,101,1,0,0,0,107,102,
        1,0,0,0,107,103,1,0,0,0,107,104,1,0,0,0,107,105,1,0,0,0,107,106,
        1,0,0,0,108,147,1,0,0,0,109,110,5,34,0,0,110,111,5,41,0,0,111,112,
        5,4,0,0,112,147,3,34,17,0,113,147,3,8,4,0,114,115,5,26,0,0,115,116,
        5,1,0,0,116,117,3,0,0,0,117,118,5,2,0,0,118,119,5,5,0,0,119,120,
        3,2,1,0,120,132,5,6,0,0,121,122,5,27,0,0,122,123,5,26,0,0,123,124,
        5,1,0,0,124,125,3,0,0,0,125,126,5,2,0,0,126,127,5,5,0,0,127,128,
        3,2,1,0,128,129,5,6,0,0,129,131,1,0,0,0,130,121,1,0,0,0,131,134,
        1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,140,1,0,0,0,134,132,
        1,0,0,0,135,136,5,27,0,0,136,137,5,5,0,0,137,138,3,2,1,0,138,139,
        5,6,0,0,139,141,1,0,0,0,140,135,1,0,0,0,140,141,1,0,0,0,141,147,
        1,0,0,0,142,143,5,31,0,0,143,144,5,34,0,0,144,145,5,7,0,0,145,147,
        5,34,0,0,146,99,1,0,0,0,146,109,1,0,0,0,146,113,1,0,0,0,146,114,
        1,0,0,0,146,142,1,0,0,0,147,5,1,0,0,0,148,149,5,35,0,0,149,150,5,
        1,0,0,150,151,5,37,0,0,151,152,5,7,0,0,152,153,3,0,0,0,153,154,5,
        2,0,0,154,161,1,0,0,0,155,156,5,35,0,0,156,157,5,1,0,0,157,158,3,
        0,0,0,158,159,5,2,0,0,159,161,1,0,0,0,160,148,1,0,0,0,160,155,1,
        0,0,0,161,7,1,0,0,0,162,164,5,23,0,0,163,162,1,0,0,0,163,164,1,0,
        0,0,164,165,1,0,0,0,165,166,5,35,0,0,166,167,5,1,0,0,167,172,5,32,
        0,0,168,169,5,7,0,0,169,171,5,32,0,0,170,168,1,0,0,0,171,174,1,0,
        0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,175,1,0,0,0,174,172,1,0,
        0,0,175,243,5,2,0,0,176,178,5,23,0,0,177,176,1,0,0,0,177,178,1,0,
        0,0,178,179,1,0,0,0,179,180,5,35,0,0,180,181,5,1,0,0,181,182,3,38,
        19,0,182,183,5,2,0,0,183,243,1,0,0,0,184,186,5,23,0,0,185,184,1,
        0,0,0,185,186,1,0,0,0,186,187,1,0,0,0,187,188,5,35,0,0,188,189,5,
        1,0,0,189,190,5,37,0,0,190,243,5,2,0,0,191,193,5,23,0,0,192,191,
        1,0,0,0,192,193,1,0,0,0,193,194,1,0,0,0,194,195,5,35,0,0,195,196,
        5,1,0,0,196,197,5,39,0,0,197,243,5,2,0,0,198,200,5,23,0,0,199,198,
        1,0,0,0,199,200,1,0,0,0,200,201,1,0,0,0,201,202,5,35,0,0,202,203,
        5,1,0,0,203,204,5,40,0,0,204,243,5,2,0,0,205,207,5,23,0,0,206,205,
        1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,209,5,35,0,0,209,210,
        5,1,0,0,210,215,5,36,0,0,211,212,5,7,0,0,212,214,5,36,0,0,213,211,
        1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,218,
        1,0,0,0,217,215,1,0,0,0,218,243,5,2,0,0,219,221,5,23,0,0,220,219,
        1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,223,5,35,0,0,223,224,
        5,1,0,0,224,229,3,50,25,0,225,226,5,7,0,0,226,228,3,50,25,0,227,
        225,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,
        232,1,0,0,0,231,229,1,0,0,0,232,233,5,2,0,0,233,243,1,0,0,0,234,
        236,5,23,0,0,235,234,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,
        240,5,35,0,0,238,239,5,1,0,0,239,241,5,2,0,0,240,238,1,0,0,0,240,
        241,1,0,0,0,241,243,1,0,0,0,242,163,1,0,0,0,242,177,1,0,0,0,242,
        185,1,0,0,0,242,192,1,0,0,0,242,199,1,0,0,0,242,206,1,0,0,0,242,
        220,1,0,0,0,242,235,1,0,0,0,243,9,1,0,0,0,244,245,5,26,0,0,245,246,
        5,1,0,0,246,247,3,0,0,0,247,248,5,2,0,0,248,249,5,5,0,0,249,250,
        3,0,0,0,250,262,5,6,0,0,251,252,5,27,0,0,252,253,5,26,0,0,253,254,
        5,1,0,0,254,255,3,0,0,0,255,256,5,2,0,0,256,257,5,5,0,0,257,258,
        3,0,0,0,258,259,5,6,0,0,259,261,1,0,0,0,260,251,1,0,0,0,261,264,
        1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,270,1,0,0,0,264,262,
        1,0,0,0,265,266,5,27,0,0,266,267,5,5,0,0,267,268,3,0,0,0,268,269,
        5,6,0,0,269,271,1,0,0,0,270,265,1,0,0,0,270,271,1,0,0,0,271,281,
        1,0,0,0,272,273,5,1,0,0,273,274,3,0,0,0,274,275,5,26,0,0,275,276,
        3,0,0,0,276,277,5,27,0,0,277,278,3,0,0,0,278,279,5,2,0,0,279,281,
        1,0,0,0,280,244,1,0,0,0,280,272,1,0,0,0,281,11,1,0,0,0,282,283,5,
        26,0,0,283,284,5,1,0,0,284,285,3,0,0,0,285,286,5,2,0,0,286,287,5,
        5,0,0,287,288,3,34,17,0,288,300,5,6,0,0,289,290,5,27,0,0,290,291,
        5,26,0,0,291,292,5,1,0,0,292,293,3,0,0,0,293,294,5,2,0,0,294,295,
        5,5,0,0,295,296,3,34,17,0,296,297,5,6,0,0,297,299,1,0,0,0,298,289,
        1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,308,
        1,0,0,0,302,300,1,0,0,0,303,304,5,27,0,0,304,305,5,5,0,0,305,306,
        3,34,17,0,306,307,5,6,0,0,307,309,1,0,0,0,308,303,1,0,0,0,308,309,
        1,0,0,0,309,13,1,0,0,0,310,311,5,26,0,0,311,312,5,1,0,0,312,313,
        3,0,0,0,313,314,5,2,0,0,314,315,5,5,0,0,315,316,3,44,22,0,316,328,
        5,6,0,0,317,318,5,27,0,0,318,319,5,26,0,0,319,320,5,1,0,0,320,321,
        3,0,0,0,321,322,5,2,0,0,322,323,5,5,0,0,323,324,3,44,22,0,324,325,
        5,6,0,0,325,327,1,0,0,0,326,317,1,0,0,0,327,330,1,0,0,0,328,326,
        1,0,0,0,328,329,1,0,0,0,329,336,1,0,0,0,330,328,1,0,0,0,331,332,
        5,27,0,0,332,333,5,5,0,0,333,334,3,44,22,0,334,335,5,6,0,0,335,337,
        1,0,0,0,336,331,1,0,0,0,336,337,1,0,0,0,337,15,1,0,0,0,338,339,5,
        29,0,0,339,340,5,32,0,0,340,346,5,5,0,0,341,342,5,39,0,0,342,343,
        5,8,0,0,343,344,3,0,0,0,344,345,5,7,0,0,345,347,1,0,0,0,346,341,
        1,0,0,0,347,348,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,350,
        1,0,0,0,350,351,5,9,0,0,351,352,5,8,0,0,352,354,3,0,0,0,353,355,
        5,7,0,0,354,353,1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,357,
        5,6,0,0,357,441,1,0,0,0,358,359,5,29,0,0,359,360,5,33,0,0,360,379,
        5,5,0,0,361,362,5,39,0,0,362,363,5,8,0,0,363,364,3,0,0,0,364,365,
        5,7,0,0,365,367,1,0,0,0,366,361,1,0,0,0,367,368,1,0,0,0,368,366,
        1,0,0,0,368,369,1,0,0,0,369,380,1,0,0,0,370,371,5,37,0,0,371,372,
        5,8,0,0,372,373,3,0,0,0,373,374,5,7,0,0,374,376,1,0,0,0,375,370,
        1,0,0,0,376,377,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,380,
        1,0,0,0,379,366,1,0,0,0,379,375,1,0,0,0,380,381,1,0,0,0,381,382,
        5,9,0,0,382,383,5,8,0,0,383,385,3,0,0,0,384,386,5,7,0,0,385,384,
        1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,388,5,6,0,0,388,441,
        1,0,0,0,389,390,5,29,0,0,390,391,3,50,25,0,391,404,5,5,0,0,392,397,
        5,32,0,0,393,394,5,10,0,0,394,396,5,32,0,0,395,393,1,0,0,0,396,399,
        1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,400,1,0,0,0,399,397,
        1,0,0,0,400,401,5,8,0,0,401,402,3,0,0,0,402,403,5,7,0,0,403,405,
        1,0,0,0,404,392,1,0,0,0,405,406,1,0,0,0,406,404,1,0,0,0,406,407,
        1,0,0,0,407,408,1,0,0,0,408,409,5,9,0,0,409,410,5,8,0,0,410,412,
        3,0,0,0,411,413,5,7,0,0,412,411,1,0,0,0,412,413,1,0,0,0,413,414,
        1,0,0,0,414,415,5,6,0,0,415,441,1,0,0,0,416,417,3,50,25,0,417,418,
        5,28,0,0,418,419,5,11,0,0,419,422,5,32,0,0,420,421,5,7,0,0,421,423,
        5,32,0,0,422,420,1,0,0,0,423,424,1,0,0,0,424,422,1,0,0,0,424,425,
        1,0,0,0,425,426,1,0,0,0,426,427,5,12,0,0,427,441,1,0,0,0,428,429,
        3,50,25,0,429,430,5,28,0,0,430,431,5,11,0,0,431,434,5,37,0,0,432,
        433,5,7,0,0,433,435,5,37,0,0,434,432,1,0,0,0,435,436,1,0,0,0,436,
        434,1,0,0,0,436,437,1,0,0,0,437,438,1,0,0,0,438,439,5,12,0,0,439,
        441,1,0,0,0,440,338,1,0,0,0,440,358,1,0,0,0,440,389,1,0,0,0,440,
        416,1,0,0,0,440,428,1,0,0,0,441,17,1,0,0,0,442,443,5,29,0,0,443,
        444,5,32,0,0,444,450,5,5,0,0,445,446,5,39,0,0,446,447,5,8,0,0,447,
        448,3,34,17,0,448,449,5,7,0,0,449,451,1,0,0,0,450,445,1,0,0,0,451,
        452,1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,
        455,5,9,0,0,455,456,5,8,0,0,456,458,3,34,17,0,457,459,5,7,0,0,458,
        457,1,0,0,0,458,459,1,0,0,0,459,460,1,0,0,0,460,461,5,6,0,0,461,
        525,1,0,0,0,462,463,5,29,0,0,463,464,3,50,25,0,464,483,5,5,0,0,465,
        466,5,39,0,0,466,467,5,8,0,0,467,468,3,34,17,0,468,469,5,7,0,0,469,
        471,1,0,0,0,470,465,1,0,0,0,471,472,1,0,0,0,472,470,1,0,0,0,472,
        473,1,0,0,0,473,484,1,0,0,0,474,475,5,37,0,0,475,476,5,8,0,0,476,
        477,3,34,17,0,477,478,5,7,0,0,478,480,1,0,0,0,479,474,1,0,0,0,480,
        481,1,0,0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,484,1,0,0,0,483,
        470,1,0,0,0,483,479,1,0,0,0,484,485,1,0,0,0,485,486,5,9,0,0,486,
        487,5,8,0,0,487,489,3,34,17,0,488,490,5,7,0,0,489,488,1,0,0,0,489,
        490,1,0,0,0,490,491,1,0,0,0,491,492,5,6,0,0,492,525,1,0,0,0,493,
        494,5,29,0,0,494,495,5,33,0,0,495,514,5,5,0,0,496,497,5,39,0,0,497,
        498,5,8,0,0,498,499,3,34,17,0,499,500,5,7,0,0,500,502,1,0,0,0,501,
        496,1,0,0,0,502,503,1,0,0,0,503,501,1,0,0,0,503,504,1,0,0,0,504,
        515,1,0,0,0,505,506,5,37,0,0,506,507,5,8,0,0,507,508,3,34,17,0,508,
        509,5,7,0,0,509,511,1,0,0,0,510,505,1,0,0,0,511,512,1,0,0,0,512,
        510,1,0,0,0,512,513,1,0,0,0,513,515,1,0,0,0,514,501,1,0,0,0,514,
        510,1,0,0,0,515,516,1,0,0,0,516,517,5,9,0,0,517,518,5,8,0,0,518,
        520,3,34,17,0,519,521,5,7,0,0,520,519,1,0,0,0,520,521,1,0,0,0,521,
        522,1,0,0,0,522,523,5,6,0,0,523,525,1,0,0,0,524,442,1,0,0,0,524,
        462,1,0,0,0,524,493,1,0,0,0,525,19,1,0,0,0,526,527,5,29,0,0,527,
        528,5,32,0,0,528,534,5,5,0,0,529,530,5,39,0,0,530,531,5,8,0,0,531,
        532,3,44,22,0,532,533,5,7,0,0,533,535,1,0,0,0,534,529,1,0,0,0,535,
        536,1,0,0,0,536,534,1,0,0,0,536,537,1,0,0,0,537,538,1,0,0,0,538,
        539,5,9,0,0,539,540,5,8,0,0,540,542,3,44,22,0,541,543,5,7,0,0,542,
        541,1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,545,5,6,0,0,545,
        609,1,0,0,0,546,547,5,29,0,0,547,548,3,50,25,0,548,567,5,5,0,0,549,
        550,5,39,0,0,550,551,5,8,0,0,551,552,3,44,22,0,552,553,5,7,0,0,553,
        555,1,0,0,0,554,549,1,0,0,0,555,556,1,0,0,0,556,554,1,0,0,0,556,
        557,1,0,0,0,557,568,1,0,0,0,558,559,5,37,0,0,559,560,5,8,0,0,560,
        561,3,44,22,0,561,562,5,7,0,0,562,564,1,0,0,0,563,558,1,0,0,0,564,
        565,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,568,1,0,0,0,567,
        554,1,0,0,0,567,563,1,0,0,0,568,569,1,0,0,0,569,570,5,9,0,0,570,
        571,5,8,0,0,571,573,3,44,22,0,572,574,5,7,0,0,573,572,1,0,0,0,573,
        574,1,0,0,0,574,575,1,0,0,0,575,576,5,6,0,0,576,609,1,0,0,0,577,
        578,5,29,0,0,578,579,5,33,0,0,579,598,5,5,0,0,580,581,5,39,0,0,581,
        582,5,8,0,0,582,583,3,44,22,0,583,584,5,7,0,0,584,586,1,0,0,0,585,
        580,1,0,0,0,586,587,1,0,0,0,587,585,1,0,0,0,587,588,1,0,0,0,588,
        599,1,0,0,0,589,590,5,37,0,0,590,591,5,8,0,0,591,592,3,44,22,0,592,
        593,5,7,0,0,593,595,1,0,0,0,594,589,1,0,0,0,595,596,1,0,0,0,596,
        594,1,0,0,0,596,597,1,0,0,0,597,599,1,0,0,0,598,585,1,0,0,0,598,
        594,1,0,0,0,599,600,1,0,0,0,600,601,5,9,0,0,601,602,5,8,0,0,602,
        604,3,44,22,0,603,605,5,7,0,0,604,603,1,0,0,0,604,605,1,0,0,0,605,
        606,1,0,0,0,606,607,5,6,0,0,607,609,1,0,0,0,608,526,1,0,0,0,608,
        546,1,0,0,0,608,577,1,0,0,0,609,21,1,0,0,0,610,611,3,38,19,0,611,
        612,5,13,0,0,612,613,3,34,17,0,613,635,1,0,0,0,614,615,3,38,19,0,
        615,616,5,14,0,0,616,617,3,34,17,0,617,635,1,0,0,0,618,619,3,38,
        19,0,619,620,5,15,0,0,620,621,3,34,17,0,621,635,1,0,0,0,622,623,
        3,38,19,0,623,624,5,16,0,0,624,625,3,34,17,0,625,635,1,0,0,0,626,
        627,3,38,19,0,627,628,5,17,0,0,628,629,3,34,17,0,629,635,1,0,0,0,
        630,631,3,38,19,0,631,632,5,18,0,0,632,633,3,34,17,0,633,635,1,0,
        0,0,634,610,1,0,0,0,634,614,1,0,0,0,634,618,1,0,0,0,634,622,1,0,
        0,0,634,626,1,0,0,0,634,630,1,0,0,0,635,23,1,0,0,0,636,637,3,38,
        19,0,637,638,5,13,0,0,638,639,5,37,0,0,639,645,1,0,0,0,640,641,3,
        38,19,0,641,642,5,14,0,0,642,643,5,37,0,0,643,645,1,0,0,0,644,636,
        1,0,0,0,644,640,1,0,0,0,645,25,1,0,0,0,646,647,3,38,19,0,647,648,
        5,19,0,0,648,649,3,34,17,0,649,27,1,0,0,0,650,651,3,50,25,0,651,
        652,5,13,0,0,652,653,7,0,0,0,653,29,1,0,0,0,654,655,5,35,0,0,655,
        656,5,1,0,0,656,657,5,32,0,0,657,676,5,2,0,0,658,659,5,35,0,0,659,
        660,5,1,0,0,660,665,3,34,17,0,661,662,5,7,0,0,662,664,3,34,17,0,
        663,661,1,0,0,0,664,667,1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,
        666,668,1,0,0,0,667,665,1,0,0,0,668,669,5,2,0,0,669,676,1,0,0,0,
        670,673,5,35,0,0,671,672,5,1,0,0,672,674,5,2,0,0,673,671,1,0,0,0,
        673,674,1,0,0,0,674,676,1,0,0,0,675,654,1,0,0,0,675,658,1,0,0,0,
        675,670,1,0,0,0,676,31,1,0,0,0,677,678,3,36,18,0,678,679,5,41,0,
        0,679,680,3,34,17,0,680,33,1,0,0,0,681,684,3,36,18,0,682,684,3,32,
        16,0,683,681,1,0,0,0,683,682,1,0,0,0,684,35,1,0,0,0,685,694,5,39,
        0,0,686,694,5,38,0,0,687,694,5,33,0,0,688,694,3,50,25,0,689,694,
        3,38,19,0,690,694,3,18,9,0,691,694,3,30,15,0,692,694,3,12,6,0,693,
        685,1,0,0,0,693,686,1,0,0,0,693,687,1,0,0,0,693,688,1,0,0,0,693,
        689,1,0,0,0,693,690,1,0,0,0,693,691,1,0,0,0,693,692,1,0,0,0,694,
        37,1,0,0,0,695,699,5,33,0,0,696,697,5,11,0,0,697,698,7,1,0,0,698,
        700,5,12,0,0,699,696,1,0,0,0,699,700,1,0,0,0,700,703,1,0,0,0,701,
        703,3,50,25,0,702,695,1,0,0,0,702,701,1,0,0,0,703,39,1,0,0,0,704,
        707,5,11,0,0,705,708,5,35,0,0,706,708,3,42,21,0,707,705,1,0,0,0,
        707,706,1,0,0,0,708,716,1,0,0,0,709,712,5,7,0,0,710,713,5,35,0,0,
        711,713,3,42,21,0,712,710,1,0,0,0,712,711,1,0,0,0,713,715,1,0,0,
        0,714,709,1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,716,717,1,0,0,
        0,717,719,1,0,0,0,718,716,1,0,0,0,719,720,5,12,0,0,720,41,1,0,0,
        0,721,722,5,32,0,0,722,723,5,5,0,0,723,724,7,2,0,0,724,731,5,6,0,
        0,725,726,5,1,0,0,726,727,5,32,0,0,727,728,5,7,0,0,728,729,7,2,0,
        0,729,731,5,2,0,0,730,721,1,0,0,0,730,725,1,0,0,0,731,739,1,0,0,
        0,732,734,5,23,0,0,733,732,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,
        0,735,739,5,32,0,0,736,739,5,37,0,0,737,739,3,50,25,0,738,730,1,
        0,0,0,738,733,1,0,0,0,738,736,1,0,0,0,738,737,1,0,0,0,739,43,1,0,
        0,0,740,745,5,37,0,0,741,745,3,38,19,0,742,745,3,14,7,0,743,745,
        3,20,10,0,744,740,1,0,0,0,744,741,1,0,0,0,744,742,1,0,0,0,744,743,
        1,0,0,0,745,45,1,0,0,0,746,748,5,23,0,0,747,746,1,0,0,0,747,748,
        1,0,0,0,748,749,1,0,0,0,749,750,5,30,0,0,750,766,5,36,0,0,751,753,
        5,23,0,0,752,751,1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,755,
        5,30,0,0,755,756,5,1,0,0,756,761,5,36,0,0,757,758,5,7,0,0,758,760,
        5,36,0,0,759,757,1,0,0,0,760,763,1,0,0,0,761,759,1,0,0,0,761,762,
        1,0,0,0,762,764,1,0,0,0,763,761,1,0,0,0,764,766,5,2,0,0,765,747,
        1,0,0,0,765,752,1,0,0,0,766,47,1,0,0,0,767,769,3,50,25,0,768,770,
        5,23,0,0,769,768,1,0,0,0,769,770,1,0,0,0,770,771,1,0,0,0,771,772,
        5,30,0,0,772,773,3,50,25,0,773,789,1,0,0,0,774,776,3,50,25,0,775,
        777,5,23,0,0,776,775,1,0,0,0,776,777,1,0,0,0,777,778,1,0,0,0,778,
        779,5,30,0,0,779,780,5,36,0,0,780,789,1,0,0,0,781,783,3,50,25,0,
        782,784,5,23,0,0,783,782,1,0,0,0,783,784,1,0,0,0,784,785,1,0,0,0,
        785,786,5,30,0,0,786,787,3,8,4,0,787,789,1,0,0,0,788,767,1,0,0,0,
        788,774,1,0,0,0,788,781,1,0,0,0,789,49,1,0,0,0,790,798,5,34,0,0,
        791,792,5,20,0,0,792,793,5,34,0,0,793,798,5,34,0,0,794,795,5,20,
        0,0,795,796,5,36,0,0,796,798,5,34,0,0,797,790,1,0,0,0,797,791,1,
        0,0,0,797,794,1,0,0,0,798,51,1,0,0,0,90,68,75,83,85,93,97,107,132,
        140,146,160,163,172,177,185,192,199,206,215,220,229,235,240,242,
        262,270,280,300,308,328,336,348,354,368,377,379,385,397,406,412,
        424,436,440,452,458,472,481,483,489,503,512,514,520,524,536,542,
        556,565,567,573,587,596,598,604,608,634,644,665,673,675,683,693,
        699,702,707,712,716,730,733,738,744,747,752,761,765,769,776,783,
        788,797
    ]

class RulesParser ( Parser ):

    grammarFileName = "Rules.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'('", "')'", "';'", "'='", "'{'", "'}'", 
                     "','", "'=>'", "'_'", "'|'", "'['", "']'", "'=='", 
                     "'!='", "'>='", "'<='", "'<'", "'>'", "'&'", "'@'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "AND", "OR", "NOT", "TRUE", "FALSE", 
                      "IF", "ELSE", "IN", "PER", "WITHIN", "SWAP", "ITEM", 
                      "SETTING", "REF", "FUNC", "PLACE", "LIT", "CONST", 
                      "INT", "FLOAT", "BINOP", "WS" ]

    RULE_boolExpr = 0
    RULE_actions = 1
    RULE_action = 2
    RULE_meta = 3
    RULE_invoke = 4
    RULE_cond = 5
    RULE_condNum = 6
    RULE_condStr = 7
    RULE_switchBool = 8
    RULE_switchNum = 9
    RULE_switchStr = 10
    RULE_cmp = 11
    RULE_cmpStr = 12
    RULE_flagMatch = 13
    RULE_refEq = 14
    RULE_funcNum = 15
    RULE_mathNum = 16
    RULE_num = 17
    RULE_baseNum = 18
    RULE_value = 19
    RULE_itemList = 20
    RULE_item = 21
    RULE_str = 22
    RULE_somewhere = 23
    RULE_refSomewhere = 24
    RULE_ref = 25

    ruleNames =  [ "boolExpr", "actions", "action", "meta", "invoke", "cond", 
                   "condNum", "condStr", "switchBool", "switchNum", "switchStr", 
                   "cmp", "cmpStr", "flagMatch", "refEq", "funcNum", "mathNum", 
                   "num", "baseNum", "value", "itemList", "item", "str", 
                   "somewhere", "refSomewhere", "ref" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    AND=21
    OR=22
    NOT=23
    TRUE=24
    FALSE=25
    IF=26
    ELSE=27
    IN=28
    PER=29
    WITHIN=30
    SWAP=31
    ITEM=32
    SETTING=33
    REF=34
    FUNC=35
    PLACE=36
    LIT=37
    CONST=38
    INT=39
    FLOAT=40
    BINOP=41
    WS=42

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class BoolExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)


        def invoke(self):
            return self.getTypedRuleContext(RulesParser.InvokeContext,0)


        def meta(self):
            return self.getTypedRuleContext(RulesParser.MetaContext,0)


        def switchBool(self):
            return self.getTypedRuleContext(RulesParser.SwitchBoolContext,0)


        def cond(self):
            return self.getTypedRuleContext(RulesParser.CondContext,0)


        def cmp(self):
            return self.getTypedRuleContext(RulesParser.CmpContext,0)


        def cmpStr(self):
            return self.getTypedRuleContext(RulesParser.CmpStrContext,0)


        def flagMatch(self):
            return self.getTypedRuleContext(RulesParser.FlagMatchContext,0)


        def refEq(self):
            return self.getTypedRuleContext(RulesParser.RefEqContext,0)


        def itemList(self):
            return self.getTypedRuleContext(RulesParser.ItemListContext,0)


        def item(self):
            return self.getTypedRuleContext(RulesParser.ItemContext,0)


        def value(self):
            return self.getTypedRuleContext(RulesParser.ValueContext,0)


        def NOT(self):
            return self.getToken(RulesParser.NOT, 0)

        def somewhere(self):
            return self.getTypedRuleContext(RulesParser.SomewhereContext,0)


        def refSomewhere(self):
            return self.getTypedRuleContext(RulesParser.RefSomewhereContext,0)


        def TRUE(self):
            return self.getToken(RulesParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RulesParser.FALSE, 0)

        def AND(self):
            return self.getToken(RulesParser.AND, 0)

        def OR(self):
            return self.getToken(RulesParser.OR, 0)

        def getRuleIndex(self):
            return RulesParser.RULE_boolExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolExpr" ):
                listener.enterBoolExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolExpr" ):
                listener.exitBoolExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolExpr" ):
                return visitor.visitBoolExpr(self)
            else:
                return visitor.visitChildren(self)



    def boolExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RulesParser.BoolExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 0
        self.enterRecursionRule(localctx, 0, self.RULE_boolExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 75
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 53
                self.match(RulesParser.T__0)
                self.state = 54
                self.boolExpr(0)
                self.state = 55
                self.match(RulesParser.T__1)
                pass

            elif la_ == 2:
                self.state = 57
                self.invoke()
                pass

            elif la_ == 3:
                self.state = 58
                self.meta()
                pass

            elif la_ == 4:
                self.state = 59
                self.switchBool()
                pass

            elif la_ == 5:
                self.state = 60
                self.cond()
                pass

            elif la_ == 6:
                self.state = 61
                self.cmp()
                pass

            elif la_ == 7:
                self.state = 62
                self.cmpStr()
                pass

            elif la_ == 8:
                self.state = 63
                self.flagMatch()
                pass

            elif la_ == 9:
                self.state = 64
                self.refEq()
                pass

            elif la_ == 10:
                self.state = 65
                self.itemList()
                pass

            elif la_ == 11:
                self.state = 66
                self.item()
                pass

            elif la_ == 12:
                self.state = 68
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 67
                    self.match(RulesParser.NOT)


                self.state = 70
                self.value()
                pass

            elif la_ == 13:
                self.state = 71
                self.somewhere()
                pass

            elif la_ == 14:
                self.state = 72
                self.refSomewhere()
                pass

            elif la_ == 15:
                self.state = 73
                self.match(RulesParser.TRUE)
                pass

            elif la_ == 16:
                self.state = 74
                self.match(RulesParser.FALSE)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 85
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 83
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        localctx = RulesParser.BoolExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_boolExpr)
                        self.state = 77
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 78
                        self.match(RulesParser.AND)
                        self.state = 79
                        self.boolExpr(18)
                        pass

                    elif la_ == 2:
                        localctx = RulesParser.BoolExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_boolExpr)
                        self.state = 80
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 81
                        self.match(RulesParser.OR)
                        self.state = 82
                        self.boolExpr(17)
                        pass

             
                self.state = 87
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ActionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.ActionContext)
            else:
                return self.getTypedRuleContext(RulesParser.ActionContext,i)


        def getRuleIndex(self):
            return RulesParser.RULE_actions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActions" ):
                listener.enterActions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActions" ):
                listener.exitActions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActions" ):
                return visitor.visitActions(self)
            else:
                return visitor.visitChildren(self)




    def actions(self):

        localctx = RulesParser.ActionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_actions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 88
            self.action()
            self.state = 93
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 89
                    self.match(RulesParser.T__2)
                    self.state = 90
                    self.action() 
                self.state = 95
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 97
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 96
                self.match(RulesParser.T__2)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_action

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterContext(ActionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ActionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REF(self):
            return self.getToken(RulesParser.REF, 0)
        def BINOP(self):
            return self.getToken(RulesParser.BINOP, 0)
        def num(self):
            return self.getTypedRuleContext(RulesParser.NumContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter" ):
                listener.enterAlter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter" ):
                listener.exitAlter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter" ):
                return visitor.visitAlter(self)
            else:
                return visitor.visitChildren(self)


    class CondActionContext(ActionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ActionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.IF)
            else:
                return self.getToken(RulesParser.IF, i)
        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)

        def actions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.ActionsContext)
            else:
                return self.getTypedRuleContext(RulesParser.ActionsContext,i)

        def ELSE(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.ELSE)
            else:
                return self.getToken(RulesParser.ELSE, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondAction" ):
                listener.enterCondAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondAction" ):
                listener.exitCondAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondAction" ):
                return visitor.visitCondAction(self)
            else:
                return visitor.visitChildren(self)


    class SetContext(ActionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ActionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REF(self):
            return self.getToken(RulesParser.REF, 0)
        def TRUE(self):
            return self.getToken(RulesParser.TRUE, 0)
        def FALSE(self):
            return self.getToken(RulesParser.FALSE, 0)
        def PLACE(self):
            return self.getToken(RulesParser.PLACE, 0)
        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def str_(self):
            return self.getTypedRuleContext(RulesParser.StrContext,0)

        def num(self):
            return self.getTypedRuleContext(RulesParser.NumContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet" ):
                listener.enterSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet" ):
                listener.exitSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet" ):
                return visitor.visitSet(self)
            else:
                return visitor.visitChildren(self)


    class SwapContext(ActionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ActionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SWAP(self):
            return self.getToken(RulesParser.SWAP, 0)
        def REF(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.REF)
            else:
                return self.getToken(RulesParser.REF, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwap" ):
                listener.enterSwap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwap" ):
                listener.exitSwap(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwap" ):
                return visitor.visitSwap(self)
            else:
                return visitor.visitChildren(self)


    class ActionHelperContext(ActionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ActionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def invoke(self):
            return self.getTypedRuleContext(RulesParser.InvokeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActionHelper" ):
                listener.enterActionHelper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActionHelper" ):
                listener.exitActionHelper(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActionHelper" ):
                return visitor.visitActionHelper(self)
            else:
                return visitor.visitChildren(self)



    def action(self):

        localctx = RulesParser.ActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_action)
        self._la = 0 # Token type
        try:
            self.state = 146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                localctx = RulesParser.SetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 99
                self.match(RulesParser.REF)
                self.state = 100
                self.match(RulesParser.T__3)
                self.state = 107
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 101
                    self.match(RulesParser.TRUE)
                    pass

                elif la_ == 2:
                    self.state = 102
                    self.match(RulesParser.FALSE)
                    pass

                elif la_ == 3:
                    self.state = 103
                    self.match(RulesParser.PLACE)
                    pass

                elif la_ == 4:
                    self.state = 104
                    self.ref()
                    pass

                elif la_ == 5:
                    self.state = 105
                    self.str_()
                    pass

                elif la_ == 6:
                    self.state = 106
                    self.num()
                    pass


                pass

            elif la_ == 2:
                localctx = RulesParser.AlterContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 109
                self.match(RulesParser.REF)
                self.state = 110
                self.match(RulesParser.BINOP)
                self.state = 111
                self.match(RulesParser.T__3)
                self.state = 112
                self.num()
                pass

            elif la_ == 3:
                localctx = RulesParser.ActionHelperContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 113
                self.invoke()
                pass

            elif la_ == 4:
                localctx = RulesParser.CondActionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 114
                self.match(RulesParser.IF)
                self.state = 115
                self.match(RulesParser.T__0)
                self.state = 116
                self.boolExpr(0)
                self.state = 117
                self.match(RulesParser.T__1)
                self.state = 118
                self.match(RulesParser.T__4)
                self.state = 119
                self.actions()
                self.state = 120
                self.match(RulesParser.T__5)
                self.state = 132
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 121
                        self.match(RulesParser.ELSE)
                        self.state = 122
                        self.match(RulesParser.IF)
                        self.state = 123
                        self.match(RulesParser.T__0)
                        self.state = 124
                        self.boolExpr(0)
                        self.state = 125
                        self.match(RulesParser.T__1)
                        self.state = 126
                        self.match(RulesParser.T__4)
                        self.state = 127
                        self.actions()
                        self.state = 128
                        self.match(RulesParser.T__5) 
                    self.state = 134
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 135
                    self.match(RulesParser.ELSE)
                    self.state = 136
                    self.match(RulesParser.T__4)
                    self.state = 137
                    self.actions()
                    self.state = 138
                    self.match(RulesParser.T__5)


                pass

            elif la_ == 5:
                localctx = RulesParser.SwapContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 142
                self.match(RulesParser.SWAP)
                self.state = 143
                self.match(RulesParser.REF)
                self.state = 144
                self.match(RulesParser.T__6)
                self.state = 145
                self.match(RulesParser.REF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(RulesParser.FUNC, 0)

        def LIT(self):
            return self.getToken(RulesParser.LIT, 0)

        def boolExpr(self):
            return self.getTypedRuleContext(RulesParser.BoolExprContext,0)


        def getRuleIndex(self):
            return RulesParser.RULE_meta

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeta" ):
                listener.enterMeta(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeta" ):
                listener.exitMeta(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeta" ):
                return visitor.visitMeta(self)
            else:
                return visitor.visitChildren(self)




    def meta(self):

        localctx = RulesParser.MetaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_meta)
        try:
            self.state = 160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 148
                self.match(RulesParser.FUNC)
                self.state = 149
                self.match(RulesParser.T__0)
                self.state = 150
                self.match(RulesParser.LIT)
                self.state = 151
                self.match(RulesParser.T__6)
                self.state = 152
                self.boolExpr(0)
                self.state = 153
                self.match(RulesParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 155
                self.match(RulesParser.FUNC)
                self.state = 156
                self.match(RulesParser.T__0)
                self.state = 157
                self.boolExpr(0)
                self.state = 158
                self.match(RulesParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvokeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(RulesParser.FUNC, 0)

        def ITEM(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.ITEM)
            else:
                return self.getToken(RulesParser.ITEM, i)

        def NOT(self):
            return self.getToken(RulesParser.NOT, 0)

        def value(self):
            return self.getTypedRuleContext(RulesParser.ValueContext,0)


        def LIT(self):
            return self.getToken(RulesParser.LIT, 0)

        def INT(self):
            return self.getToken(RulesParser.INT, 0)

        def FLOAT(self):
            return self.getToken(RulesParser.FLOAT, 0)

        def PLACE(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.PLACE)
            else:
                return self.getToken(RulesParser.PLACE, i)

        def ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.RefContext)
            else:
                return self.getTypedRuleContext(RulesParser.RefContext,i)


        def getRuleIndex(self):
            return RulesParser.RULE_invoke

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvoke" ):
                listener.enterInvoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvoke" ):
                listener.exitInvoke(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvoke" ):
                return visitor.visitInvoke(self)
            else:
                return visitor.visitChildren(self)




    def invoke(self):

        localctx = RulesParser.InvokeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_invoke)
        self._la = 0 # Token type
        try:
            self.state = 242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 162
                    self.match(RulesParser.NOT)


                self.state = 165
                self.match(RulesParser.FUNC)
                self.state = 166
                self.match(RulesParser.T__0)
                self.state = 167
                self.match(RulesParser.ITEM)
                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 168
                    self.match(RulesParser.T__6)
                    self.state = 169
                    self.match(RulesParser.ITEM)
                    self.state = 174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 175
                self.match(RulesParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 176
                    self.match(RulesParser.NOT)


                self.state = 179
                self.match(RulesParser.FUNC)
                self.state = 180
                self.match(RulesParser.T__0)
                self.state = 181
                self.value()
                self.state = 182
                self.match(RulesParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 184
                    self.match(RulesParser.NOT)


                self.state = 187
                self.match(RulesParser.FUNC)
                self.state = 188
                self.match(RulesParser.T__0)
                self.state = 189
                self.match(RulesParser.LIT)
                self.state = 190
                self.match(RulesParser.T__1)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 191
                    self.match(RulesParser.NOT)


                self.state = 194
                self.match(RulesParser.FUNC)
                self.state = 195
                self.match(RulesParser.T__0)
                self.state = 196
                self.match(RulesParser.INT)
                self.state = 197
                self.match(RulesParser.T__1)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 198
                    self.match(RulesParser.NOT)


                self.state = 201
                self.match(RulesParser.FUNC)
                self.state = 202
                self.match(RulesParser.T__0)
                self.state = 203
                self.match(RulesParser.FLOAT)
                self.state = 204
                self.match(RulesParser.T__1)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 205
                    self.match(RulesParser.NOT)


                self.state = 208
                self.match(RulesParser.FUNC)
                self.state = 209
                self.match(RulesParser.T__0)
                self.state = 210
                self.match(RulesParser.PLACE)
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 211
                    self.match(RulesParser.T__6)
                    self.state = 212
                    self.match(RulesParser.PLACE)
                    self.state = 217
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 218
                self.match(RulesParser.T__1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 219
                    self.match(RulesParser.NOT)


                self.state = 222
                self.match(RulesParser.FUNC)
                self.state = 223
                self.match(RulesParser.T__0)
                self.state = 224
                self.ref()
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 225
                    self.match(RulesParser.T__6)
                    self.state = 226
                    self.ref()
                    self.state = 231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 232
                self.match(RulesParser.T__1)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 234
                    self.match(RulesParser.NOT)


                self.state = 237
                self.match(RulesParser.FUNC)
                self.state = 240
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 238
                    self.match(RulesParser.T__0)
                    self.state = 239
                    self.match(RulesParser.T__1)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_cond

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IfThenElseContext(CondContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.CondContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.IF)
            else:
                return self.getToken(RulesParser.IF, i)
        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)

        def ELSE(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.ELSE)
            else:
                return self.getToken(RulesParser.ELSE, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfThenElse" ):
                listener.enterIfThenElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfThenElse" ):
                listener.exitIfThenElse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfThenElse" ):
                return visitor.visitIfThenElse(self)
            else:
                return visitor.visitChildren(self)


    class PyTernaryContext(CondContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.CondContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)

        def IF(self):
            return self.getToken(RulesParser.IF, 0)
        def ELSE(self):
            return self.getToken(RulesParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyTernary" ):
                listener.enterPyTernary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyTernary" ):
                listener.exitPyTernary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPyTernary" ):
                return visitor.visitPyTernary(self)
            else:
                return visitor.visitChildren(self)



    def cond(self):

        localctx = RulesParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_cond)
        try:
            self.state = 280
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                localctx = RulesParser.IfThenElseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 244
                self.match(RulesParser.IF)
                self.state = 245
                self.match(RulesParser.T__0)
                self.state = 246
                self.boolExpr(0)
                self.state = 247
                self.match(RulesParser.T__1)
                self.state = 248
                self.match(RulesParser.T__4)
                self.state = 249
                self.boolExpr(0)
                self.state = 250
                self.match(RulesParser.T__5)
                self.state = 262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 251
                        self.match(RulesParser.ELSE)
                        self.state = 252
                        self.match(RulesParser.IF)
                        self.state = 253
                        self.match(RulesParser.T__0)
                        self.state = 254
                        self.boolExpr(0)
                        self.state = 255
                        self.match(RulesParser.T__1)
                        self.state = 256
                        self.match(RulesParser.T__4)
                        self.state = 257
                        self.boolExpr(0)
                        self.state = 258
                        self.match(RulesParser.T__5) 
                    self.state = 264
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

                self.state = 270
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 265
                    self.match(RulesParser.ELSE)
                    self.state = 266
                    self.match(RulesParser.T__4)
                    self.state = 267
                    self.boolExpr(0)
                    self.state = 268
                    self.match(RulesParser.T__5)


                pass
            elif token in [1]:
                localctx = RulesParser.PyTernaryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 272
                self.match(RulesParser.T__0)
                self.state = 273
                self.boolExpr(0)
                self.state = 274
                self.match(RulesParser.IF)
                self.state = 275
                self.boolExpr(0)
                self.state = 276
                self.match(RulesParser.ELSE)
                self.state = 277
                self.boolExpr(0)
                self.state = 278
                self.match(RulesParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.IF)
            else:
                return self.getToken(RulesParser.IF, i)

        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)


        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.NumContext)
            else:
                return self.getTypedRuleContext(RulesParser.NumContext,i)


        def ELSE(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.ELSE)
            else:
                return self.getToken(RulesParser.ELSE, i)

        def getRuleIndex(self):
            return RulesParser.RULE_condNum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondNum" ):
                listener.enterCondNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondNum" ):
                listener.exitCondNum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondNum" ):
                return visitor.visitCondNum(self)
            else:
                return visitor.visitChildren(self)




    def condNum(self):

        localctx = RulesParser.CondNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_condNum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.match(RulesParser.IF)
            self.state = 283
            self.match(RulesParser.T__0)
            self.state = 284
            self.boolExpr(0)
            self.state = 285
            self.match(RulesParser.T__1)
            self.state = 286
            self.match(RulesParser.T__4)
            self.state = 287
            self.num()
            self.state = 288
            self.match(RulesParser.T__5)
            self.state = 300
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 289
                    self.match(RulesParser.ELSE)
                    self.state = 290
                    self.match(RulesParser.IF)
                    self.state = 291
                    self.match(RulesParser.T__0)
                    self.state = 292
                    self.boolExpr(0)
                    self.state = 293
                    self.match(RulesParser.T__1)
                    self.state = 294
                    self.match(RulesParser.T__4)
                    self.state = 295
                    self.num()
                    self.state = 296
                    self.match(RulesParser.T__5) 
                self.state = 302
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

            self.state = 308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 303
                self.match(RulesParser.ELSE)
                self.state = 304
                self.match(RulesParser.T__4)
                self.state = 305
                self.num()
                self.state = 306
                self.match(RulesParser.T__5)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondStrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.IF)
            else:
                return self.getToken(RulesParser.IF, i)

        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)


        def str_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.StrContext)
            else:
                return self.getTypedRuleContext(RulesParser.StrContext,i)


        def ELSE(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.ELSE)
            else:
                return self.getToken(RulesParser.ELSE, i)

        def getRuleIndex(self):
            return RulesParser.RULE_condStr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondStr" ):
                listener.enterCondStr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondStr" ):
                listener.exitCondStr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondStr" ):
                return visitor.visitCondStr(self)
            else:
                return visitor.visitChildren(self)




    def condStr(self):

        localctx = RulesParser.CondStrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_condStr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self.match(RulesParser.IF)
            self.state = 311
            self.match(RulesParser.T__0)
            self.state = 312
            self.boolExpr(0)
            self.state = 313
            self.match(RulesParser.T__1)
            self.state = 314
            self.match(RulesParser.T__4)
            self.state = 315
            self.str_()
            self.state = 316
            self.match(RulesParser.T__5)
            self.state = 328
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 317
                    self.match(RulesParser.ELSE)
                    self.state = 318
                    self.match(RulesParser.IF)
                    self.state = 319
                    self.match(RulesParser.T__0)
                    self.state = 320
                    self.boolExpr(0)
                    self.state = 321
                    self.match(RulesParser.T__1)
                    self.state = 322
                    self.match(RulesParser.T__4)
                    self.state = 323
                    self.str_()
                    self.state = 324
                    self.match(RulesParser.T__5) 
                self.state = 330
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 331
                self.match(RulesParser.ELSE)
                self.state = 332
                self.match(RulesParser.T__4)
                self.state = 333
                self.str_()
                self.state = 334
                self.match(RulesParser.T__5)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_switchBool

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PerItemBoolContext(SwitchBoolContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchBoolContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def ITEM(self):
            return self.getToken(RulesParser.ITEM, 0)
        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.INT)
            else:
                return self.getToken(RulesParser.INT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerItemBool" ):
                listener.enterPerItemBool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerItemBool" ):
                listener.exitPerItemBool(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerItemBool" ):
                return visitor.visitPerItemBool(self)
            else:
                return visitor.visitChildren(self)


    class RefStrInListContext(SwitchBoolContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchBoolContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def IN(self):
            return self.getToken(RulesParser.IN, 0)
        def LIT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.LIT)
            else:
                return self.getToken(RulesParser.LIT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefStrInList" ):
                listener.enterRefStrInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefStrInList" ):
                listener.exitRefStrInList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefStrInList" ):
                return visitor.visitRefStrInList(self)
            else:
                return visitor.visitChildren(self)


    class RefInListContext(SwitchBoolContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchBoolContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def IN(self):
            return self.getToken(RulesParser.IN, 0)
        def ITEM(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.ITEM)
            else:
                return self.getToken(RulesParser.ITEM, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefInList" ):
                listener.enterRefInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefInList" ):
                listener.exitRefInList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefInList" ):
                return visitor.visitRefInList(self)
            else:
                return visitor.visitChildren(self)


    class PerSettingBoolContext(SwitchBoolContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchBoolContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def SETTING(self):
            return self.getToken(RulesParser.SETTING, 0)
        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.INT)
            else:
                return self.getToken(RulesParser.INT, i)
        def LIT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.LIT)
            else:
                return self.getToken(RulesParser.LIT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerSettingBool" ):
                listener.enterPerSettingBool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerSettingBool" ):
                listener.exitPerSettingBool(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerSettingBool" ):
                return visitor.visitPerSettingBool(self)
            else:
                return visitor.visitChildren(self)


    class MatchRefBoolContext(SwitchBoolContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchBoolContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def boolExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.BoolExprContext)
            else:
                return self.getTypedRuleContext(RulesParser.BoolExprContext,i)

        def ITEM(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.ITEM)
            else:
                return self.getToken(RulesParser.ITEM, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchRefBool" ):
                listener.enterMatchRefBool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchRefBool" ):
                listener.exitMatchRefBool(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchRefBool" ):
                return visitor.visitMatchRefBool(self)
            else:
                return visitor.visitChildren(self)



    def switchBool(self):

        localctx = RulesParser.SwitchBoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_switchBool)
        self._la = 0 # Token type
        try:
            self.state = 440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                localctx = RulesParser.PerItemBoolContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 338
                self.match(RulesParser.PER)
                self.state = 339
                self.match(RulesParser.ITEM)
                self.state = 340
                self.match(RulesParser.T__4)
                self.state = 346 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 341
                    self.match(RulesParser.INT)
                    self.state = 342
                    self.match(RulesParser.T__7)
                    self.state = 343
                    self.boolExpr(0)
                    self.state = 344
                    self.match(RulesParser.T__6)
                    self.state = 348 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==39):
                        break

                self.state = 350
                self.match(RulesParser.T__8)
                self.state = 351
                self.match(RulesParser.T__7)
                self.state = 352
                self.boolExpr(0)
                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 353
                    self.match(RulesParser.T__6)


                self.state = 356
                self.match(RulesParser.T__5)
                pass

            elif la_ == 2:
                localctx = RulesParser.PerSettingBoolContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 358
                self.match(RulesParser.PER)
                self.state = 359
                self.match(RulesParser.SETTING)
                self.state = 360
                self.match(RulesParser.T__4)
                self.state = 379
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [39]:
                    self.state = 366 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 361
                        self.match(RulesParser.INT)
                        self.state = 362
                        self.match(RulesParser.T__7)
                        self.state = 363
                        self.boolExpr(0)
                        self.state = 364
                        self.match(RulesParser.T__6)
                        self.state = 368 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==39):
                            break

                    pass
                elif token in [37]:
                    self.state = 375 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 370
                        self.match(RulesParser.LIT)
                        self.state = 371
                        self.match(RulesParser.T__7)
                        self.state = 372
                        self.boolExpr(0)
                        self.state = 373
                        self.match(RulesParser.T__6)
                        self.state = 377 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==37):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 381
                self.match(RulesParser.T__8)
                self.state = 382
                self.match(RulesParser.T__7)
                self.state = 383
                self.boolExpr(0)
                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 384
                    self.match(RulesParser.T__6)


                self.state = 387
                self.match(RulesParser.T__5)
                pass

            elif la_ == 3:
                localctx = RulesParser.MatchRefBoolContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 389
                self.match(RulesParser.PER)
                self.state = 390
                self.ref()
                self.state = 391
                self.match(RulesParser.T__4)
                self.state = 404 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 392
                    self.match(RulesParser.ITEM)
                    self.state = 397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==10:
                        self.state = 393
                        self.match(RulesParser.T__9)
                        self.state = 394
                        self.match(RulesParser.ITEM)
                        self.state = 399
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 400
                    self.match(RulesParser.T__7)
                    self.state = 401
                    self.boolExpr(0)
                    self.state = 402
                    self.match(RulesParser.T__6)
                    self.state = 406 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==32):
                        break

                self.state = 408
                self.match(RulesParser.T__8)
                self.state = 409
                self.match(RulesParser.T__7)
                self.state = 410
                self.boolExpr(0)
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 411
                    self.match(RulesParser.T__6)


                self.state = 414
                self.match(RulesParser.T__5)
                pass

            elif la_ == 4:
                localctx = RulesParser.RefInListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 416
                self.ref()
                self.state = 417
                self.match(RulesParser.IN)
                self.state = 418
                self.match(RulesParser.T__10)
                self.state = 419
                self.match(RulesParser.ITEM)
                self.state = 422 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 420
                    self.match(RulesParser.T__6)
                    self.state = 421
                    self.match(RulesParser.ITEM)
                    self.state = 424 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==7):
                        break

                self.state = 426
                self.match(RulesParser.T__11)
                pass

            elif la_ == 5:
                localctx = RulesParser.RefStrInListContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 428
                self.ref()
                self.state = 429
                self.match(RulesParser.IN)
                self.state = 430
                self.match(RulesParser.T__10)
                self.state = 431
                self.match(RulesParser.LIT)
                self.state = 434 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 432
                    self.match(RulesParser.T__6)
                    self.state = 433
                    self.match(RulesParser.LIT)
                    self.state = 436 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==7):
                        break

                self.state = 438
                self.match(RulesParser.T__11)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_switchNum

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PerRefIntContext(SwitchNumContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchNumContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.NumContext)
            else:
                return self.getTypedRuleContext(RulesParser.NumContext,i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.INT)
            else:
                return self.getToken(RulesParser.INT, i)
        def LIT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.LIT)
            else:
                return self.getToken(RulesParser.LIT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerRefInt" ):
                listener.enterPerRefInt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerRefInt" ):
                listener.exitPerRefInt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerRefInt" ):
                return visitor.visitPerRefInt(self)
            else:
                return visitor.visitChildren(self)


    class PerSettingIntContext(SwitchNumContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchNumContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def SETTING(self):
            return self.getToken(RulesParser.SETTING, 0)
        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.NumContext)
            else:
                return self.getTypedRuleContext(RulesParser.NumContext,i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.INT)
            else:
                return self.getToken(RulesParser.INT, i)
        def LIT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.LIT)
            else:
                return self.getToken(RulesParser.LIT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerSettingInt" ):
                listener.enterPerSettingInt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerSettingInt" ):
                listener.exitPerSettingInt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerSettingInt" ):
                return visitor.visitPerSettingInt(self)
            else:
                return visitor.visitChildren(self)


    class PerItemIntContext(SwitchNumContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchNumContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def ITEM(self):
            return self.getToken(RulesParser.ITEM, 0)
        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.NumContext)
            else:
                return self.getTypedRuleContext(RulesParser.NumContext,i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.INT)
            else:
                return self.getToken(RulesParser.INT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerItemInt" ):
                listener.enterPerItemInt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerItemInt" ):
                listener.exitPerItemInt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerItemInt" ):
                return visitor.visitPerItemInt(self)
            else:
                return visitor.visitChildren(self)



    def switchNum(self):

        localctx = RulesParser.SwitchNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_switchNum)
        self._la = 0 # Token type
        try:
            self.state = 524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                localctx = RulesParser.PerItemIntContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 442
                self.match(RulesParser.PER)
                self.state = 443
                self.match(RulesParser.ITEM)
                self.state = 444
                self.match(RulesParser.T__4)
                self.state = 450 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 445
                    self.match(RulesParser.INT)
                    self.state = 446
                    self.match(RulesParser.T__7)
                    self.state = 447
                    self.num()
                    self.state = 448
                    self.match(RulesParser.T__6)
                    self.state = 452 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==39):
                        break

                self.state = 454
                self.match(RulesParser.T__8)
                self.state = 455
                self.match(RulesParser.T__7)
                self.state = 456
                self.num()
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 457
                    self.match(RulesParser.T__6)


                self.state = 460
                self.match(RulesParser.T__5)
                pass

            elif la_ == 2:
                localctx = RulesParser.PerRefIntContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 462
                self.match(RulesParser.PER)
                self.state = 463
                self.ref()
                self.state = 464
                self.match(RulesParser.T__4)
                self.state = 483
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [39]:
                    self.state = 470 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 465
                        self.match(RulesParser.INT)
                        self.state = 466
                        self.match(RulesParser.T__7)
                        self.state = 467
                        self.num()
                        self.state = 468
                        self.match(RulesParser.T__6)
                        self.state = 472 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==39):
                            break

                    pass
                elif token in [37]:
                    self.state = 479 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 474
                        self.match(RulesParser.LIT)
                        self.state = 475
                        self.match(RulesParser.T__7)
                        self.state = 476
                        self.num()
                        self.state = 477
                        self.match(RulesParser.T__6)
                        self.state = 481 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==37):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 485
                self.match(RulesParser.T__8)
                self.state = 486
                self.match(RulesParser.T__7)
                self.state = 487
                self.num()
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 488
                    self.match(RulesParser.T__6)


                self.state = 491
                self.match(RulesParser.T__5)
                pass

            elif la_ == 3:
                localctx = RulesParser.PerSettingIntContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 493
                self.match(RulesParser.PER)
                self.state = 494
                self.match(RulesParser.SETTING)
                self.state = 495
                self.match(RulesParser.T__4)
                self.state = 514
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [39]:
                    self.state = 501 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 496
                        self.match(RulesParser.INT)
                        self.state = 497
                        self.match(RulesParser.T__7)
                        self.state = 498
                        self.num()
                        self.state = 499
                        self.match(RulesParser.T__6)
                        self.state = 503 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==39):
                            break

                    pass
                elif token in [37]:
                    self.state = 510 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 505
                        self.match(RulesParser.LIT)
                        self.state = 506
                        self.match(RulesParser.T__7)
                        self.state = 507
                        self.num()
                        self.state = 508
                        self.match(RulesParser.T__6)
                        self.state = 512 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==37):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 516
                self.match(RulesParser.T__8)
                self.state = 517
                self.match(RulesParser.T__7)
                self.state = 518
                self.num()
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 519
                    self.match(RulesParser.T__6)


                self.state = 522
                self.match(RulesParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_switchStr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PerItemStrContext(SwitchStrContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchStrContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def ITEM(self):
            return self.getToken(RulesParser.ITEM, 0)
        def str_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.StrContext)
            else:
                return self.getTypedRuleContext(RulesParser.StrContext,i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.INT)
            else:
                return self.getToken(RulesParser.INT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerItemStr" ):
                listener.enterPerItemStr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerItemStr" ):
                listener.exitPerItemStr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerItemStr" ):
                return visitor.visitPerItemStr(self)
            else:
                return visitor.visitChildren(self)


    class PerRefStrContext(SwitchStrContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchStrContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def str_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.StrContext)
            else:
                return self.getTypedRuleContext(RulesParser.StrContext,i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.INT)
            else:
                return self.getToken(RulesParser.INT, i)
        def LIT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.LIT)
            else:
                return self.getToken(RulesParser.LIT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerRefStr" ):
                listener.enterPerRefStr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerRefStr" ):
                listener.exitPerRefStr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerRefStr" ):
                return visitor.visitPerRefStr(self)
            else:
                return visitor.visitChildren(self)


    class PerSettingStrContext(SwitchStrContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.SwitchStrContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PER(self):
            return self.getToken(RulesParser.PER, 0)
        def SETTING(self):
            return self.getToken(RulesParser.SETTING, 0)
        def str_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.StrContext)
            else:
                return self.getTypedRuleContext(RulesParser.StrContext,i)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.INT)
            else:
                return self.getToken(RulesParser.INT, i)
        def LIT(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.LIT)
            else:
                return self.getToken(RulesParser.LIT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPerSettingStr" ):
                listener.enterPerSettingStr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPerSettingStr" ):
                listener.exitPerSettingStr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPerSettingStr" ):
                return visitor.visitPerSettingStr(self)
            else:
                return visitor.visitChildren(self)



    def switchStr(self):

        localctx = RulesParser.SwitchStrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_switchStr)
        self._la = 0 # Token type
        try:
            self.state = 608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                localctx = RulesParser.PerItemStrContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 526
                self.match(RulesParser.PER)
                self.state = 527
                self.match(RulesParser.ITEM)
                self.state = 528
                self.match(RulesParser.T__4)
                self.state = 534 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 529
                    self.match(RulesParser.INT)
                    self.state = 530
                    self.match(RulesParser.T__7)
                    self.state = 531
                    self.str_()
                    self.state = 532
                    self.match(RulesParser.T__6)
                    self.state = 536 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==39):
                        break

                self.state = 538
                self.match(RulesParser.T__8)
                self.state = 539
                self.match(RulesParser.T__7)
                self.state = 540
                self.str_()
                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 541
                    self.match(RulesParser.T__6)


                self.state = 544
                self.match(RulesParser.T__5)
                pass

            elif la_ == 2:
                localctx = RulesParser.PerRefStrContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 546
                self.match(RulesParser.PER)
                self.state = 547
                self.ref()
                self.state = 548
                self.match(RulesParser.T__4)
                self.state = 567
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [39]:
                    self.state = 554 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 549
                        self.match(RulesParser.INT)
                        self.state = 550
                        self.match(RulesParser.T__7)
                        self.state = 551
                        self.str_()
                        self.state = 552
                        self.match(RulesParser.T__6)
                        self.state = 556 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==39):
                            break

                    pass
                elif token in [37]:
                    self.state = 563 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 558
                        self.match(RulesParser.LIT)
                        self.state = 559
                        self.match(RulesParser.T__7)
                        self.state = 560
                        self.str_()
                        self.state = 561
                        self.match(RulesParser.T__6)
                        self.state = 565 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==37):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 569
                self.match(RulesParser.T__8)
                self.state = 570
                self.match(RulesParser.T__7)
                self.state = 571
                self.str_()
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 572
                    self.match(RulesParser.T__6)


                self.state = 575
                self.match(RulesParser.T__5)
                pass

            elif la_ == 3:
                localctx = RulesParser.PerSettingStrContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 577
                self.match(RulesParser.PER)
                self.state = 578
                self.match(RulesParser.SETTING)
                self.state = 579
                self.match(RulesParser.T__4)
                self.state = 598
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [39]:
                    self.state = 585 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 580
                        self.match(RulesParser.INT)
                        self.state = 581
                        self.match(RulesParser.T__7)
                        self.state = 582
                        self.str_()
                        self.state = 583
                        self.match(RulesParser.T__6)
                        self.state = 587 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==39):
                            break

                    pass
                elif token in [37]:
                    self.state = 594 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 589
                        self.match(RulesParser.LIT)
                        self.state = 590
                        self.match(RulesParser.T__7)
                        self.state = 591
                        self.str_()
                        self.state = 592
                        self.match(RulesParser.T__6)
                        self.state = 596 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==37):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 600
                self.match(RulesParser.T__8)
                self.state = 601
                self.match(RulesParser.T__7)
                self.state = 602
                self.str_()
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 603
                    self.match(RulesParser.T__6)


                self.state = 606
                self.match(RulesParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(RulesParser.ValueContext,0)


        def num(self):
            return self.getTypedRuleContext(RulesParser.NumContext,0)


        def getRuleIndex(self):
            return RulesParser.RULE_cmp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmp" ):
                listener.enterCmp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmp" ):
                listener.exitCmp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmp" ):
                return visitor.visitCmp(self)
            else:
                return visitor.visitChildren(self)




    def cmp(self):

        localctx = RulesParser.CmpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_cmp)
        try:
            self.state = 634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 610
                self.value()
                self.state = 611
                self.match(RulesParser.T__12)
                self.state = 612
                self.num()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 614
                self.value()
                self.state = 615
                self.match(RulesParser.T__13)
                self.state = 616
                self.num()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 618
                self.value()
                self.state = 619
                self.match(RulesParser.T__14)
                self.state = 620
                self.num()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 622
                self.value()
                self.state = 623
                self.match(RulesParser.T__15)
                self.state = 624
                self.num()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 626
                self.value()
                self.state = 627
                self.match(RulesParser.T__16)
                self.state = 628
                self.num()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 630
                self.value()
                self.state = 631
                self.match(RulesParser.T__17)
                self.state = 632
                self.num()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmpStrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(RulesParser.ValueContext,0)


        def LIT(self):
            return self.getToken(RulesParser.LIT, 0)

        def getRuleIndex(self):
            return RulesParser.RULE_cmpStr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpStr" ):
                listener.enterCmpStr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpStr" ):
                listener.exitCmpStr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmpStr" ):
                return visitor.visitCmpStr(self)
            else:
                return visitor.visitChildren(self)




    def cmpStr(self):

        localctx = RulesParser.CmpStrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_cmpStr)
        try:
            self.state = 644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 636
                self.value()
                self.state = 637
                self.match(RulesParser.T__12)
                self.state = 638
                self.match(RulesParser.LIT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 640
                self.value()
                self.state = 641
                self.match(RulesParser.T__13)
                self.state = 642
                self.match(RulesParser.LIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlagMatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(RulesParser.ValueContext,0)


        def num(self):
            return self.getTypedRuleContext(RulesParser.NumContext,0)


        def getRuleIndex(self):
            return RulesParser.RULE_flagMatch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlagMatch" ):
                listener.enterFlagMatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlagMatch" ):
                listener.exitFlagMatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlagMatch" ):
                return visitor.visitFlagMatch(self)
            else:
                return visitor.visitChildren(self)




    def flagMatch(self):

        localctx = RulesParser.FlagMatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_flagMatch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.value()
            self.state = 647
            self.match(RulesParser.T__18)
            self.state = 648
            self.num()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefEqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)


        def ITEM(self):
            return self.getToken(RulesParser.ITEM, 0)

        def SETTING(self):
            return self.getToken(RulesParser.SETTING, 0)

        def getRuleIndex(self):
            return RulesParser.RULE_refEq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefEq" ):
                listener.enterRefEq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefEq" ):
                listener.exitRefEq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefEq" ):
                return visitor.visitRefEq(self)
            else:
                return visitor.visitChildren(self)




    def refEq(self):

        localctx = RulesParser.RefEqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_refEq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.ref()
            self.state = 651
            self.match(RulesParser.T__12)
            self.state = 652
            _la = self._input.LA(1)
            if not(_la==32 or _la==33):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(RulesParser.FUNC, 0)

        def ITEM(self):
            return self.getToken(RulesParser.ITEM, 0)

        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.NumContext)
            else:
                return self.getTypedRuleContext(RulesParser.NumContext,i)


        def getRuleIndex(self):
            return RulesParser.RULE_funcNum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncNum" ):
                listener.enterFuncNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncNum" ):
                listener.exitFuncNum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncNum" ):
                return visitor.visitFuncNum(self)
            else:
                return visitor.visitChildren(self)




    def funcNum(self):

        localctx = RulesParser.FuncNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_funcNum)
        self._la = 0 # Token type
        try:
            self.state = 675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 654
                self.match(RulesParser.FUNC)
                self.state = 655
                self.match(RulesParser.T__0)
                self.state = 656
                self.match(RulesParser.ITEM)
                self.state = 657
                self.match(RulesParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 658
                self.match(RulesParser.FUNC)
                self.state = 659
                self.match(RulesParser.T__0)
                self.state = 660
                self.num()
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 661
                    self.match(RulesParser.T__6)
                    self.state = 662
                    self.num()
                    self.state = 667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 668
                self.match(RulesParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 670
                self.match(RulesParser.FUNC)
                self.state = 673
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 671
                    self.match(RulesParser.T__0)
                    self.state = 672
                    self.match(RulesParser.T__1)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseNum(self):
            return self.getTypedRuleContext(RulesParser.BaseNumContext,0)


        def BINOP(self):
            return self.getToken(RulesParser.BINOP, 0)

        def num(self):
            return self.getTypedRuleContext(RulesParser.NumContext,0)


        def getRuleIndex(self):
            return RulesParser.RULE_mathNum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathNum" ):
                listener.enterMathNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathNum" ):
                listener.exitMathNum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathNum" ):
                return visitor.visitMathNum(self)
            else:
                return visitor.visitChildren(self)




    def mathNum(self):

        localctx = RulesParser.MathNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_mathNum)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.baseNum()
            self.state = 678
            self.match(RulesParser.BINOP)
            self.state = 679
            self.num()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseNum(self):
            return self.getTypedRuleContext(RulesParser.BaseNumContext,0)


        def mathNum(self):
            return self.getTypedRuleContext(RulesParser.MathNumContext,0)


        def getRuleIndex(self):
            return RulesParser.RULE_num

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum" ):
                listener.enterNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum" ):
                listener.exitNum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum" ):
                return visitor.visitNum(self)
            else:
                return visitor.visitChildren(self)




    def num(self):

        localctx = RulesParser.NumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_num)
        try:
            self.state = 683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 681
                self.baseNum()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 682
                self.mathNum()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(RulesParser.INT, 0)

        def CONST(self):
            return self.getToken(RulesParser.CONST, 0)

        def SETTING(self):
            return self.getToken(RulesParser.SETTING, 0)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)


        def value(self):
            return self.getTypedRuleContext(RulesParser.ValueContext,0)


        def switchNum(self):
            return self.getTypedRuleContext(RulesParser.SwitchNumContext,0)


        def funcNum(self):
            return self.getTypedRuleContext(RulesParser.FuncNumContext,0)


        def condNum(self):
            return self.getTypedRuleContext(RulesParser.CondNumContext,0)


        def getRuleIndex(self):
            return RulesParser.RULE_baseNum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseNum" ):
                listener.enterBaseNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseNum" ):
                listener.exitBaseNum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBaseNum" ):
                return visitor.visitBaseNum(self)
            else:
                return visitor.visitChildren(self)




    def baseNum(self):

        localctx = RulesParser.BaseNumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_baseNum)
        try:
            self.state = 693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 685
                self.match(RulesParser.INT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 686
                self.match(RulesParser.CONST)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 687
                self.match(RulesParser.SETTING)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 688
                self.ref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 689
                self.value()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 690
                self.switchNum()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 691
                self.funcNum()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 692
                self.condNum()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_value

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ArgumentContext(ValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)


    class SettingContext(ValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SETTING(self):
            return self.getToken(RulesParser.SETTING, 0)
        def LIT(self):
            return self.getToken(RulesParser.LIT, 0)
        def ITEM(self):
            return self.getToken(RulesParser.ITEM, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetting" ):
                listener.enterSetting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetting" ):
                listener.exitSetting(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetting" ):
                return visitor.visitSetting(self)
            else:
                return visitor.visitChildren(self)



    def value(self):

        localctx = RulesParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_value)
        self._la = 0 # Token type
        try:
            self.state = 702
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [33]:
                localctx = RulesParser.SettingContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 695
                self.match(RulesParser.SETTING)
                self.state = 699
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 696
                    self.match(RulesParser.T__10)
                    self.state = 697
                    _la = self._input.LA(1)
                    if not(_la==32 or _la==37):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 698
                    self.match(RulesParser.T__11)


                pass
            elif token in [20, 34]:
                localctx = RulesParser.ArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 701
                self.ref()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.FUNC)
            else:
                return self.getToken(RulesParser.FUNC, i)

        def item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.ItemContext)
            else:
                return self.getTypedRuleContext(RulesParser.ItemContext,i)


        def getRuleIndex(self):
            return RulesParser.RULE_itemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemList" ):
                listener.enterItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemList" ):
                listener.exitItemList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItemList" ):
                return visitor.visitItemList(self)
            else:
                return visitor.visitChildren(self)




    def itemList(self):

        localctx = RulesParser.ItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_itemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(RulesParser.T__10)
            self.state = 707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.state = 705
                self.match(RulesParser.FUNC)
                pass
            elif token in [1, 20, 23, 32, 34, 37]:
                self.state = 706
                self.item()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 709
                self.match(RulesParser.T__6)
                self.state = 712
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [35]:
                    self.state = 710
                    self.match(RulesParser.FUNC)
                    pass
                elif token in [1, 20, 23, 32, 34, 37]:
                    self.state = 711
                    self.item()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 719
            self.match(RulesParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_item

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class OneLitItemContext(ItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LIT(self):
            return self.getToken(RulesParser.LIT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneLitItem" ):
                listener.enterOneLitItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneLitItem" ):
                listener.exitOneLitItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneLitItem" ):
                return visitor.visitOneLitItem(self)
            else:
                return visitor.visitChildren(self)


    class OneArgumentContext(ItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneArgument" ):
                listener.enterOneArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneArgument" ):
                listener.exitOneArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneArgument" ):
                return visitor.visitOneArgument(self)
            else:
                return visitor.visitChildren(self)


    class ItemCountContext(ItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ITEM(self):
            return self.getToken(RulesParser.ITEM, 0)
        def INT(self):
            return self.getToken(RulesParser.INT, 0)
        def SETTING(self):
            return self.getToken(RulesParser.SETTING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemCount" ):
                listener.enterItemCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemCount" ):
                listener.exitItemCount(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItemCount" ):
                return visitor.visitItemCount(self)
            else:
                return visitor.visitChildren(self)


    class OneItemContext(ItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.ItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ITEM(self):
            return self.getToken(RulesParser.ITEM, 0)
        def NOT(self):
            return self.getToken(RulesParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneItem" ):
                listener.enterOneItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneItem" ):
                listener.exitOneItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneItem" ):
                return visitor.visitOneItem(self)
            else:
                return visitor.visitChildren(self)



    def item(self):

        localctx = RulesParser.ItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_item)
        self._la = 0 # Token type
        try:
            self.state = 738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                localctx = RulesParser.ItemCountContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 730
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [32]:
                    self.state = 721
                    self.match(RulesParser.ITEM)
                    self.state = 722
                    self.match(RulesParser.T__4)
                    self.state = 723
                    _la = self._input.LA(1)
                    if not(_la==33 or _la==39):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 724
                    self.match(RulesParser.T__5)
                    pass
                elif token in [1]:
                    self.state = 725
                    self.match(RulesParser.T__0)
                    self.state = 726
                    self.match(RulesParser.ITEM)
                    self.state = 727
                    self.match(RulesParser.T__6)
                    self.state = 728
                    _la = self._input.LA(1)
                    if not(_la==33 or _la==39):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 729
                    self.match(RulesParser.T__1)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = RulesParser.OneItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 732
                    self.match(RulesParser.NOT)


                self.state = 735
                self.match(RulesParser.ITEM)
                pass

            elif la_ == 3:
                localctx = RulesParser.OneLitItemContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 736
                self.match(RulesParser.LIT)
                pass

            elif la_ == 4:
                localctx = RulesParser.OneArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 737
                self.ref()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIT(self):
            return self.getToken(RulesParser.LIT, 0)

        def value(self):
            return self.getTypedRuleContext(RulesParser.ValueContext,0)


        def condStr(self):
            return self.getTypedRuleContext(RulesParser.CondStrContext,0)


        def switchStr(self):
            return self.getTypedRuleContext(RulesParser.SwitchStrContext,0)


        def getRuleIndex(self):
            return RulesParser.RULE_str

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStr" ):
                listener.enterStr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStr" ):
                listener.exitStr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStr" ):
                return visitor.visitStr(self)
            else:
                return visitor.visitChildren(self)




    def str_(self):

        localctx = RulesParser.StrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_str)
        try:
            self.state = 744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 740
                self.match(RulesParser.LIT)
                pass
            elif token in [20, 33, 34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 741
                self.value()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 3)
                self.state = 742
                self.condStr()
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 4)
                self.state = 743
                self.switchStr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SomewhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHIN(self):
            return self.getToken(RulesParser.WITHIN, 0)

        def PLACE(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.PLACE)
            else:
                return self.getToken(RulesParser.PLACE, i)

        def NOT(self):
            return self.getToken(RulesParser.NOT, 0)

        def getRuleIndex(self):
            return RulesParser.RULE_somewhere

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSomewhere" ):
                listener.enterSomewhere(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSomewhere" ):
                listener.exitSomewhere(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSomewhere" ):
                return visitor.visitSomewhere(self)
            else:
                return visitor.visitChildren(self)




    def somewhere(self):

        localctx = RulesParser.SomewhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_somewhere)
        self._la = 0 # Token type
        try:
            self.state = 765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 746
                    self.match(RulesParser.NOT)


                self.state = 749
                self.match(RulesParser.WITHIN)
                self.state = 750
                self.match(RulesParser.PLACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 751
                    self.match(RulesParser.NOT)


                self.state = 754
                self.match(RulesParser.WITHIN)
                self.state = 755
                self.match(RulesParser.T__0)
                self.state = 756
                self.match(RulesParser.PLACE)
                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 757
                    self.match(RulesParser.T__6)
                    self.state = 758
                    self.match(RulesParser.PLACE)
                    self.state = 763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 764
                self.match(RulesParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefSomewhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RulesParser.RULE_refSomewhere

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RefInPlaceNameContext(RefSomewhereContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.RefSomewhereContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def WITHIN(self):
            return self.getToken(RulesParser.WITHIN, 0)
        def PLACE(self):
            return self.getToken(RulesParser.PLACE, 0)
        def NOT(self):
            return self.getToken(RulesParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefInPlaceName" ):
                listener.enterRefInPlaceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefInPlaceName" ):
                listener.exitRefInPlaceName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefInPlaceName" ):
                return visitor.visitRefInPlaceName(self)
            else:
                return visitor.visitChildren(self)


    class RefInFuncContext(RefSomewhereContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.RefSomewhereContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self):
            return self.getTypedRuleContext(RulesParser.RefContext,0)

        def WITHIN(self):
            return self.getToken(RulesParser.WITHIN, 0)
        def invoke(self):
            return self.getTypedRuleContext(RulesParser.InvokeContext,0)

        def NOT(self):
            return self.getToken(RulesParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefInFunc" ):
                listener.enterRefInFunc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefInFunc" ):
                listener.exitRefInFunc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefInFunc" ):
                return visitor.visitRefInFunc(self)
            else:
                return visitor.visitChildren(self)


    class RefInPlaceRefContext(RefSomewhereContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a RulesParser.RefSomewhereContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RulesParser.RefContext)
            else:
                return self.getTypedRuleContext(RulesParser.RefContext,i)

        def WITHIN(self):
            return self.getToken(RulesParser.WITHIN, 0)
        def NOT(self):
            return self.getToken(RulesParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefInPlaceRef" ):
                listener.enterRefInPlaceRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefInPlaceRef" ):
                listener.exitRefInPlaceRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefInPlaceRef" ):
                return visitor.visitRefInPlaceRef(self)
            else:
                return visitor.visitChildren(self)



    def refSomewhere(self):

        localctx = RulesParser.RefSomewhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_refSomewhere)
        self._la = 0 # Token type
        try:
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                localctx = RulesParser.RefInPlaceRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 767
                self.ref()
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 768
                    self.match(RulesParser.NOT)


                self.state = 771
                self.match(RulesParser.WITHIN)
                self.state = 772
                self.ref()
                pass

            elif la_ == 2:
                localctx = RulesParser.RefInPlaceNameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 774
                self.ref()
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 775
                    self.match(RulesParser.NOT)


                self.state = 778
                self.match(RulesParser.WITHIN)
                self.state = 779
                self.match(RulesParser.PLACE)
                pass

            elif la_ == 3:
                localctx = RulesParser.RefInFuncContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 781
                self.ref()
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 782
                    self.match(RulesParser.NOT)


                self.state = 785
                self.match(RulesParser.WITHIN)
                self.state = 786
                self.invoke()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self, i:int=None):
            if i is None:
                return self.getTokens(RulesParser.REF)
            else:
                return self.getToken(RulesParser.REF, i)

        def PLACE(self):
            return self.getToken(RulesParser.PLACE, 0)

        def getRuleIndex(self):
            return RulesParser.RULE_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef" ):
                listener.enterRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef" ):
                listener.exitRef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRef" ):
                return visitor.visitRef(self)
            else:
                return visitor.visitChildren(self)




    def ref(self):

        localctx = RulesParser.RefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_ref)
        try:
            self.state = 797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 790
                self.match(RulesParser.REF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 791
                self.match(RulesParser.T__19)
                self.state = 792
                self.match(RulesParser.REF)
                self.state = 793
                self.match(RulesParser.REF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 794
                self.match(RulesParser.T__19)
                self.state = 795
                self.match(RulesParser.PLACE)
                self.state = 796
                self.match(RulesParser.REF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[0] = self.boolExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def boolExpr_sempred(self, localctx:BoolExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 16)
         




